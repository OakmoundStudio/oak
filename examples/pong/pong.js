"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = this;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $flushConsole = function() {};
var $throwRuntimeError; /* set by package "runtime" */
var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $call = function(fn, rcvr, args) { return fn.apply(rcvr, args); };
var $makeFunc = function(fn) { return function() { return $externalize(fn(this, new ($sliceType($jsObjectPtr))($global.Array.prototype.slice.call(arguments, []))), $emptyInterface); }; };
var $unused = function(v) {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(typ, name) {
  var method = typ.prototype[name];
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        if (typ.wrapped) {
          arguments[0] = new typ(arguments[0]);
        }
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $ifaceMethodExprs = {};
var $ifaceMethodExpr = function(name) {
  var expr = $ifaceMethodExprs["$" + name];
  if (expr === undefined) {
    expr = $ifaceMethodExprs["$" + name] = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(arguments[0][name], arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $substring = function(str, low, high) {
  if (low < 0 || high < low || high > str.length) {
    $throwRuntimeError("slice bounds out of range");
  }
  return str.substring(low, high);
};

var $sliceToArray = function(slice) {
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(undefined, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $copyArray(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copyArray = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        elem.copy(dst[dstOffset + i], src[srcOffset + i]);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      elem.copy(dst[dstOffset + i], src[srcOffset + i]);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  type.copy(clone, src);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; }
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  if (toAppend.constructor === String) {
    var bytes = $stringToBytes(toAppend);
    return $internalAppend(slice, bytes, 0, bytes.length);
  }
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $copyArray(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (type === $jsObjectPtr) {
    return a === b;
  }
  switch (type.kind) {
  case $kindComplex64:
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindArray:
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.typ)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (a.constructor === $jsObjectPtr) {
    return a.object === b.object;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $froundBuf = new Float32Array(1);
var $fround = Math.fround || function(f) {
  $froundBuf[0] = f;
  return $froundBuf[0];
};

var $imul = Math.imul || function(a, b) {
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) >> 0);
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === Infinity || n.$real === -Infinity || n.$imag === Infinity || n.$imag === -Infinity;
  var dinf = d.$real === Infinity || d.$real === -Infinity || d.$imag === Infinity || d.$imag === -Infinity;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(NaN, NaN);
  }
  if (ninf && !dinf) {
    return new n.constructor(Infinity, Infinity);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(NaN, NaN);
    }
    return new n.constructor(Infinity, Infinity);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $methodSynthesizers = [];
var $addMethodSynthesizer = function(f) {
  if ($methodSynthesizers === null) {
    f();
    return;
  }
  $methodSynthesizers.push(f);
};
var $synthesizeMethods = function() {
  $methodSynthesizers.forEach(function(f) { f(); });
  $methodSynthesizers = null;
};

var $ifaceKeyFor = function(x) {
  if (x === $ifaceNil) {
    return 'nil';
  }
  var c = x.constructor;
  return c.string + '$' + c.keyFor(x.$val);
};

var $identity = function(x) { return x; };

var $typeIDCounter = 0;

var $idKey = function(x) {
  if (x.$id === undefined) {
    $idCounter++;
    x.$id = $idCounter;
  }
  return String(x.$id);
};

var $newType = function(size, kind, string, named, pkg, exported, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $identity;
    break;

  case $kindString:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return "$" + x; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = function(x) { return $floatKey(x); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$high + "$" + x.$low; };
    break;

  case $kindComplex64:
    typ = function(real, imag) {
      this.$real = $fround(real);
      this.$imag = $fround(imag);
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.keyFor = function(x) { return x.$real + "$" + x.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, "", false, function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { typ.copy(this, v); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.keyFor = function(x) {
        return Array.prototype.join.call($mapArray(x, function(e) {
          return String(elem.keyFor(e)).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.copy = function(dst, src) {
        $copyArray(dst, src, 0, 0, src.length, elem);
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.keyFor = $idKey;
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.keyFor = $ifaceKeyFor;
    typ.init = function(methods) {
      typ.methods = methods;
      methods.forEach(function(m) {
        $ifaceNil[m.prop] = $throwNilPointerError;
      });
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.keyFor = $idKey;
    typ.init = function(elem) {
      typ.elem = elem;
      typ.wrapped = (elem.kind === $kindArray);
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    typ = function(array) {
      if (array.constructor !== typ.nativeArray) {
        array = new typ.nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      typ.nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.wrapped = true;
    typ.ptr = $newType(4, $kindPtr, "*" + string, false, pkg, exported, constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { typ.copy(this, v); };
    typ.init = function(pkgPath, fields) {
      typ.pkgPath = pkgPath;
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.typ.comparable) {
          typ.comparable = false;
        }
      });
      typ.keyFor = function(x) {
        var val = x.$val;
        return $mapArray(fields, function(f) {
          return String(f.typ.keyFor(val[f.prop])).replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.copy = function(dst, src) {
        for (var i = 0; i < fields.length; i++) {
          var f = fields[i];
          switch (f.typ.kind) {
          case $kindArray:
          case $kindStruct:
            f.typ.copy(dst[f.prop], src[f.prop]);
            continue;
          default:
            dst[f.prop] = src[f.prop];
            continue;
          }
        }
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      $addMethodSynthesizer(function() {
        var synthesizeMethod = function(target, m, f) {
          if (target.prototype[m.prop] !== undefined) { return; }
          target.prototype[m.prop] = function() {
            var v = this.$val[f.prop];
            if (f.typ === $jsObjectPtr) {
              v = new $jsObjectPtr(v);
            }
            if (v.$val === undefined) {
              v = new f.typ(v);
            }
            return v[m.prop].apply(v, arguments);
          };
        };
        fields.forEach(function(f) {
          if (f.anonymous) {
            $methodSet(f.typ).forEach(function(m) {
              synthesizeMethod(typ, m, f);
              synthesizeMethod(typ.ptr, m, f);
            });
            $methodSet($ptrType(f.typ)).forEach(function(m) {
              synthesizeMethod(typ.ptr, m, f);
            });
          }
        });
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindChan:
    typ.zero = function() { return $chanNil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.id = $typeIDCounter;
  $typeIDCounter++;
  typ.size = size;
  typ.kind = kind;
  typ.string = string;
  typ.named = named;
  typ.pkg = pkg;
  typ.exported = exported;
  typ.methods = [];
  typ.methodSetCache = null;
  typ.comparable = true;
  return typ;
};

var $methodSet = function(typ) {
  if (typ.methodSetCache !== null) {
    return typ.methodSetCache;
  }
  var base = {};

  var isPtr = (typ.kind === $kindPtr);
  if (isPtr && typ.elem.kind === $kindInterface) {
    typ.methodSetCache = [];
    return [];
  }

  var current = [{typ: isPtr ? typ.elem : typ, indirect: isPtr}];

  var seen = {};

  while (current.length > 0) {
    var next = [];
    var mset = [];

    current.forEach(function(e) {
      if (seen[e.typ.string]) {
        return;
      }
      seen[e.typ.string] = true;

      if (e.typ.named) {
        mset = mset.concat(e.typ.methods);
        if (e.indirect) {
          mset = mset.concat($ptrType(e.typ).methods);
        }
      }

      switch (e.typ.kind) {
      case $kindStruct:
        e.typ.fields.forEach(function(f) {
          if (f.anonymous) {
            var fTyp = f.typ;
            var fIsPtr = (fTyp.kind === $kindPtr);
            next.push({typ: fIsPtr ? fTyp.elem : fTyp, indirect: e.indirect || fIsPtr});
          }
        });
        break;

      case $kindInterface:
        mset = mset.concat(e.typ.methods);
        break;
      }
    });

    mset.forEach(function(m) {
      if (base[m.name] === undefined) {
        base[m.name] = m;
      }
    });

    current = next;
  }

  typ.methodSetCache = [];
  Object.keys(base).sort().forEach(function(name) {
    typ.methodSetCache.push(base[name]);
  });
  return typ.methodSetCache;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           true, "", false, null);
var $Int           = $newType( 4, $kindInt,           "int",            true, "", false, null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           true, "", false, null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          true, "", false, null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          true, "", false, null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          true, "", false, null);
var $Uint          = $newType( 4, $kindUint,          "uint",           true, "", false, null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          true, "", false, null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         true, "", false, null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         true, "", false, null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         true, "", false, null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        true, "", false, null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        true, "", false, null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        true, "", false, null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      true, "", false, null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     true, "", false, null);
var $String        = $newType( 8, $kindString,        "string",         true, "", false, null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", true, "", false, null);

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var typeKey = elem.id + "$" + len;
  var typ = $arrayTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, "[" + len + "]" + elem.string, false, "", false, null);
    $arrayTypes[typeKey] = typ;
    typ.init(elem, len);
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, false, "", false, null);
    elem[field] = typ;
    typ.init(elem, sendOnly, recvOnly);
  }
  return typ;
};
var $Chan = function(elem, capacity) {
  if (capacity < 0 || capacity > 2147483647) {
    $throwRuntimeError("makechan: size out of range");
  }
  this.$elem = elem;
  this.$capacity = capacity;
  this.$buffer = [];
  this.$sendQueue = [];
  this.$recvQueue = [];
  this.$closed = false;
};
var $chanNil = new $Chan(null, 0);
$chanNil.$sendQueue = $chanNil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var typeKey = $mapArray(params, function(p) { return p.id; }).join(",") + "$" + $mapArray(results, function(r) { return r.id; }).join(",") + "$" + variadic;
  var typ = $funcTypes[typeKey];
  if (typ === undefined) {
    var paramTypes = $mapArray(params, function(p) { return p.string; });
    if (variadic) {
      paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
    }
    var string = "func(" + paramTypes.join(", ") + ")";
    if (results.length === 1) {
      string += " " + results[0].string;
    } else if (results.length > 1) {
      string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
    }
    typ = $newType(4, $kindFunc, string, false, "", false, null);
    $funcTypes[typeKey] = typ;
    typ.init(params, results, variadic);
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var typeKey = $mapArray(methods, function(m) { return m.pkg + "," + m.name + "," + m.typ.id; }).join("$");
  var typ = $interfaceTypes[typeKey];
  if (typ === undefined) {
    var string = "interface {}";
    if (methods.length !== 0) {
      string = "interface { " + $mapArray(methods, function(m) {
        return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.typ.string.substr(4);
      }).join("; ") + " }";
    }
    typ = $newType(8, $kindInterface, string, false, "", false, null);
    $interfaceTypes[typeKey] = typ;
    typ.init(methods);
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = {};
var $error = $newType(8, $kindInterface, "error", true, "", false, null);
$error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}]);

var $mapTypes = {};
var $mapType = function(key, elem) {
  var typeKey = key.id + "$" + elem.id;
  var typ = $mapTypes[typeKey];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, "map[" + key.string + "]" + elem.string, false, "", false, null);
    $mapTypes[typeKey] = typ;
    typ.init(key, elem);
  }
  return typ;
};
var $makeMap = function(keyForFunc, entries) {
  var m = {};
  for (var i = 0; i < entries.length; i++) {
    var e = entries[i];
    m[keyForFunc(e.k)] = e;
  }
  return m;
};

var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, false, "", elem.exported, null);
    elem.ptr = typ;
    typ.init(elem);
  }
  return typ;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $indexPtr = function(array, index, constructor) {
  array.$ptr = array.$ptr || {};
  return array.$ptr[index] || (array.$ptr[index] = new constructor(function() { return array[index]; }, function(v) { array[index] = v; }));
};

var $sliceType = function(elem) {
  var typ = elem.slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, false, "", false, null);
    elem.slice = typ;
    typ.init(elem);
  }
  return typ;
};
var $makeSlice = function(typ, length, capacity) {
  capacity = capacity || length;
  if (length < 0 || length > 2147483647) {
    $throwRuntimeError("makeslice: len out of range");
  }
  if (capacity < 0 || capacity < length || capacity > 2147483647) {
    $throwRuntimeError("makeslice: cap out of range");
  }
  var array = new typ.nativeArray(capacity);
  if (typ.nativeArray === Array) {
    for (var i = 0; i < capacity; i++) {
      array[i] = typ.elem.zero();
    }
  }
  var slice = new typ(array);
  slice.$length = length;
  return slice;
};

var $structTypes = {};
var $structType = function(pkgPath, fields) {
  var typeKey = $mapArray(fields, function(f) { return f.name + "," + f.typ.id + "," + f.tag; }).join("$");
  var typ = $structTypes[typeKey];
  if (typ === undefined) {
    var string = "struct { " + $mapArray(fields, function(f) {
      return f.name + " " + f.typ.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
    }).join("; ") + " }";
    if (fields.length === 0) {
      string = "struct {}";
    }
    typ = $newType(0, $kindStruct, string, false, "", false, function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.typ.zero();
      }
    });
    $structTypes[typeKey] = typ;
    typ.init(pkgPath, fields);
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethodSet = $methodSet(value.constructor);
      var interfaceMethods = type.methods;
      for (var i = 0; i < interfaceMethods.length; i++) {
        var tm = interfaceMethods[i];
        var found = false;
        for (var j = 0; j < valueMethodSet.length; j++) {
          var vm = valueMethodSet[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.typ === tm.typ) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  if (type === $jsObjectPtr) {
    value = value.object;
  }
  return returnTuple ? [value, true] : value;
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr, fromPanic) {
  if (!fromPanic && deferred !== null && deferred.index >= $curGoroutine.deferStack.length) {
    throw jsErr;
  }
  if (jsErr !== null) {
    var newErr = null;
    try {
      $curGoroutine.deferStack.push(deferred);
      $panic(new $jsErrorPtr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $curGoroutine.deferStack.pop();
    $callDeferred(deferred, newErr);
    return;
  }
  if ($curGoroutine.asleep) {
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  try {
    while (true) {
      if (deferred === null) {
        deferred = $curGoroutine.deferStack[$curGoroutine.deferStack.length - 1];
        if (deferred === undefined) {
          /* The panic reached the top of the stack. Clear it and throw it as a JavaScript error. */
          $panicStackDepth = null;
          if (localPanicValue.Object instanceof Error) {
            throw localPanicValue.Object;
          }
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          throw new Error(msg);
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        $curGoroutine.deferStack.pop();
        if (localPanicValue !== undefined) {
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(call[2], call[1]);
      if (r && r.$blk !== undefined) {
        deferred.push([r.$blk, [], r]);
        if (fromPanic) {
          throw null;
        }
        return;
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null, true);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };

var $noGoroutine = { asleep: false, exit: false, deferStack: [], panicStack: [] };
var $curGoroutine = $noGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $mainFinished = false;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  var $goroutine = function() {
    try {
      $curGoroutine = $goroutine;
      var r = fun.apply(undefined, args);
      if (r && r.$blk !== undefined) {
        fun = function() { return r.$blk(); };
        args = [];
        return;
      }
      $goroutine.exit = true;
    } catch (err) {
      if (!$goroutine.exit) {
        throw err;
      }
    } finally {
      $curGoroutine = $noGoroutine;
      if ($goroutine.exit) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        $goroutine.asleep = true;
      }
      if ($goroutine.asleep) {
        $awakeGoroutines--;
        if (!$mainFinished && $awakeGoroutines === 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
          if ($global.process !== undefined) {
            $global.process.exit(2);
          }
        }
      }
    }
  };
  $goroutine.asleep = false;
  $goroutine.exit = false;
  $goroutine.deferStack = [];
  $goroutine.panicStack = [];
  $schedule($goroutine);
};

var $scheduled = [];
var $runScheduled = function() {
  try {
    var r;
    while ((r = $scheduled.shift()) !== undefined) {
      r();
    }
  } finally {
    if ($scheduled.length > 0) {
      setTimeout($runScheduled, 0);
    }
  }
};

var $schedule = function(goroutine) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }
  $scheduled.push(goroutine);
  if ($curGoroutine === $noGoroutine) {
    $runScheduled();
  }
};

var $setTimeout = function(f, t) {
  $awakeGoroutines++;
  return setTimeout(function() {
    $awakeGoroutines--;
    f();
  }, t);
};

var $block = function() {
  if ($curGoroutine === $noGoroutine) {
    $throwRuntimeError("cannot block in JavaScript callback, fix by wrapping code in goroutine");
  }
  $curGoroutine.asleep = true;
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  var closedDuringSend;
  chan.$sendQueue.push(function(closed) {
    closedDuringSend = closed;
    $schedule(thisGoroutine);
    return value;
  });
  $block();
  return {
    $blk: function() {
      if (closedDuringSend) {
        $throwRuntimeError("send on closed channel");
      }
    }
  };
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend(false));
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.$elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.value; } };
  var queueEntry = function(v) {
    f.value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  $block();
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(true); /* will panic */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.$elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var f = { $blk: function() { return this.selection; } };
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          f.selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          f.selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  $block();
  return f;
};

var $jsObjectPtr, $jsErrorPtr;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    default:
      return t !== $jsObjectPtr;
  }
};

var $externalize = function(v, t) {
  if (t === $jsObjectPtr) {
    return v;
  }
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    return $externalizeFunction(v, t, false);
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (v.constructor === $jsObjectPtr) {
      return v.$val.object;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    if (v === t.nil) {
      return null;
    }
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if ($isASCII(v)) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      var c = r[0];
      if (c > 0xFFFF) {
        var h = Math.floor((c - 0x10000) / 0x400) + 0xD800;
        var l = (c - 0x10000) % 0x400 + 0xDC00;
        s += String.fromCharCode(h, l);
        continue;
      }
      s += String.fromCharCode(c);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg !== undefined && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var noJsObject = {};
    var searchJsObject = function(v, t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      switch (t.kind) {
      case $kindPtr:
        if (v === t.nil) {
          return noJsObject;
        }
        return searchJsObject(v.$get(), t.elem);
      case $kindStruct:
        var f = t.fields[0];
        return searchJsObject(v[f.prop], f.typ);
      case $kindInterface:
        return searchJsObject(v.$val, v.constructor);
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(v, t);
    if (o !== noJsObject) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (!f.exported) {
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.typ);
    }
    return o;
  }
  $throwRuntimeError("cannot externalize " + t.string);
};

var $externalizeFunction = function(v, t, passThis) {
  if (v === $throwNilPointerError) {
    return null;
  }
  if (v.$externalizeWrapper === undefined) {
    $checkForDeadlock = false;
    v.$externalizeWrapper = function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = [];
          for (var j = i; j < arguments.length; j++) {
            varargs.push($internalize(arguments[j], vt));
          }
          args.push(new (t.params[i])(varargs));
          break;
        }
        args.push($internalize(arguments[i], t.params[i]));
      }
      var canBlock = $curGoroutine.canBlock;
      $curGoroutine.canBlock = false;
      try {
        var result = v.apply(passThis ? this : undefined, args);
      } finally {
        $curGoroutine.canBlock = canBlock;
      }
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $externalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $externalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  }
  return v.$externalizeWrapper;
};

var $internalize = function(v, t, recv) {
  if (t === $jsObjectPtr) {
    return v;
  }
  if (t === $jsObjectPtr.elem) {
    $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
  }
  if (v && v.__internal_object__ !== undefined) {
    return $assertType(v.__internal_object__, t, false);
  }
  var timePkg = $packages["time"];
  if (timePkg !== undefined && t === timePkg.Time) {
    if (!(v !== null && v !== undefined && v.constructor === Date)) {
      $throwRuntimeError("cannot internalize time.Time from " + typeof v + ", must be Date");
    }
    return timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000));
  }
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t.methods.length !== 0) {
      $throwRuntimeError("cannot internalize " + t.string);
    }
    if (v === null) {
      return $ifaceNil;
    }
    if (v === undefined) {
      return new $jsObjectPtr(undefined);
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      if (timePkg === undefined) {
        /* time package is not present, internalize as &js.Object{Date} so it can be externalized into original Date. */
        return new $jsObjectPtr(v);
      }
      return new timePkg.Time($internalize(v, timePkg.Time));
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$jsObjectPtr], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $jsObjectPtr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var k = $internalize(keys[i], t.key);
      m[t.key.keyFor(k)] = { k: k, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if ($isASCII(v)) {
      return v;
    }
    var s = "";
    var i = 0;
    while (i < v.length) {
      var h = v.charCodeAt(i);
      if (0xD800 <= h && h <= 0xDBFF) {
        var l = v.charCodeAt(i + 1);
        var c = (h - 0xD800) * 0x400 + l - 0xDC00 + 0x10000;
        s += $encodeRune(c);
        i += 2;
        continue;
      }
      s += $encodeRune(h);
      i++;
    }
    return s;
  case $kindStruct:
    var noJsObject = {};
    var searchJsObject = function(t) {
      if (t === $jsObjectPtr) {
        return v;
      }
      if (t === $jsObjectPtr.elem) {
        $throwRuntimeError("cannot internalize js.Object, use *js.Object instead");
      }
      switch (t.kind) {
      case $kindPtr:
        return searchJsObject(t.elem);
      case $kindStruct:
        var f = t.fields[0];
        var o = searchJsObject(f.typ);
        if (o !== noJsObject) {
          var n = new t.ptr();
          n[f.prop] = o;
          return n;
        }
        return noJsObject;
      default:
        return noJsObject;
      }
    };
    var o = searchJsObject(t);
    if (o !== noJsObject) {
      return o;
    }
  }
  $throwRuntimeError("cannot internalize " + t.string);
};

/* $isASCII reports whether string s contains only ASCII characters. */
var $isASCII = function(s) {
  for (var i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) >= 128) {
      return false;
    }
  }
  return true;
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, $init, Object, Error, sliceType, ptrType, ptrType$1, MakeFunc, init;
	Object = $pkg.Object = $newType(0, $kindStruct, "js.Object", true, "github.com/gopherjs/gopherjs/js", true, function(object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.object = null;
			return;
		}
		this.object = object_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", true, "github.com/gopherjs/gopherjs/js", true, function(Object_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Object = null;
			return;
		}
		this.Object = Object_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(Object);
	ptrType$1 = $ptrType(Error);
	Object.ptr.prototype.Get = function(key) {
		var key, o;
		o = this;
		return o.object[$externalize(key, $String)];
	};
	Object.prototype.Get = function(key) { return this.$val.Get(key); };
	Object.ptr.prototype.Set = function(key, value) {
		var key, o, value;
		o = this;
		o.object[$externalize(key, $String)] = $externalize(value, $emptyInterface);
	};
	Object.prototype.Set = function(key, value) { return this.$val.Set(key, value); };
	Object.ptr.prototype.Delete = function(key) {
		var key, o;
		o = this;
		delete o.object[$externalize(key, $String)];
	};
	Object.prototype.Delete = function(key) { return this.$val.Delete(key); };
	Object.ptr.prototype.Length = function() {
		var o;
		o = this;
		return $parseInt(o.object.length);
	};
	Object.prototype.Length = function() { return this.$val.Length(); };
	Object.ptr.prototype.Index = function(i) {
		var i, o;
		o = this;
		return o.object[i];
	};
	Object.prototype.Index = function(i) { return this.$val.Index(i); };
	Object.ptr.prototype.SetIndex = function(i, value) {
		var i, o, value;
		o = this;
		o.object[i] = $externalize(value, $emptyInterface);
	};
	Object.prototype.SetIndex = function(i, value) { return this.$val.SetIndex(i, value); };
	Object.ptr.prototype.Call = function(name, args) {
		var args, name, o, obj;
		o = this;
		return (obj = o.object, obj[$externalize(name, $String)].apply(obj, $externalize(args, sliceType)));
	};
	Object.prototype.Call = function(name, args) { return this.$val.Call(name, args); };
	Object.ptr.prototype.Invoke = function(args) {
		var args, o;
		o = this;
		return o.object.apply(undefined, $externalize(args, sliceType));
	};
	Object.prototype.Invoke = function(args) { return this.$val.Invoke(args); };
	Object.ptr.prototype.New = function(args) {
		var args, o;
		o = this;
		return new ($global.Function.prototype.bind.apply(o.object, [undefined].concat($externalize(args, sliceType))));
	};
	Object.prototype.New = function(args) { return this.$val.New(args); };
	Object.ptr.prototype.Bool = function() {
		var o;
		o = this;
		return !!(o.object);
	};
	Object.prototype.Bool = function() { return this.$val.Bool(); };
	Object.ptr.prototype.String = function() {
		var o;
		o = this;
		return $internalize(o.object, $String);
	};
	Object.prototype.String = function() { return this.$val.String(); };
	Object.ptr.prototype.Int = function() {
		var o;
		o = this;
		return $parseInt(o.object) >> 0;
	};
	Object.prototype.Int = function() { return this.$val.Int(); };
	Object.ptr.prototype.Int64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Int64);
	};
	Object.prototype.Int64 = function() { return this.$val.Int64(); };
	Object.ptr.prototype.Uint64 = function() {
		var o;
		o = this;
		return $internalize(o.object, $Uint64);
	};
	Object.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Object.ptr.prototype.Float = function() {
		var o;
		o = this;
		return $parseFloat(o.object);
	};
	Object.prototype.Float = function() { return this.$val.Float(); };
	Object.ptr.prototype.Interface = function() {
		var o;
		o = this;
		return $internalize(o.object, $emptyInterface);
	};
	Object.prototype.Interface = function() { return this.$val.Interface(); };
	Object.ptr.prototype.Unsafe = function() {
		var o;
		o = this;
		return o.object;
	};
	Object.prototype.Unsafe = function() { return this.$val.Unsafe(); };
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	MakeFunc = function(fn) {
		var fn;
		return $makeFunc(fn);
	};
	$pkg.MakeFunc = MakeFunc;
	init = function() {
		var e;
		e = new Error.ptr(null);
		$unused(e);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [ptrType], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$String], [], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [ptrType], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", typ: $funcType([$Int, $emptyInterface], [], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([$String, sliceType], [ptrType], true)}, {prop: "Invoke", name: "Invoke", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "New", name: "New", pkg: "", typ: $funcType([sliceType], [ptrType], true)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", typ: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Stack", name: "Stack", pkg: "", typ: $funcType([], [$String], false)}];
	Object.init("github.com/gopherjs/gopherjs/js", [{prop: "object", name: "object", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Object", name: "Object", anonymous: true, exported: true, typ: ptrType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime/internal/sys"] = (function() {
	var $pkg = {}, $init;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, $init, js, sys, Error, TypeAssertionError, errorString, structType, ptrType$4, init, Caller, GC, Goexit, GOMAXPROCS, Gosched, SetFinalizer, KeepAlive, throw$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sys = $packages["runtime/internal/sys"];
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", true, "runtime", true, null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", true, "runtime", true, function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.interfaceString = "";
			this.concreteString = "";
			this.assertedString = "";
			this.missingMethod = "";
			return;
		}
		this.interfaceString = interfaceString_;
		this.concreteString = concreteString_;
		this.assertedString = assertedString_;
		this.missingMethod = missingMethod_;
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", true, "runtime", false, null);
	structType = $structType("", []);
	ptrType$4 = $ptrType(TypeAssertionError);
	init = function() {
		var e, jsPkg;
		jsPkg = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$jsObjectPtr = jsPkg.Object.ptr;
		$jsErrorPtr = jsPkg.Error.ptr;
		$throwRuntimeError = throw$1;
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		$unused(e);
	};
	Caller = function(skip) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, file, info, line, ok, parts, pc, skip;
		pc = 0;
		file = "";
		line = 0;
		ok = false;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = 0;
			_tmp$3 = false;
			pc = _tmp;
			file = _tmp$1;
			line = _tmp$2;
			ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0;
		_tmp$5 = $internalize(parts[0], $String);
		_tmp$6 = $parseInt(parts[1]) >> 0;
		_tmp$7 = true;
		pc = _tmp$4;
		file = _tmp$5;
		line = _tmp$6;
		ok = _tmp$7;
		return [pc, file, line, ok];
	};
	$pkg.Caller = Caller;
	GC = function() {
	};
	$pkg.GC = GC;
	Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	$pkg.Goexit = Goexit;
	GOMAXPROCS = function(n) {
		var n;
		return 1;
	};
	$pkg.GOMAXPROCS = GOMAXPROCS;
	Gosched = function() {
		var _r, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		c[0] = new $Chan(structType, 0);
		$setTimeout((function(c) { return function() {
			$close(c[0]);
		}; })(c), 0);
		_r = $recv(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gosched }; } $f._r = _r; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Gosched = Gosched;
	SetFinalizer = function(x, f) {
		var f, x;
	};
	$pkg.SetFinalizer = SetFinalizer;
	KeepAlive = function(param) {
		var param;
	};
	$pkg.KeepAlive = KeepAlive;
	throw$1 = function(s) {
		var s;
		$panic(new errorString((s)));
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + (e);
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$4.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.methods = [{prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}, {prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Error.init([{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", typ: $funcType([], [], false)}]);
	TypeAssertionError.init("runtime", [{prop: "interfaceString", name: "interfaceString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "concreteString", name: "concreteString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "assertedString", name: "assertedString", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sys.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, $init, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", true, "errors", false, function(s_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = "";
			return;
		}
		this.s = s_;
	});
	ptrType = $ptrType(errorString);
	New = function(text) {
		var text;
		return new errorString.ptr(text);
	};
	$pkg.New = New;
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	errorString.init("errors", [{prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/race"] = (function() {
	var $pkg = {}, $init, Acquire, Release, ReleaseMerge, Disable, Enable, ReadRange, WriteRange;
	Acquire = function(addr) {
		var addr;
	};
	$pkg.Acquire = Acquire;
	Release = function(addr) {
		var addr;
	};
	$pkg.Release = Release;
	ReleaseMerge = function(addr) {
		var addr;
	};
	$pkg.ReleaseMerge = ReleaseMerge;
	Disable = function() {
	};
	$pkg.Disable = Disable;
	Enable = function() {
	};
	$pkg.Enable = Enable;
	ReadRange = function(addr, len) {
		var addr, len;
	};
	$pkg.ReadRange = ReadRange;
	WriteRange = function(addr, len) {
		var addr, len;
	};
	$pkg.WriteRange = WriteRange;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, $init, js, Value, noCopy, ptrType, ptrType$1, CompareAndSwapInt32, CompareAndSwapUint64, CompareAndSwapPointer, AddInt32, AddInt64, LoadUint32, LoadUint64, LoadPointer, StoreUint32, StorePointer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	Value = $pkg.Value = $newType(0, $kindStruct, "atomic.Value", true, "sync/atomic", true, function(noCopy_, v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.noCopy = new noCopy.ptr();
			this.v = $ifaceNil;
			return;
		}
		this.noCopy = noCopy_;
		this.v = v_;
	});
	noCopy = $pkg.noCopy = $newType(0, $kindStruct, "atomic.noCopy", true, "sync/atomic", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(Value);
	ptrType$1 = $ptrType(noCopy);
	CompareAndSwapInt32 = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapInt32 = CompareAndSwapInt32;
	CompareAndSwapUint64 = function(addr, old, new$1) {
		var addr, new$1, old, x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapUint64 = CompareAndSwapUint64;
	CompareAndSwapPointer = function(addr, old, new$1) {
		var addr, new$1, old;
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	$pkg.CompareAndSwapPointer = CompareAndSwapPointer;
	AddInt32 = function(addr, delta) {
		var addr, delta, new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt32 = AddInt32;
	AddInt64 = function(addr, delta) {
		var addr, delta, new$1, x;
		new$1 = (x = addr.$get(), new $Int64(x.$high + delta.$high, x.$low + delta.$low));
		addr.$set(new$1);
		return new$1;
	};
	$pkg.AddInt64 = AddInt64;
	LoadUint32 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint32 = LoadUint32;
	LoadUint64 = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadUint64 = LoadUint64;
	LoadPointer = function(addr) {
		var addr;
		return addr.$get();
	};
	$pkg.LoadPointer = LoadPointer;
	StoreUint32 = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StoreUint32 = StoreUint32;
	StorePointer = function(addr, val) {
		var addr, val;
		addr.$set(val);
	};
	$pkg.StorePointer = StorePointer;
	Value.ptr.prototype.Load = function() {
		var v, x;
		x = $ifaceNil;
		v = this;
		x = v.v;
		return x;
	};
	Value.prototype.Load = function() { return this.$val.Load(); };
	Value.ptr.prototype.Store = function(x) {
		var v, x;
		v = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			$panic(new $String("sync/atomic: store of nil value into Value"));
		}
		if (!($interfaceIsEqual(v.v, $ifaceNil)) && !(x.constructor === v.v.constructor)) {
			$panic(new $String("sync/atomic: store of inconsistently typed value into Value"));
		}
		v.v = x;
	};
	Value.prototype.Store = function(x) { return this.$val.Store(x); };
	noCopy.ptr.prototype.Lock = function() {
	};
	noCopy.prototype.Lock = function() { return this.$val.Lock(); };
	ptrType.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}];
	Value.init("sync/atomic", [{prop: "noCopy", name: "noCopy", anonymous: false, exported: false, typ: noCopy, tag: ""}, {prop: "v", name: "v", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}]);
	noCopy.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, $init, js, race, runtime, atomic, Pool, WaitGroup, Map, readOnly, entry, Mutex, Locker, Once, poolLocalInternal, poolLocal, notifyList, RWMutex, rlocker, ptrType, sliceType, ptrType$1, chanType, sliceType$1, structType, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$4, ptrType$8, ptrType$9, funcType, arrayType$1, ptrType$11, ptrType$12, chanType$1, funcType$1, ptrType$15, mapType, ptrType$16, funcType$2, ptrType$17, arrayType$2, semWaiters, expunged, allPools, runtime_registerPoolCleanup, runtime_Semacquire, runtime_SemacquireMutex, runtime_Semrelease, runtime_notifyListCheck, runtime_canSpin, runtime_nanotime, newEntry, throw$1, poolCleanup, init, indexLocal, init$1, runtime_doSpin;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", true, "sync", true, function(local_, localSize_, store_, New_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.local = 0;
			this.localSize = 0;
			this.store = sliceType$4.nil;
			this.New = $throwNilPointerError;
			return;
		}
		this.local = local_;
		this.localSize = localSize_;
		this.store = store_;
		this.New = New_;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, $kindStruct, "sync.WaitGroup", true, "sync", true, function(counter_, ch_, state1_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.counter = 0;
			this.ch = $chanNil;
			this.state1 = arrayType$1.zero();
			this.sema = 0;
			return;
		}
		this.counter = counter_;
		this.ch = ch_;
		this.state1 = state1_;
		this.sema = sema_;
	});
	Map = $pkg.Map = $newType(0, $kindStruct, "sync.Map", true, "sync", true, function(mu_, read_, dirty_, misses_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mu = new Mutex.ptr(0, 0);
			this.read = new atomic.Value.ptr(new atomic.noCopy.ptr(), $ifaceNil);
			this.dirty = false;
			this.misses = 0;
			return;
		}
		this.mu = mu_;
		this.read = read_;
		this.dirty = dirty_;
		this.misses = misses_;
	});
	readOnly = $pkg.readOnly = $newType(0, $kindStruct, "sync.readOnly", true, "sync", false, function(m_, amended_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = false;
			this.amended = false;
			return;
		}
		this.m = m_;
		this.amended = amended_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "sync.entry", true, "sync", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = 0;
			return;
		}
		this.p = p_;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", true, "sync", true, function(state_, sema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = 0;
			this.sema = 0;
			return;
		}
		this.state = state_;
		this.sema = sema_;
	});
	Locker = $pkg.Locker = $newType(8, $kindInterface, "sync.Locker", true, "sync", true, null);
	Once = $pkg.Once = $newType(0, $kindStruct, "sync.Once", true, "sync", true, function(m_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.m = new Mutex.ptr(0, 0);
			this.done = 0;
			return;
		}
		this.m = m_;
		this.done = done_;
	});
	poolLocalInternal = $pkg.poolLocalInternal = $newType(0, $kindStruct, "sync.poolLocalInternal", true, "sync", false, function(private$0_, shared_, Mutex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.private$0 = $ifaceNil;
			this.shared = sliceType$4.nil;
			this.Mutex = new Mutex.ptr(0, 0);
			return;
		}
		this.private$0 = private$0_;
		this.shared = shared_;
		this.Mutex = Mutex_;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", true, "sync", false, function(poolLocalInternal_, pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.poolLocalInternal = new poolLocalInternal.ptr($ifaceNil, sliceType$4.nil, new Mutex.ptr(0, 0));
			this.pad = arrayType$2.zero();
			return;
		}
		this.poolLocalInternal = poolLocalInternal_;
		this.pad = pad_;
	});
	notifyList = $pkg.notifyList = $newType(0, $kindStruct, "sync.notifyList", true, "sync", false, function(wait_, notify_, lock_, head_, tail_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wait = 0;
			this.notify = 0;
			this.lock = 0;
			this.head = 0;
			this.tail = 0;
			return;
		}
		this.wait = wait_;
		this.notify = notify_;
		this.lock = lock_;
		this.head = head_;
		this.tail = tail_;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "sync.RWMutex", true, "sync", true, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	rlocker = $pkg.rlocker = $newType(0, $kindStruct, "sync.rlocker", true, "sync", false, function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = new Mutex.ptr(0, 0);
			this.writerSem = 0;
			this.readerSem = 0;
			this.readerCount = 0;
			this.readerWait = 0;
			return;
		}
		this.w = w_;
		this.writerSem = writerSem_;
		this.readerSem = readerSem_;
		this.readerCount = readerCount_;
		this.readerWait = readerWait_;
	});
	ptrType = $ptrType(Pool);
	sliceType = $sliceType(ptrType);
	ptrType$1 = $ptrType($Uint32);
	chanType = $chanType($Bool, false, false);
	sliceType$1 = $sliceType(chanType);
	structType = $structType("", []);
	ptrType$3 = $ptrType($emptyInterface);
	ptrType$4 = $ptrType(entry);
	ptrType$5 = $ptrType($UnsafePointer);
	ptrType$6 = $ptrType($Int32);
	ptrType$7 = $ptrType(poolLocal);
	sliceType$4 = $sliceType($emptyInterface);
	ptrType$8 = $ptrType(rlocker);
	ptrType$9 = $ptrType(RWMutex);
	funcType = $funcType([], [$emptyInterface], false);
	arrayType$1 = $arrayType($Uint8, 12);
	ptrType$11 = $ptrType($Uint64);
	ptrType$12 = $ptrType(WaitGroup);
	chanType$1 = $chanType(structType, false, false);
	funcType$1 = $funcType([$emptyInterface, $emptyInterface], [$Bool], false);
	ptrType$15 = $ptrType(Map);
	mapType = $mapType($emptyInterface, ptrType$4);
	ptrType$16 = $ptrType(Mutex);
	funcType$2 = $funcType([], [], false);
	ptrType$17 = $ptrType(Once);
	arrayType$2 = $arrayType($Uint8, 100);
	Pool.ptr.prototype.Get = function() {
		var _r, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (p.store.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (p.store.$length === 0) { */ case 1:
			/* */ if (!(p.New === $throwNilPointerError)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(p.New === $throwNilPointerError)) { */ case 3:
				_r = p.New(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		$s = -1; return x$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pool.ptr.prototype.Get }; } $f._r = _r; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p, x;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
		var cleanup;
	};
	runtime_Semacquire = function(s) {
		var _entry, _key, _r, ch, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; ch = $f.ch; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (s.$get() === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (s.$get() === 0) { */ case 1:
			ch = new $Chan($Bool, 0);
			_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: $append((_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil), ch) };
			_r = $recv(ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		s.$set(s.$get() - (1) >>> 0);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semacquire }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f.ch = ch; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_SemacquireMutex = function(s, lifo) {
		var lifo, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; lifo = $f.lifo; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = runtime_Semacquire(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_SemacquireMutex }; } $f.lifo = lifo; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_Semrelease = function(s, handoff) {
		var _entry, _key, ch, handoff, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; ch = $f.ch; handoff = $f.handoff; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s.$set(s.$get() + (1) >>> 0);
		w = (_entry = semWaiters[ptrType$1.keyFor(s)], _entry !== undefined ? _entry.v : sliceType$1.nil);
		if (w.$length === 0) {
			$s = -1; return;
		}
		ch = (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]);
		w = $subslice(w, 1);
		_key = s; (semWaiters || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: w };
		if (w.$length === 0) {
			delete semWaiters[ptrType$1.keyFor(s)];
		}
		$r = $send(ch, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: runtime_Semrelease }; } $f._entry = _entry; $f._key = _key; $f.ch = ch; $f.handoff = handoff; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	runtime_notifyListCheck = function(size) {
		var size;
	};
	runtime_canSpin = function(i) {
		var i;
		return false;
	};
	runtime_nanotime = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	WaitGroup.ptr.prototype.Add = function(delta) {
		var delta, wg;
		wg = this;
		wg.counter = wg.counter + (delta) >> 0;
		if (wg.counter < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
		if (wg.counter > 0 && wg.ch === $chanNil) {
			wg.ch = new $Chan(structType, 0);
		}
		if ((wg.counter === 0) && !(wg.ch === $chanNil)) {
			$close(wg.ch);
			wg.ch = $chanNil;
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.ptr.prototype.Wait = function() {
		var _r, wg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; wg = $f.wg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		wg = this;
		/* */ if (wg.counter > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (wg.counter > 0) { */ case 1:
			_r = $recv(wg.ch); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: WaitGroup.ptr.prototype.Wait }; } $f._r = _r; $f.wg = wg; $f.$s = $s; $f.$r = $r; return $f;
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	newEntry = function(i) {
		var i, i$24ptr;
		return new entry.ptr(((i$24ptr || (i$24ptr = new ptrType$3(function() { return i; }, function($v) { i = $v; })))));
	};
	Map.ptr.prototype.Load = function(key) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, e, key, m, ok, read, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = $ifaceNil;
		ok = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
				e = _tuple$4[0];
				ok = _tuple$4[1];
				m.missLocked();
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (!ok) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			$s = -1; return [value, ok];
		}
		_tuple$5 = e.load();
		value = _tuple$5[0];
		ok = _tuple$5[1];
		$s = -1; return [value, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Load }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Load = function(key) { return this.$val.Load(key); };
	entry.ptr.prototype.load = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, ok, p, value;
		value = $ifaceNil;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === 0 || p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			value = _tmp;
			ok = _tmp$1;
			return [value, ok];
		}
		_tmp$2 = (p).$get();
		_tmp$3 = true;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	entry.prototype.load = function() { return this.$val.load(); };
	Map.ptr.prototype.Store = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, e$2, key, m, ok, ok$1, ok$2, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = [value];
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok && e.tryStore((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))))) {
			$s = -1; return;
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$2 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$2[0]);
		_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		if (ok$1) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			e$1.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
		} else {
			_tuple$4 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$4[0];
			ok$2 = _tuple$4[1];
			if (ok$2) {
				e$2.storeLocked((value.$ptr || (value.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, value))));
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value[0]) };
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Store }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Store = function(key, value) { return this.$val.Store(key, value); };
	entry.ptr.prototype.tryStore = function(i) {
		var e, i, p;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			return false;
		}
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, (i))) {
				return true;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				return false;
			}
		}
	};
	entry.prototype.tryStore = function(i) { return this.$val.tryStore(i); };
	entry.ptr.prototype.unexpungeLocked = function() {
		var e, wasExpunged;
		wasExpunged = false;
		e = this;
		wasExpunged = atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), expunged, 0);
		return wasExpunged;
	};
	entry.prototype.unexpungeLocked = function() { return this.$val.unexpungeLocked(); };
	entry.ptr.prototype.storeLocked = function(i) {
		var e, i;
		e = this;
		atomic.StorePointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), (i));
	};
	entry.prototype.storeLocked = function(i) { return this.$val.storeLocked(i); };
	Map.ptr.prototype.LoadOrStore = function(key, value) {
		var _entry, _entry$1, _entry$2, _key, _key$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, actual, actual$1, e, e$1, e$2, key, loaded, loaded$1, m, ok, ok$1, ok$2, ok$3, read, value, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _key = $f._key; _key$1 = $f._key$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; actual = $f.actual; actual$1 = $f.actual$1; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; key = $f.key; loaded = $f.loaded; loaded$1 = $f.loaded$1; m = $f.m; ok = $f.ok; ok$1 = $f.ok$1; ok$2 = $f.ok$2; ok$3 = $f.ok$3; read = $f.read; value = $f.value; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		actual = $ifaceNil;
		loaded = false;
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = e.tryLoadOrStore(value);
			actual$1 = _tuple$2[0];
			loaded$1 = _tuple$2[1];
			ok$1 = _tuple$2[2];
			if (ok$1) {
				_tmp = actual$1;
				_tmp$1 = loaded$1;
				actual = _tmp;
				loaded = _tmp$1;
				$s = -1; return [actual, loaded];
			}
		}
		$r = m.mu.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = $assertType(m.read.Load(), readOnly, true);
		readOnly.copy(read, _tuple$3[0]);
		_tuple$4 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
		e$1 = _tuple$4[0];
		ok$2 = _tuple$4[1];
		if (ok$2) {
			if (e$1.unexpungeLocked()) {
				_key = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e$1 };
			}
			_tuple$5 = e$1.tryLoadOrStore(value);
			actual = _tuple$5[0];
			loaded = _tuple$5[1];
		} else {
			_tuple$6 = (_entry$2 = m.dirty[$emptyInterface.keyFor(key)], _entry$2 !== undefined ? [_entry$2.v, true] : [ptrType$4.nil, false]);
			e$2 = _tuple$6[0];
			ok$3 = _tuple$6[1];
			if (ok$3) {
				_tuple$7 = e$2.tryLoadOrStore(value);
				actual = _tuple$7[0];
				loaded = _tuple$7[1];
				m.missLocked();
			} else {
				if (!read.amended) {
					m.dirtyLocked();
					m.read.Store((x = new readOnly.ptr(read.m, true), new x.constructor.elem(x)));
				}
				_key$1 = key; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key$1)] = { k: _key$1, v: newEntry(value) };
				_tmp$2 = value;
				_tmp$3 = false;
				actual = _tmp$2;
				loaded = _tmp$3;
			}
		}
		$r = m.mu.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = actual;
		_tmp$5 = loaded;
		actual = _tmp$4;
		loaded = _tmp$5;
		$s = -1; return [actual, loaded];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.LoadOrStore }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._key = _key; $f._key$1 = _key$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.actual = actual; $f.actual$1 = actual$1; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.key = key; $f.loaded = loaded; $f.loaded$1 = loaded$1; $f.m = m; $f.ok = ok; $f.ok$1 = ok$1; $f.ok$2 = ok$2; $f.ok$3 = ok$3; $f.read = read; $f.value = value; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.LoadOrStore = function(key, value) { return this.$val.LoadOrStore(key, value); };
	entry.ptr.prototype.tryLoadOrStore = function(i) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, actual, e, i, ic, ic$24ptr, loaded, ok, p;
		actual = $ifaceNil;
		loaded = false;
		ok = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		if (p === expunged) {
			_tmp = $ifaceNil;
			_tmp$1 = false;
			_tmp$2 = false;
			actual = _tmp;
			loaded = _tmp$1;
			ok = _tmp$2;
			return [actual, loaded, ok];
		}
		if (!(p === 0)) {
			_tmp$3 = (p).$get();
			_tmp$4 = true;
			_tmp$5 = true;
			actual = _tmp$3;
			loaded = _tmp$4;
			ok = _tmp$5;
			return [actual, loaded, ok];
		}
		ic = i;
		while (true) {
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, ((ic$24ptr || (ic$24ptr = new ptrType$3(function() { return ic; }, function($v) { ic = $v; })))))) {
				_tmp$6 = i;
				_tmp$7 = false;
				_tmp$8 = true;
				actual = _tmp$6;
				loaded = _tmp$7;
				ok = _tmp$8;
				return [actual, loaded, ok];
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === expunged) {
				_tmp$9 = $ifaceNil;
				_tmp$10 = false;
				_tmp$11 = false;
				actual = _tmp$9;
				loaded = _tmp$10;
				ok = _tmp$11;
				return [actual, loaded, ok];
			}
			if (!(p === 0)) {
				_tmp$12 = (p).$get();
				_tmp$13 = true;
				_tmp$14 = true;
				actual = _tmp$12;
				loaded = _tmp$13;
				ok = _tmp$14;
				return [actual, loaded, ok];
			}
		}
	};
	entry.prototype.tryLoadOrStore = function(i) { return this.$val.tryLoadOrStore(i); };
	Map.ptr.prototype.Delete = function(key) {
		var _entry, _entry$1, _tuple, _tuple$1, _tuple$2, _tuple$3, e, key, m, ok, read, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; e = $f.e; key = $f.key; m = $f.m; ok = $f.ok; read = $f.read; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		_tuple$1 = (_entry = read.m[$emptyInterface.keyFor(key)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		e = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (!ok && read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok && read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$2 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$2[0]);
			_tuple$3 = (_entry$1 = read.m[$emptyInterface.keyFor(key)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$4.nil, false]);
			e = _tuple$3[0];
			ok = _tuple$3[1];
			if (!ok && read.amended) {
				delete m.dirty[$emptyInterface.keyFor(key)];
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (ok) {
			e.delete$();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Delete }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.e = e; $f.key = key; $f.m = m; $f.ok = ok; $f.read = read; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Delete = function(key) { return this.$val.Delete(key); };
	entry.ptr.prototype.delete$ = function() {
		var e, hadValue, p;
		hadValue = false;
		e = this;
		while (true) {
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
			if (p === 0 || p === expunged) {
				hadValue = false;
				return hadValue;
			}
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), p, 0)) {
				hadValue = true;
				return hadValue;
			}
		}
	};
	entry.prototype.delete$ = function() { return this.$val.delete$(); };
	Map.ptr.prototype.Range = function(f) {
		var _entry, _i, _keys, _r, _ref, _tuple, _tuple$1, _tuple$2, e, f, k, m, ok, read, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _i = $f._i; _keys = $f._keys; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; e = $f.e; f = $f.f; k = $f.k; m = $f.m; ok = $f.ok; read = $f.read; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		/* */ if (read.amended) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (read.amended) { */ case 1:
			$r = m.mu.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = $assertType(m.read.Load(), readOnly, true);
			readOnly.copy(read, _tuple$1[0]);
			if (read.amended) {
				readOnly.copy(read, new readOnly.ptr(m.dirty, false));
				m.read.Store(new read.constructor.elem(read));
				m.dirty = false;
				m.misses = 0;
			}
			$r = m.mu.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 5:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 6; continue; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				/* continue; */ $s = 5; continue;
			}
			k = _entry.k;
			e = _entry.v;
			_tuple$2 = e.load();
			v = _tuple$2[0];
			ok = _tuple$2[1];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i++;
				/* continue; */ $s = 5; continue;
			/* } */ case 8:
			_r = f(k, v); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!_r) { */ case 9:
				/* break; */ $s = 6; continue;
			/* } */ case 10:
			_i++;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map.ptr.prototype.Range }; } $f._entry = _entry; $f._i = _i; $f._keys = _keys; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.e = e; $f.f = f; $f.k = k; $f.m = m; $f.ok = ok; $f.read = read; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Map.prototype.Range = function(f) { return this.$val.Range(f); };
	Map.ptr.prototype.missLocked = function() {
		var m, x;
		m = this;
		m.misses = m.misses + (1) >> 0;
		if (m.misses < $keys(m.dirty).length) {
			return;
		}
		m.read.Store((x = new readOnly.ptr(m.dirty, false), new x.constructor.elem(x)));
		m.dirty = false;
		m.misses = 0;
	};
	Map.prototype.missLocked = function() { return this.$val.missLocked(); };
	Map.ptr.prototype.dirtyLocked = function() {
		var _entry, _i, _key, _keys, _ref, _tuple, e, k, m, read, x;
		m = this;
		if (!(m.dirty === false)) {
			return;
		}
		_tuple = $assertType(m.read.Load(), readOnly, true);
		read = $clone(_tuple[0], readOnly);
		m.dirty = (x = $keys(read.m).length, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = read.m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			e = _entry.v;
			if (!e.tryExpungeLocked()) {
				_key = k; (m.dirty || $throwRuntimeError("assignment to entry in nil map"))[$emptyInterface.keyFor(_key)] = { k: _key, v: e };
			}
			_i++;
		}
	};
	Map.prototype.dirtyLocked = function() { return this.$val.dirtyLocked(); };
	entry.ptr.prototype.tryExpungeLocked = function() {
		var e, isExpunged, p;
		isExpunged = false;
		e = this;
		p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		while (true) {
			if (!(p === 0)) { break; }
			if (atomic.CompareAndSwapPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))), 0, expunged)) {
				isExpunged = true;
				return isExpunged;
			}
			p = atomic.LoadPointer((e.$ptr_p || (e.$ptr_p = new ptrType$5(function() { return this.$target.p; }, function($v) { this.$target.p = $v; }, e))));
		}
		isExpunged = p === expunged;
		return isExpunged;
	};
	entry.prototype.tryExpungeLocked = function() { return this.$val.tryExpungeLocked(); };
	throw$1 = function() {
		$throwRuntimeError("native function not implemented: sync.throw");
	};
	Mutex.ptr.prototype.Lock = function() {
		var awoke, delta, iter, m, new$1, old, queueLifo, starving, waitStartTime, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; awoke = $f.awoke; delta = $f.delta; iter = $f.iter; m = $f.m; new$1 = $f.new$1; old = $f.old; queueLifo = $f.queueLifo; starving = $f.starving; waitStartTime = $f.waitStartTime; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), 0, 1)) {
			if (false) {
				race.Acquire((m));
			}
			$s = -1; return;
		}
		waitStartTime = new $Int64(0, 0);
		starving = false;
		awoke = false;
		iter = 0;
		old = m.state;
		/* while (true) { */ case 1:
			/* */ if (((old & 5) === 1) && runtime_canSpin(iter)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (((old & 5) === 1) && runtime_canSpin(iter)) { */ case 3:
				if (!awoke && ((old & 2) === 0) && !(((old >> 3 >> 0) === 0)) && atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, old | 2)) {
					awoke = true;
				}
				runtime_doSpin();
				iter = iter + (1) >> 0;
				old = m.state;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			new$1 = old;
			if ((old & 4) === 0) {
				new$1 = new$1 | (1);
			}
			if (!(((old & 5) === 0))) {
				new$1 = new$1 + (8) >> 0;
			}
			if (starving && !(((old & 1) === 0))) {
				new$1 = new$1 | (4);
			}
			if (awoke) {
				if ((new$1 & 2) === 0) {
					$panic(new $String("sync: inconsistent mutex state"));
				}
				new$1 = (new$1 & ~(2)) >> 0;
			}
			/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 5:
				if ((old & 5) === 0) {
					/* break; */ $s = 2; continue;
				}
				queueLifo = !((waitStartTime.$high === 0 && waitStartTime.$low === 0));
				if ((waitStartTime.$high === 0 && waitStartTime.$low === 0)) {
					waitStartTime = runtime_nanotime();
				}
				$r = runtime_SemacquireMutex((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), queueLifo); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				starving = starving || (x = (x$1 = runtime_nanotime(), new $Int64(x$1.$high - waitStartTime.$high, x$1.$low - waitStartTime.$low)), (x.$high > 0 || (x.$high === 0 && x.$low > 1000000)));
				old = m.state;
				if (!(((old & 4) === 0))) {
					if (!(((old & 3) === 0)) || ((old >> 3 >> 0) === 0)) {
						$panic(new $String("sync: inconsistent mutex state"));
					}
					delta = -7;
					if (!starving || ((old >> 3 >> 0) === 1)) {
						delta = delta - (4) >> 0;
					}
					atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), delta);
					/* break; */ $s = 2; continue;
				}
				awoke = true;
				iter = 0;
				$s = 7; continue;
			/* } else { */ case 6:
				old = m.state;
			/* } */ case 7:
		/* } */ $s = 1; continue; case 2:
		if (false) {
			race.Acquire((m));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Lock }; } $f.awoke = awoke; $f.delta = delta; $f.iter = iter; $f.m = m; $f.new$1 = new$1; $f.old = old; $f.queueLifo = queueLifo; $f.starving = starving; $f.waitStartTime = waitStartTime; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, old, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; new$1 = $f.new$1; old = $f.old; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		if (false) {
			$unused(m.state);
			race.Release((m));
		}
		new$1 = atomic.AddInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		/* */ if ((new$1 & 4) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((new$1 & 4) === 0) { */ case 1:
			old = new$1;
			/* while (true) { */ case 4:
				if (((old >> 3 >> 0) === 0) || !(((old & 7) === 0))) {
					$s = -1; return;
				}
				new$1 = ((old - 8 >> 0)) | 2;
				/* */ if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (atomic.CompareAndSwapInt32((m.$ptr_state || (m.$ptr_state = new ptrType$6(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m))), old, new$1)) { */ case 6:
					$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), false); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
				old = m.state;
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = runtime_Semrelease((m.$ptr_sema || (m.$ptr_sema = new ptrType$1(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m))), true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Mutex.ptr.prototype.Unlock }; } $f.m = m; $f.new$1 = new$1; $f.old = old; $f.$s = $s; $f.$r = $r; return $f;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = this;
		if (atomic.LoadUint32((o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)))) === 1) {
			$s = -1; return;
		}
		$r = o.m.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		/* */ if (o.done === 0) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (o.done === 0) { */ case 2:
			$deferred.push([atomic.StoreUint32, [(o.$ptr_done || (o.$ptr_done = new ptrType$1(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o))), 1]]);
			$r = f(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= allPools.$length) ? ($throwRuntimeError("index out of range"), undefined) : allPools.$array[allPools.$offset + i] = ptrType.nil);
			i$1 = 0;
			while (true) {
				if (!(i$1 < ((p.localSize >> 0)))) { break; }
				l = indexLocal(p.local, i$1);
				l.poolLocalInternal.private$0 = $ifaceNil;
				_ref$1 = l.poolLocalInternal.shared;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					j = _i$1;
					(x = l.poolLocalInternal.shared, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j] = $ifaceNil));
					_i$1++;
				}
				l.poolLocalInternal.shared = sliceType$4.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var i, l, lp;
		lp = (((l) + ($imul(((i >>> 0)), 128) >>> 0) >>> 0));
		return ($pointerOfStructConversion(lp, ptrType$7));
	};
	init$1 = function() {
		var n;
		n = new notifyList.ptr(0, 0, 0, 0, 0);
		runtime_notifyListCheck(20);
	};
	runtime_doSpin = function() {
		$throwRuntimeError("native function not implemented: sync.runtime_doSpin");
	};
	RWMutex.ptr.prototype.RLock = function() {
		var rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		/* */ if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1) < 0) { */ case 1:
			$r = runtime_Semacquire((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RLock }; } $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.ReleaseMerge(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1);
		/* */ if (r < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (r < 0) { */ case 1:
			if (((r + 1 >> 0) === 0) || ((r + 1 >> 0) === -1073741824)) {
				race.Enable();
				throw$1("sync: RUnlock of unlocked RWMutex");
			}
			/* */ if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), -1) === 0) { */ case 3:
				$r = runtime_Semrelease((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw))), false); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		/* } */ case 2:
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.RUnlock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Disable();
		}
		$r = rw.w.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), -1073741824) + 1073741824 >> 0;
		/* */ if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === 0)) && !((atomic.AddInt32((rw.$ptr_readerWait || (rw.$ptr_readerWait = new ptrType$6(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw))), r) === 0))) { */ case 2:
			$r = runtime_Semacquire((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		if (false) {
			race.Enable();
			race.Acquire(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Acquire(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Lock }; } $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var i, r, rw, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; i = $f.i; r = $f.r; rw = $f.rw; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rw = this;
		if (false) {
			$unused(rw.w.state);
			race.Release(((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw)))));
			race.Release(((rw.$ptr_writerSem || (rw.$ptr_writerSem = new ptrType$1(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw)))));
			race.Disable();
		}
		r = atomic.AddInt32((rw.$ptr_readerCount || (rw.$ptr_readerCount = new ptrType$6(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw))), 1073741824);
		if (r >= 1073741824) {
			race.Enable();
			throw$1("sync: Unlock of unlocked RWMutex");
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((r >> 0)))) { break; } */ if(!(i < ((r >> 0)))) { $s = 2; continue; }
			$r = runtime_Semrelease((rw.$ptr_readerSem || (rw.$ptr_readerSem = new ptrType$1(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw))), false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = rw.w.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (false) {
			race.Enable();
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RWMutex.ptr.prototype.Unlock }; } $f.i = i; $f.r = r; $f.rw = rw; $f.$s = $s; $f.$r = $r; return $f;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return ($pointerOfStructConversion(rw, ptrType$8));
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.ptr.prototype.Lock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$9)).RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Lock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.ptr.prototype.Unlock = function() {
		var r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = ($pointerOfStructConversion(r, ptrType$9)).RUnlock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rlocker.ptr.prototype.Unlock }; } $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	WaitGroup.ptr.prototype.Done = function() {
		var wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", typ: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", typ: $funcType([], [ptrType$7], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", typ: $funcType([], [ptrType$7], false)}];
	ptrType$12.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Wait", name: "Wait", pkg: "", typ: $funcType([], [], false)}, {prop: "state", name: "state", pkg: "sync", typ: $funcType([], [ptrType$11], false)}, {prop: "Done", name: "Done", pkg: "", typ: $funcType([], [], false)}];
	ptrType$15.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Store", name: "Store", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [], false)}, {prop: "LoadOrStore", name: "LoadOrStore", pkg: "", typ: $funcType([$emptyInterface, $emptyInterface], [$emptyInterface, $Bool], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Range", name: "Range", pkg: "", typ: $funcType([funcType$1], [], false)}, {prop: "missLocked", name: "missLocked", pkg: "sync", typ: $funcType([], [], false)}, {prop: "dirtyLocked", name: "dirtyLocked", pkg: "sync", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "load", name: "load", pkg: "sync", typ: $funcType([], [$emptyInterface, $Bool], false)}, {prop: "tryStore", name: "tryStore", pkg: "sync", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "unexpungeLocked", name: "unexpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "storeLocked", name: "storeLocked", pkg: "sync", typ: $funcType([ptrType$3], [], false)}, {prop: "tryLoadOrStore", name: "tryLoadOrStore", pkg: "sync", typ: $funcType([$emptyInterface], [$emptyInterface, $Bool, $Bool], false)}, {prop: "delete$", name: "delete", pkg: "sync", typ: $funcType([], [$Bool], false)}, {prop: "tryExpungeLocked", name: "tryExpungeLocked", pkg: "sync", typ: $funcType([], [$Bool], false)}];
	ptrType$16.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$17.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$2], [], false)}];
	ptrType$9.methods = [{prop: "RLock", name: "RLock", pkg: "", typ: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", typ: $funcType([], [], false)}, {prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}, {prop: "RLocker", name: "RLocker", pkg: "", typ: $funcType([], [Locker], false)}];
	ptrType$8.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	Pool.init("sync", [{prop: "local", name: "local", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: funcType, tag: ""}]);
	WaitGroup.init("sync", [{prop: "counter", name: "counter", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "ch", name: "ch", anonymous: false, exported: false, typ: chanType$1, tag: ""}, {prop: "state1", name: "state1", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "sema", name: "sema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Map.init("sync", [{prop: "mu", name: "mu", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "read", name: "read", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "dirty", name: "dirty", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "misses", name: "misses", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	readOnly.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "amended", name: "amended", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	entry.init("sync", [{prop: "p", name: "p", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	Mutex.init("sync", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "sema", name: "sema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Locker.init([{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}]);
	Once.init("sync", [{prop: "m", name: "m", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	poolLocalInternal.init("sync", [{prop: "private$0", name: "private", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: Mutex, tag: ""}]);
	poolLocal.init("sync", [{prop: "poolLocalInternal", name: "poolLocalInternal", anonymous: true, exported: false, typ: poolLocalInternal, tag: ""}, {prop: "pad", name: "pad", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	notifyList.init("sync", [{prop: "wait", name: "wait", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "notify", name: "notify", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "lock", name: "lock", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}]);
	RWMutex.init("sync", [{prop: "w", name: "w", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	rlocker.init("sync", [{prop: "w", name: "w", anonymous: false, exported: false, typ: Mutex, tag: ""}, {prop: "writerSem", name: "writerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerSem", name: "readerSem", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "readerCount", name: "readerCount", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "readerWait", name: "readerWait", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		allPools = sliceType.nil;
		semWaiters = {};
		expunged = (new Uint8Array(8));
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, $init, errors, sync, Reader, Writer, ReadCloser, ReaderFrom, WriterTo, ByteReader, RuneReader, RuneScanner, sliceType, errWhence, errOffset, ReadAtLeast, ReadFull, Copy, copyBuffer;
	errors = $packages["errors"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", true, "io", true, null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", true, "io", true, null);
	ReadCloser = $pkg.ReadCloser = $newType(8, $kindInterface, "io.ReadCloser", true, "io", true, null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, $kindInterface, "io.ReaderFrom", true, "io", true, null);
	WriterTo = $pkg.WriterTo = $newType(8, $kindInterface, "io.WriterTo", true, "io", true, null);
	ByteReader = $pkg.ByteReader = $newType(8, $kindInterface, "io.ByteReader", true, "io", true, null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", true, "io", true, null);
	RuneScanner = $pkg.RuneScanner = $newType(8, $kindInterface, "io.RuneScanner", true, "io", true, null);
	sliceType = $sliceType($Uint8);
	ReadAtLeast = function(r, buf, min) {
		var _r, _tmp, _tmp$1, _tuple, buf, err, min, n, nn, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buf = $f.buf; err = $f.err; min = $f.min; n = $f.n; nn = $f.nn; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		if (buf.$length < min) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrShortBuffer;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(n < min && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!(n < min && $interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
			nn = 0;
			_r = r.Read($subslice(buf, n)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			nn = _tuple[0];
			err = _tuple[1];
			n = n + (nn) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadAtLeast }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.min = min; $f.n = n; $f.nn = nn; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadAtLeast = ReadAtLeast;
	ReadFull = function(r, buf) {
		var _r, _tuple, buf, err, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; err = $f.err; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = ReadAtLeast(r, buf, buf.$length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFull }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFull = ReadFull;
	Copy = function(dst, src) {
		var _r, _tuple, dst, err, src, written, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; dst = $f.dst; err = $f.err; src = $f.src; written = $f.written; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_r = copyBuffer(dst, src, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		written = _tuple[0];
		err = _tuple[1];
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f._r = _r; $f._tuple = _tuple; $f.dst = dst; $f.err = err; $f.src = src; $f.written = written; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	copyBuffer = function(dst, src, buf) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, buf, dst, er, err, ew, nr, nw, ok, ok$1, rt, src, written, wt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; buf = $f.buf; dst = $f.dst; er = $f.er; err = $f.err; ew = $f.ew; nr = $f.nr; nw = $f.nw; ok = $f.ok; ok$1 = $f.ok$1; rt = $f.rt; src = $f.src; written = $f.written; wt = $f.wt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		written = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = $assertType(src, WriterTo, true);
		wt = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = wt.WriteTo(dst); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			written = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [written, err];
		/* } */ case 2:
		_tuple$2 = $assertType(dst, ReaderFrom, true);
		rt = _tuple$2[0];
		ok$1 = _tuple$2[1];
		/* */ if (ok$1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (ok$1) { */ case 4:
			_r$1 = rt.ReadFrom(src); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$3 = _r$1;
			written = _tuple$3[0];
			err = _tuple$3[1];
			$s = -1; return [written, err];
		/* } */ case 5:
		if (buf === sliceType.nil) {
			buf = $makeSlice(sliceType, 32768);
		}
		/* while (true) { */ case 7:
			_r$2 = src.Read(buf); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			nr = _tuple$4[0];
			er = _tuple$4[1];
			/* */ if (nr > 0) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (nr > 0) { */ case 10:
				_r$3 = dst.Write($subslice(buf, 0, nr)); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$5 = _r$3;
				nw = _tuple$5[0];
				ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = (new $Int64(0, nw)), new $Int64(written.$high + x.$high, written.$low + x.$low));
				}
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					/* break; */ $s = 8; continue;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					/* break; */ $s = 8; continue;
				}
			/* } */ case 11:
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				if (!($interfaceIsEqual(er, $pkg.EOF))) {
					err = er;
				}
				/* break; */ $s = 8; continue;
			}
		/* } */ $s = 7; continue; case 8:
		_tmp = written;
		_tmp$1 = err;
		written = _tmp;
		err = _tmp$1;
		$s = -1; return [written, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyBuffer }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.buf = buf; $f.dst = dst; $f.er = er; $f.err = err; $f.ew = ew; $f.nr = nr; $f.nw = nw; $f.ok = ok; $f.ok$1 = ok$1; $f.rt = rt; $f.src = src; $f.written = written; $f.wt = wt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReadCloser.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	ReaderFrom.init([{prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([Reader], [$Int64, $error], false)}]);
	WriterTo.init([{prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([Writer], [$Int64, $error], false)}]);
	ByteReader.init([{prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}]);
	RuneScanner.init([{prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, $init, RangeTable, Range16, Range32, CaseRange, d, foldPair, arrayType, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, sliceType$4, _C, _Cc, _Cf, _Co, _Cs, _L, _Ll, _Lm, _Lo, _Lt, _Lu, _M, _Mc, _Me, _Mn, _N, _Nd, _Nl, _No, _P, _Pc, _Pd, _Pe, _Pf, _Pi, _Po, _Ps, _S, _Sc, _Sk, _Sm, _So, _Z, _Zl, _Zp, _Zs, _Adlam, _Ahom, _Anatolian_Hieroglyphs, _Arabic, _Armenian, _Avestan, _Balinese, _Bamum, _Bassa_Vah, _Batak, _Bengali, _Bhaiksuki, _Bopomofo, _Brahmi, _Braille, _Buginese, _Buhid, _Canadian_Aboriginal, _Carian, _Caucasian_Albanian, _Chakma, _Cham, _Cherokee, _Common, _Coptic, _Cuneiform, _Cypriot, _Cyrillic, _Deseret, _Devanagari, _Duployan, _Egyptian_Hieroglyphs, _Elbasan, _Ethiopic, _Georgian, _Glagolitic, _Gothic, _Grantha, _Greek, _Gujarati, _Gurmukhi, _Han, _Hangul, _Hanunoo, _Hatran, _Hebrew, _Hiragana, _Imperial_Aramaic, _Inherited, _Inscriptional_Pahlavi, _Inscriptional_Parthian, _Javanese, _Kaithi, _Kannada, _Katakana, _Kayah_Li, _Kharoshthi, _Khmer, _Khojki, _Khudawadi, _Lao, _Latin, _Lepcha, _Limbu, _Linear_A, _Linear_B, _Lisu, _Lycian, _Lydian, _Mahajani, _Malayalam, _Mandaic, _Manichaean, _Marchen, _Meetei_Mayek, _Mende_Kikakui, _Meroitic_Cursive, _Meroitic_Hieroglyphs, _Miao, _Modi, _Mongolian, _Mro, _Multani, _Myanmar, _Nabataean, _New_Tai_Lue, _Newa, _Nko, _Ogham, _Ol_Chiki, _Old_Hungarian, _Old_Italic, _Old_North_Arabian, _Old_Permic, _Old_Persian, _Old_South_Arabian, _Old_Turkic, _Oriya, _Osage, _Osmanya, _Pahawh_Hmong, _Palmyrene, _Pau_Cin_Hau, _Phags_Pa, _Phoenician, _Psalter_Pahlavi, _Rejang, _Runic, _Samaritan, _Saurashtra, _Sharada, _Shavian, _Siddham, _SignWriting, _Sinhala, _Sora_Sompeng, _Sundanese, _Syloti_Nagri, _Syriac, _Tagalog, _Tagbanwa, _Tai_Le, _Tai_Tham, _Tai_Viet, _Takri, _Tamil, _Tangut, _Telugu, _Thaana, _Thai, _Tibetan, _Tifinagh, _Tirhuta, _Ugaritic, _Vai, _Warang_Citi, _Yi, _CaseRanges, properties, asciiFold, caseOrbit, foldL, foldLl, foldLt, foldLu, foldM, foldMn, foldCommon, foldGreek, foldInherited, to, IsDigit, IsPrint, In, IsLetter, is16, is32, Is, isExcludingLatin, IsUpper, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", true, "unicode", true, function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R16 = sliceType.nil;
			this.R32 = sliceType$1.nil;
			this.LatinOffset = 0;
			return;
		}
		this.R16 = R16_;
		this.R32 = R32_;
		this.LatinOffset = LatinOffset_;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", true, "unicode", true, function(Lo_, Hi_, Stride_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Stride = 0;
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Stride = Stride_;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", true, "unicode", true, function(Lo_, Hi_, Delta_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Lo = 0;
			this.Hi = 0;
			this.Delta = arrayType.zero();
			return;
		}
		this.Lo = Lo_;
		this.Hi = Hi_;
		this.Delta = Delta_;
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", true, "unicode", false, null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", true, "unicode", false, function(From_, To_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			return;
		}
		this.From = From_;
		this.To = To_;
	});
	arrayType = $arrayType($Int32, 3);
	sliceType = $sliceType(Range16);
	sliceType$1 = $sliceType(Range32);
	ptrType = $ptrType(RangeTable);
	sliceType$2 = $sliceType(ptrType);
	sliceType$3 = $sliceType(CaseRange);
	sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var _case, _q, caseRange, cr, delta, hi, lo, m, r, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseRange.$array[caseRange.$offset + m]);
			if (((cr.Lo >> 0)) <= r && r <= ((cr.Hi >> 0))) {
				delta = ((x = cr.Delta, ((_case < 0 || _case >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[_case])));
				if (delta > 1114111) {
					return ((cr.Lo >> 0)) + ((((((r - ((cr.Lo >> 0)) >> 0)) & ~1) >> 0) | (((_case & 1) >> 0)))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < ((cr.Lo >> 0))) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = function(r) {
		var r;
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	$pkg.IsDigit = IsDigit;
	IsPrint = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	$pkg.IsPrint = IsPrint;
	In = function(r, ranges) {
		var _i, _ref, inside, r, ranges;
		_ref = ranges;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			inside = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	$pkg.In = In;
	IsLetter = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return !(((((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	$pkg.IsLetter = IsLetter;
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, r, range_, range_$1, ranges;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? ($throwRuntimeError("index out of range"), undefined) : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = function(rangeTab, r) {
		var r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16(r16, ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	$pkg.Is = Is;
	isExcludingLatin = function(rangeTab, r) {
		var off, r, r16, r32, rangeTab, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= (((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? ($throwRuntimeError("index out of range"), undefined) : r16.$array[r16.$offset + x])).Hi >> 0))) {
			return is16($subslice(r16, off), ((r << 16 >>> 16)));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 >= r32.$length ? ($throwRuntimeError("index out of range"), undefined) : r32.$array[r32.$offset + 0]).Lo >> 0))) {
			return is32(r32, ((r >>> 0)));
		}
		return false;
	};
	IsUpper = function(r) {
		var r, x;
		if (((r >>> 0)) <= 255) {
			return (((x = ((r << 24 >>> 24)), ((x < 0 || x >= properties.length) ? ($throwRuntimeError("index out of range"), undefined) : properties[x])) & 96) >>> 0) === 32;
		}
		return isExcludingLatin($pkg.Upper, r);
	};
	$pkg.IsUpper = IsUpper;
	To = function(_case, r) {
		var _case, r;
		return to(_case, r, $pkg.CaseRanges);
	};
	$pkg.To = To;
	ToUpper = function(r) {
		var r;
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(r) {
		var r;
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	$pkg.ToLower = ToLower;
	SimpleFold = function(r) {
		var _q, hi, l, lo, m, r;
		if (r < 0 || r > 1114111) {
			return r;
		}
		if (((r >> 0)) < 128) {
			return ((((r < 0 || r >= asciiFold.length) ? ($throwRuntimeError("index out of range"), undefined) : asciiFold[r]) >> 0));
		}
		lo = 0;
		hi = caseOrbit.$length;
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((((m < 0 || m >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0)) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && (((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0)) === r)) {
			return ((((lo < 0 || lo >= caseOrbit.$length) ? ($throwRuntimeError("index out of range"), undefined) : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0));
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.SimpleFold = SimpleFold;
	RangeTable.init("", [{prop: "R16", name: "R16", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "R32", name: "R32", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Range16.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Range32.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	CaseRange.init("", [{prop: "Lo", name: "Lo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", anonymous: false, exported: true, typ: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init("", [{prop: "From", name: "From", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "To", name: "To", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_C = new RangeTable.ptr(new sliceType([new Range16.ptr(0, 31, 1), new Range16.ptr(127, 159, 1), new Range16.ptr(173, 1536, 1363), new Range16.ptr(1537, 1541, 1), new Range16.ptr(1564, 1757, 193), new Range16.ptr(1807, 2274, 467), new Range16.ptr(6158, 8203, 2045), new Range16.ptr(8204, 8207, 1), new Range16.ptr(8234, 8238, 1), new Range16.ptr(8288, 8292, 1), new Range16.ptr(8294, 8303, 1), new Range16.ptr(55296, 63743, 1), new Range16.ptr(65279, 65529, 250), new Range16.ptr(65530, 65531, 1)]), new sliceType$1([new Range32.ptr(69821, 113824, 44003), new Range32.ptr(113825, 113827, 1), new Range32.ptr(119155, 119162, 1), new Range32.ptr(917505, 917536, 31), new Range32.ptr(917537, 917631, 1), new Range32.ptr(983040, 1048573, 1), new Range32.ptr(1048576, 1114109, 1)]), 2);
		_Cc = new RangeTable.ptr(new sliceType([new Range16.ptr(0, 31, 1), new Range16.ptr(127, 159, 1)]), sliceType$1.nil, 2);
		_Cf = new RangeTable.ptr(new sliceType([new Range16.ptr(173, 1536, 1363), new Range16.ptr(1537, 1541, 1), new Range16.ptr(1564, 1757, 193), new Range16.ptr(1807, 2274, 467), new Range16.ptr(6158, 8203, 2045), new Range16.ptr(8204, 8207, 1), new Range16.ptr(8234, 8238, 1), new Range16.ptr(8288, 8292, 1), new Range16.ptr(8294, 8303, 1), new Range16.ptr(65279, 65529, 250), new Range16.ptr(65530, 65531, 1)]), new sliceType$1([new Range32.ptr(69821, 113824, 44003), new Range32.ptr(113825, 113827, 1), new Range32.ptr(119155, 119162, 1), new Range32.ptr(917505, 917536, 31), new Range32.ptr(917537, 917631, 1)]), 0);
		_Co = new RangeTable.ptr(new sliceType([new Range16.ptr(57344, 63743, 1)]), new sliceType$1([new Range32.ptr(983040, 1048573, 1), new Range32.ptr(1048576, 1114109, 1)]), 0);
		_Cs = new RangeTable.ptr(new sliceType([new Range16.ptr(55296, 57343, 1)]), sliceType$1.nil, 0);
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43877, 1), new Range16.ptr(43888, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(94176, 94208, 32), new Range32.ptr(94209, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(125184, 125251, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_Ll = new RangeTable.ptr(new sliceType([new Range16.ptr(97, 122, 1), new Range16.ptr(181, 223, 42), new Range16.ptr(224, 246, 1), new Range16.ptr(248, 255, 1), new Range16.ptr(257, 311, 2), new Range16.ptr(312, 328, 2), new Range16.ptr(329, 375, 2), new Range16.ptr(378, 382, 2), new Range16.ptr(383, 384, 1), new Range16.ptr(387, 389, 2), new Range16.ptr(392, 396, 4), new Range16.ptr(397, 402, 5), new Range16.ptr(405, 409, 4), new Range16.ptr(410, 411, 1), new Range16.ptr(414, 417, 3), new Range16.ptr(419, 421, 2), new Range16.ptr(424, 426, 2), new Range16.ptr(427, 429, 2), new Range16.ptr(432, 436, 4), new Range16.ptr(438, 441, 3), new Range16.ptr(442, 445, 3), new Range16.ptr(446, 447, 1), new Range16.ptr(454, 460, 3), new Range16.ptr(462, 476, 2), new Range16.ptr(477, 495, 2), new Range16.ptr(496, 499, 3), new Range16.ptr(501, 505, 4), new Range16.ptr(507, 563, 2), new Range16.ptr(564, 569, 1), new Range16.ptr(572, 575, 3), new Range16.ptr(576, 578, 2), new Range16.ptr(583, 591, 2), new Range16.ptr(592, 659, 1), new Range16.ptr(661, 687, 1), new Range16.ptr(881, 883, 2), new Range16.ptr(887, 891, 4), new Range16.ptr(892, 893, 1), new Range16.ptr(912, 940, 28), new Range16.ptr(941, 974, 1), new Range16.ptr(976, 977, 1), new Range16.ptr(981, 983, 1), new Range16.ptr(985, 1007, 2), new Range16.ptr(1008, 1011, 1), new Range16.ptr(1013, 1019, 3), new Range16.ptr(1020, 1072, 52), new Range16.ptr(1073, 1119, 1), new Range16.ptr(1121, 1153, 2), new Range16.ptr(1163, 1215, 2), new Range16.ptr(1218, 1230, 2), new Range16.ptr(1231, 1327, 2), new Range16.ptr(1377, 1415, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7424, 7467, 1), new Range16.ptr(7531, 7543, 1), new Range16.ptr(7545, 7578, 1), new Range16.ptr(7681, 7829, 2), new Range16.ptr(7830, 7837, 1), new Range16.ptr(7839, 7935, 2), new Range16.ptr(7936, 7943, 1), new Range16.ptr(7952, 7957, 1), new Range16.ptr(7968, 7975, 1), new Range16.ptr(7984, 7991, 1), new Range16.ptr(8000, 8005, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8032, 8039, 1), new Range16.ptr(8048, 8061, 1), new Range16.ptr(8064, 8071, 1), new Range16.ptr(8080, 8087, 1), new Range16.ptr(8096, 8103, 1), new Range16.ptr(8112, 8116, 1), new Range16.ptr(8118, 8119, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8135, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8151, 1), new Range16.ptr(8160, 8167, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8183, 1), new Range16.ptr(8458, 8462, 4), new Range16.ptr(8463, 8467, 4), new Range16.ptr(8495, 8505, 5), new Range16.ptr(8508, 8509, 1), new Range16.ptr(8518, 8521, 1), new Range16.ptr(8526, 8580, 54), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11361, 11365, 4), new Range16.ptr(11366, 11372, 2), new Range16.ptr(11377, 11379, 2), new Range16.ptr(11380, 11382, 2), new Range16.ptr(11383, 11387, 1), new Range16.ptr(11393, 11491, 2), new Range16.ptr(11492, 11500, 8), new Range16.ptr(11502, 11507, 5), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(42561, 42605, 2), new Range16.ptr(42625, 42651, 2), new Range16.ptr(42787, 42799, 2), new Range16.ptr(42800, 42801, 1), new Range16.ptr(42803, 42865, 2), new Range16.ptr(42866, 42872, 1), new Range16.ptr(42874, 42876, 2), new Range16.ptr(42879, 42887, 2), new Range16.ptr(42892, 42894, 2), new Range16.ptr(42897, 42899, 2), new Range16.ptr(42900, 42901, 1), new Range16.ptr(42903, 42921, 2), new Range16.ptr(42933, 42935, 2), new Range16.ptr(43002, 43824, 822), new Range16.ptr(43825, 43866, 1), new Range16.ptr(43872, 43877, 1), new Range16.ptr(43888, 43967, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(65345, 65370, 1)]), new sliceType$1([new Range32.ptr(66600, 66639, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(71872, 71903, 1), new Range32.ptr(119834, 119859, 1), new Range32.ptr(119886, 119892, 1), new Range32.ptr(119894, 119911, 1), new Range32.ptr(119938, 119963, 1), new Range32.ptr(119990, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120015, 1), new Range32.ptr(120042, 120067, 1), new Range32.ptr(120094, 120119, 1), new Range32.ptr(120146, 120171, 1), new Range32.ptr(120198, 120223, 1), new Range32.ptr(120250, 120275, 1), new Range32.ptr(120302, 120327, 1), new Range32.ptr(120354, 120379, 1), new Range32.ptr(120406, 120431, 1), new Range32.ptr(120458, 120485, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120545, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120603, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120661, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120719, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120777, 1), new Range32.ptr(120779, 125218, 4439), new Range32.ptr(125219, 125251, 1)]), 4);
		_Lm = new RangeTable.ptr(new sliceType([new Range16.ptr(688, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(884, 890, 6), new Range16.ptr(1369, 1600, 231), new Range16.ptr(1765, 1766, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2074, 32), new Range16.ptr(2084, 2088, 4), new Range16.ptr(2417, 3654, 1237), new Range16.ptr(3782, 4348, 566), new Range16.ptr(6103, 6211, 108), new Range16.ptr(6823, 7288, 465), new Range16.ptr(7289, 7293, 1), new Range16.ptr(7468, 7530, 1), new Range16.ptr(7544, 7579, 35), new Range16.ptr(7580, 7615, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(11388, 11389, 1), new Range16.ptr(11631, 11823, 192), new Range16.ptr(12293, 12337, 44), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12445, 98), new Range16.ptr(12446, 12540, 94), new Range16.ptr(12541, 12542, 1), new Range16.ptr(40981, 42232, 1251), new Range16.ptr(42233, 42237, 1), new Range16.ptr(42508, 42623, 115), new Range16.ptr(42652, 42653, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42864, 42888, 24), new Range16.ptr(43000, 43001, 1), new Range16.ptr(43471, 43494, 23), new Range16.ptr(43632, 43741, 109), new Range16.ptr(43763, 43764, 1), new Range16.ptr(43868, 43871, 1), new Range16.ptr(65392, 65438, 46), new Range16.ptr(65439, 65439, 1)]), new sliceType$1([new Range32.ptr(92992, 92992, 1), new Range32.ptr(92993, 92995, 1), new Range32.ptr(94099, 94111, 1), new Range32.ptr(94176, 94176, 1)]), 0);
		_Lo = new RangeTable.ptr(new sliceType([new Range16.ptr(170, 186, 16), new Range16.ptr(443, 448, 5), new Range16.ptr(449, 451, 1), new Range16.ptr(660, 1488, 828), new Range16.ptr(1489, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1599, 1), new Range16.ptr(1601, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1774, 25), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2048, 2069, 1), new Range16.ptr(2112, 2136, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2418, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2809, 2821, 12), new Range16.ptr(2822, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3162, 1), new Range16.ptr(3168, 3169, 1), new Range16.ptr(3200, 3205, 5), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3412, 3414, 1), new Range16.ptr(3423, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3653, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3804, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4304, 66), new Range16.ptr(4305, 4346, 1), new Range16.ptr(4349, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6108, 6176, 68), new Range16.ptr(6177, 6210, 1), new Range16.ptr(6212, 6263, 1), new Range16.ptr(6272, 6276, 1), new Range16.ptr(6279, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6917, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7287, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(8501, 8504, 1), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11648, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(12294, 12348, 54), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12447, 12449, 2), new Range16.ptr(12450, 12538, 1), new Range16.ptr(12543, 12549, 6), new Range16.ptr(12550, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(40960, 40980, 1), new Range16.ptr(40982, 42124, 1), new Range16.ptr(42192, 42231, 1), new Range16.ptr(42240, 42507, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42606, 42656, 50), new Range16.ptr(42657, 42725, 1), new Range16.ptr(42895, 42999, 104), new Range16.ptr(43003, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43261, 2), new Range16.ptr(43274, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43488, 43492, 1), new Range16.ptr(43495, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43631, 1), new Range16.ptr(43633, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43740, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43777, 15), new Range16.ptr(43778, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43968, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65382, 65391, 1), new Range16.ptr(65393, 65437, 1), new Range16.ptr(65440, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66640, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70108, 2), new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70282, 2), new Range32.ptr(70283, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70312, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70480, 19), new Range32.ptr(70493, 70497, 1), new Range32.ptr(70656, 70708, 1), new Range32.ptr(70727, 70730, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71128, 71131, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71424, 71449, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72750, 1), new Range32.ptr(72768, 72818, 50), new Range32.ptr(72819, 72847, 1), new Range32.ptr(73728, 74649, 1), new Range32.ptr(74880, 75075, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(82944, 83526, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94208, 176), new Range32.ptr(94209, 100332, 1), new Range32.ptr(100352, 101106, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 1);
		_Lt = new RangeTable.ptr(new sliceType([new Range16.ptr(453, 459, 3), new Range16.ptr(498, 8072, 7574), new Range16.ptr(8073, 8079, 1), new Range16.ptr(8088, 8095, 1), new Range16.ptr(8104, 8111, 1), new Range16.ptr(8124, 8140, 16), new Range16.ptr(8188, 8188, 1)]), sliceType$1.nil, 0);
		_Lu = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 461, 3), new Range16.ptr(463, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 500, 3), new Range16.ptr(502, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(880, 882, 2), new Range16.ptr(886, 895, 9), new Range16.ptr(902, 904, 2), new Range16.ptr(905, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 978, 3), new Range16.ptr(979, 980, 1), new Range16.ptr(984, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8120, 8123, 1), new Range16.ptr(8136, 8139, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8187, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8459, 8461, 1), new Range16.ptr(8464, 8466, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8496, 8499, 1), new Range16.ptr(8510, 8511, 1), new Range16.ptr(8517, 8579, 62), new Range16.ptr(11264, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42926, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1), new Range32.ptr(119808, 119833, 1), new Range32.ptr(119860, 119885, 1), new Range32.ptr(119912, 119937, 1), new Range32.ptr(119964, 119966, 2), new Range32.ptr(119967, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119989, 1), new Range32.ptr(120016, 120041, 1), new Range32.ptr(120068, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120120, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120172, 120197, 1), new Range32.ptr(120224, 120249, 1), new Range32.ptr(120276, 120301, 1), new Range32.ptr(120328, 120353, 1), new Range32.ptr(120380, 120405, 1), new Range32.ptr(120432, 120457, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120546, 120570, 1), new Range32.ptr(120604, 120628, 1), new Range32.ptr(120662, 120686, 1), new Range32.ptr(120720, 120744, 1), new Range32.ptr(120778, 125184, 4406), new Range32.ptr(125185, 125217, 1)]), 3);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3331, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43043, 24), new Range16.ptr(43044, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43205, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70206, 70367, 161), new Range32.ptr(70368, 70378, 1), new Range32.ptr(70400, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70709, 70726, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(72751, 72758, 1), new Range32.ptr(72760, 72767, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_Mc = new RangeTable.ptr(new sliceType([new Range16.ptr(2307, 2363, 56), new Range16.ptr(2366, 2368, 1), new Range16.ptr(2377, 2380, 1), new Range16.ptr(2382, 2383, 1), new Range16.ptr(2434, 2435, 1), new Range16.ptr(2494, 2496, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2508, 1), new Range16.ptr(2519, 2563, 44), new Range16.ptr(2622, 2624, 1), new Range16.ptr(2691, 2750, 59), new Range16.ptr(2751, 2752, 1), new Range16.ptr(2761, 2763, 2), new Range16.ptr(2764, 2818, 54), new Range16.ptr(2819, 2878, 59), new Range16.ptr(2880, 2887, 7), new Range16.ptr(2888, 2891, 3), new Range16.ptr(2892, 2903, 11), new Range16.ptr(3006, 3007, 1), new Range16.ptr(3009, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3020, 1), new Range16.ptr(3031, 3073, 42), new Range16.ptr(3074, 3075, 1), new Range16.ptr(3137, 3140, 1), new Range16.ptr(3202, 3203, 1), new Range16.ptr(3262, 3264, 2), new Range16.ptr(3265, 3268, 1), new Range16.ptr(3271, 3272, 1), new Range16.ptr(3274, 3275, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3330, 3331, 1), new Range16.ptr(3390, 3392, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3404, 1), new Range16.ptr(3415, 3458, 43), new Range16.ptr(3459, 3535, 76), new Range16.ptr(3536, 3537, 1), new Range16.ptr(3544, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3967, 4139, 172), new Range16.ptr(4140, 4145, 5), new Range16.ptr(4152, 4155, 3), new Range16.ptr(4156, 4182, 26), new Range16.ptr(4183, 4194, 11), new Range16.ptr(4195, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4227, 4228, 1), new Range16.ptr(4231, 4236, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4252, 1), new Range16.ptr(6070, 6078, 8), new Range16.ptr(6079, 6085, 1), new Range16.ptr(6087, 6088, 1), new Range16.ptr(6435, 6438, 1), new Range16.ptr(6441, 6443, 1), new Range16.ptr(6448, 6449, 1), new Range16.ptr(6451, 6456, 1), new Range16.ptr(6681, 6682, 1), new Range16.ptr(6741, 6743, 2), new Range16.ptr(6753, 6755, 2), new Range16.ptr(6756, 6765, 9), new Range16.ptr(6766, 6770, 1), new Range16.ptr(6916, 6965, 49), new Range16.ptr(6971, 6973, 2), new Range16.ptr(6974, 6977, 1), new Range16.ptr(6979, 6980, 1), new Range16.ptr(7042, 7073, 31), new Range16.ptr(7078, 7079, 1), new Range16.ptr(7082, 7143, 61), new Range16.ptr(7146, 7148, 1), new Range16.ptr(7150, 7154, 4), new Range16.ptr(7155, 7204, 49), new Range16.ptr(7205, 7211, 1), new Range16.ptr(7220, 7221, 1), new Range16.ptr(7393, 7410, 17), new Range16.ptr(7411, 12334, 4923), new Range16.ptr(12335, 43043, 30708), new Range16.ptr(43044, 43047, 3), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43203, 1), new Range16.ptr(43346, 43347, 1), new Range16.ptr(43395, 43444, 49), new Range16.ptr(43445, 43450, 5), new Range16.ptr(43451, 43453, 2), new Range16.ptr(43454, 43456, 1), new Range16.ptr(43567, 43568, 1), new Range16.ptr(43571, 43572, 1), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43645, 43755, 110), new Range16.ptr(43758, 43759, 1), new Range16.ptr(43765, 44003, 238), new Range16.ptr(44004, 44006, 2), new Range16.ptr(44007, 44009, 2), new Range16.ptr(44010, 44012, 2)]), new sliceType$1([new Range32.ptr(69632, 69634, 2), new Range32.ptr(69762, 69808, 46), new Range32.ptr(69809, 69810, 1), new Range32.ptr(69815, 69816, 1), new Range32.ptr(69932, 70018, 86), new Range32.ptr(70067, 70069, 1), new Range32.ptr(70079, 70080, 1), new Range32.ptr(70188, 70190, 1), new Range32.ptr(70194, 70195, 1), new Range32.ptr(70197, 70368, 171), new Range32.ptr(70369, 70370, 1), new Range32.ptr(70402, 70403, 1), new Range32.ptr(70462, 70463, 1), new Range32.ptr(70465, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70709, 210), new Range32.ptr(70710, 70711, 1), new Range32.ptr(70720, 70721, 1), new Range32.ptr(70725, 70832, 107), new Range32.ptr(70833, 70834, 1), new Range32.ptr(70841, 70843, 2), new Range32.ptr(70844, 70846, 1), new Range32.ptr(70849, 71087, 238), new Range32.ptr(71088, 71089, 1), new Range32.ptr(71096, 71099, 1), new Range32.ptr(71102, 71216, 114), new Range32.ptr(71217, 71218, 1), new Range32.ptr(71227, 71228, 1), new Range32.ptr(71230, 71340, 110), new Range32.ptr(71342, 71343, 1), new Range32.ptr(71350, 71456, 106), new Range32.ptr(71457, 71462, 5), new Range32.ptr(72751, 72766, 15), new Range32.ptr(72873, 72881, 8), new Range32.ptr(72884, 94033, 21149), new Range32.ptr(94034, 94078, 1), new Range32.ptr(119141, 119142, 1), new Range32.ptr(119149, 119154, 1)]), 0);
		_Me = new RangeTable.ptr(new sliceType([new Range16.ptr(1160, 1161, 1), new Range16.ptr(6846, 8413, 1567), new Range16.ptr(8414, 8416, 1), new Range16.ptr(8418, 8420, 1), new Range16.ptr(42608, 42610, 1)]), sliceType$1.nil, 0);
		_Mn = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1159, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2306, 1), new Range16.ptr(2362, 2364, 2), new Range16.ptr(2369, 2376, 1), new Range16.ptr(2381, 2385, 4), new Range16.ptr(2386, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2492, 59), new Range16.ptr(2497, 2500, 1), new Range16.ptr(2509, 2530, 21), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2620, 58), new Range16.ptr(2625, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2690, 1), new Range16.ptr(2748, 2753, 5), new Range16.ptr(2754, 2757, 1), new Range16.ptr(2759, 2760, 1), new Range16.ptr(2765, 2786, 21), new Range16.ptr(2787, 2817, 30), new Range16.ptr(2876, 2879, 3), new Range16.ptr(2881, 2884, 1), new Range16.ptr(2893, 2902, 9), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3008, 62), new Range16.ptr(3021, 3072, 51), new Range16.ptr(3134, 3136, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3260, 59), new Range16.ptr(3263, 3270, 7), new Range16.ptr(3276, 3277, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3393, 64), new Range16.ptr(3394, 3396, 1), new Range16.ptr(3405, 3426, 21), new Range16.ptr(3427, 3530, 103), new Range16.ptr(3538, 3540, 1), new Range16.ptr(3542, 3633, 91), new Range16.ptr(3636, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3953, 3966, 1), new Range16.ptr(3968, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4141, 103), new Range16.ptr(4142, 4144, 1), new Range16.ptr(4146, 4151, 1), new Range16.ptr(4153, 4154, 1), new Range16.ptr(4157, 4158, 1), new Range16.ptr(4184, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4229, 3), new Range16.ptr(4230, 4237, 7), new Range16.ptr(4253, 4957, 704), new Range16.ptr(4958, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6069, 1), new Range16.ptr(6071, 6077, 1), new Range16.ptr(6086, 6089, 3), new Range16.ptr(6090, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6277, 6278, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6434, 1), new Range16.ptr(6439, 6440, 1), new Range16.ptr(6450, 6457, 7), new Range16.ptr(6458, 6459, 1), new Range16.ptr(6679, 6680, 1), new Range16.ptr(6683, 6742, 59), new Range16.ptr(6744, 6750, 1), new Range16.ptr(6752, 6754, 2), new Range16.ptr(6757, 6764, 1), new Range16.ptr(6771, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6845, 1), new Range16.ptr(6912, 6915, 1), new Range16.ptr(6964, 6966, 2), new Range16.ptr(6967, 6970, 1), new Range16.ptr(6972, 6978, 6), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7041, 1), new Range16.ptr(7074, 7077, 1), new Range16.ptr(7080, 7081, 1), new Range16.ptr(7083, 7085, 1), new Range16.ptr(7142, 7144, 2), new Range16.ptr(7145, 7149, 4), new Range16.ptr(7151, 7153, 1), new Range16.ptr(7212, 7219, 1), new Range16.ptr(7222, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7392, 1), new Range16.ptr(7394, 7400, 1), new Range16.ptr(7405, 7412, 7), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8400, 8412, 1), new Range16.ptr(8417, 8421, 4), new Range16.ptr(8422, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12333, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42612, 5), new Range16.ptr(42613, 42621, 1), new Range16.ptr(42654, 42655, 1), new Range16.ptr(42736, 42737, 1), new Range16.ptr(43010, 43014, 4), new Range16.ptr(43019, 43045, 26), new Range16.ptr(43046, 43204, 158), new Range16.ptr(43205, 43232, 27), new Range16.ptr(43233, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43345, 1), new Range16.ptr(43392, 43394, 1), new Range16.ptr(43443, 43446, 3), new Range16.ptr(43447, 43449, 1), new Range16.ptr(43452, 43493, 41), new Range16.ptr(43561, 43566, 1), new Range16.ptr(43569, 43570, 1), new Range16.ptr(43573, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43644, 43696, 52), new Range16.ptr(43698, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43756, 43), new Range16.ptr(43757, 43766, 9), new Range16.ptr(44005, 44008, 3), new Range16.ptr(44013, 64286, 20273), new Range16.ptr(65024, 65039, 1), new Range16.ptr(65056, 65071, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69633, 1307), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69761, 1), new Range32.ptr(69811, 69814, 1), new Range32.ptr(69817, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69931, 1), new Range32.ptr(69933, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70070, 53), new Range32.ptr(70071, 70078, 1), new Range32.ptr(70090, 70092, 1), new Range32.ptr(70191, 70193, 1), new Range32.ptr(70196, 70198, 2), new Range32.ptr(70199, 70206, 7), new Range32.ptr(70367, 70371, 4), new Range32.ptr(70372, 70378, 1), new Range32.ptr(70400, 70401, 1), new Range32.ptr(70460, 70464, 4), new Range32.ptr(70502, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70712, 70719, 1), new Range32.ptr(70722, 70724, 1), new Range32.ptr(70726, 70835, 109), new Range32.ptr(70836, 70840, 1), new Range32.ptr(70842, 70847, 5), new Range32.ptr(70848, 70850, 2), new Range32.ptr(70851, 71090, 239), new Range32.ptr(71091, 71093, 1), new Range32.ptr(71100, 71101, 1), new Range32.ptr(71103, 71104, 1), new Range32.ptr(71132, 71133, 1), new Range32.ptr(71219, 71226, 1), new Range32.ptr(71229, 71231, 2), new Range32.ptr(71232, 71339, 107), new Range32.ptr(71341, 71344, 3), new Range32.ptr(71345, 71349, 1), new Range32.ptr(71351, 71453, 102), new Range32.ptr(71454, 71455, 1), new Range32.ptr(71458, 71461, 1), new Range32.ptr(71463, 71467, 1), new Range32.ptr(72752, 72758, 1), new Range32.ptr(72760, 72765, 1), new Range32.ptr(72767, 72850, 83), new Range32.ptr(72851, 72871, 1), new Range32.ptr(72874, 72880, 1), new Range32.ptr(72882, 72883, 1), new Range32.ptr(72885, 72886, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119143, 119145, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(121344, 121398, 1), new Range32.ptr(121403, 121452, 1), new Range32.ptr(121461, 121476, 15), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1), new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(125252, 125258, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3430, 3448, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71483, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(72784, 72812, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70736, 70745, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71472, 71481, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(72784, 72793, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125264, 125273, 1)]), 1);
		_Nl = new RangeTable.ptr(new sliceType([new Range16.ptr(5870, 5872, 1), new Range16.ptr(8544, 8578, 1), new Range16.ptr(8581, 8584, 1), new Range16.ptr(12295, 12321, 26), new Range16.ptr(12322, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(42726, 42735, 1)]), new sliceType$1([new Range32.ptr(65856, 65908, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(74752, 74862, 1)]), 0);
		_No = new RangeTable.ptr(new sliceType([new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3056, 3058, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3416, 3422, 1), new Range16.ptr(3440, 3448, 1), new Range16.ptr(3882, 3891, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6618, 8304, 1686), new Range16.ptr(8308, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8543, 1), new Range16.ptr(8585, 9312, 727), new Range16.ptr(9313, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12690, 1173), new Range16.ptr(12691, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(43056, 43061, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65909, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67835, 67839, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68028, 68029, 1), new Range32.ptr(68032, 68047, 1), new Range32.ptr(68050, 68095, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(68858, 68863, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69733, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(71482, 71483, 1), new Range32.ptr(71914, 71922, 1), new Range32.ptr(72794, 72812, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(127232, 127244, 1)]), 3);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11844, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 11);
		_Pc = new RangeTable.ptr(new sliceType([new Range16.ptr(95, 8255, 8160), new Range16.ptr(8256, 8276, 20), new Range16.ptr(65075, 65076, 1), new Range16.ptr(65101, 65103, 1), new Range16.ptr(65343, 65343, 1)]), sliceType$1.nil, 0);
		_Pd = new RangeTable.ptr(new sliceType([new Range16.ptr(45, 1418, 1373), new Range16.ptr(1470, 5120, 3650), new Range16.ptr(6150, 8208, 2058), new Range16.ptr(8209, 8213, 1), new Range16.ptr(11799, 11802, 3), new Range16.ptr(11834, 11835, 1), new Range16.ptr(11840, 12316, 476), new Range16.ptr(12336, 12448, 112), new Range16.ptr(65073, 65074, 1), new Range16.ptr(65112, 65123, 11), new Range16.ptr(65293, 65293, 1)]), sliceType$1.nil, 0);
		_Pe = new RangeTable.ptr(new sliceType([new Range16.ptr(41, 93, 52), new Range16.ptr(125, 3899, 3774), new Range16.ptr(3901, 5788, 1887), new Range16.ptr(8262, 8318, 56), new Range16.ptr(8334, 8969, 635), new Range16.ptr(8971, 9002, 31), new Range16.ptr(10089, 10101, 2), new Range16.ptr(10182, 10215, 33), new Range16.ptr(10217, 10223, 2), new Range16.ptr(10628, 10648, 2), new Range16.ptr(10713, 10715, 2), new Range16.ptr(10749, 11811, 1062), new Range16.ptr(11813, 11817, 2), new Range16.ptr(12297, 12305, 2), new Range16.ptr(12309, 12315, 2), new Range16.ptr(12318, 12319, 1), new Range16.ptr(64830, 65048, 218), new Range16.ptr(65078, 65092, 2), new Range16.ptr(65096, 65114, 18), new Range16.ptr(65116, 65118, 2), new Range16.ptr(65289, 65341, 52), new Range16.ptr(65373, 65379, 3)]), sliceType$1.nil, 1);
		_Pf = new RangeTable.ptr(new sliceType([new Range16.ptr(187, 8217, 8030), new Range16.ptr(8221, 8250, 29), new Range16.ptr(11779, 11781, 2), new Range16.ptr(11786, 11789, 3), new Range16.ptr(11805, 11809, 4)]), sliceType$1.nil, 0);
		_Pi = new RangeTable.ptr(new sliceType([new Range16.ptr(171, 8216, 8045), new Range16.ptr(8219, 8220, 1), new Range16.ptr(8223, 8249, 26), new Range16.ptr(11778, 11780, 2), new Range16.ptr(11785, 11788, 3), new Range16.ptr(11804, 11808, 4)]), sliceType$1.nil, 0);
		_Po = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 39, 1), new Range16.ptr(42, 46, 2), new Range16.ptr(47, 58, 11), new Range16.ptr(59, 63, 4), new Range16.ptr(64, 92, 28), new Range16.ptr(161, 167, 6), new Range16.ptr(182, 183, 1), new Range16.ptr(191, 894, 703), new Range16.ptr(903, 1370, 467), new Range16.ptr(1371, 1375, 1), new Range16.ptr(1417, 1472, 55), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3973, 113), new Range16.ptr(4048, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5741, 5742, 1), new Range16.ptr(5867, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6149, 1), new Range16.ptr(6151, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8214, 835), new Range16.ptr(8215, 8224, 9), new Range16.ptr(8225, 8231, 1), new Range16.ptr(8240, 8248, 1), new Range16.ptr(8251, 8254, 1), new Range16.ptr(8257, 8259, 1), new Range16.ptr(8263, 8273, 1), new Range16.ptr(8275, 8277, 2), new Range16.ptr(8278, 8286, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11782, 5), new Range16.ptr(11783, 11784, 1), new Range16.ptr(11787, 11790, 3), new Range16.ptr(11791, 11798, 1), new Range16.ptr(11800, 11801, 1), new Range16.ptr(11803, 11806, 3), new Range16.ptr(11807, 11818, 11), new Range16.ptr(11819, 11822, 1), new Range16.ptr(11824, 11833, 1), new Range16.ptr(11836, 11839, 1), new Range16.ptr(11841, 11843, 2), new Range16.ptr(11844, 12289, 445), new Range16.ptr(12290, 12291, 1), new Range16.ptr(12349, 12539, 190), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43260, 43310, 50), new Range16.ptr(43311, 43359, 48), new Range16.ptr(43457, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 65040, 21029), new Range16.ptr(65041, 65046, 1), new Range16.ptr(65049, 65072, 23), new Range16.ptr(65093, 65094, 1), new Range16.ptr(65097, 65100, 1), new Range16.ptr(65104, 65106, 1), new Range16.ptr(65108, 65111, 1), new Range16.ptr(65119, 65121, 1), new Range16.ptr(65128, 65130, 2), new Range16.ptr(65131, 65281, 150), new Range16.ptr(65282, 65283, 1), new Range16.ptr(65285, 65287, 1), new Range16.ptr(65290, 65294, 2), new Range16.ptr(65295, 65306, 11), new Range16.ptr(65307, 65311, 4), new Range16.ptr(65312, 65340, 28), new Range16.ptr(65377, 65380, 3), new Range16.ptr(65381, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65792, 1), new Range32.ptr(65793, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70089, 1), new Range32.ptr(70093, 70107, 14), new Range32.ptr(70109, 70111, 1), new Range32.ptr(70200, 70205, 1), new Range32.ptr(70313, 70731, 418), new Range32.ptr(70732, 70735, 1), new Range32.ptr(70747, 70749, 2), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71127, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(71264, 71276, 1), new Range32.ptr(71484, 71486, 1), new Range32.ptr(72769, 72773, 1), new Range32.ptr(72816, 72817, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827), new Range32.ptr(121479, 121483, 1), new Range32.ptr(125278, 125279, 1)]), 8);
		_Ps = new RangeTable.ptr(new sliceType([new Range16.ptr(40, 91, 51), new Range16.ptr(123, 3898, 3775), new Range16.ptr(3900, 5787, 1887), new Range16.ptr(8218, 8222, 4), new Range16.ptr(8261, 8317, 56), new Range16.ptr(8333, 8968, 635), new Range16.ptr(8970, 9001, 31), new Range16.ptr(10088, 10100, 2), new Range16.ptr(10181, 10214, 33), new Range16.ptr(10216, 10222, 2), new Range16.ptr(10627, 10647, 2), new Range16.ptr(10712, 10714, 2), new Range16.ptr(10748, 11810, 1062), new Range16.ptr(11812, 11816, 2), new Range16.ptr(11842, 12296, 454), new Range16.ptr(12298, 12304, 2), new Range16.ptr(12308, 12314, 2), new Range16.ptr(12317, 64831, 52514), new Range16.ptr(65047, 65077, 30), new Range16.ptr(65079, 65091, 2), new Range16.ptr(65095, 65113, 18), new Range16.ptr(65115, 65117, 2), new Range16.ptr(65288, 65339, 51), new Range16.ptr(65371, 65375, 4), new Range16.ptr(65378, 65378, 1)]), sliceType$1.nil, 1);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3407, 208), new Range16.ptr(3449, 3647, 198), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8592, 5), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9214, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128722, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128758, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129310, 1), new Range32.ptr(129312, 129319, 1), new Range32.ptr(129328, 129331, 3), new Range32.ptr(129332, 129342, 1), new Range32.ptr(129344, 129355, 1), new Range32.ptr(129360, 129374, 1), new Range32.ptr(129408, 129425, 1), new Range32.ptr(129472, 129472, 1)]), 10);
		_Sc = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 162, 126), new Range16.ptr(163, 165, 1), new Range16.ptr(1423, 1547, 124), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2555, 2801, 246), new Range16.ptr(3065, 3647, 582), new Range16.ptr(6107, 8352, 2245), new Range16.ptr(8353, 8382, 1), new Range16.ptr(43064, 65020, 21956), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65504, 65505, 1), new Range16.ptr(65509, 65510, 1)]), sliceType$1.nil, 2);
		_Sk = new RangeTable.ptr(new sliceType([new Range16.ptr(94, 96, 2), new Range16.ptr(168, 175, 7), new Range16.ptr(180, 184, 4), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 8125, 7224), new Range16.ptr(8127, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43867, 64434, 20567), new Range16.ptr(64435, 64449, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65507, 65507, 1)]), new sliceType$1([new Range32.ptr(127995, 127995, 1), new Range32.ptr(127996, 127999, 1)]), 3);
		_Sm = new RangeTable.ptr(new sliceType([new Range16.ptr(43, 60, 17), new Range16.ptr(61, 62, 1), new Range16.ptr(124, 126, 2), new Range16.ptr(172, 177, 5), new Range16.ptr(215, 247, 32), new Range16.ptr(1014, 1542, 528), new Range16.ptr(1543, 1544, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8472, 8512, 40), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8523, 8592, 69), new Range16.ptr(8593, 8596, 1), new Range16.ptr(8602, 8603, 1), new Range16.ptr(8608, 8614, 3), new Range16.ptr(8622, 8654, 32), new Range16.ptr(8655, 8658, 3), new Range16.ptr(8660, 8692, 32), new Range16.ptr(8693, 8959, 1), new Range16.ptr(8992, 8993, 1), new Range16.ptr(9084, 9115, 31), new Range16.ptr(9116, 9139, 1), new Range16.ptr(9180, 9185, 1), new Range16.ptr(9655, 9665, 10), new Range16.ptr(9720, 9727, 1), new Range16.ptr(9839, 10176, 337), new Range16.ptr(10177, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10239, 1), new Range16.ptr(10496, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11007, 1), new Range16.ptr(11056, 11076, 1), new Range16.ptr(11079, 11084, 1), new Range16.ptr(64297, 65122, 825), new Range16.ptr(65124, 65126, 1), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65506, 65513, 7), new Range16.ptr(65514, 65516, 1)]), new sliceType$1([new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(126704, 126705, 1)]), 5);
		_So = new RangeTable.ptr(new sliceType([new Range16.ptr(166, 169, 3), new Range16.ptr(174, 176, 2), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1550, 128), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2554, 2928, 374), new Range16.ptr(3059, 3064, 1), new Range16.ptr(3066, 3199, 133), new Range16.ptr(3407, 3449, 42), new Range16.ptr(3841, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6464, 6622, 158), new Range16.ptr(6623, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8478, 7), new Range16.ptr(8479, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8522, 15), new Range16.ptr(8524, 8525, 1), new Range16.ptr(8527, 8586, 59), new Range16.ptr(8587, 8597, 10), new Range16.ptr(8598, 8601, 1), new Range16.ptr(8604, 8607, 1), new Range16.ptr(8609, 8610, 1), new Range16.ptr(8612, 8613, 1), new Range16.ptr(8615, 8621, 1), new Range16.ptr(8623, 8653, 1), new Range16.ptr(8656, 8657, 1), new Range16.ptr(8659, 8661, 2), new Range16.ptr(8662, 8691, 1), new Range16.ptr(8960, 8967, 1), new Range16.ptr(8972, 8991, 1), new Range16.ptr(8994, 9000, 1), new Range16.ptr(9003, 9083, 1), new Range16.ptr(9085, 9114, 1), new Range16.ptr(9140, 9179, 1), new Range16.ptr(9186, 9214, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 9654, 1), new Range16.ptr(9656, 9664, 1), new Range16.ptr(9666, 9719, 1), new Range16.ptr(9728, 9838, 1), new Range16.ptr(9840, 10087, 1), new Range16.ptr(10132, 10175, 1), new Range16.ptr(10240, 10495, 1), new Range16.ptr(11008, 11055, 1), new Range16.ptr(11077, 11078, 1), new Range16.ptr(11085, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43063, 1), new Range16.ptr(43065, 43639, 574), new Range16.ptr(43640, 43641, 1), new Range16.ptr(65021, 65508, 487), new Range16.ptr(65512, 65517, 5), new Range16.ptr(65518, 65532, 14), new Range16.ptr(65533, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65847, 1), new Range32.ptr(65848, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65934, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 71487, 3191), new Range32.ptr(92988, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120832, 121343, 1), new Range32.ptr(121399, 121402, 1), new Range32.ptr(121453, 121460, 1), new Range32.ptr(121462, 121475, 1), new Range32.ptr(121477, 121478, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 127994, 1), new Range32.ptr(128000, 128722, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128758, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129310, 1), new Range32.ptr(129312, 129319, 1), new Range32.ptr(129328, 129331, 3), new Range32.ptr(129332, 129342, 1), new Range32.ptr(129344, 129355, 1), new Range32.ptr(129360, 129374, 1), new Range32.ptr(129408, 129425, 1), new Range32.ptr(129472, 129472, 1)]), 2);
		_Z = new RangeTable.ptr(new sliceType([new Range16.ptr(32, 160, 128), new Range16.ptr(5760, 8192, 2432), new Range16.ptr(8193, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8287, 48), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 1);
		_Zl = new RangeTable.ptr(new sliceType([new Range16.ptr(8232, 8232, 1)]), sliceType$1.nil, 0);
		_Zp = new RangeTable.ptr(new sliceType([new Range16.ptr(8233, 8233, 1)]), sliceType$1.nil, 0);
		_Zs = new RangeTable.ptr(new sliceType([new Range16.ptr(32, 160, 128), new Range16.ptr(5760, 8192, 2432), new Range16.ptr(8193, 8202, 1), new Range16.ptr(8239, 8287, 48), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 1);
		$pkg.Cc = _Cc;
		$pkg.Cf = _Cf;
		$pkg.Co = _Co;
		$pkg.Cs = _Cs;
		$pkg.Digit = _Nd;
		$pkg.Nd = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.Lm = _Lm;
		$pkg.Lo = _Lo;
		$pkg.Ll = _Ll;
		$pkg.M = _M;
		$pkg.Mc = _Mc;
		$pkg.Me = _Me;
		$pkg.Mn = _Mn;
		$pkg.Nl = _Nl;
		$pkg.No = _No;
		$pkg.N = _N;
		$pkg.C = _C;
		$pkg.Pc = _Pc;
		$pkg.Pd = _Pd;
		$pkg.Pe = _Pe;
		$pkg.Pf = _Pf;
		$pkg.Pi = _Pi;
		$pkg.Po = _Po;
		$pkg.Ps = _Ps;
		$pkg.P = _P;
		$pkg.Sc = _Sc;
		$pkg.Sk = _Sk;
		$pkg.Sm = _Sm;
		$pkg.So = _So;
		$pkg.Z = _Z;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		$pkg.Lt = _Lt;
		$pkg.Upper = _Lu;
		$pkg.Lu = _Lu;
		$pkg.Zl = _Zl;
		$pkg.Zp = _Zp;
		$pkg.Zs = _Zs;
		$pkg.Categories = $makeMap($String.keyFor, [{ k: "C", v: $pkg.C }, { k: "Cc", v: $pkg.Cc }, { k: "Cf", v: $pkg.Cf }, { k: "Co", v: $pkg.Co }, { k: "Cs", v: $pkg.Cs }, { k: "L", v: $pkg.L }, { k: "Ll", v: $pkg.Ll }, { k: "Lm", v: $pkg.Lm }, { k: "Lo", v: $pkg.Lo }, { k: "Lt", v: $pkg.Lt }, { k: "Lu", v: $pkg.Lu }, { k: "M", v: $pkg.M }, { k: "Mc", v: $pkg.Mc }, { k: "Me", v: $pkg.Me }, { k: "Mn", v: $pkg.Mn }, { k: "N", v: $pkg.N }, { k: "Nd", v: $pkg.Nd }, { k: "Nl", v: $pkg.Nl }, { k: "No", v: $pkg.No }, { k: "P", v: $pkg.P }, { k: "Pc", v: $pkg.Pc }, { k: "Pd", v: $pkg.Pd }, { k: "Pe", v: $pkg.Pe }, { k: "Pf", v: $pkg.Pf }, { k: "Pi", v: $pkg.Pi }, { k: "Po", v: $pkg.Po }, { k: "Ps", v: $pkg.Ps }, { k: "S", v: $pkg.S }, { k: "Sc", v: $pkg.Sc }, { k: "Sk", v: $pkg.Sk }, { k: "Sm", v: $pkg.Sm }, { k: "So", v: $pkg.So }, { k: "Z", v: $pkg.Z }, { k: "Zl", v: $pkg.Zl }, { k: "Zp", v: $pkg.Zp }, { k: "Zs", v: $pkg.Zs }]);
		_Adlam = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(125184, 125258, 1), new Range32.ptr(125264, 125273, 1), new Range32.ptr(125278, 125279, 1)]), 0);
		_Ahom = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71424, 71449, 1), new Range32.ptr(71453, 71467, 1), new Range32.ptr(71472, 71487, 1)]), 0);
		_Anatolian_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(82944, 83526, 1)]), 0);
		_Arabic = new RangeTable.ptr(new sliceType([new Range16.ptr(1536, 1540, 1), new Range16.ptr(1542, 1547, 1), new Range16.ptr(1549, 1562, 1), new Range16.ptr(1566, 1566, 1), new Range16.ptr(1568, 1599, 1), new Range16.ptr(1601, 1610, 1), new Range16.ptr(1622, 1647, 1), new Range16.ptr(1649, 1756, 1), new Range16.ptr(1758, 1791, 1), new Range16.ptr(1872, 1919, 1), new Range16.ptr(2208, 2228, 1), new Range16.ptr(2230, 2237, 1), new Range16.ptr(2260, 2273, 1), new Range16.ptr(2275, 2303, 1), new Range16.ptr(64336, 64449, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65021, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1)]), new sliceType$1([new Range32.ptr(69216, 69246, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126500, 1), new Range32.ptr(126503, 126503, 1), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126521, 1), new Range32.ptr(126523, 126523, 1), new Range32.ptr(126530, 126530, 1), new Range32.ptr(126535, 126535, 1), new Range32.ptr(126537, 126537, 1), new Range32.ptr(126539, 126539, 1), new Range32.ptr(126541, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126548, 1), new Range32.ptr(126551, 126551, 1), new Range32.ptr(126553, 126553, 1), new Range32.ptr(126555, 126555, 1), new Range32.ptr(126557, 126557, 1), new Range32.ptr(126559, 126559, 1), new Range32.ptr(126561, 126562, 1), new Range32.ptr(126564, 126564, 1), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126590, 1), new Range32.ptr(126592, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(126704, 126705, 1)]), 0);
		_Armenian = new RangeTable.ptr(new sliceType([new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1375, 1), new Range16.ptr(1377, 1415, 1), new Range16.ptr(1418, 1418, 1), new Range16.ptr(1421, 1423, 1), new Range16.ptr(64275, 64279, 1)]), sliceType$1.nil, 0);
		_Avestan = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68352, 68405, 1), new Range32.ptr(68409, 68415, 1)]), 0);
		_Balinese = new RangeTable.ptr(new sliceType([new Range16.ptr(6912, 6987, 1), new Range16.ptr(6992, 7036, 1)]), sliceType$1.nil, 0);
		_Bamum = new RangeTable.ptr(new sliceType([new Range16.ptr(42656, 42743, 1)]), new sliceType$1([new Range32.ptr(92160, 92728, 1)]), 0);
		_Bassa_Vah = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(92880, 92909, 1), new Range32.ptr(92912, 92917, 1)]), 0);
		_Batak = new RangeTable.ptr(new sliceType([new Range16.ptr(7104, 7155, 1), new Range16.ptr(7164, 7167, 1)]), sliceType$1.nil, 0);
		_Bengali = new RangeTable.ptr(new sliceType([new Range16.ptr(2432, 2435, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2482, 1), new Range16.ptr(2486, 2489, 1), new Range16.ptr(2492, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2510, 1), new Range16.ptr(2519, 2519, 1), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2531, 1), new Range16.ptr(2534, 2555, 1)]), sliceType$1.nil, 0);
		_Bhaiksuki = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(72704, 72712, 1), new Range32.ptr(72714, 72758, 1), new Range32.ptr(72760, 72773, 1), new Range32.ptr(72784, 72812, 1)]), 0);
		_Bopomofo = new RangeTable.ptr(new sliceType([new Range16.ptr(746, 747, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12704, 12730, 1)]), sliceType$1.nil, 0);
		_Brahmi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69632, 69709, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69759, 69759, 1)]), 0);
		_Braille = new RangeTable.ptr(new sliceType([new Range16.ptr(10240, 10495, 1)]), sliceType$1.nil, 0);
		_Buginese = new RangeTable.ptr(new sliceType([new Range16.ptr(6656, 6683, 1), new Range16.ptr(6686, 6687, 1)]), sliceType$1.nil, 0);
		_Buhid = new RangeTable.ptr(new sliceType([new Range16.ptr(5952, 5971, 1)]), sliceType$1.nil, 0);
		_Canadian_Aboriginal = new RangeTable.ptr(new sliceType([new Range16.ptr(5120, 5759, 1), new Range16.ptr(6320, 6389, 1)]), sliceType$1.nil, 0);
		_Carian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66208, 66256, 1)]), 0);
		_Caucasian_Albanian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66864, 66915, 1), new Range32.ptr(66927, 66927, 1)]), 0);
		_Chakma = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69888, 69940, 1), new Range32.ptr(69942, 69955, 1)]), 0);
		_Cham = new RangeTable.ptr(new sliceType([new Range16.ptr(43520, 43574, 1), new Range16.ptr(43584, 43597, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(43612, 43615, 1)]), sliceType$1.nil, 0);
		_Cherokee = new RangeTable.ptr(new sliceType([new Range16.ptr(5024, 5109, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(43888, 43967, 1)]), sliceType$1.nil, 0);
		_Common = new RangeTable.ptr(new sliceType([new Range16.ptr(0, 64, 1), new Range16.ptr(91, 96, 1), new Range16.ptr(123, 169, 1), new Range16.ptr(171, 185, 1), new Range16.ptr(187, 191, 1), new Range16.ptr(215, 215, 1), new Range16.ptr(247, 247, 1), new Range16.ptr(697, 735, 1), new Range16.ptr(741, 745, 1), new Range16.ptr(748, 767, 1), new Range16.ptr(884, 884, 1), new Range16.ptr(894, 894, 1), new Range16.ptr(901, 901, 1), new Range16.ptr(903, 903, 1), new Range16.ptr(1417, 1417, 1), new Range16.ptr(1541, 1541, 1), new Range16.ptr(1548, 1548, 1), new Range16.ptr(1563, 1564, 1), new Range16.ptr(1567, 1567, 1), new Range16.ptr(1600, 1600, 1), new Range16.ptr(1757, 1757, 1), new Range16.ptr(2274, 2274, 1), new Range16.ptr(2404, 2405, 1), new Range16.ptr(3647, 3647, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4347, 4347, 1), new Range16.ptr(5867, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6146, 6147, 1), new Range16.ptr(6149, 6149, 1), new Range16.ptr(7379, 7379, 1), new Range16.ptr(7393, 7393, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7411, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(8192, 8203, 1), new Range16.ptr(8206, 8292, 1), new Range16.ptr(8294, 8304, 1), new Range16.ptr(8308, 8318, 1), new Range16.ptr(8320, 8334, 1), new Range16.ptr(8352, 8382, 1), new Range16.ptr(8448, 8485, 1), new Range16.ptr(8487, 8489, 1), new Range16.ptr(8492, 8497, 1), new Range16.ptr(8499, 8525, 1), new Range16.ptr(8527, 8543, 1), new Range16.ptr(8585, 8587, 1), new Range16.ptr(8592, 9214, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9312, 10239, 1), new Range16.ptr(10496, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11244, 11247, 1), new Range16.ptr(11776, 11844, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12288, 12292, 1), new Range16.ptr(12294, 12294, 1), new Range16.ptr(12296, 12320, 1), new Range16.ptr(12336, 12343, 1), new Range16.ptr(12348, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12448, 12448, 1), new Range16.ptr(12539, 12540, 1), new Range16.ptr(12688, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12832, 12895, 1), new Range16.ptr(12927, 13007, 1), new Range16.ptr(13144, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42752, 42785, 1), new Range16.ptr(42888, 42890, 1), new Range16.ptr(43056, 43065, 1), new Range16.ptr(43310, 43310, 1), new Range16.ptr(43471, 43471, 1), new Range16.ptr(43867, 43867, 1), new Range16.ptr(64830, 64831, 1), new Range16.ptr(65040, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65126, 1), new Range16.ptr(65128, 65131, 1), new Range16.ptr(65279, 65279, 1), new Range16.ptr(65281, 65312, 1), new Range16.ptr(65339, 65344, 1), new Range16.ptr(65371, 65381, 1), new Range16.ptr(65392, 65392, 1), new Range16.ptr(65438, 65439, 1), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65529, 65533, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(65799, 65843, 1), new Range32.ptr(65847, 65855, 1), new Range32.ptr(65936, 65947, 1), new Range32.ptr(66000, 66044, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(113824, 113827, 1), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119142, 1), new Range32.ptr(119146, 119162, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119272, 1), new Range32.ptr(119552, 119638, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119970, 1), new Range32.ptr(119973, 119974, 1), new Range32.ptr(119977, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119995, 1), new Range32.ptr(119997, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120134, 1), new Range32.ptr(120138, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120779, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127232, 127244, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127404, 1), new Range32.ptr(127462, 127487, 1), new Range32.ptr(127489, 127490, 1), new Range32.ptr(127504, 127547, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 128722, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128758, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1), new Range32.ptr(129296, 129310, 1), new Range32.ptr(129312, 129319, 1), new Range32.ptr(129328, 129328, 1), new Range32.ptr(129331, 129342, 1), new Range32.ptr(129344, 129355, 1), new Range32.ptr(129360, 129374, 1), new Range32.ptr(129408, 129425, 1), new Range32.ptr(129472, 129472, 1), new Range32.ptr(917505, 917505, 1), new Range32.ptr(917536, 917631, 1)]), 7);
		_Coptic = new RangeTable.ptr(new sliceType([new Range16.ptr(994, 1007, 1), new Range16.ptr(11392, 11507, 1), new Range16.ptr(11513, 11519, 1)]), sliceType$1.nil, 0);
		_Cuneiform = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(73728, 74649, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(74880, 75075, 1)]), 0);
		_Cypriot = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67592, 1), new Range32.ptr(67594, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67644, 1), new Range32.ptr(67647, 67647, 1)]), 0);
		_Cyrillic = new RangeTable.ptr(new sliceType([new Range16.ptr(1024, 1156, 1), new Range16.ptr(1159, 1327, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7467, 7467, 1), new Range16.ptr(7544, 7544, 1), new Range16.ptr(11744, 11775, 1), new Range16.ptr(42560, 42655, 1), new Range16.ptr(65070, 65071, 1)]), sliceType$1.nil, 0);
		_Deseret = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66560, 66639, 1)]), 0);
		_Devanagari = new RangeTable.ptr(new sliceType([new Range16.ptr(2304, 2384, 1), new Range16.ptr(2387, 2403, 1), new Range16.ptr(2406, 2431, 1), new Range16.ptr(43232, 43261, 1)]), sliceType$1.nil, 0);
		_Duployan = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(113820, 113823, 1)]), 0);
		_Egyptian_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(77824, 78894, 1)]), 0);
		_Elbasan = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66816, 66855, 1)]), 0);
		_Ethiopic = new RangeTable.ptr(new sliceType([new Range16.ptr(4608, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4696, 1), new Range16.ptr(4698, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4800, 1), new Range16.ptr(4802, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4957, 4988, 1), new Range16.ptr(4992, 5017, 1), new Range16.ptr(11648, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1)]), sliceType$1.nil, 0);
		_Georgian = new RangeTable.ptr(new sliceType([new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4295, 1), new Range16.ptr(4301, 4301, 1), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4351, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11559, 1), new Range16.ptr(11565, 11565, 1)]), sliceType$1.nil, 0);
		_Glagolitic = new RangeTable.ptr(new sliceType([new Range16.ptr(11264, 11310, 1), new Range16.ptr(11312, 11358, 1)]), new sliceType$1([new Range32.ptr(122880, 122886, 1), new Range32.ptr(122888, 122904, 1), new Range32.ptr(122907, 122913, 1), new Range32.ptr(122915, 122916, 1), new Range32.ptr(122918, 122922, 1)]), 0);
		_Gothic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66352, 66378, 1)]), 0);
		_Grantha = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70400, 70403, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70460, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70480, 70480, 1), new Range32.ptr(70487, 70487, 1), new Range32.ptr(70493, 70499, 1), new Range32.ptr(70502, 70508, 1), new Range32.ptr(70512, 70516, 1)]), 0);
		_Greek = new RangeTable.ptr(new sliceType([new Range16.ptr(880, 883, 1), new Range16.ptr(885, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 895, 1), new Range16.ptr(900, 900, 1), new Range16.ptr(902, 902, 1), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 908, 1), new Range16.ptr(910, 929, 1), new Range16.ptr(931, 993, 1), new Range16.ptr(1008, 1023, 1), new Range16.ptr(7462, 7466, 1), new Range16.ptr(7517, 7521, 1), new Range16.ptr(7526, 7530, 1), new Range16.ptr(7615, 7615, 1), new Range16.ptr(7936, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8025, 1), new Range16.ptr(8027, 8027, 1), new Range16.ptr(8029, 8029, 1), new Range16.ptr(8031, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8132, 1), new Range16.ptr(8134, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8157, 8175, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8190, 1), new Range16.ptr(8486, 8486, 1), new Range16.ptr(43877, 43877, 1)]), new sliceType$1([new Range32.ptr(65856, 65934, 1), new Range32.ptr(65952, 65952, 1), new Range32.ptr(119296, 119365, 1)]), 0);
		_Gujarati = new RangeTable.ptr(new sliceType([new Range16.ptr(2689, 2691, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2748, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2768, 2768, 1), new Range16.ptr(2784, 2787, 1), new Range16.ptr(2790, 2801, 1), new Range16.ptr(2809, 2809, 1)]), sliceType$1.nil, 0);
		_Gurmukhi = new RangeTable.ptr(new sliceType([new Range16.ptr(2561, 2563, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2620, 2620, 1), new Range16.ptr(2622, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2641, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2654, 1), new Range16.ptr(2662, 2677, 1)]), sliceType$1.nil, 0);
		_Han = new RangeTable.ptr(new sliceType([new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12293, 12293, 1), new Range16.ptr(12295, 12295, 1), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12347, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40917, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1)]), new sliceType$1([new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(178208, 183969, 1), new Range32.ptr(194560, 195101, 1)]), 0);
		_Hangul = new RangeTable.ptr(new sliceType([new Range16.ptr(4352, 4607, 1), new Range16.ptr(12334, 12335, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12896, 12926, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(65440, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), sliceType$1.nil, 0);
		_Hanunoo = new RangeTable.ptr(new sliceType([new Range16.ptr(5920, 5940, 1)]), sliceType$1.nil, 0);
		_Hatran = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67808, 67826, 1), new Range32.ptr(67828, 67829, 1), new Range32.ptr(67835, 67839, 1)]), 0);
		_Hebrew = new RangeTable.ptr(new sliceType([new Range16.ptr(1425, 1479, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1524, 1), new Range16.ptr(64285, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64318, 1), new Range16.ptr(64320, 64321, 1), new Range16.ptr(64323, 64324, 1), new Range16.ptr(64326, 64335, 1)]), sliceType$1.nil, 0);
		_Hiragana = new RangeTable.ptr(new sliceType([new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1)]), new sliceType$1([new Range32.ptr(110593, 110593, 1), new Range32.ptr(127488, 127488, 1)]), 0);
		_Imperial_Aramaic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67648, 67669, 1), new Range32.ptr(67671, 67679, 1)]), 0);
		_Inherited = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1157, 1158, 1), new Range16.ptr(1611, 1621, 1), new Range16.ptr(1648, 1648, 1), new Range16.ptr(2385, 2386, 1), new Range16.ptr(6832, 6846, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7392, 1), new Range16.ptr(7394, 7400, 1), new Range16.ptr(7405, 7405, 1), new Range16.ptr(7412, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7675, 7679, 1), new Range16.ptr(8204, 8205, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(12330, 12333, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(65024, 65039, 1), new Range16.ptr(65056, 65069, 1)]), new sliceType$1([new Range32.ptr(66045, 66045, 1), new Range32.ptr(66272, 66272, 1), new Range32.ptr(119143, 119145, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_Inscriptional_Pahlavi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68448, 68466, 1), new Range32.ptr(68472, 68479, 1)]), 0);
		_Inscriptional_Parthian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68416, 68437, 1), new Range32.ptr(68440, 68447, 1)]), 0);
		_Javanese = new RangeTable.ptr(new sliceType([new Range16.ptr(43392, 43469, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43486, 43487, 1)]), sliceType$1.nil, 0);
		_Kaithi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69760, 69825, 1)]), 0);
		_Kannada = new RangeTable.ptr(new sliceType([new Range16.ptr(3200, 3203, 1), new Range16.ptr(3205, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3260, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3294, 3294, 1), new Range16.ptr(3296, 3299, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3313, 3314, 1)]), sliceType$1.nil, 0);
		_Katakana = new RangeTable.ptr(new sliceType([new Range16.ptr(12449, 12538, 1), new Range16.ptr(12541, 12543, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13008, 13054, 1), new Range16.ptr(13056, 13143, 1), new Range16.ptr(65382, 65391, 1), new Range16.ptr(65393, 65437, 1)]), new sliceType$1([new Range32.ptr(110592, 110592, 1)]), 0);
		_Kayah_Li = new RangeTable.ptr(new sliceType([new Range16.ptr(43264, 43309, 1), new Range16.ptr(43311, 43311, 1)]), sliceType$1.nil, 0);
		_Kharoshthi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68096, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68167, 1), new Range32.ptr(68176, 68184, 1)]), 0);
		_Khmer = new RangeTable.ptr(new sliceType([new Range16.ptr(6016, 6109, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6624, 6655, 1)]), sliceType$1.nil, 0);
		_Khojki = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70144, 70161, 1), new Range32.ptr(70163, 70206, 1)]), 0);
		_Khudawadi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70320, 70378, 1), new Range32.ptr(70384, 70393, 1)]), 0);
		_Lao = new RangeTable.ptr(new sliceType([new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3716, 1), new Range16.ptr(3719, 3720, 1), new Range16.ptr(3722, 3722, 1), new Range16.ptr(3725, 3725, 1), new Range16.ptr(3732, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3749, 1), new Range16.ptr(3751, 3751, 1), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3769, 1), new Range16.ptr(3771, 3773, 1), new Range16.ptr(3776, 3780, 1), new Range16.ptr(3782, 3782, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3804, 3807, 1)]), sliceType$1.nil, 0);
		_Latin = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 170, 1), new Range16.ptr(186, 186, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 696, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(7424, 7461, 1), new Range16.ptr(7468, 7516, 1), new Range16.ptr(7522, 7525, 1), new Range16.ptr(7531, 7543, 1), new Range16.ptr(7545, 7614, 1), new Range16.ptr(7680, 7935, 1), new Range16.ptr(8305, 8305, 1), new Range16.ptr(8319, 8319, 1), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8490, 8491, 1), new Range16.ptr(8498, 8498, 1), new Range16.ptr(8526, 8526, 1), new Range16.ptr(8544, 8584, 1), new Range16.ptr(11360, 11391, 1), new Range16.ptr(42786, 42887, 1), new Range16.ptr(42891, 42926, 1), new Range16.ptr(42928, 42935, 1), new Range16.ptr(42999, 43007, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43876, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1)]), sliceType$1.nil, 6);
		_Lepcha = new RangeTable.ptr(new sliceType([new Range16.ptr(7168, 7223, 1), new Range16.ptr(7227, 7241, 1), new Range16.ptr(7245, 7247, 1)]), sliceType$1.nil, 0);
		_Limbu = new RangeTable.ptr(new sliceType([new Range16.ptr(6400, 6430, 1), new Range16.ptr(6432, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6464, 6464, 1), new Range16.ptr(6468, 6479, 1)]), sliceType$1.nil, 0);
		_Linear_A = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1)]), 0);
		_Linear_B = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1)]), 0);
		_Lisu = new RangeTable.ptr(new sliceType([new Range16.ptr(42192, 42239, 1)]), sliceType$1.nil, 0);
		_Lycian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66176, 66204, 1)]), 0);
		_Lydian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67872, 67897, 1), new Range32.ptr(67903, 67903, 1)]), 0);
		_Mahajani = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69968, 70006, 1)]), 0);
		_Malayalam = new RangeTable.ptr(new sliceType([new Range16.ptr(3329, 3331, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3407, 1), new Range16.ptr(3412, 3427, 1), new Range16.ptr(3430, 3455, 1)]), sliceType$1.nil, 0);
		_Mandaic = new RangeTable.ptr(new sliceType([new Range16.ptr(2112, 2139, 1), new Range16.ptr(2142, 2142, 1)]), sliceType$1.nil, 0);
		_Manichaean = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68288, 68326, 1), new Range32.ptr(68331, 68342, 1)]), 0);
		_Marchen = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(72816, 72847, 1), new Range32.ptr(72850, 72871, 1), new Range32.ptr(72873, 72886, 1)]), 0);
		_Meetei_Mayek = new RangeTable.ptr(new sliceType([new Range16.ptr(43744, 43766, 1), new Range16.ptr(43968, 44013, 1), new Range16.ptr(44016, 44025, 1)]), sliceType$1.nil, 0);
		_Mende_Kikakui = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(124928, 125124, 1), new Range32.ptr(125127, 125142, 1)]), 0);
		_Meroitic_Cursive = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68000, 68023, 1), new Range32.ptr(68028, 68047, 1), new Range32.ptr(68050, 68095, 1)]), 0);
		_Meroitic_Hieroglyphs = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67968, 67999, 1)]), 0);
		_Miao = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94078, 1), new Range32.ptr(94095, 94111, 1)]), 0);
		_Modi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71168, 71236, 1), new Range32.ptr(71248, 71257, 1)]), 0);
		_Mongolian = new RangeTable.ptr(new sliceType([new Range16.ptr(6144, 6145, 1), new Range16.ptr(6148, 6148, 1), new Range16.ptr(6150, 6158, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6314, 1)]), new sliceType$1([new Range32.ptr(71264, 71276, 1)]), 0);
		_Mro = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(92736, 92766, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(92782, 92783, 1)]), 0);
		_Multani = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70272, 70278, 1), new Range32.ptr(70280, 70280, 1), new Range32.ptr(70282, 70285, 1), new Range32.ptr(70287, 70301, 1), new Range32.ptr(70303, 70313, 1)]), 0);
		_Myanmar = new RangeTable.ptr(new sliceType([new Range16.ptr(4096, 4255, 1), new Range16.ptr(43488, 43518, 1), new Range16.ptr(43616, 43647, 1)]), sliceType$1.nil, 0);
		_Nabataean = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67712, 67742, 1), new Range32.ptr(67751, 67759, 1)]), 0);
		_New_Tai_Lue = new RangeTable.ptr(new sliceType([new Range16.ptr(6528, 6571, 1), new Range16.ptr(6576, 6601, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6622, 6623, 1)]), sliceType$1.nil, 0);
		_Newa = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70656, 70745, 1), new Range32.ptr(70747, 70747, 1), new Range32.ptr(70749, 70749, 1)]), 0);
		_Nko = new RangeTable.ptr(new sliceType([new Range16.ptr(1984, 2042, 1)]), sliceType$1.nil, 0);
		_Ogham = new RangeTable.ptr(new sliceType([new Range16.ptr(5760, 5788, 1)]), sliceType$1.nil, 0);
		_Ol_Chiki = new RangeTable.ptr(new sliceType([new Range16.ptr(7248, 7295, 1)]), sliceType$1.nil, 0);
		_Old_Hungarian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68736, 68786, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(68858, 68863, 1)]), 0);
		_Old_Italic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66304, 66339, 1)]), 0);
		_Old_North_Arabian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68224, 68255, 1)]), 0);
		_Old_Permic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66384, 66426, 1)]), 0);
		_Old_Persian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66517, 1)]), 0);
		_Old_South_Arabian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68192, 68223, 1)]), 0);
		_Old_Turkic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68608, 68680, 1)]), 0);
		_Oriya = new RangeTable.ptr(new sliceType([new Range16.ptr(2817, 2819, 1), new Range16.ptr(2821, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2876, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2908, 2909, 1), new Range16.ptr(2911, 2915, 1), new Range16.ptr(2918, 2935, 1)]), sliceType$1.nil, 0);
		_Osage = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66736, 66771, 1), new Range32.ptr(66776, 66811, 1)]), 0);
		_Osmanya = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66688, 66717, 1), new Range32.ptr(66720, 66729, 1)]), 0);
		_Pahawh_Hmong = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(92928, 92997, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1)]), 0);
		_Palmyrene = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67680, 67711, 1)]), 0);
		_Pau_Cin_Hau = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(72384, 72440, 1)]), 0);
		_Phags_Pa = new RangeTable.ptr(new sliceType([new Range16.ptr(43072, 43127, 1)]), sliceType$1.nil, 0);
		_Phoenician = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(67840, 67867, 1), new Range32.ptr(67871, 67871, 1)]), 0);
		_Psalter_Pahlavi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(68480, 68497, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(68521, 68527, 1)]), 0);
		_Rejang = new RangeTable.ptr(new sliceType([new Range16.ptr(43312, 43347, 1), new Range16.ptr(43359, 43359, 1)]), sliceType$1.nil, 0);
		_Runic = new RangeTable.ptr(new sliceType([new Range16.ptr(5792, 5866, 1), new Range16.ptr(5870, 5880, 1)]), sliceType$1.nil, 0);
		_Samaritan = new RangeTable.ptr(new sliceType([new Range16.ptr(2048, 2093, 1), new Range16.ptr(2096, 2110, 1)]), sliceType$1.nil, 0);
		_Saurashtra = new RangeTable.ptr(new sliceType([new Range16.ptr(43136, 43205, 1), new Range16.ptr(43214, 43225, 1)]), sliceType$1.nil, 0);
		_Sharada = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70016, 70093, 1), new Range32.ptr(70096, 70111, 1)]), 0);
		_Shavian = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66640, 66687, 1)]), 0);
		_Siddham = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71040, 71093, 1), new Range32.ptr(71096, 71133, 1)]), 0);
		_SignWriting = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(120832, 121483, 1), new Range32.ptr(121499, 121503, 1), new Range32.ptr(121505, 121519, 1)]), 0);
		_Sinhala = new RangeTable.ptr(new sliceType([new Range16.ptr(3458, 3459, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3517, 1), new Range16.ptr(3520, 3526, 1), new Range16.ptr(3530, 3530, 1), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3542, 1), new Range16.ptr(3544, 3551, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3570, 3572, 1)]), new sliceType$1([new Range32.ptr(70113, 70132, 1)]), 0);
		_Sora_Sompeng = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(69840, 69864, 1), new Range32.ptr(69872, 69881, 1)]), 0);
		_Sundanese = new RangeTable.ptr(new sliceType([new Range16.ptr(7040, 7103, 1), new Range16.ptr(7360, 7367, 1)]), sliceType$1.nil, 0);
		_Syloti_Nagri = new RangeTable.ptr(new sliceType([new Range16.ptr(43008, 43051, 1)]), sliceType$1.nil, 0);
		_Syriac = new RangeTable.ptr(new sliceType([new Range16.ptr(1792, 1805, 1), new Range16.ptr(1807, 1866, 1), new Range16.ptr(1869, 1871, 1)]), sliceType$1.nil, 0);
		_Tagalog = new RangeTable.ptr(new sliceType([new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5908, 1)]), sliceType$1.nil, 0);
		_Tagbanwa = new RangeTable.ptr(new sliceType([new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6002, 6003, 1)]), sliceType$1.nil, 0);
		_Tai_Le = new RangeTable.ptr(new sliceType([new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1)]), sliceType$1.nil, 0);
		_Tai_Tham = new RangeTable.ptr(new sliceType([new Range16.ptr(6688, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6816, 6829, 1)]), sliceType$1.nil, 0);
		_Tai_Viet = new RangeTable.ptr(new sliceType([new Range16.ptr(43648, 43714, 1), new Range16.ptr(43739, 43743, 1)]), sliceType$1.nil, 0);
		_Takri = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71296, 71351, 1), new Range32.ptr(71360, 71369, 1)]), 0);
		_Tamil = new RangeTable.ptr(new sliceType([new Range16.ptr(2946, 2947, 1), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2972, 1), new Range16.ptr(2974, 2975, 1), new Range16.ptr(2979, 2980, 1), new Range16.ptr(2984, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3006, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3024, 3024, 1), new Range16.ptr(3031, 3031, 1), new Range16.ptr(3046, 3066, 1)]), sliceType$1.nil, 0);
		_Tangut = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(94176, 94176, 1), new Range32.ptr(94208, 100332, 1), new Range32.ptr(100352, 101106, 1)]), 0);
		_Telugu = new RangeTable.ptr(new sliceType([new Range16.ptr(3072, 3075, 1), new Range16.ptr(3077, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3160, 3162, 1), new Range16.ptr(3168, 3171, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3199, 1)]), sliceType$1.nil, 0);
		_Thaana = new RangeTable.ptr(new sliceType([new Range16.ptr(1920, 1969, 1)]), sliceType$1.nil, 0);
		_Thai = new RangeTable.ptr(new sliceType([new Range16.ptr(3585, 3642, 1), new Range16.ptr(3648, 3675, 1)]), sliceType$1.nil, 0);
		_Tibetan = new RangeTable.ptr(new sliceType([new Range16.ptr(3840, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3953, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4030, 4044, 1), new Range16.ptr(4046, 4052, 1), new Range16.ptr(4057, 4058, 1)]), sliceType$1.nil, 0);
		_Tifinagh = new RangeTable.ptr(new sliceType([new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11632, 1), new Range16.ptr(11647, 11647, 1)]), sliceType$1.nil, 0);
		_Tirhuta = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(70784, 70855, 1), new Range32.ptr(70864, 70873, 1)]), 0);
		_Ugaritic = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(66432, 66461, 1), new Range32.ptr(66463, 66463, 1)]), 0);
		_Vai = new RangeTable.ptr(new sliceType([new Range16.ptr(42240, 42539, 1)]), sliceType$1.nil, 0);
		_Warang_Citi = new RangeTable.ptr(new sliceType([]), new sliceType$1([new Range32.ptr(71840, 71922, 1), new Range32.ptr(71935, 71935, 1)]), 0);
		_Yi = new RangeTable.ptr(new sliceType([new Range16.ptr(40960, 42124, 1), new Range16.ptr(42128, 42182, 1)]), sliceType$1.nil, 0);
		$pkg.Adlam = _Adlam;
		$pkg.Ahom = _Ahom;
		$pkg.Anatolian_Hieroglyphs = _Anatolian_Hieroglyphs;
		$pkg.Arabic = _Arabic;
		$pkg.Armenian = _Armenian;
		$pkg.Avestan = _Avestan;
		$pkg.Balinese = _Balinese;
		$pkg.Bamum = _Bamum;
		$pkg.Bassa_Vah = _Bassa_Vah;
		$pkg.Batak = _Batak;
		$pkg.Bengali = _Bengali;
		$pkg.Bhaiksuki = _Bhaiksuki;
		$pkg.Bopomofo = _Bopomofo;
		$pkg.Brahmi = _Brahmi;
		$pkg.Braille = _Braille;
		$pkg.Buginese = _Buginese;
		$pkg.Buhid = _Buhid;
		$pkg.Canadian_Aboriginal = _Canadian_Aboriginal;
		$pkg.Carian = _Carian;
		$pkg.Caucasian_Albanian = _Caucasian_Albanian;
		$pkg.Chakma = _Chakma;
		$pkg.Cham = _Cham;
		$pkg.Cherokee = _Cherokee;
		$pkg.Common = _Common;
		$pkg.Coptic = _Coptic;
		$pkg.Cuneiform = _Cuneiform;
		$pkg.Cypriot = _Cypriot;
		$pkg.Cyrillic = _Cyrillic;
		$pkg.Deseret = _Deseret;
		$pkg.Devanagari = _Devanagari;
		$pkg.Duployan = _Duployan;
		$pkg.Egyptian_Hieroglyphs = _Egyptian_Hieroglyphs;
		$pkg.Elbasan = _Elbasan;
		$pkg.Ethiopic = _Ethiopic;
		$pkg.Georgian = _Georgian;
		$pkg.Glagolitic = _Glagolitic;
		$pkg.Gothic = _Gothic;
		$pkg.Grantha = _Grantha;
		$pkg.Greek = _Greek;
		$pkg.Gujarati = _Gujarati;
		$pkg.Gurmukhi = _Gurmukhi;
		$pkg.Han = _Han;
		$pkg.Hangul = _Hangul;
		$pkg.Hanunoo = _Hanunoo;
		$pkg.Hatran = _Hatran;
		$pkg.Hebrew = _Hebrew;
		$pkg.Hiragana = _Hiragana;
		$pkg.Imperial_Aramaic = _Imperial_Aramaic;
		$pkg.Inherited = _Inherited;
		$pkg.Inscriptional_Pahlavi = _Inscriptional_Pahlavi;
		$pkg.Inscriptional_Parthian = _Inscriptional_Parthian;
		$pkg.Javanese = _Javanese;
		$pkg.Kaithi = _Kaithi;
		$pkg.Kannada = _Kannada;
		$pkg.Katakana = _Katakana;
		$pkg.Kayah_Li = _Kayah_Li;
		$pkg.Kharoshthi = _Kharoshthi;
		$pkg.Khmer = _Khmer;
		$pkg.Khojki = _Khojki;
		$pkg.Khudawadi = _Khudawadi;
		$pkg.Lao = _Lao;
		$pkg.Latin = _Latin;
		$pkg.Lepcha = _Lepcha;
		$pkg.Limbu = _Limbu;
		$pkg.Linear_A = _Linear_A;
		$pkg.Linear_B = _Linear_B;
		$pkg.Lisu = _Lisu;
		$pkg.Lycian = _Lycian;
		$pkg.Lydian = _Lydian;
		$pkg.Mahajani = _Mahajani;
		$pkg.Malayalam = _Malayalam;
		$pkg.Mandaic = _Mandaic;
		$pkg.Manichaean = _Manichaean;
		$pkg.Marchen = _Marchen;
		$pkg.Meetei_Mayek = _Meetei_Mayek;
		$pkg.Mende_Kikakui = _Mende_Kikakui;
		$pkg.Meroitic_Cursive = _Meroitic_Cursive;
		$pkg.Meroitic_Hieroglyphs = _Meroitic_Hieroglyphs;
		$pkg.Miao = _Miao;
		$pkg.Modi = _Modi;
		$pkg.Mongolian = _Mongolian;
		$pkg.Mro = _Mro;
		$pkg.Multani = _Multani;
		$pkg.Myanmar = _Myanmar;
		$pkg.Nabataean = _Nabataean;
		$pkg.New_Tai_Lue = _New_Tai_Lue;
		$pkg.Newa = _Newa;
		$pkg.Nko = _Nko;
		$pkg.Ogham = _Ogham;
		$pkg.Ol_Chiki = _Ol_Chiki;
		$pkg.Old_Hungarian = _Old_Hungarian;
		$pkg.Old_Italic = _Old_Italic;
		$pkg.Old_North_Arabian = _Old_North_Arabian;
		$pkg.Old_Permic = _Old_Permic;
		$pkg.Old_Persian = _Old_Persian;
		$pkg.Old_South_Arabian = _Old_South_Arabian;
		$pkg.Old_Turkic = _Old_Turkic;
		$pkg.Oriya = _Oriya;
		$pkg.Osage = _Osage;
		$pkg.Osmanya = _Osmanya;
		$pkg.Pahawh_Hmong = _Pahawh_Hmong;
		$pkg.Palmyrene = _Palmyrene;
		$pkg.Pau_Cin_Hau = _Pau_Cin_Hau;
		$pkg.Phags_Pa = _Phags_Pa;
		$pkg.Phoenician = _Phoenician;
		$pkg.Psalter_Pahlavi = _Psalter_Pahlavi;
		$pkg.Rejang = _Rejang;
		$pkg.Runic = _Runic;
		$pkg.Samaritan = _Samaritan;
		$pkg.Saurashtra = _Saurashtra;
		$pkg.Sharada = _Sharada;
		$pkg.Shavian = _Shavian;
		$pkg.Siddham = _Siddham;
		$pkg.SignWriting = _SignWriting;
		$pkg.Sinhala = _Sinhala;
		$pkg.Sora_Sompeng = _Sora_Sompeng;
		$pkg.Sundanese = _Sundanese;
		$pkg.Syloti_Nagri = _Syloti_Nagri;
		$pkg.Syriac = _Syriac;
		$pkg.Tagalog = _Tagalog;
		$pkg.Tagbanwa = _Tagbanwa;
		$pkg.Tai_Le = _Tai_Le;
		$pkg.Tai_Tham = _Tai_Tham;
		$pkg.Tai_Viet = _Tai_Viet;
		$pkg.Takri = _Takri;
		$pkg.Tamil = _Tamil;
		$pkg.Tangut = _Tangut;
		$pkg.Telugu = _Telugu;
		$pkg.Thaana = _Thaana;
		$pkg.Thai = _Thai;
		$pkg.Tibetan = _Tibetan;
		$pkg.Tifinagh = _Tifinagh;
		$pkg.Tirhuta = _Tirhuta;
		$pkg.Ugaritic = _Ugaritic;
		$pkg.Vai = _Vai;
		$pkg.Warang_Citi = _Warang_Citi;
		$pkg.Yi = _Yi;
		$pkg.Scripts = $makeMap($String.keyFor, [{ k: "Adlam", v: $pkg.Adlam }, { k: "Ahom", v: $pkg.Ahom }, { k: "Anatolian_Hieroglyphs", v: $pkg.Anatolian_Hieroglyphs }, { k: "Arabic", v: $pkg.Arabic }, { k: "Armenian", v: $pkg.Armenian }, { k: "Avestan", v: $pkg.Avestan }, { k: "Balinese", v: $pkg.Balinese }, { k: "Bamum", v: $pkg.Bamum }, { k: "Bassa_Vah", v: $pkg.Bassa_Vah }, { k: "Batak", v: $pkg.Batak }, { k: "Bengali", v: $pkg.Bengali }, { k: "Bhaiksuki", v: $pkg.Bhaiksuki }, { k: "Bopomofo", v: $pkg.Bopomofo }, { k: "Brahmi", v: $pkg.Brahmi }, { k: "Braille", v: $pkg.Braille }, { k: "Buginese", v: $pkg.Buginese }, { k: "Buhid", v: $pkg.Buhid }, { k: "Canadian_Aboriginal", v: $pkg.Canadian_Aboriginal }, { k: "Carian", v: $pkg.Carian }, { k: "Caucasian_Albanian", v: $pkg.Caucasian_Albanian }, { k: "Chakma", v: $pkg.Chakma }, { k: "Cham", v: $pkg.Cham }, { k: "Cherokee", v: $pkg.Cherokee }, { k: "Common", v: $pkg.Common }, { k: "Coptic", v: $pkg.Coptic }, { k: "Cuneiform", v: $pkg.Cuneiform }, { k: "Cypriot", v: $pkg.Cypriot }, { k: "Cyrillic", v: $pkg.Cyrillic }, { k: "Deseret", v: $pkg.Deseret }, { k: "Devanagari", v: $pkg.Devanagari }, { k: "Duployan", v: $pkg.Duployan }, { k: "Egyptian_Hieroglyphs", v: $pkg.Egyptian_Hieroglyphs }, { k: "Elbasan", v: $pkg.Elbasan }, { k: "Ethiopic", v: $pkg.Ethiopic }, { k: "Georgian", v: $pkg.Georgian }, { k: "Glagolitic", v: $pkg.Glagolitic }, { k: "Gothic", v: $pkg.Gothic }, { k: "Grantha", v: $pkg.Grantha }, { k: "Greek", v: $pkg.Greek }, { k: "Gujarati", v: $pkg.Gujarati }, { k: "Gurmukhi", v: $pkg.Gurmukhi }, { k: "Han", v: $pkg.Han }, { k: "Hangul", v: $pkg.Hangul }, { k: "Hanunoo", v: $pkg.Hanunoo }, { k: "Hatran", v: $pkg.Hatran }, { k: "Hebrew", v: $pkg.Hebrew }, { k: "Hiragana", v: $pkg.Hiragana }, { k: "Imperial_Aramaic", v: $pkg.Imperial_Aramaic }, { k: "Inherited", v: $pkg.Inherited }, { k: "Inscriptional_Pahlavi", v: $pkg.Inscriptional_Pahlavi }, { k: "Inscriptional_Parthian", v: $pkg.Inscriptional_Parthian }, { k: "Javanese", v: $pkg.Javanese }, { k: "Kaithi", v: $pkg.Kaithi }, { k: "Kannada", v: $pkg.Kannada }, { k: "Katakana", v: $pkg.Katakana }, { k: "Kayah_Li", v: $pkg.Kayah_Li }, { k: "Kharoshthi", v: $pkg.Kharoshthi }, { k: "Khmer", v: $pkg.Khmer }, { k: "Khojki", v: $pkg.Khojki }, { k: "Khudawadi", v: $pkg.Khudawadi }, { k: "Lao", v: $pkg.Lao }, { k: "Latin", v: $pkg.Latin }, { k: "Lepcha", v: $pkg.Lepcha }, { k: "Limbu", v: $pkg.Limbu }, { k: "Linear_A", v: $pkg.Linear_A }, { k: "Linear_B", v: $pkg.Linear_B }, { k: "Lisu", v: $pkg.Lisu }, { k: "Lycian", v: $pkg.Lycian }, { k: "Lydian", v: $pkg.Lydian }, { k: "Mahajani", v: $pkg.Mahajani }, { k: "Malayalam", v: $pkg.Malayalam }, { k: "Mandaic", v: $pkg.Mandaic }, { k: "Manichaean", v: $pkg.Manichaean }, { k: "Marchen", v: $pkg.Marchen }, { k: "Meetei_Mayek", v: $pkg.Meetei_Mayek }, { k: "Mende_Kikakui", v: $pkg.Mende_Kikakui }, { k: "Meroitic_Cursive", v: $pkg.Meroitic_Cursive }, { k: "Meroitic_Hieroglyphs", v: $pkg.Meroitic_Hieroglyphs }, { k: "Miao", v: $pkg.Miao }, { k: "Modi", v: $pkg.Modi }, { k: "Mongolian", v: $pkg.Mongolian }, { k: "Mro", v: $pkg.Mro }, { k: "Multani", v: $pkg.Multani }, { k: "Myanmar", v: $pkg.Myanmar }, { k: "Nabataean", v: $pkg.Nabataean }, { k: "New_Tai_Lue", v: $pkg.New_Tai_Lue }, { k: "Newa", v: $pkg.Newa }, { k: "Nko", v: $pkg.Nko }, { k: "Ogham", v: $pkg.Ogham }, { k: "Ol_Chiki", v: $pkg.Ol_Chiki }, { k: "Old_Hungarian", v: $pkg.Old_Hungarian }, { k: "Old_Italic", v: $pkg.Old_Italic }, { k: "Old_North_Arabian", v: $pkg.Old_North_Arabian }, { k: "Old_Permic", v: $pkg.Old_Permic }, { k: "Old_Persian", v: $pkg.Old_Persian }, { k: "Old_South_Arabian", v: $pkg.Old_South_Arabian }, { k: "Old_Turkic", v: $pkg.Old_Turkic }, { k: "Oriya", v: $pkg.Oriya }, { k: "Osage", v: $pkg.Osage }, { k: "Osmanya", v: $pkg.Osmanya }, { k: "Pahawh_Hmong", v: $pkg.Pahawh_Hmong }, { k: "Palmyrene", v: $pkg.Palmyrene }, { k: "Pau_Cin_Hau", v: $pkg.Pau_Cin_Hau }, { k: "Phags_Pa", v: $pkg.Phags_Pa }, { k: "Phoenician", v: $pkg.Phoenician }, { k: "Psalter_Pahlavi", v: $pkg.Psalter_Pahlavi }, { k: "Rejang", v: $pkg.Rejang }, { k: "Runic", v: $pkg.Runic }, { k: "Samaritan", v: $pkg.Samaritan }, { k: "Saurashtra", v: $pkg.Saurashtra }, { k: "Sharada", v: $pkg.Sharada }, { k: "Shavian", v: $pkg.Shavian }, { k: "Siddham", v: $pkg.Siddham }, { k: "SignWriting", v: $pkg.SignWriting }, { k: "Sinhala", v: $pkg.Sinhala }, { k: "Sora_Sompeng", v: $pkg.Sora_Sompeng }, { k: "Sundanese", v: $pkg.Sundanese }, { k: "Syloti_Nagri", v: $pkg.Syloti_Nagri }, { k: "Syriac", v: $pkg.Syriac }, { k: "Tagalog", v: $pkg.Tagalog }, { k: "Tagbanwa", v: $pkg.Tagbanwa }, { k: "Tai_Le", v: $pkg.Tai_Le }, { k: "Tai_Tham", v: $pkg.Tai_Tham }, { k: "Tai_Viet", v: $pkg.Tai_Viet }, { k: "Takri", v: $pkg.Takri }, { k: "Tamil", v: $pkg.Tamil }, { k: "Tangut", v: $pkg.Tangut }, { k: "Telugu", v: $pkg.Telugu }, { k: "Thaana", v: $pkg.Thaana }, { k: "Thai", v: $pkg.Thai }, { k: "Tibetan", v: $pkg.Tibetan }, { k: "Tifinagh", v: $pkg.Tifinagh }, { k: "Tirhuta", v: $pkg.Tirhuta }, { k: "Ugaritic", v: $pkg.Ugaritic }, { k: "Vai", v: $pkg.Vai }, { k: "Warang_Citi", v: $pkg.Warang_Citi }, { k: "Yi", v: $pkg.Yi }]);
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(618, 618, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(669, 669, $toNativeArray($kindInt32, [42261, 0, 42261])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(5024, 5103, $toNativeArray($kindInt32, [0, 38864, 0])), new CaseRange.ptr(5104, 5109, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(5112, 5117, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(7296, 7296, $toNativeArray($kindInt32, [-6254, 0, -6254])), new CaseRange.ptr(7297, 7297, $toNativeArray($kindInt32, [-6253, 0, -6253])), new CaseRange.ptr(7298, 7298, $toNativeArray($kindInt32, [-6244, 0, -6244])), new CaseRange.ptr(7299, 7300, $toNativeArray($kindInt32, [-6242, 0, -6242])), new CaseRange.ptr(7301, 7301, $toNativeArray($kindInt32, [-6243, 0, -6243])), new CaseRange.ptr(7302, 7302, $toNativeArray($kindInt32, [-6236, 0, -6236])), new CaseRange.ptr(7303, 7303, $toNativeArray($kindInt32, [-6181, 0, -6181])), new CaseRange.ptr(7304, 7304, $toNativeArray($kindInt32, [35266, 0, 35266])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42926, 42926, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(42930, 42930, $toNativeArray($kindInt32, [0, -42261, 0])), new CaseRange.ptr(42931, 42931, $toNativeArray($kindInt32, [0, 928, 0])), new CaseRange.ptr(42932, 42935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(43859, 43859, $toNativeArray($kindInt32, [-928, 0, -928])), new CaseRange.ptr(43888, 43967, $toNativeArray($kindInt32, [-38864, 0, -38864])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(66736, 66771, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66776, 66811, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(68736, 68786, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(68800, 68850, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(125184, 125217, $toNativeArray($kindInt32, [0, 34, 0])), new CaseRange.ptr(125218, 125251, $toNativeArray($kindInt32, [-34, 0, -34]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		asciiFold = $toNativeArray($kindUint16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 8490, 76, 77, 78, 79, 80, 81, 82, 383, 84, 85, 86, 87, 88, 89, 90, 123, 124, 125, 126, 127]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(1042, 1074), new foldPair.ptr(1044, 1076), new foldPair.ptr(1054, 1086), new foldPair.ptr(1057, 1089), new foldPair.ptr(1058, 1090), new foldPair.ptr(1066, 1098), new foldPair.ptr(1074, 7296), new foldPair.ptr(1076, 7297), new foldPair.ptr(1086, 7298), new foldPair.ptr(1089, 7299), new foldPair.ptr(1090, 7300), new foldPair.ptr(1098, 7302), new foldPair.ptr(1122, 1123), new foldPair.ptr(1123, 7303), new foldPair.ptr(7296, 1042), new foldPair.ptr(7297, 1044), new foldPair.ptr(7298, 1054), new foldPair.ptr(7299, 1057), new foldPair.ptr(7300, 7301), new foldPair.ptr(7301, 1058), new foldPair.ptr(7302, 1066), new foldPair.ptr(7303, 1122), new foldPair.ptr(7304, 42570), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197), new foldPair.ptr(42570, 42571), new foldPair.ptr(42571, 7304)]);
		foldL = new RangeTable.ptr(new sliceType([new Range16.ptr(837, 837, 1)]), sliceType$1.nil, 0);
		foldLl = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(192, 214, 1), new Range16.ptr(216, 222, 1), new Range16.ptr(256, 302, 2), new Range16.ptr(306, 310, 2), new Range16.ptr(313, 327, 2), new Range16.ptr(330, 376, 2), new Range16.ptr(377, 381, 2), new Range16.ptr(385, 386, 1), new Range16.ptr(388, 390, 2), new Range16.ptr(391, 393, 2), new Range16.ptr(394, 395, 1), new Range16.ptr(398, 401, 1), new Range16.ptr(403, 404, 1), new Range16.ptr(406, 408, 1), new Range16.ptr(412, 413, 1), new Range16.ptr(415, 416, 1), new Range16.ptr(418, 422, 2), new Range16.ptr(423, 425, 2), new Range16.ptr(428, 430, 2), new Range16.ptr(431, 433, 2), new Range16.ptr(434, 435, 1), new Range16.ptr(437, 439, 2), new Range16.ptr(440, 444, 4), new Range16.ptr(452, 453, 1), new Range16.ptr(455, 456, 1), new Range16.ptr(458, 459, 1), new Range16.ptr(461, 475, 2), new Range16.ptr(478, 494, 2), new Range16.ptr(497, 498, 1), new Range16.ptr(500, 502, 2), new Range16.ptr(503, 504, 1), new Range16.ptr(506, 562, 2), new Range16.ptr(570, 571, 1), new Range16.ptr(573, 574, 1), new Range16.ptr(577, 579, 2), new Range16.ptr(580, 582, 1), new Range16.ptr(584, 590, 2), new Range16.ptr(837, 880, 43), new Range16.ptr(882, 886, 4), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 913, 2), new Range16.ptr(914, 929, 1), new Range16.ptr(931, 939, 1), new Range16.ptr(975, 984, 9), new Range16.ptr(986, 1006, 2), new Range16.ptr(1012, 1015, 3), new Range16.ptr(1017, 1018, 1), new Range16.ptr(1021, 1071, 1), new Range16.ptr(1120, 1152, 2), new Range16.ptr(1162, 1216, 2), new Range16.ptr(1217, 1229, 2), new Range16.ptr(1232, 1326, 2), new Range16.ptr(1329, 1366, 1), new Range16.ptr(4256, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(5024, 5109, 1), new Range16.ptr(7680, 7828, 2), new Range16.ptr(7838, 7934, 2), new Range16.ptr(7944, 7951, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7976, 7983, 1), new Range16.ptr(7992, 7999, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8040, 8047, 1), new Range16.ptr(8072, 8079, 1), new Range16.ptr(8088, 8095, 1), new Range16.ptr(8104, 8111, 1), new Range16.ptr(8120, 8124, 1), new Range16.ptr(8136, 8140, 1), new Range16.ptr(8152, 8155, 1), new Range16.ptr(8168, 8172, 1), new Range16.ptr(8184, 8188, 1), new Range16.ptr(8486, 8490, 4), new Range16.ptr(8491, 8498, 7), new Range16.ptr(8579, 11264, 2685), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11360, 11362, 2), new Range16.ptr(11363, 11364, 1), new Range16.ptr(11367, 11373, 2), new Range16.ptr(11374, 11376, 1), new Range16.ptr(11378, 11381, 3), new Range16.ptr(11390, 11392, 1), new Range16.ptr(11394, 11490, 2), new Range16.ptr(11499, 11501, 2), new Range16.ptr(11506, 42560, 31054), new Range16.ptr(42562, 42604, 2), new Range16.ptr(42624, 42650, 2), new Range16.ptr(42786, 42798, 2), new Range16.ptr(42802, 42862, 2), new Range16.ptr(42873, 42877, 2), new Range16.ptr(42878, 42886, 2), new Range16.ptr(42891, 42893, 2), new Range16.ptr(42896, 42898, 2), new Range16.ptr(42902, 42922, 2), new Range16.ptr(42923, 42926, 1), new Range16.ptr(42928, 42932, 1), new Range16.ptr(42934, 65313, 22379), new Range16.ptr(65314, 65338, 1)]), new sliceType$1([new Range32.ptr(66560, 66599, 1), new Range32.ptr(66736, 66771, 1), new Range32.ptr(68736, 68786, 1), new Range32.ptr(71840, 71871, 1), new Range32.ptr(125184, 125217, 1)]), 3);
		foldLt = new RangeTable.ptr(new sliceType([new Range16.ptr(452, 454, 2), new Range16.ptr(455, 457, 2), new Range16.ptr(458, 460, 2), new Range16.ptr(497, 499, 2), new Range16.ptr(8064, 8071, 1), new Range16.ptr(8080, 8087, 1), new Range16.ptr(8096, 8103, 1), new Range16.ptr(8115, 8131, 16), new Range16.ptr(8179, 8179, 1)]), sliceType$1.nil, 0);
		foldLu = new RangeTable.ptr(new sliceType([new Range16.ptr(97, 122, 1), new Range16.ptr(181, 223, 42), new Range16.ptr(224, 246, 1), new Range16.ptr(248, 255, 1), new Range16.ptr(257, 303, 2), new Range16.ptr(307, 311, 2), new Range16.ptr(314, 328, 2), new Range16.ptr(331, 375, 2), new Range16.ptr(378, 382, 2), new Range16.ptr(383, 384, 1), new Range16.ptr(387, 389, 2), new Range16.ptr(392, 396, 4), new Range16.ptr(402, 405, 3), new Range16.ptr(409, 410, 1), new Range16.ptr(414, 417, 3), new Range16.ptr(419, 421, 2), new Range16.ptr(424, 429, 5), new Range16.ptr(432, 436, 4), new Range16.ptr(438, 441, 3), new Range16.ptr(445, 447, 2), new Range16.ptr(453, 454, 1), new Range16.ptr(456, 457, 1), new Range16.ptr(459, 460, 1), new Range16.ptr(462, 476, 2), new Range16.ptr(477, 495, 2), new Range16.ptr(498, 499, 1), new Range16.ptr(501, 505, 4), new Range16.ptr(507, 543, 2), new Range16.ptr(547, 563, 2), new Range16.ptr(572, 575, 3), new Range16.ptr(576, 578, 2), new Range16.ptr(583, 591, 2), new Range16.ptr(592, 596, 1), new Range16.ptr(598, 599, 1), new Range16.ptr(601, 603, 2), new Range16.ptr(604, 608, 4), new Range16.ptr(609, 613, 2), new Range16.ptr(614, 616, 2), new Range16.ptr(617, 620, 1), new Range16.ptr(623, 625, 2), new Range16.ptr(626, 629, 3), new Range16.ptr(637, 643, 3), new Range16.ptr(647, 652, 1), new Range16.ptr(658, 669, 11), new Range16.ptr(670, 837, 167), new Range16.ptr(881, 883, 2), new Range16.ptr(887, 891, 4), new Range16.ptr(892, 893, 1), new Range16.ptr(940, 943, 1), new Range16.ptr(945, 974, 1), new Range16.ptr(976, 977, 1), new Range16.ptr(981, 983, 1), new Range16.ptr(985, 1007, 2), new Range16.ptr(1008, 1011, 1), new Range16.ptr(1013, 1019, 3), new Range16.ptr(1072, 1119, 1), new Range16.ptr(1121, 1153, 2), new Range16.ptr(1163, 1215, 2), new Range16.ptr(1218, 1230, 2), new Range16.ptr(1231, 1327, 2), new Range16.ptr(1377, 1414, 1), new Range16.ptr(5112, 5117, 1), new Range16.ptr(7296, 7304, 1), new Range16.ptr(7545, 7549, 4), new Range16.ptr(7681, 7829, 2), new Range16.ptr(7835, 7841, 6), new Range16.ptr(7843, 7935, 2), new Range16.ptr(7936, 7943, 1), new Range16.ptr(7952, 7957, 1), new Range16.ptr(7968, 7975, 1), new Range16.ptr(7984, 7991, 1), new Range16.ptr(8000, 8005, 1), new Range16.ptr(8017, 8023, 2), new Range16.ptr(8032, 8039, 1), new Range16.ptr(8048, 8061, 1), new Range16.ptr(8112, 8113, 1), new Range16.ptr(8126, 8144, 18), new Range16.ptr(8145, 8160, 15), new Range16.ptr(8161, 8165, 4), new Range16.ptr(8526, 8580, 54), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11361, 11365, 4), new Range16.ptr(11366, 11372, 2), new Range16.ptr(11379, 11382, 3), new Range16.ptr(11393, 11491, 2), new Range16.ptr(11500, 11502, 2), new Range16.ptr(11507, 11520, 13), new Range16.ptr(11521, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(42561, 42605, 2), new Range16.ptr(42625, 42651, 2), new Range16.ptr(42787, 42799, 2), new Range16.ptr(42803, 42863, 2), new Range16.ptr(42874, 42876, 2), new Range16.ptr(42879, 42887, 2), new Range16.ptr(42892, 42897, 5), new Range16.ptr(42899, 42903, 4), new Range16.ptr(42905, 42921, 2), new Range16.ptr(42933, 42935, 2), new Range16.ptr(43859, 43888, 29), new Range16.ptr(43889, 43967, 1), new Range16.ptr(65345, 65370, 1)]), new sliceType$1([new Range32.ptr(66600, 66639, 1), new Range32.ptr(66776, 66811, 1), new Range32.ptr(68800, 68850, 1), new Range32.ptr(71872, 71903, 1), new Range32.ptr(125218, 125251, 1)]), 4);
		foldM = new RangeTable.ptr(new sliceType([new Range16.ptr(921, 953, 32), new Range16.ptr(8126, 8126, 1)]), sliceType$1.nil, 0);
		foldMn = new RangeTable.ptr(new sliceType([new Range16.ptr(921, 953, 32), new Range16.ptr(8126, 8126, 1)]), sliceType$1.nil, 0);
		$pkg.FoldCategory = $makeMap($String.keyFor, [{ k: "L", v: foldL }, { k: "Ll", v: foldLl }, { k: "Lt", v: foldLt }, { k: "Lu", v: foldLu }, { k: "M", v: foldM }, { k: "Mn", v: foldMn }]);
		foldCommon = new RangeTable.ptr(new sliceType([new Range16.ptr(924, 956, 32)]), sliceType$1.nil, 0);
		foldGreek = new RangeTable.ptr(new sliceType([new Range16.ptr(181, 837, 656)]), sliceType$1.nil, 0);
		foldInherited = new RangeTable.ptr(new sliceType([new Range16.ptr(921, 953, 32), new Range16.ptr(8126, 8126, 1)]), sliceType$1.nil, 0);
		$pkg.FoldScript = $makeMap($String.keyFor, [{ k: "Common", v: foldCommon }, { k: "Greek", v: foldGreek }, { k: "Inherited", v: foldInherited }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, $init, acceptRange, first, acceptRanges, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart, ValidRune;
	acceptRange = $pkg.acceptRange = $newType(0, $kindStruct, "utf8.acceptRange", true, "unicode/utf8", false, function(lo_, hi_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lo = 0;
			this.hi = 0;
			return;
		}
		this.lo = lo_;
		this.hi = hi_;
	});
	FullRune = function(p) {
		var accept, c, n, p, x, x$1, x$2;
		n = p.$length;
		if (n === 0) {
			return false;
		}
		x$1 = (x = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), ((x < 0 || x >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[x]));
		if (n >= ((((x$1 & 7) >>> 0) >> 0))) {
			return true;
		}
		accept = $clone((x$2 = x$1 >>> 4 << 24 >>> 24, ((x$2 < 0 || x$2 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$2])), acceptRange);
		if (n > 1) {
			c = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
			if (c < accept.lo || accept.hi < c) {
				return true;
			} else if (n > 2 && ((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) < 128 || 191 < (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]))) {
				return true;
			}
		}
		return false;
	};
	$pkg.FullRune = FullRune;
	DecodeRune = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, b1, b2, b3, mask, n, p, p0, r, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		p0 = (0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]);
		x = ((p0 < 0 || p0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[p0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = (((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		b1 = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]);
		if (b1 < accept.lo || accept.hi < b1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((p0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((b1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		b2 = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]);
		if (b2 < 128 || 191 < b2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((p0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		b3 = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]);
		if (b3 < 128 || 191 < b3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((p0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((b1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((b2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((b3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRune = DecodeRune;
	DecodeRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, accept, mask, n, r, s, s0, s1, s2, s3, size, sz, x, x$1;
		r = 0;
		size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		s0 = s.charCodeAt(0);
		x = ((s0 < 0 || s0 >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[s0]);
		if (x >= 240) {
			mask = (((x >> 0)) << 31 >> 0) >> 31 >> 0;
			_tmp$2 = ((((s.charCodeAt(0) >> 0)) & ~mask) >> 0) | (65533 & mask);
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		sz = (x & 7) >>> 0;
		accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
		if (n < ((sz >> 0))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		s1 = s.charCodeAt(1);
		if (s1 < accept.lo || accept.hi < s1) {
			_tmp$6 = 65533;
			_tmp$7 = 1;
			r = _tmp$6;
			size = _tmp$7;
			return [r, size];
		}
		if (sz === 2) {
			_tmp$8 = (((((s0 & 31) >>> 0) >> 0)) << 6 >> 0) | ((((s1 & 63) >>> 0) >> 0));
			_tmp$9 = 2;
			r = _tmp$8;
			size = _tmp$9;
			return [r, size];
		}
		s2 = s.charCodeAt(2);
		if (s2 < 128 || 191 < s2) {
			_tmp$10 = 65533;
			_tmp$11 = 1;
			r = _tmp$10;
			size = _tmp$11;
			return [r, size];
		}
		if (sz === 3) {
			_tmp$12 = ((((((s0 & 15) >>> 0) >> 0)) << 12 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s2 & 63) >>> 0) >> 0));
			_tmp$13 = 3;
			r = _tmp$12;
			size = _tmp$13;
			return [r, size];
		}
		s3 = s.charCodeAt(3);
		if (s3 < 128 || 191 < s3) {
			_tmp$14 = 65533;
			_tmp$15 = 1;
			r = _tmp$14;
			size = _tmp$15;
			return [r, size];
		}
		_tmp$16 = (((((((s0 & 7) >>> 0) >> 0)) << 18 >> 0) | (((((s1 & 63) >>> 0) >> 0)) << 12 >> 0)) | (((((s2 & 63) >>> 0) >> 0)) << 6 >> 0)) | ((((s3 & 63) >>> 0) >> 0));
		_tmp$17 = 4;
		r = _tmp$16;
		size = _tmp$17;
		return [r, size];
	};
	$pkg.DecodeRuneInString = DecodeRuneInString;
	DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, p, r, size, start;
		r = 0;
		size = 0;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(((start < 0 || start >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRune = DecodeLastRune;
	DecodeLastRuneInString = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r, s, size, start;
		r = 0;
		size = 0;
		end = s.length;
		if (end === 0) {
			_tmp = 65533;
			_tmp$1 = 0;
			r = _tmp;
			size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((s.charCodeAt(start) >> 0));
		if (r < 128) {
			_tmp$2 = r;
			_tmp$3 = 1;
			r = _tmp$2;
			size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (true) {
			if (!(start >= lim)) { break; }
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString($substring(s, start, end));
		r = _tuple[0];
		size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533;
			_tmp$5 = 1;
			r = _tmp$4;
			size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r;
		_tmp$7 = size;
		r = _tmp$6;
		size = _tmp$7;
		return [r, size];
	};
	$pkg.DecodeLastRuneInString = DecodeLastRuneInString;
	RuneLen = function(r) {
		var r;
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	$pkg.RuneLen = RuneLen;
	EncodeRune = function(p, r) {
		var i, p, r;
		i = ((r >>> 0));
		if (i <= 127) {
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((r << 24 >>> 24)));
			return 1;
		} else if (i <= 2047) {
			$unused((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((192 | (((r >> 6 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 2;
		} else if ((i > 1114111) || (55296 <= i && i <= 57343)) {
			r = 65533;
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else if (i <= 65535) {
			$unused((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((224 | (((r >> 12 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 3;
		} else {
			$unused((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]));
			(0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0] = ((240 | (((r >> 18 >> 0) << 24 >>> 24))) >>> 0));
			(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1] = ((128 | (((((r >> 12 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2] = ((128 | (((((r >> 6 >> 0) << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3] = ((128 | ((((r << 24 >>> 24)) & 63) >>> 0)) >>> 0));
			return 4;
		}
	};
	$pkg.EncodeRune = EncodeRune;
	RuneCount = function(p) {
		var accept, c, c$1, c$2, c$3, i, n, np, p, size, x, x$1, x$2, x$3, x$4;
		np = p.$length;
		n = 0;
		i = 0;
		while (true) {
			if (!(i < np)) { break; }
			n = n + (1) >> 0;
			c = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (c < 128) {
				i = i + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > np) {
				i = i + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = (x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2]));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = (x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4]));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
		}
		return n;
	};
	$pkg.RuneCount = RuneCount;
	RuneCountInString = function(s) {
		var accept, c, c$1, c$2, c$3, i, n, ns, s, size, x, x$1;
		n = 0;
		ns = s.length;
		i = 0;
		while (true) {
			if (!(i < ns)) { break; }
			c = s.charCodeAt(i);
			if (c < 128) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			x = ((c < 0 || c >= first.length) ? ($throwRuntimeError("index out of range"), undefined) : first[c]);
			if (x === 241) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			size = ((((x & 7) >>> 0) >> 0));
			if ((i + size >> 0) > ns) {
				i = i + (1) >> 0;
				n = n + (1) >> 0;
				continue;
			}
			accept = $clone((x$1 = x >>> 4 << 24 >>> 24, ((x$1 < 0 || x$1 >= acceptRanges.length) ? ($throwRuntimeError("index out of range"), undefined) : acceptRanges[x$1])), acceptRange);
			c$1 = s.charCodeAt((i + 1 >> 0));
			if (c$1 < accept.lo || accept.hi < c$1) {
				size = 1;
			} else if (size === 2) {
			} else {
				c$2 = s.charCodeAt((i + 2 >> 0));
				if (c$2 < 128 || 191 < c$2) {
					size = 1;
				} else if (size === 3) {
				} else {
					c$3 = s.charCodeAt((i + 3 >> 0));
					if (c$3 < 128 || 191 < c$3) {
						size = 1;
					}
				}
			}
			i = i + (size) >> 0;
			n = n + (1) >> 0;
		}
		n = n;
		return n;
	};
	$pkg.RuneCountInString = RuneCountInString;
	RuneStart = function(b) {
		var b;
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.RuneStart = RuneStart;
	ValidRune = function(r) {
		var r;
		if (0 <= r && r < 55296) {
			return true;
		} else if (57343 < r && r <= 1114111) {
			return true;
		}
		return false;
	};
	$pkg.ValidRune = ValidRune;
	acceptRange.init("unicode/utf8", [{prop: "lo", name: "lo", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hi", name: "hi", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = $toNativeArray($kindUint
		acceptRanges = $toNativeArray($kindStruct, [new acceptRange.ptr(128, 191), new acceptRange.ptr(160, 191), new acceptRange.ptr(128, 159), new acceptRange.ptr(144, 191), new acceptRange.ptr(128, 143)]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, $init, errors, io, unicode, utf8, Buffer, readOp, Reader, ptrType, sliceType, arrayType, ptrType$2, IndexByte, Equal, makeSlice, NewBuffer, HasPrefix, EqualFold, Index, NewReader;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", true, "bytes", true, function(buf_, off_, lastRead_, bootstrap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.off = 0;
			this.lastRead = 0;
			this.bootstrap = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.off = off_;
		this.lastRead = lastRead_;
		this.bootstrap = bootstrap_;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", true, "bytes", false, null);
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bytes.Reader", true, "bytes", true, function(s_, i_, prevRune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.s = sliceType.nil;
			this.i = new $Int64(0, 0);
			this.prevRune = 0;
			return;
		}
		this.s = s_;
		this.i = i_;
		this.prevRune = prevRune_;
	});
	ptrType = $ptrType(Buffer);
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Reader);
	IndexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	$pkg.IndexByte = IndexByte;
	Equal = function(a, b) {
		var _i, _ref, a, b, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	$pkg.Equal = Equal;
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return ($bytesToString($subslice(b.buf, b.off)));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Cap = function() {
		var b;
		b = this;
		return b.buf.$capacity;
	};
	Buffer.prototype.Cap = function() { return this.$val.Cap(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b, n;
		b = this;
		if (n === 0) {
			b.Reset();
			return;
		}
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.buf = $subslice(b.buf, 0, 0);
		b.off = 0;
		b.lastRead = 0;
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.tryGrowByReslice = function(n) {
		var b, l, n;
		b = this;
		l = b.buf.$length;
		if ((l + n >> 0) <= b.buf.$capacity) {
			b.buf = $subslice(b.buf, 0, (l + n >> 0));
			return [l, true];
		}
		return [0, false];
	};
	Buffer.prototype.tryGrowByReslice = function(n) { return this.$val.tryGrowByReslice(n); };
	Buffer.ptr.prototype.grow = function(n) {
		var _q, _tuple, b, buf, i, m, n, ok;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Reset();
		}
		_tuple = b.tryGrowByReslice(n);
		i = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return i;
		}
		if (b.buf === sliceType.nil && n <= 64) {
			b.buf = $subslice(new sliceType(b.bootstrap), 0, n);
			return 0;
		}
		if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
			$copySlice(b.buf, $subslice(b.buf, b.off));
		} else {
			buf = makeSlice(($imul(2, b.buf.$capacity)) + n >> 0);
			$copySlice(buf, $subslice(b.buf, b.off));
			b.buf = buf;
		}
		b.off = 0;
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		return m;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var b, m, n;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var _tmp, _tmp$1, _tuple, b, err, m, n, ok, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(p.$length);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(p.$length);
		}
		_tmp = $copySlice($subslice(b.buf, m), p);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, _tuple, b, err, m, n, ok, s;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(s.length);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(s.length);
		}
		_tmp = $copyString($subslice(b.buf, m), s);
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, free, m, n, newBuf, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; free = $f.free; m = $f.m; n = $f.n; newBuf = $f.newBuf; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Reset();
		}
		/* while (true) { */ case 1:
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice(($imul(2, b.buf.$capacity)) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_r = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = (new $Int64(0, m)), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.ReadFrom }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.free = free; $f.m = m; $f.n = n; $f.newBuf = newBuf; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var n, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return $makeSlice(sliceType, n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, m, n, nBytes, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; m = $f.m; n = $f.n; nBytes = $f.nBytes; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		/* */ if (b.off < b.buf.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.off < b.buf.$length) { */ case 1:
			nBytes = b.Len();
			_r = w.Write($subslice(b.buf, b.off)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = (new $Int64(0, m));
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = e;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n;
				_tmp$3 = io.ErrShortWrite;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		b.Reset();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Buffer.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.m = m; $f.n = n; $f.nBytes = nBytes; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var _tuple, b, c, m, ok, x;
		b = this;
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(1);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(1);
		}
		(x = b.buf, ((m < 0 || m >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + m] = c));
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, err, m, n, ok, r;
		n = 0;
		err = $ifaceNil;
		b = this;
		if (r < 128) {
			b.WriteByte(((r << 24 >>> 24)));
			_tmp = 1;
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		b.lastRead = 0;
		_tuple = b.tryGrowByReslice(4);
		m = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			m = b.grow(4);
		}
		n = utf8.EncodeRune($subslice(b.buf, m, (m + 4 >> 0)), r);
		b.buf = $subslice(b.buf, 0, (m + n >> 0));
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, b, err, n, p;
		n = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Reset();
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m, n;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = -1;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Reset();
			return [0, io.EOF];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = -1;
		return [c, $ifaceNil];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err, n, r, size, x, x$1;
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Reset();
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [r, size, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			b.lastRead = 1;
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			r = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off));
		r = _tuple[0];
		n = _tuple[1];
		b.off = b.off + (n) >> 0;
		b.lastRead = ((n >> 0));
		_tmp$6 = r;
		_tmp$7 = n;
		_tmp$8 = $ifaceNil;
		r = _tmp$6;
		size = _tmp$7;
		err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRead <= 0) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not a successful ReadRune");
		}
		if (b.off >= ((b.lastRead >> 0))) {
			b.off = b.off - (((b.lastRead >> 0))) >> 0;
		}
		b.lastRead = 0;
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (b.lastRead === 0) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a successful read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tuple, b, delim, err, line, slice;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, delim, end, err, i, line;
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = -1;
		_tmp = line;
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, delim, err, line, slice;
		line = "";
		err = $ifaceNil;
		b = this;
		_tuple = b.readSlice(delim);
		slice = _tuple[0];
		err = _tuple[1];
		_tmp = ($bytesToString(slice));
		_tmp$1 = err;
		line = _tmp;
		err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = function(buf) {
		var buf;
		return new Buffer.ptr(buf, 0, 0, arrayType.zero());
	};
	$pkg.NewBuffer = NewBuffer;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	$pkg.HasPrefix = HasPrefix;
	EqualFold = function(s, t) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, s, size, size$1, sr, t, tr;
		while (true) {
			if (!(!((s.$length === 0)) && !((t.$length === 0)))) { break; }
			_tmp = 0;
			_tmp$1 = 0;
			sr = _tmp;
			tr = _tmp$1;
			if ((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = (((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) >> 0));
				_tmp$3 = $subslice(s, 1);
				sr = _tmp$2;
				s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s);
				r = _tuple[0];
				size = _tuple[1];
				_tmp$4 = r;
				_tmp$5 = $subslice(s, size);
				sr = _tmp$4;
				s = _tmp$5;
			}
			if ((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = (((0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]) >> 0));
				_tmp$7 = $subslice(t, 1);
				tr = _tmp$6;
				t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t);
				r$1 = _tuple$1[0];
				size$1 = _tuple$1[1];
				_tmp$8 = r$1;
				_tmp$9 = $subslice(t, size$1);
				tr = _tmp$8;
				t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr;
				_tmp$11 = tr;
				tr = _tmp$10;
				sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (true) {
				if (!(!((r$2 === sr)) && r$2 < tr)) { break; }
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	$pkg.EqualFold = EqualFold;
	Index = function(s, sep) {
		var c, i, n, o, s, sep, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = (0 >= sep.$length ? ($throwRuntimeError("index out of range"), undefined) : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (true) {
			if (!(i < t.$length)) { break; }
			if (!((((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	$pkg.Index = Index;
	Reader.ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return (((x$2 = (x$3 = (new $Int64(0, r.s.$length)), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.ptr.prototype.Size = function() {
		var r;
		r = this;
		return (new $Int64(0, r.s.$length));
	};
	Reader.prototype.Size = function() { return this.$val.Size(); };
	Reader.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, b, err, n, r, x, x$1, x$2, x$3;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0;
			_tmp$1 = io.EOF;
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, n)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err, n, off, r, x;
		n = 0;
		err = $ifaceNil;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0;
			_tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset");
			n = _tmp;
			err = _tmp$1;
			return [n, err];
		}
		if ((x = (new $Int64(0, r.s.$length)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0;
			_tmp$3 = io.EOF;
			n = _tmp$2;
			err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, r, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return [0, io.EOF];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, $ifaceNil];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, ch, err, r, size, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		ch = 0;
		size = 0;
		err = $ifaceNil;
		r = this;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = io.EOF;
			ch = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = (((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0));
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = ((c >> 0));
			_tmp$4 = 1;
			_tmp$5 = $ifaceNil;
			ch = _tmp$3;
			size = _tmp$4;
			err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i)));
		ch = _tuple[0];
		size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = (new $Int64(0, size)), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = (new $Int64(0, r.prevRune));
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Seek = function(offset, whence) {
		var _1, abs, offset, r, whence, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_1 = whence;
		if (_1 === (0)) {
			abs = offset;
		} else if (_1 === (1)) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_1 === (2)) {
			abs = (x$1 = (new $Int64(0, r.s.$length)), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _tmp, _tmp$1, _tuple, b, err, m, n, r, w, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; m = $f.m; n = $f.n; r = $f.r; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = (new $Int64(0, r.s.$length)), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = $ifaceNil;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_r = w.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = _tuple[0];
		err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = (new $Int64(0, m)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = (new $Int64(0, m));
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.m = m; $f.n = n; $f.r = r; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.Reset = function(b) {
		var b, r;
		r = this;
		Reader.copy(r, new Reader.ptr(b, new $Int64(0, 0), -1));
	};
	Reader.prototype.Reset = function(b) { return this.$val.Reset(b); };
	NewReader = function(b) {
		var b;
		return new Reader.ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "tryGrowByReslice", name: "tryGrowByReslice", pkg: "bytes", typ: $funcType([$Int], [$Int, $Bool], false)}, {prop: "grow", name: "grow", pkg: "bytes", typ: $funcType([$Int], [$Int], false)}, {prop: "Grow", name: "Grow", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Next", name: "Next", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}];
	ptrType$2.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType, $Int64], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([sliceType], [], false)}];
	Buffer.init("bytes", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "off", name: "off", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastRead", name: "lastRead", anonymous: false, exported: false, typ: readOp, tag: ""}, {prop: "bootstrap", name: "bootstrap", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	Reader.init("bytes", [{prop: "s", name: "s", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "prevRune", name: "prevRune", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, $init, TextMarshaler, TextUnmarshaler, sliceType;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", true, "encoding", true, null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", true, "encoding", true, null);
	sliceType = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType], [$error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, $init, js, arrayType, arrayType$1, arrayType$2, structType, math, zero, posInf, negInf, nan, buf, Atan2, Ceil, Cos, Exp, Floor, Hypot, Inf, IsInf, IsNaN, Log, Max, Min, NaN, Pow, Signbit, Sin, Sqrt, init, Float32bits, Float32frombits, Float64bits, Float64frombits, Abs, max, min, hypot;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	arrayType = $arrayType($Uint32, 2);
	arrayType$1 = $arrayType($Float32, 2);
	arrayType$2 = $arrayType($Float64, 1);
	structType = $structType("math", [{prop: "uint32array", name: "uint32array", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "float32array", name: "float32array", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "float64array", name: "float64array", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	Atan2 = function(y, x) {
		var x, y;
		return $parseFloat(math.atan2(y, x));
	};
	$pkg.Atan2 = Atan2;
	Ceil = function(x) {
		var x;
		return $parseFloat(math.ceil(x));
	};
	$pkg.Ceil = Ceil;
	Cos = function(x) {
		var x;
		return $parseFloat(math.cos(x));
	};
	$pkg.Cos = Cos;
	Exp = function(x) {
		var x;
		return $parseFloat(math.exp(x));
	};
	$pkg.Exp = Exp;
	Floor = function(x) {
		var x;
		return $parseFloat(math.floor(x));
	};
	$pkg.Floor = Floor;
	Hypot = function(p, q) {
		var p, q;
		return hypot(p, q);
	};
	$pkg.Hypot = Hypot;
	Inf = function(sign) {
		var sign;
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	$pkg.Inf = Inf;
	IsInf = function(f, sign) {
		var f, sign;
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	$pkg.IsInf = IsInf;
	IsNaN = function(f) {
		var f, is;
		is = false;
		is = !((f === f));
		return is;
	};
	$pkg.IsNaN = IsNaN;
	Log = function(x) {
		var x;
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	$pkg.Log = Log;
	Max = function(x, y) {
		var x, y;
		return max(x, y);
	};
	$pkg.Max = Max;
	Min = function(x, y) {
		var x, y;
		return min(x, y);
	};
	$pkg.Min = Min;
	NaN = function() {
		return nan;
	};
	$pkg.NaN = NaN;
	Pow = function(x, y) {
		var x, y;
		if ((x === 1) || ((x === -1) && ((y === posInf) || (y === negInf)))) {
			return 1;
		}
		return $parseFloat(math.pow(x, y));
	};
	$pkg.Pow = Pow;
	Signbit = function(x) {
		var x;
		return x < 0 || (1 / x === negInf);
	};
	$pkg.Signbit = Signbit;
	Sin = function(x) {
		var x;
		return $parseFloat(math.sin(x));
	};
	$pkg.Sin = Sin;
	Sqrt = function(x) {
		var x;
		return $parseFloat(math.sqrt(x));
	};
	$pkg.Sqrt = Sqrt;
	init = function() {
		var ab;
		ab = new ($global.ArrayBuffer)(8);
		buf.uint32array = new ($global.Uint32Array)(ab);
		buf.float32array = new ($global.Float32Array)(ab);
		buf.float64array = new ($global.Float64Array)(ab);
	};
	Float32bits = function(f) {
		var f;
		buf.float32array[0] = f;
		return buf.uint32array[0];
	};
	$pkg.Float32bits = Float32bits;
	Float32frombits = function(b) {
		var b;
		buf.uint32array[0] = b;
		return buf.float32array[0];
	};
	$pkg.Float32frombits = Float32frombits;
	Float64bits = function(f) {
		var f, x, x$1;
		buf.float64array[0] = f;
		return (x = $shiftLeft64((new $Uint64(0, buf.uint32array[1])), 32), x$1 = (new $Uint64(0, buf.uint32array[0])), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	$pkg.Float64bits = Float64bits;
	Float64frombits = function(b) {
		var b;
		buf.uint32array[0] = ((b.$low >>> 0));
		buf.uint32array[1] = (($shiftRightUint64(b, 32).$low >>> 0));
		return buf.float64array[0];
	};
	$pkg.Float64frombits = Float64frombits;
	Abs = function(x) {
		var x;
		if (x < 0) {
			return -x;
		}
		if (x === 0) {
			return 0;
		}
		return x;
	};
	$pkg.Abs = Abs;
	max = function(x, y) {
		var x, y;
		if (IsInf(x, 1) || IsInf(y, 1)) {
			return Inf(1);
		} else if (IsNaN(x) || IsNaN(y)) {
			return NaN();
		} else if ((x === 0) && (x === y)) {
			if (Signbit(x)) {
				return y;
			}
			return x;
		}
		if (x > y) {
			return x;
		}
		return y;
	};
	min = function(x, y) {
		var x, y;
		if (IsInf(x, -1) || IsInf(y, -1)) {
			return Inf(-1);
		} else if (IsNaN(x) || IsNaN(y)) {
			return NaN();
		} else if ((x === 0) && (x === y)) {
			if (Signbit(x)) {
				return x;
			}
			return y;
		}
		if (x < y) {
			return x;
		}
		return y;
	};
	hypot = function(p, q) {
		var _tmp, _tmp$1, p, q;
		if (IsInf(p, 0) || IsInf(q, 0)) {
			return Inf(1);
		} else if (IsNaN(p) || IsNaN(q)) {
			return NaN();
		}
		if (p < 0) {
			p = -p;
		}
		if (q < 0) {
			q = -q;
		}
		if (p < q) {
			_tmp = q;
			_tmp$1 = p;
			p = _tmp;
			q = _tmp$1;
		}
		if (p === 0) {
			return 0;
		}
		q = q / p;
		return p * Sqrt(1 + q * q);
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = js.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		buf = new structType.ptr(arrayType.zero(), arrayType$1.zero(), arrayType$2.zero());
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, $init, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, arrayType, ptrType, sliceType$6, arrayType$1, arrayType$2, ptrType$1, arrayType$3, arrayType$4, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float32info$24ptr, float64info, float64info$24ptr, isPrint16, isNotPrint16, isPrint32, isNotPrint32, isGraphic, shifts, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, min, max, FormatUint, FormatInt, Itoa, small, formatBits, quoteWith, appendQuotedWith, appendQuotedRuneWith, appendEscapedRune, Quote, AppendQuote, QuoteToASCII, AppendQuoteToASCII, AppendQuoteRune, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, isInGraphicList;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", true, "strconv", true, function(Func_, Num_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Func = "";
			this.Num = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Func = Func_;
		this.Num = Num_;
		this.Err = Err_;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", true, "strconv", false, function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = arrayType.zero();
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			this.trunc = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
		this.trunc = trunc_;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", true, "strconv", false, function(delta_, cutoff_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.delta = 0;
			this.cutoff = "";
			return;
		}
		this.delta = delta_;
		this.cutoff = cutoff_;
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", true, "strconv", false, function(mant_, exp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mant = new $Uint64(0, 0);
			this.exp = 0;
			this.neg = false;
			return;
		}
		this.mant = mant_;
		this.exp = exp_;
		this.neg = neg_;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", true, "strconv", false, function(mantbits_, expbits_, bias_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.mantbits = 0;
			this.expbits = 0;
			this.bias = 0;
			return;
		}
		this.mantbits = mantbits_;
		this.expbits = expbits_;
		this.bias = bias_;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", true, "strconv", false, function(d_, nd_, dp_, neg_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.d = sliceType$6.nil;
			this.nd = 0;
			this.dp = 0;
			this.neg = false;
			return;
		}
		this.d = d_;
		this.nd = nd_;
		this.dp = dp_;
		this.neg = neg_;
	});
	sliceType = $sliceType($Int);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType($Float32);
	sliceType$3 = $sliceType(leftCheat);
	sliceType$4 = $sliceType($Uint16);
	sliceType$5 = $sliceType($Uint32);
	arrayType = $arrayType($Uint8, 800);
	ptrType = $ptrType(NumError);
	sliceType$6 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 24);
	arrayType$2 = $arrayType($Uint8, 32);
	ptrType$1 = $ptrType(floatInfo);
	arrayType$3 = $arrayType($Uint8, 65);
	arrayType$4 = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(decimal);
	ptrType$3 = $ptrType(decimalSlice);
	ptrType$4 = $ptrType(extFloat);
	equalIgnoreCase = function(s1, s2) {
		var c1, c2, i, s1, s2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f, ok, s;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_1 = s.charCodeAt(0);
		if (_1 === (43)) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1);
				_tmp$1 = true;
				f = _tmp;
				ok = _tmp$1;
				return [f, ok];
			}
		} else if (_1 === (45)) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1);
				_tmp$3 = true;
				f = _tmp$2;
				ok = _tmp$3;
				return [f, ok];
			}
		} else if ((_1 === (110)) || (_1 === (78))) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN();
				_tmp$5 = true;
				f = _tmp$4;
				ok = _tmp$5;
				return [f, ok];
			}
		} else if ((_1 === (105)) || (_1 === (73))) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1);
				_tmp$7 = true;
				f = _tmp$6;
				ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var b, e, esign, i, ok, s, sawdigits, sawdot, x, x$1;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (true) {
			if (!(i < s.length)) { break; }
			if ((s.charCodeAt(i) === 46)) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = s.charCodeAt(i)));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var _1, c, dp, e, esign, exp, i, mantissa, nd, ndMant, neg, ok, s, sawdigits, sawdot, trunc, x;
		mantissa = new $Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if ((s.charCodeAt(i) === 43)) {
			i = i + (1) >> 0;
		} else if ((s.charCodeAt(i) === 45)) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			_1 = true;
			if (_1 === ((c === 46))) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_1 === (48 <= c && c <= 57)) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = (new $Uint64(0, (c - 48 << 24 >>> 24))), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (true) {
				if (!(i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57)) { break; }
				if (e < 10000) {
					e = (($imul(e, 10)) + ((s.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (($imul(e, esign))) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!((mantissa.$high === 0 && mantissa.$low === 0))) {
			exp = dp - ndMant >> 0;
		}
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var _tmp, _tmp$1, b, bits, d, exp, flt, mant, n, n$1, n$2, overflow, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		b = new $Uint64(0, 0);
		overflow = false;
		d = this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* */ if (d.nd === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.nd === 0) { */ case 1:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 2:
		/* */ if (d.dp > 310) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.dp > 310) { */ case 4:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 5:
		/* */ if (d.dp < -330) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (d.dp < -330) { */ case 7:
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 3; continue;
		/* } */ case 8:
		exp = 0;
		while (true) {
			if (!(d.dp > 0)) { break; }
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (true) {
			if (!(d.dp < 0 || (d.dp === 0) && d.d[0] < 53)) { break; }
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? ($throwRuntimeError("index out of range"), undefined) : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ case 9:
			/* goto overflow */ $s = 6; continue;
		/* } */ case 10:
		d.Shift((((1 + flt.mantbits >>> 0) >> 0)));
		mant = d.RoundedInteger();
		/* */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { $s = 11; continue; }
		/* */ $s = 12; continue;
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ case 11:
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ case 13:
				/* goto overflow */ $s = 6; continue;
			/* } */ case 14:
		/* } */ case 12:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 3; continue;
		/* overflow: */ case 6:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 3:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits;
		_tmp$1 = overflow;
		b = _tmp;
		overflow = _tmp$1;
		$s = -1; return [b, overflow];
		/* */ } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = ($flatten64(mantissa));
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + exp]);
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float64pow10.$array[float64pow10.$offset + x$2]));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, exp, f, mantissa, neg, ok, x, x$1, x$2;
		f = 0;
		ok = false;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = ($flatten64(mantissa));
		if (neg) {
			f = -f;
		}
		if ((exp === 0)) {
			_tmp = f;
			_tmp$1 = true;
			f = _tmp;
			ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = $fround(f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$1]))));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = $fround(f * ((exp < 0 || exp >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + exp]));
			_tmp$3 = true;
			f = _tmp$2;
			ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = $fround(f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? ($throwRuntimeError("index out of range"), undefined) : float32pow10.$array[float32pow10.$offset + x$2])));
			_tmp$5 = true;
			f = _tmp$4;
			ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = ($fround(val));
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float32frombits(((b.$low >>> 0)));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float32frombits(((b$1.$low >>> 0)));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err, exp, ext, f, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, s, trunc, val;
		f = 0;
		err = $ifaceNil;
		_tuple = special(s);
		val = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			_tmp = val;
			_tmp$1 = $ifaceNil;
			f = _tmp;
			err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s);
			mantissa = _tuple$1[0];
			exp = _tuple$1[1];
			neg = _tuple$1[2];
			trunc = _tuple$1[3];
			ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg);
					f$1 = _tuple$2[0];
					ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1;
						_tmp$3 = $ifaceNil;
						f = _tmp$2;
						err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr(new $Uint64(0, 0), 0, false);
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info);
					b = _tuple$3[0];
					ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f;
					_tmp$5 = err;
					f = _tmp$4;
					err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		if (!d.set(s)) {
			_tmp$6 = 0;
			_tmp$7 = syntaxError("ParseFloat", s);
			f = _tmp$6;
			err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info);
		b$1 = _tuple$4[0];
		ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f;
		_tmp$9 = err;
		f = _tmp$8;
		err = _tmp$9;
		return [f, err];
	};
	ParseFloat = function(s, bitSize) {
		var _tuple, bitSize, err, f, s;
		if (bitSize === 32) {
			_tuple = atof32(s);
			f = _tuple[0];
			err = _tuple[1];
			return [(f), err];
		}
		return atof64(s);
	};
	$pkg.ParseFloat = ParseFloat;
	NumError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NumError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		var fn, str;
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	ParseUint = function(s, base, bitSize) {
		var _1, _tmp, _tmp$1, base, bitSize, cutoff, d, err, i, maxVal, n, n1, s, v, x, x$1, x$2, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		err = $ifaceNil;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		cutoff = _tmp;
		maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		i = 0;
			/* */ if (s.length < 1) { $s = 2; continue; }
			/* */ if (2 <= base && base <= 36) { $s = 3; continue; }
			/* */ if ((base === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (s.length < 1) { */ case 2:
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
				$s = 6; continue;
			/* } else if (2 <= base && base <= 36) { */ case 3:
				$s = 6; continue;
			/* } else if ((base === 0)) { */ case 4:
					/* */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { $s = 9; continue; }
					/* */ if ((s.charCodeAt(0) === 48)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ case 9:
						/* */ if (s.length < 3) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (s.length < 3) { */ case 13:
							err = $pkg.ErrSyntax;
							/* goto Error */ $s = 7; continue;
						/* } */ case 14:
						base = 16;
						i = 2;
						$s = 12; continue;
					/* } else if ((s.charCodeAt(0) === 48)) { */ case 10:
						base = 8;
						i = 1;
						$s = 12; continue;
					/* } else { */ case 11:
						base = 10;
					/* } */ case 12:
				case 8:
				$s = 6; continue;
			/* } else { */ case 5:
				err = errors.New("invalid base " + Itoa(base));
				/* goto Error */ $s = 7; continue;
			/* } */ case 6:
		case 1:
		_1 = base;
		if (_1 === (10)) {
			cutoff = new $Uint64(429496729, 2576980378);
		} else if (_1 === (16)) {
			cutoff = new $Uint64(268435456, 0);
		} else {
			cutoff = (x = $div64(new $Uint64(4294967295, 4294967295), (new $Uint64(0, base)), false), new $Uint64(x.$high + 0, x.$low + 1));
		}
		maxVal = (x$1 = $shiftLeft64(new $Uint64(0, 1), ((bitSize >>> 0))), new $Uint64(x$1.$high - 0, x$1.$low - 1));
		/* while (true) { */ case 15:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 16; continue; }
			v = 0;
			d = s.charCodeAt(i);
				/* */ if (48 <= d && d <= 57) { $s = 18; continue; }
				/* */ if (97 <= d && d <= 122) { $s = 19; continue; }
				/* */ if (65 <= d && d <= 90) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (48 <= d && d <= 57) { */ case 18:
					v = d - 48 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (97 <= d && d <= 122) { */ case 19:
					v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else if (65 <= d && d <= 90) { */ case 20:
					v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
					$s = 22; continue;
				/* } else { */ case 21:
					n = new $Uint64(0, 0);
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 7; continue;
				/* } */ case 22:
			case 17:
			/* */ if (v >= ((base << 24 >>> 24))) { $s = 23; continue; }
			/* */ $s = 24; continue;
			/* if (v >= ((base << 24 >>> 24))) { */ case 23:
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 7; continue;
			/* } */ case 24:
			/* */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ case 25:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 26:
			n = $mul64(n, ((new $Uint64(0, base))));
			n1 = (x$2 = (new $Uint64(0, v)), new $Uint64(n.$high + x$2.$high, n.$low + x$2.$low));
			/* */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ case 27:
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 7; continue;
			/* } */ case 28:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 15; continue; case 16:
		$s = -1; return [n, $ifaceNil];
		/* Error: */ case 7:
		$s = -1; return [n, new NumError.ptr("ParseUint", s, err)];
		$s = -1; return [new $Uint64(0, 0), $ifaceNil];
		/* */ } return; }
	};
	$pkg.ParseUint = ParseUint;
	ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, base, bitSize, cutoff, err, i, n, neg, s, s0, un, x, x$1;
		i = new $Int64(0, 0);
		err = $ifaceNil;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = syntaxError("ParseInt", s);
			i = _tmp;
			err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = $substring(s, 1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = $substring(s, 1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize);
		un = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = err;
			i = _tmp$2;
			err = _tmp$3;
			return [i, err];
		}
		cutoff = ($shiftLeft64(new $Uint64(0, 1), (((bitSize - 1 >> 0) >>> 0))));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = ((x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)));
			_tmp$5 = rangeError("ParseInt", s0);
			i = _tmp$4;
			err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = (new $Int64(cutoff.$high, cutoff.$low)), new $Int64(-x$1.$high, -x$1.$low));
			_tmp$7 = rangeError("ParseInt", s0);
			i = _tmp$6;
			err = _tmp$7;
			return [i, err];
		}
		n = (new $Int64(un.$high, un.$low));
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		i = _tmp$8;
		err = _tmp$9;
		return [i, err];
	};
	$pkg.ParseInt = ParseInt;
	Atoi = function(s) {
		var _tuple, _tuple$1, err, i64, nerr, ok, s;
		_tuple = ParseInt(s, 10, 0);
		i64 = _tuple[0];
		err = _tuple[1];
		_tuple$1 = $assertType(err, ptrType, true);
		nerr = _tuple$1[0];
		ok = _tuple$1[1];
		if (ok) {
			nerr.Func = "Atoi";
		}
		return [(((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0)), err];
	};
	$pkg.Atoi = Atoi;
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = $makeSlice(sliceType$6, n);
		w = 0;
		if ((a.nd === 0)) {
			return "0";
		} else if (a.dp <= 0) {
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
			w = w + (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return ($bytesToString($subslice(buf, 0, w)));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, dst, i;
		_ref = dst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = 48);
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var a, x, x$1;
		while (true) {
			if (!(a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === 48))) { break; }
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v, v1, x, x$1, x$2;
		a = this;
		buf = arrayType$1.zero();
		n = 0;
		while (true) {
			if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (true) {
			if (!(n >= 0)) { break; }
			(x$1 = a.d, x$2 = a.nd, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n])));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var a, c, c$1, dig, dig$1, k, mask, n, r, w, x, x$1, x$2, x$3, y, y$1, y$2, y$3, y$4;
		r = 0;
		w = 0;
		n = 0;
		while (true) {
			if (!(((y = k, y < 32 ? (n >>> y) : 0) >>> 0) === 0)) { break; }
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (true) {
					if (!(((y$1 = k, y$1 < 32 ? (n >>> y$1) : 0) >>> 0) === 0)) { break; }
					n = n * 10 >>> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = (((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0));
			n = ((n * 10 >>> 0) + c >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		mask = (((y$2 = k, y$2 < 32 ? (1 << y$2) : 0) >>> 0)) - 1 >>> 0;
		while (true) {
			if (!(r < a.nd)) { break; }
			c$1 = (((x$1 = a.d, ((r < 0 || r >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[r])) >>> 0));
			dig = (y$3 = k, y$3 < 32 ? (n >>> y$3) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((dig + 48 >>> 0) << 24 >>> 24))));
			w = w + (1) >> 0;
			n = ((n * 10 >>> 0) + c$1 >>> 0) - 48 >>> 0;
			r = r + (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			dig$1 = (y$4 = k, y$4 < 32 ? (n >>> y$4) : 0) >>> 0;
			n = (n & (mask)) >>> 0;
			if (w < 800) {
				(x$3 = a.d, ((w < 0 || w >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[w] = (((dig$1 + 48 >>> 0) << 24 >>> 24))));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >>> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var b, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, a, delta, k, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? ($throwRuntimeError("index out of range"), undefined) : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (true) {
			if (!(r >= 0)) { break; }
			n = n + (((y = k, y < 32 ? ((((((x = a.d, ((r < 0 || r >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[r])) >>> 0)) - 48 >>> 0)) << y) : 0) >>> 0)) >>> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, ((w < 0 || w >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[w] = (((rem + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (true) {
			if (!(n > 0)) { break; }
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >>> 0) >>> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, ((w < 0 || w >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[w] = (((rem$1 + 48 >>> 0) << 24 >>> 24))));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a, k;
		a = this;
		if ((a.nd === 0)) {
		} else if (k > 0) {
			while (true) {
				if (!(k > 28)) { break; }
				leftShift(a, 28);
				k = k - (28) >> 0;
			}
			leftShift(a, ((k >>> 0)));
		} else if (k < 0) {
			while (true) {
				if (!(k < -28)) { break; }
				rightShift(a, 28);
				k = k + (28) >> 0;
			}
			rightShift(a, ((-k >>> 0)));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, a, nd, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a, nd;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var a, c, i, nd, x, x$1, x$2;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			c = (x = a.d, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			if (c < 57) {
				(x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = ((x$1 = a.d, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) + (1) << 24 >>> 24)));
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (true) {
			if (!(i < a.dp && i < a.nd)) { break; }
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = (new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) - 48 << 24 >>> 24))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (true) {
			if (!(i < a.dp)) { break; }
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var bits, exp, f, flt, mant, n, overflow, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		bits = new $Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, (((n >>> 0))));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64((new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0))))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, exp, expBiased, f, flt, lower, mant, neg, upper, x, x$1, x$2, x$3, x$4;
		lower = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		upper = new extFloat.ptr(new $Uint64(0, 0), 0, false);
		f = this;
		f.mant = mant;
		f.exp = exp - ((flt.mantbits >> 0)) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, ((-f.exp >>> 0)))), ((-f.exp >>> 0))), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, (((-f.exp >>> 0))));
			f.exp = 0;
			_tmp = $clone(f, extFloat);
			_tmp$1 = $clone(f, extFloat);
			extFloat.copy(lower, _tmp);
			extFloat.copy(upper, _tmp$1);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		extFloat.copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg));
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			extFloat.copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg));
		} else {
			extFloat.copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg));
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift, x, x$1, x$2, x$3, x$4, x$5;
		shift = 0;
		f = this;
		_tmp = f.mant;
		_tmp$1 = f.exp;
		mant = _tmp;
		exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = (((f.exp - exp >> 0) >>> 0));
		_tmp$2 = mant;
		_tmp$3 = exp;
		f.mant = _tmp$2;
		f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, g, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32);
		_tmp$1 = (new $Uint64(0, ((f.mant.$low >>> 0))));
		fhi = _tmp;
		flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32);
		_tmp$3 = (new $Uint64(0, ((g.mant.$low >>> 0))));
		ghi = _tmp$2;
		glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = (new $Uint64(0, ((cross1.$low >>> 0)))), x$6 = (new $Uint64(0, ((cross2.$low >>> 0)))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, exp10, extrabits, f, flt, halfway, i, mant_extra, mantissa, neg, ok, shift, trunc, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = ((63 - flt.mantbits >>> 0) + 1 >>> 0) + (((denormalExp - f.exp >> 0) >>> 0)) >>> 0;
		} else {
			extrabits = 63 - flt.mantbits >>> 0;
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = (new $Int64(halfway.$high, halfway.$low)), x$7 = (new $Int64(0, errors$1)), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = (new $Int64(mant_extra.$high, mant_extra.$low)), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = (new $Int64(mant_extra.$high, mant_extra.$low)), x$10 = (x$11 = (new $Int64(halfway.$high, halfway.$low)), x$12 = (new $Int64(0, errors$1)), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10, f, i, index;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = ($imul(((-46 - f.exp >> 0)), 28)) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ($imul(i, 8)) >> 0));
		_tmp$1 = i;
		exp10 = _tmp;
		index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, a, b, c, exp10, i;
		exp10 = 0;
		_tuple = c.frexp10();
		exp10 = _tuple[0];
		i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? ($throwRuntimeError("index out of range"), undefined) : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var $CE$B5, _q, _q$1, _tmp, _tmp$1, _tuple, buf, d, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, n, nd, needed, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10();
		exp10 = _tuple[0];
		shift = ((-f.exp >>> 0));
		integer = (($shiftRightUint64(f.mant, shift).$low >>> 0));
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		$CE$B5 = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0;
		_tmp$1 = new $Uint64(0, 1);
		i = _tmp;
		pow = _tmp$1;
		while (true) {
			if (!(i < 20)) { break; }
			if ((x$3 = (new $Uint64(0, integer)), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$4]));
			integer = (_q = integer / (((pow10.$low >>> 0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - (($imul(integer, ((pow10.$low >>> 0))) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = arrayType$2.zero();
		pos = 32;
		v = integer;
		while (true) {
			if (!(v > 0)) { break; }
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (($imul(10, v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			((pos < 0 || pos >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[pos] = (((v + 48 >>> 0) << 24 >>> 24)));
			v = v1;
		}
		i$1 = pos;
		while (true) {
			if (!(i$1 < 32)) { break; }
			(x$5 = d.d, x$6 = i$1 - pos >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = ((i$1 < 0 || i$1 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i$1])));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (true) {
				if (!(needed > 0)) { break; }
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				$CE$B5 = $mul64($CE$B5, (new $Uint64(0, 10)));
				if ((x$7 = $mul64(new $Uint64(0, 2), $CE$B5), x$8 = $shiftLeft64(new $Uint64(0, 1), shift), (x$7.$high > x$8.$high || (x$7.$high === x$8.$high && x$7.$low > x$8.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$9 = d.d, ((nd < 0 || nd >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + nd] = ((new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24))));
				fraction = (x$10 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$10.$high, fraction.$low - x$10.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$11 = $shiftLeft64((new $Uint64(0, rest)), shift), new $Uint64(x$11.$high | fraction.$high, (x$11.$low | fraction.$low) >>> 0)), pow10, shift, $CE$B5);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (!(((x$12 = d.d, ((i$2 < 0 || i$2 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, $CE$B5) {
		var $CE$B5, d, den, i, num, shift, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), $CE$B5), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + $CE$B5.$high, num.$low + $CE$B5.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - $CE$B5.$high, num.$low - $CE$B5.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (true) {
				if (!(i >= 0)) { break; }
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0] = 49));
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				(x$10 = d.d, ((i < 0 || i >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + i] = ((x$9 = d.d, ((i < 0 || i >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i])) + (1) << 24 >>> 24)));
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, d, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, lower, multiplier, n, nd, pow, pow$1, shift, targetDiff, upper, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = arrayType$1.zero();
			n = 23;
			v = f.mant;
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				((n < 0 || n >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[n] = ((new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24)));
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (true) {
				if (!(i < nd)) { break; }
				(x$3 = d.d, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x$2]))));
				i = i + (1) >> 0;
			}
			_tmp = nd;
			_tmp$1 = nd;
			d.nd = _tmp;
			d.dp = _tmp$1;
			while (true) {
				if (!(d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 48))) { break; }
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, ((((f.exp - upper.exp >> 0) >>> 0))));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, ((((lower.exp - upper.exp >> 0) >>> 0))));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = ((-upper.exp >>> 0));
		integer = (($shiftRightUint64(upper.mant, shift).$low >>> 0));
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0;
		_tmp$3 = new $Uint64(0, 1);
		i$1 = _tmp$2;
		pow = _tmp$3;
		while (true) {
			if (!(i$1 < 20)) { break; }
			if ((x$16 = (new $Uint64(0, integer)), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < integerDigits)) { break; }
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? ($throwRuntimeError("index out of range"), undefined) : uint64pow10[x$17]));
			digit = (_q = integer / ((pow$1.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, ((i$2 < 0 || i$2 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$2] = (((digit + 48 >>> 0) << 24 >>> 24))));
			integer = integer - (($imul(digit, ((pow$1.$low >>> 0))) >>> 0)) >>> 0;
			currentDiff = (x$19 = $shiftLeft64((new $Uint64(0, integer)), shift), new $Uint64(x$19.$high + fraction.$high, x$19.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = (($shiftRightUint64(fraction, shift).$low >> 0));
			(x$20 = d.d, x$21 = d.nd, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = (((digit$1 + 48 >> 0) << 24 >>> 24))));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$22 = $shiftLeft64((new $Uint64(0, digit$1)), shift), new $Uint64(fraction.$high - x$22.$high, fraction.$low - x$22.$low));
			if ((x$23 = $mul64(allowance, multiplier), (fraction.$high < x$23.$high || (fraction.$high === x$23.$high && fraction.$low < x$23.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, currentDiff, d, maxDiff, targetDiff, ulpBinary, ulpDecimal, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while (true) {
			if (!((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low))))) { break; }
			_index = d.nd - 1 >> 0;
			(x$5 = d.d, ((_index < 0 || _index >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + _index] = ((x$4 = d.d, ((_index < 0 || _index >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + _index])) - (1) << 24 >>> 24)));
			currentDiff = (x$6 = ulpDecimal, new $Uint64(currentDiff.$high + x$6.$high, currentDiff.$low + x$6.$low));
		}
		if ((x$7 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$8 = (x$9 = (x$10 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$10.$high, targetDiff.$low + x$10.$low)), new $Uint64(x$9.$high + ulpBinary.$high, x$9.$low + ulpBinary.$low)), (x$7.$high < x$8.$high || (x$7.$high === x$8.$high && x$7.$low <= x$8.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$11 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$11.$high || (currentDiff.$high === x$11.$high && currentDiff.$low > x$11.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$12 = d.d, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = function(f, fmt, prec, bitSize) {
		var bitSize, f, fmt, prec;
		return ($bytesToString(genericFtoa($makeSlice(sliceType$6, 0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize)));
	};
	$pkg.FormatFloat = FormatFloat;
	AppendFloat = function(dst, f, fmt, prec, bitSize) {
		var bitSize, dst, f, fmt, prec;
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	$pkg.AppendFloat = AppendFloat;
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _1, _2, _3, _4, _tuple, bitSize, bits, buf, buf$1, digits, digs, dst, exp, f, f$1, flt, fmt, lower, mant, neg, ok, prec, s, shortest, upper, val, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_1 = bitSize;
		if (_1 === (32)) {
			bits = (new $Uint64(0, math.Float32bits(($fround(val)))));
			flt = float32info;
		} else if (_1 === (64)) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = (($shiftRightUint64(bits, flt.mantbits).$low >> 0)) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_2 = exp;
		if (_2 === ((((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0))) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, s);
		} else if (_2 === (0)) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr(new $Uint64(0, 0), 0, false);
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt);
			lower = $clone(_tuple[0], extFloat);
			upper = $clone(_tuple[1], extFloat);
			buf = arrayType$2.zero();
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_3 = fmt;
			if ((_3 === (101)) || (_3 === (69))) {
				prec = max(digs.nd - 1 >> 0, 0);
			} else if (_3 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_3 === (103)) || (_3 === (71))) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_4 = fmt;
			if ((_4 === (101)) || (_4 === (69))) {
				digits = digits + (1) >> 0;
			} else if ((_4 === (103)) || (_4 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = arrayType$1.zero();
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - ((flt.mantbits >> 0)) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _1, _2, d, digs, dst, exp, flt, fmt, mant, neg, prec, shortest;
		d = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		d.Assign(mant);
		d.Shift(exp - ((flt.mantbits >> 0)) >> 0);
		digs = new decimalSlice.ptr(sliceType$6.nil, 0, 0, false);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
			_1 = fmt;
			if ((_1 === (101)) || (_1 === (69))) {
				prec = digs.nd - 1 >> 0;
			} else if (_1 === (102)) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if ((_1 === (103)) || (_1 === (71))) {
				prec = digs.nd;
			}
		} else {
			_2 = fmt;
			if ((_2 === (101)) || (_2 === (69))) {
				d.Round(prec + 1 >> 0);
			} else if (_2 === (102)) {
				d.Round(d.dp + prec >> 0);
			} else if ((_2 === (103)) || (_2 === (71))) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			decimalSlice.copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false));
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _1, digs, dst, eprec, exp, fmt, neg, prec, shortest;
		_1 = fmt;
		if ((_1 === (101)) || (_1 === (69))) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_1 === (102)) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if ((_1 === (103)) || (_1 === (71))) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var d, exp, explo, flt, i, inclusive, l, lower, m, mant, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && ($imul(332, ((d.dp - d.nd >> 0)))) >= ($imul(100, ((exp - ((flt.mantbits >> 0)) >> 0))))) {
			return;
		}
		upper = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr(arrayType.zero(), 0, 0, false, false);
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - ((flt.mantbits >> 0)) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (true) {
			if (!(i < d.nd)) { break; }
			l = 48;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]));
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]));
			u = 48;
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i]));
			}
			okdown = !((l === m)) || inclusive && ((i + 1 >> 0) === lower.nd);
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _q$1, _q$2, _r, _r$1, _r$2, ch, d, dst, exp, fmt, i, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = min(d.nd, prec + 1 >> 0);
			if (i < m) {
				dst = $appendSlice(dst, $subslice(d.d, i, m));
				i = m;
			}
			while (true) {
				if (!(i <= prec)) { break; }
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		if (exp < 10) {
			dst = $append(dst, 48, ((exp << 24 >>> 24)) + 48 << 24 >>> 24);
		} else if (exp < 100) {
			dst = $append(dst, (((_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		} else {
			dst = $append(dst, (((_q$1 = exp / 100, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24, (_r$1 = (((_q$2 = exp / 10, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 << 24 >>> 24, (((_r$2 = exp % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24)) + 48 << 24 >>> 24);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, d, dst, i, j, m, neg, prec, x;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			m = min(d.nd, d.dp);
			dst = $appendSlice(dst, $subslice(d.d, 0, m));
			while (true) {
				if (!(m < d.dp)) { break; }
				dst = $append(dst, 48);
				m = m + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 0;
			while (true) {
				if (!(i < prec)) { break; }
				ch = 48;
				j = d.dp + i >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x = d.d, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
				}
				dst = $append(dst, ch);
				i = i + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _tuple, _tuple$1, dst, exp, flt, mant, neg;
		if (neg) {
			dst = $append(dst, 45);
		}
		_tuple = formatBits(dst, mant, 10, false, true);
		dst = _tuple[0];
		dst = $append(dst, 112);
		exp = exp - (((flt.mantbits >> 0))) >> 0;
		if (exp >= 0) {
			dst = $append(dst, 43);
		}
		_tuple$1 = formatBits(dst, (new $Uint64(0, exp)), 10, exp < 0, true);
		dst = _tuple$1[0];
		return dst;
	};
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatUint = function(i, base) {
		var _tuple, base, i, s;
		if (true && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small(((i.$low >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, i, base, false, false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatUint = FormatUint;
	FormatInt = function(i, base) {
		var _tuple, base, i, s;
		if (true && (0 < i.$high || (0 === i.$high && 0 <= i.$low)) && (i.$high < 0 || (i.$high === 0 && i.$low < 100)) && (base === 10)) {
			return small((((i.$low + ((i.$high >> 31) * 4294967296)) >> 0)));
		}
		_tuple = formatBits(sliceType$6.nil, (new $Uint64(i.$high, i.$low)), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false);
		s = _tuple[1];
		return s;
	};
	$pkg.FormatInt = FormatInt;
	Itoa = function(i) {
		var i;
		return FormatInt((new $Int64(0, i)), 10);
	};
	$pkg.Itoa = Itoa;
	small = function(i) {
		var i, off;
		off = 0;
		if (i < 10) {
			off = 1;
		}
		return $substring("00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899", (($imul(i, 2)) + off >> 0), (($imul(i, 2)) + 2 >> 0));
	};
	formatBits = function(dst, u, base, neg, append_) {
		var _q, _q$1, _r, _r$1, a, append_, b, b$1, base, d, dst, i, is, is$1, is$2, j, m, neg, q, q$1, s, s$1, u, us, us$1, x, x$1, x$2, x$3, x$4, x$5;
		d = sliceType$6.nil;
		s = "";
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = arrayType$3.zero();
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			if (true) {
				while (true) {
					if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 1000000000)))) { break; }
					q = $div64(u, new $Uint64(0, 1000000000), false);
					us = (((x = $mul64(q, new $Uint64(0, 1000000000)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0));
					j = 4;
					while (true) {
						if (!(j > 0)) { break; }
						is = (_r = us % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
						us = (_q = us / (100), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
						i = i - (2) >> 0;
						(x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$1] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 1 >>> 0))));
						(x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$2] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is + 0 >>> 0))));
						j = j - (1) >> 0;
					}
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(((us * 2 >>> 0) + 1 >>> 0)));
					u = q;
				}
			}
			us$1 = ((u.$low >>> 0));
			while (true) {
				if (!(us$1 >= 100)) { break; }
				is$1 = (_r$1 = us$1 % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) * 2 >>> 0;
				us$1 = (_q$1 = us$1 / (100), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				i = i - (2) >> 0;
				(x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$3] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 1 >>> 0))));
				(x$4 = i + 0 >> 0, ((x$4 < 0 || x$4 >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[x$4] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$1 + 0 >>> 0))));
			}
			is$2 = us$1 * 2 >>> 0;
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt((is$2 + 1 >>> 0)));
			if (us$1 >= 10) {
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899".charCodeAt(is$2));
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? ($throwRuntimeError("index out of range"), undefined) : shifts[base]);
			if (s$1 > 0) {
				b = (new $Uint64(0, base));
				m = ((base >>> 0)) - 1 >>> 0;
				while (true) {
					if (!((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low)))) { break; }
					i = i - (1) >> 0;
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((((u.$low >>> 0)) & m) >>> 0)));
					u = $shiftRightUint64(u, (s$1));
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			} else {
				b$1 = (new $Uint64(0, base));
				while (true) {
					if (!((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low)))) { break; }
					i = i - (1) >> 0;
					q$1 = $div64(u, b$1, false);
					((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((x$5 = $mul64(q$1, b$1), new $Uint64(u.$high - x$5.$high, u.$low - x$5.$low)).$low >>> 0))));
					u = q$1;
				}
				i = i - (1) >> 0;
				((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((u.$low >>> 0))));
			}
		}
		if (neg) {
			i = i - (1) >> 0;
			((i < 0 || i >= a.length) ? ($throwRuntimeError("index out of range"), undefined) : a[i] = 45);
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = ($bytesToString($subslice(new sliceType$6(a), i)));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _q, graphicOnly, quote, s;
		return ($bytesToString(appendQuotedWith($makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), s, quote, ASCIIonly, graphicOnly)));
	};
	appendQuotedWith = function(buf, s, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _tuple, buf, graphicOnly, quote, r, s, width;
		buf = $append(buf, quote);
		width = 0;
		while (true) {
			if (!(s.length > 0)) { break; }
			r = ((s.charCodeAt(0) >> 0));
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = $substring(s, width);
				continue;
			}
			buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
			s = $substring(s, width);
		}
		buf = $append(buf, quote);
		return buf;
	};
	appendQuotedRuneWith = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, buf, graphicOnly, quote, r;
		buf = $append(buf, quote);
		if (!utf8.ValidRune(r)) {
			r = 65533;
		}
		buf = appendEscapedRune(buf, r, quote, ASCIIonly, graphicOnly);
		buf = $append(buf, quote);
		return buf;
	};
	appendEscapedRune = function(buf, r, quote, ASCIIonly, graphicOnly) {
		var ASCIIonly, _1, buf, graphicOnly, n, quote, r, runeTmp, s, s$1;
		runeTmp = arrayType$4.zero();
		if ((r === ((quote >> 0))) || (r === 92)) {
			buf = $append(buf, 92);
			buf = $append(buf, ((r << 24 >>> 24)));
			return buf;
		}
		if (ASCIIonly) {
			if (r < 128 && IsPrint(r)) {
				buf = $append(buf, ((r << 24 >>> 24)));
				return buf;
			}
		} else if (IsPrint(r) || graphicOnly && isInGraphicList(r)) {
			n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
			buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
			return buf;
		}
		_1 = r;
		if (_1 === (7)) {
			buf = $appendSlice(buf, "\\a");
		} else if (_1 === (8)) {
			buf = $appendSlice(buf, "\\b");
		} else if (_1 === (12)) {
			buf = $appendSlice(buf, "\\f");
		} else if (_1 === (10)) {
			buf = $appendSlice(buf, "\\n");
		} else if (_1 === (13)) {
			buf = $appendSlice(buf, "\\r");
		} else if (_1 === (9)) {
			buf = $appendSlice(buf, "\\t");
		} else if (_1 === (11)) {
			buf = $appendSlice(buf, "\\v");
		} else {
			if (r < 32) {
				buf = $appendSlice(buf, "\\x");
				buf = $append(buf, "0123456789abcdef".charCodeAt((((r << 24 >>> 24)) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((((r << 24 >>> 24)) & 15) >>> 0)));
			} else if (r > 1114111) {
				r = 65533;
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else if (r < 65536) {
				buf = $appendSlice(buf, "\\u");
				s = 12;
				while (true) {
					if (!(s >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s >>> 0)), 31)) >> 0) & 15)));
					s = s - (4) >> 0;
				}
			} else {
				buf = $appendSlice(buf, "\\U");
				s$1 = 28;
				while (true) {
					if (!(s$1 >= 0)) { break; }
					buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min(((s$1 >>> 0)), 31)) >> 0) & 15)));
					s$1 = s$1 - (4) >> 0;
				}
			}
		}
		return buf;
	};
	Quote = function(s) {
		var s;
		return quoteWith(s, 34, false, false);
	};
	$pkg.Quote = Quote;
	AppendQuote = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, false, false);
	};
	$pkg.AppendQuote = AppendQuote;
	QuoteToASCII = function(s) {
		var s;
		return quoteWith(s, 34, true, false);
	};
	$pkg.QuoteToASCII = QuoteToASCII;
	AppendQuoteToASCII = function(dst, s) {
		var dst, s;
		return appendQuotedWith(dst, s, 34, true, false);
	};
	$pkg.AppendQuoteToASCII = AppendQuoteToASCII;
	AppendQuoteRune = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, false, false);
	};
	$pkg.AppendQuoteRune = AppendQuoteRune;
	AppendQuoteRuneToASCII = function(dst, r) {
		var dst, r;
		return appendQuotedRuneWith(dst, r, 39, true, false);
	};
	$pkg.AppendQuoteRuneToASCII = AppendQuoteRuneToASCII;
	CanBackquote = function(s) {
		var _tuple, r, s, wid;
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			wid = _tuple[1];
			s = $substring(s, wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	$pkg.CanBackquote = CanBackquote;
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, c, ok, v;
		v = 0;
		ok = false;
		c = ((b >> 0));
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0;
			_tmp$1 = true;
			v = _tmp;
			ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0;
			_tmp$3 = true;
			v = _tmp$2;
			ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0;
			_tmp$5 = true;
			v = _tmp$4;
			ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = function(s, quote) {
		var _1, _2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err, j, j$1, multibyte, n, ok, quote, r, s, size, tail, v, v$1, value, x, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = $ifaceNil;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s);
			r = _tuple[0];
			size = _tuple[1];
			_tmp = r;
			_tmp$1 = true;
			_tmp$2 = $substring(s, size);
			_tmp$3 = $ifaceNil;
			value = _tmp;
			multibyte = _tmp$1;
			tail = _tmp$2;
			err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = ((s.charCodeAt(0) >> 0));
			_tmp$5 = false;
			_tmp$6 = $substring(s, 1);
			_tmp$7 = $ifaceNil;
			value = _tmp$4;
			multibyte = _tmp$5;
			tail = _tmp$6;
			err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = $substring(s, 2);
		switch (0) { default:
			_1 = c$1;
			if (_1 === (97)) {
				value = 7;
			} else if (_1 === (98)) {
				value = 8;
			} else if (_1 === (102)) {
				value = 12;
			} else if (_1 === (110)) {
				value = 10;
			} else if (_1 === (114)) {
				value = 13;
			} else if (_1 === (116)) {
				value = 9;
			} else if (_1 === (118)) {
				value = 11;
			} else if ((_1 === (120)) || (_1 === (117)) || (_1 === (85))) {
				n = 0;
				_2 = c$1;
				if (_2 === (120)) {
					n = 2;
				} else if (_2 === (117)) {
					n = 4;
				} else if (_2 === (85)) {
					n = 8;
				}
				v = 0;
				if (s.length < n) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j = 0;
				while (true) {
					if (!(j < n)) { break; }
					_tuple$1 = unhex(s.charCodeAt(j));
					x = _tuple$1[0];
					ok = _tuple$1[1];
					if (!ok) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v = (v << 4 >> 0) | x;
					j = j + (1) >> 0;
				}
				s = $substring(s, n);
				if (c$1 === 120) {
					value = v;
					break;
				}
				if (v > 1114111) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v;
				multibyte = true;
			} else if ((_1 === (48)) || (_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				v$1 = ((c$1 >> 0)) - 48 >> 0;
				if (s.length < 2) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				j$1 = 0;
				while (true) {
					if (!(j$1 < 2)) { break; }
					x$1 = ((s.charCodeAt(j$1) >> 0)) - 48 >> 0;
					if (x$1 < 0 || x$1 > 7) {
						err = $pkg.ErrSyntax;
						return [value, multibyte, tail, err];
					}
					v$1 = ((v$1 << 3 >> 0)) | x$1;
					j$1 = j$1 + (1) >> 0;
				}
				s = $substring(s, 2);
				if (v$1 > 255) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = v$1;
			} else if (_1 === (92)) {
				value = 92;
			} else if ((_1 === (39)) || (_1 === (34))) {
				if (!((c$1 === quote))) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				value = ((c$1 >> 0));
			} else {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
		}
		tail = s;
		return [value, multibyte, tail, err];
	};
	$pkg.UnquoteChar = UnquoteChar;
	Unquote = function(s) {
		var _1, _q, _tuple, _tuple$1, buf, buf$1, c, err, i, multibyte, n, n$1, quote, r, runeTmp, s, size, ss;
		n = s.length;
		if (n < 2) {
			return ["", $pkg.ErrSyntax];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			return ["", $pkg.ErrSyntax];
		}
		s = $substring(s, 1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				return ["", $pkg.ErrSyntax];
			}
			if (contains(s, 13)) {
				buf = $makeSlice(sliceType$6, 0, (s.length - 1 >> 0));
				i = 0;
				while (true) {
					if (!(i < s.length)) { break; }
					if (!((s.charCodeAt(i) === 13))) {
						buf = $append(buf, s.charCodeAt(i));
					}
					i = i + (1) >> 0;
				}
				return [($bytesToString(buf)), $ifaceNil];
			}
			return [s, $ifaceNil];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			return ["", $pkg.ErrSyntax];
		}
		if (contains(s, 10)) {
			return ["", $pkg.ErrSyntax];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_1 = quote;
			if (_1 === (34)) {
				return [s, $ifaceNil];
			} else if (_1 === (39)) {
				_tuple = utf8.DecodeRuneInString(s);
				r = _tuple[0];
				size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					return [s, $ifaceNil];
				}
			}
		}
		runeTmp = arrayType$4.zero();
		buf$1 = $makeSlice(sliceType$6, 0, (_q = ($imul(3, s.length)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (true) {
			if (!(s.length > 0)) { break; }
			_tuple$1 = UnquoteChar(s, quote);
			c = _tuple$1[0];
			multibyte = _tuple$1[1];
			ss = _tuple$1[2];
			err = _tuple$1[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return ["", err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf$1 = $append(buf$1, ((c << 24 >>> 24)));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf$1 = $appendSlice(buf$1, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				return ["", $pkg.ErrSyntax];
			}
		}
		return [($bytesToString(buf$1)), $ifaceNil];
	};
	$pkg.Unquote = Unquote;
	contains = function(s, c) {
		var c, i, s;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, a, h, i, j, x;
		_tmp = 0;
		_tmp$1 = a.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, r, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = ((r << 16 >>> 16));
			_tmp$1 = isPrint16;
			_tmp$2 = isNotPrint16;
			rr = _tmp;
			isPrint = _tmp$1;
			isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = (i & ~1) >> 0, ((x < 0 || x >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = ((r >>> 0));
		_tmp$4 = isPrint32;
		_tmp$5 = isNotPrint32;
		rr$1 = _tmp$3;
		isPrint$1 = _tmp$4;
		isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = (i$1 & ~1) >> 0, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, ((r << 16 >>> 16)));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === ((r << 16 >>> 16))));
	};
	$pkg.IsPrint = IsPrint;
	isInGraphicList = function(r) {
		var i, r, rr;
		if (r > 65535) {
			return false;
		}
		rr = ((r << 16 >>> 16));
		i = bsearch16(isGraphic, rr);
		return i < isGraphic.$length && (rr === ((i < 0 || i >= isGraphic.$length) ? ($throwRuntimeError("index out of range"), undefined) : isGraphic.$array[isGraphic.$offset + i]));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "set", name: "set", pkg: "strconv", typ: $funcType([$String], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Assign", name: "Assign", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "Shift", name: "Shift", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", typ: $funcType([], [$Uint64], false)}];
	ptrType$4.methods = [{prop: "floatBits", name: "floatBits", pkg: "strconv", typ: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [$Uint], false)}, {prop: "Multiply", name: "Multiply", pkg: "", typ: $funcType([extFloat], [], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", typ: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", typ: $funcType([], [$Int, $Int], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", typ: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", typ: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}];
	NumError.init("", [{prop: "Func", name: "Func", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Num", name: "Num", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	decimal.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "trunc", name: "trunc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	leftCheat.init("strconv", [{prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", anonymous: false, exported: false, typ: $String, tag: ""}]);
	extFloat.init("strconv", [{prop: "mant", name: "mant", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "exp", name: "exp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	floatInfo.init("strconv", [{prop: "mantbits", name: "mantbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "expbits", name: "expbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bias", name: "bias", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decimalSlice.init("strconv", [{prop: "d", name: "d", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "nd", name: "nd", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "dp", name: "dp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "neg", name: "neg", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125"), new leftCheat.ptr(9, "37252902984619140625"), new leftCheat.ptr(9, "186264514923095703125"), new leftCheat.ptr(10, "931322574615478515625"), new leftCheat.ptr(10, "4656612873077392578125"), new leftCheat.ptr(10, "23283064365386962890625"), new leftCheat.ptr(10, "116415321826934814453125"), new leftCheat.ptr(11, "582076609134674072265625"), new leftCheat.ptr(11, "2910383045673370361328125"), new leftCheat.ptr(11, "14551915228366851806640625"), new leftCheat.ptr(12, "72759576141834259033203125"), new leftCheat.ptr(12, "363797880709171295166015625"), new leftCheat.ptr(12, "1818989403545856475830078125"), new leftCheat.ptr(13, "9094947017729282379150390625"), new leftCheat.ptr(13, "45474735088646411895751953125"), new leftCheat.ptr(13, "227373675443232059478759765625"), new leftCheat.ptr(13, "1136868377216160297393798828125"), new leftCheat.ptr(14, "5684341886080801486968994140625"), new leftCheat.ptr(14, "28421709430404007434844970703125"), new leftCheat.ptr(14, "142108547152020037174224853515625"), new leftCheat.ptr(15, "710542735760100185871124267578125"), new leftCheat.ptr(15, "3552713678800500929355621337890625"), new leftCheat.ptr(15, "17763568394002504646778106689453125"), new leftCheat.ptr(16, "88817841970012523233890533447265625"), new leftCheat.ptr(16, "444089209850062616169452667236328125"), new leftCheat.ptr(16, "2220446049250313080847263336181640625"), new leftCheat.ptr(16, "11102230246251565404236316680908203125"), new leftCheat.ptr(17, "55511151231257827021181583404541015625"), new leftCheat.ptr(17, "277555756156289135105907917022705078125"), new leftCheat.ptr(17, "1387778780781445675529539585113525390625"), new leftCheat.ptr(18, "6938893903907228377647697925567626953125"), new leftCheat.ptr(18, "34694469519536141888238489627838134765625"), new leftCheat.ptr(18, "173472347597680709441192448139190673828125"), new leftCheat.ptr(19, "867361737988403547205962240695953369140625")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2237, 2260, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2809, 2809, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3162, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3407, 3412, 3427, 3430, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5109, 5112, 5117, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7304, 7360, 7367, 7376, 7417, 7424, 7669, 7675, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8382, 8400, 8432, 8448, 8587, 8592, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11244, 11247, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11844, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40917, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42935, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43205, 43214, 43225, 43232, 43261, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43877, 43888, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2229, 2274, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9215, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42927, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67808, 67829, 67835, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68028, 68047, 68050, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 68736, 68786, 68800, 68850, 68858, 68863, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70093, 70096, 70132, 70144, 70206, 70272, 70313, 70320, 70378, 70384, 70393, 70400, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70480, 70480, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70656, 70749, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71133, 71168, 71236, 71248, 71257, 71264, 71276, 71296, 71351, 71360, 71369, 71424, 71449, 71453, 71467, 71472, 71487, 71840, 71922, 71935, 71935, 72384, 72440, 72704, 72773, 72784, 72812, 72816, 72847, 72850, 72886, 73728, 74649, 74752, 74868, 74880, 75075, 77824, 78894, 82944, 83526, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 94176, 94176, 94208, 100332, 100352, 101106, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119272, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 121483, 121499, 121519, 122880, 122904, 122907, 122922, 124928, 125124, 125127, 125142, 125184, 125258, 125264, 125273, 125278, 125279, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127404, 127462, 127490, 127504, 127547, 127552, 127560, 127568, 127569, 127744, 128722, 128736, 128748, 128752, 128758, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 129296, 129319, 129328, 129328, 129331, 129355, 129360, 129374, 129408, 129425, 129472, 129472, 131072, 173782, 173824, 177972, 177984, 178205, 178208, 183969, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 399, 926, 2057, 2102, 2134, 2291, 2564, 2580, 2584, 4285, 4405, 4576, 4626, 4743, 4745, 4750, 4766, 4868, 4905, 4913, 4916, 5210, 5212, 7177, 7223, 7336, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 55968, 57351, 57378, 57381, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 63775, 63807]);
		isGraphic = new sliceType$4([160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, $init, io, strconv, Encoding, CorruptInputError, arrayType, arrayType$1, sliceType, ptrType, arrayType$4, NewEncoding;
	io = $packages["io"];
	strconv = $packages["strconv"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", true, "encoding/base64", true, function(encode_, decodeMap_, padChar_, strict_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.encode = arrayType.zero();
			this.decodeMap = arrayType$1.zero();
			this.padChar = 0;
			this.strict = false;
			return;
		}
		this.encode = encode_;
		this.decodeMap = decodeMap_;
		this.padChar = padChar_;
		this.strict = strict_;
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", true, "encoding/base64", true, null);
	arrayType = $arrayType($Uint8, 64);
	arrayType$1 = $arrayType($Uint8, 256);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Encoding);
	arrayType$4 = $arrayType($Uint8, 4);
	NewEncoding = function(encoder$1) {
		var e, encoder$1, i, i$1, i$2, x, x$1, x$2;
		if (!((encoder$1.length === 64))) {
			$panic(new $String("encoding alphabet is not 64-bytes long"));
		}
		i = 0;
		while (true) {
			if (!(i < encoder$1.length)) { break; }
			if ((encoder$1.charCodeAt(i) === 10) || (encoder$1.charCodeAt(i) === 13)) {
				$panic(new $String("encoding alphabet contains newline character"));
			}
			i = i + (1) >> 0;
		}
		e = new Encoding.ptr(arrayType.zero(), arrayType$1.zero(), 0, false);
		e.padChar = 61;
		$copyString(new sliceType(e.encode), encoder$1);
		i$1 = 0;
		while (true) {
			if (!(i$1 < 256)) { break; }
			(x = e.decodeMap, ((i$1 < 0 || i$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i$1] = 255));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (true) {
			if (!(i$2 < encoder$1.length)) { break; }
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$2), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = ((i$2 << 24 >>> 24))));
			i$2 = i$2 + (1) >> 0;
		}
		return e;
	};
	$pkg.NewEncoding = NewEncoding;
	Encoding.ptr.prototype.WithPadding = function(padding) {
		var enc, i, padding, x;
		enc = this;
		if ((padding === 13) || (padding === 10) || padding > 255) {
			$panic(new $String("invalid padding"));
		}
		i = 0;
		while (true) {
			if (!(i < 64)) { break; }
			if ((((x = enc.encode, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) >> 0)) === padding) {
				$panic(new $String("padding contained in alphabet"));
			}
			i = i + (1) >> 0;
		}
		enc.padChar = padding;
		return enc;
	};
	Encoding.prototype.WithPadding = function(padding) { return this.$val.WithPadding(padding); };
	Encoding.ptr.prototype.Strict = function() {
		var enc;
		enc = this;
		enc.strict = true;
		return enc;
	};
	Encoding.prototype.Strict = function() { return this.$val.Strict(); };
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var _1, _q, _tmp, _tmp$1, di, dst, enc, n, remain, si, src, val, val$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		di = _tmp;
		si = _tmp$1;
		n = $imul(((_q = src.$length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), 3);
		while (true) {
			if (!(si < n)) { break; }
			val = (((((((x = si + 0 >> 0, ((x < 0 || x >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x])) >>> 0)) << 16 >>> 0) | ((((x$1 = si + 1 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = si + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$2])) >>> 0))) >>> 0;
			(x$5 = di + 0 >> 0, ((x$5 < 0 || x$5 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$5] = (x$3 = enc.encode, x$4 = ((val >>> 18 >>> 0) & 63) >>> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4]))));
			(x$8 = di + 1 >> 0, ((x$8 < 0 || x$8 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$8] = (x$6 = enc.encode, x$7 = ((val >>> 12 >>> 0) & 63) >>> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))));
			(x$11 = di + 2 >> 0, ((x$11 < 0 || x$11 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$11] = (x$9 = enc.encode, x$10 = ((val >>> 6 >>> 0) & 63) >>> 0, ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10]))));
			(x$14 = di + 3 >> 0, ((x$14 < 0 || x$14 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$14] = (x$12 = enc.encode, x$13 = (val & 63) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))));
			si = si + (3) >> 0;
			di = di + (4) >> 0;
		}
		remain = src.$length - si >> 0;
		if (remain === 0) {
			return;
		}
		val$1 = (((x$15 = si + 0 >> 0, ((x$15 < 0 || x$15 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$15])) >>> 0)) << 16 >>> 0;
		if (remain === 2) {
			val$1 = (val$1 | (((((x$16 = si + 1 >> 0, ((x$16 < 0 || x$16 >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + x$16])) >>> 0)) << 8 >>> 0))) >>> 0;
		}
		(x$19 = di + 0 >> 0, ((x$19 < 0 || x$19 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$19] = (x$17 = enc.encode, x$18 = ((val$1 >>> 18 >>> 0) & 63) >>> 0, ((x$18 < 0 || x$18 >= x$17.length) ? ($throwRuntimeError("index out of range"), undefined) : x$17[x$18]))));
		(x$22 = di + 1 >> 0, ((x$22 < 0 || x$22 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$22] = (x$20 = enc.encode, x$21 = ((val$1 >>> 12 >>> 0) & 63) >>> 0, ((x$21 < 0 || x$21 >= x$20.length) ? ($throwRuntimeError("index out of range"), undefined) : x$20[x$21]))));
		_1 = remain;
		if (_1 === (2)) {
			(x$25 = di + 2 >> 0, ((x$25 < 0 || x$25 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$25] = (x$23 = enc.encode, x$24 = ((val$1 >>> 6 >>> 0) & 63) >>> 0, ((x$24 < 0 || x$24 >= x$23.length) ? ($throwRuntimeError("index out of range"), undefined) : x$23[x$24]))));
			if (!((enc.padChar === -1))) {
				(x$26 = di + 3 >> 0, ((x$26 < 0 || x$26 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$26] = ((enc.padChar << 24 >>> 24))));
			}
		} else if (_1 === (1)) {
			if (!((enc.padChar === -1))) {
				(x$27 = di + 2 >> 0, ((x$27 < 0 || x$27 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$27] = ((enc.padChar << 24 >>> 24))));
				(x$28 = di + 3 >> 0, ((x$28 < 0 || x$28 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$28] = ((enc.padChar << 24 >>> 24))));
			}
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var buf, enc, src;
		enc = this;
		buf = $makeSlice(sliceType, enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return ($bytesToString(buf));
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ((($imul(n, 8)) + 5 >> 0)) / 6, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = ((n + 2 >> 0)) / 3, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 4);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt((new $Int64(e.$high, e.$low)), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var _1, _2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dinc, dlen, dst, enc, end, err, in$1, j, n, out, si, src, val, x;
		n = 0;
		end = false;
		err = $ifaceNil;
		enc = this;
		si = 0;
		while (true) {
			if (!(si < src.$length && !end)) { break; }
			dbuf = arrayType$4.zero();
			_tmp = 3;
			_tmp$1 = 4;
			dinc = _tmp;
			dlen = _tmp$1;
			j = 0;
			while (true) {
				if (!(j < 4)) { break; }
				if (src.$length === si) {
					if ((j === 0)) {
						_tmp$2 = n;
						_tmp$3 = false;
						_tmp$4 = $ifaceNil;
						n = _tmp$2;
						end = _tmp$3;
						err = _tmp$4;
						return [n, end, err];
					} else if (((j === 1)) || (!((enc.padChar === -1)))) {
						_tmp$5 = n;
						_tmp$6 = false;
						_tmp$7 = (new CorruptInputError(0, (si - j >> 0)));
						n = _tmp$5;
						end = _tmp$6;
						err = _tmp$7;
						return [n, end, err];
					}
					_tmp$8 = j - 1 >> 0;
					_tmp$9 = j;
					_tmp$10 = true;
					dinc = _tmp$8;
					dlen = _tmp$9;
					end = _tmp$10;
					break;
				}
				in$1 = ((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]);
				si = si + (1) >> 0;
				out = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[in$1]));
				if (!((out === 255))) {
					((j < 0 || j >= dbuf.length) ? ($throwRuntimeError("index out of range"), undefined) : dbuf[j] = out);
					j = j + (1) >> 0;
					continue;
				}
				if ((in$1 === 10) || (in$1 === 13)) {
					j = j - (1) >> 0;
					j = j + (1) >> 0;
					continue;
				}
				if (((in$1 >> 0)) === enc.padChar) {
					_1 = j;
					if ((_1 === (0)) || (_1 === (1))) {
						_tmp$11 = n;
						_tmp$12 = false;
						_tmp$13 = (new CorruptInputError(0, (si - 1 >> 0)));
						n = _tmp$11;
						end = _tmp$12;
						err = _tmp$13;
						return [n, end, err];
					} else if (_1 === (2)) {
						while (true) {
							if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
							si = si + (1) >> 0;
						}
						if (si === src.$length) {
							_tmp$14 = n;
							_tmp$15 = false;
							_tmp$16 = (new CorruptInputError(0, src.$length));
							n = _tmp$14;
							end = _tmp$15;
							err = _tmp$16;
							return [n, end, err];
						}
						if (!((((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) >> 0)) === enc.padChar))) {
							_tmp$17 = n;
							_tmp$18 = false;
							_tmp$19 = (new CorruptInputError(0, (si - 1 >> 0)));
							n = _tmp$17;
							end = _tmp$18;
							err = _tmp$19;
							return [n, end, err];
						}
						si = si + (1) >> 0;
					}
					while (true) {
						if (!(si < src.$length && ((((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 10) || (((si < 0 || si >= src.$length) ? ($throwRuntimeError("index out of range"), undefined) : src.$array[src.$offset + si]) === 13)))) { break; }
						si = si + (1) >> 0;
					}
					if (si < src.$length) {
						err = (new CorruptInputError(0, si));
					}
					_tmp$20 = 3;
					_tmp$21 = j;
					_tmp$22 = true;
					dinc = _tmp$20;
					dlen = _tmp$21;
					end = _tmp$22;
					break;
				}
				_tmp$23 = n;
				_tmp$24 = false;
				_tmp$25 = (new CorruptInputError(0, (si - 1 >> 0)));
				n = _tmp$23;
				end = _tmp$24;
				err = _tmp$25;
				return [n, end, err];
			}
			val = ((((((((dbuf[0] >>> 0)) << 18 >>> 0) | (((dbuf[1] >>> 0)) << 12 >>> 0)) >>> 0) | (((dbuf[2] >>> 0)) << 6 >>> 0)) >>> 0) | ((dbuf[3] >>> 0))) >>> 0;
			_tmp$26 = (((val >>> 0 >>> 0) << 24 >>> 24));
			_tmp$27 = (((val >>> 8 >>> 0) << 24 >>> 24));
			_tmp$28 = (((val >>> 16 >>> 0) << 24 >>> 24));
			dbuf[2] = _tmp$26;
			dbuf[1] = _tmp$27;
			dbuf[0] = _tmp$28;
			_2 = dlen;
			if (_2 === (4)) {
				(2 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 2] = dbuf[2]);
				dbuf[2] = 0;
				(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
				if (enc.strict && !((dbuf[2] === 0))) {
					_tmp$29 = n;
					_tmp$30 = end;
					_tmp$31 = (new CorruptInputError(0, (si - 1 >> 0)));
					n = _tmp$29;
					end = _tmp$30;
					err = _tmp$31;
					return [n, end, err];
				}
				dbuf[1] = 0;
				(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
				if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
					_tmp$32 = n;
					_tmp$33 = end;
					_tmp$34 = (new CorruptInputError(0, (si - 2 >> 0)));
					n = _tmp$32;
					end = _tmp$33;
					err = _tmp$34;
					return [n, end, err];
				}
			} else if (_2 === (3)) {
				(1 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 1] = dbuf[1]);
				if (enc.strict && !((dbuf[2] === 0))) {
					_tmp$35 = n;
					_tmp$36 = end;
					_tmp$37 = (new CorruptInputError(0, (si - 1 >> 0)));
					n = _tmp$35;
					end = _tmp$36;
					err = _tmp$37;
					return [n, end, err];
				}
				dbuf[1] = 0;
				(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
				if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
					_tmp$38 = n;
					_tmp$39 = end;
					_tmp$40 = (new CorruptInputError(0, (si - 2 >> 0)));
					n = _tmp$38;
					end = _tmp$39;
					err = _tmp$40;
					return [n, end, err];
				}
			} else if (_2 === (2)) {
				(0 >= dst.$length ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + 0] = dbuf[0]);
				if (enc.strict && (!((dbuf[1] === 0)) || !((dbuf[2] === 0)))) {
					_tmp$41 = n;
					_tmp$42 = end;
					_tmp$43 = (new CorruptInputError(0, (si - 2 >> 0)));
					n = _tmp$41;
					end = _tmp$42;
					err = _tmp$43;
					return [n, end, err];
				}
			}
			dst = $subslice(dst, dinc);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$44 = n;
		_tmp$45 = end;
		_tmp$46 = err;
		n = _tmp$44;
		end = _tmp$45;
		err = _tmp$46;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var _tuple, dst, enc, err, n, src;
		n = 0;
		err = $ifaceNil;
		enc = this;
		_tuple = enc.decode(dst, src);
		n = _tuple[0];
		err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var _tuple, dbuf, enc, err, n, s;
		enc = this;
		dbuf = $makeSlice(sliceType, enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, (new sliceType($stringToBytes(s))));
		n = _tuple[0];
		err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var _q, _q$1, enc, n;
		enc = this;
		if (enc.padChar === -1) {
			return (_q = ($imul(n, 6)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $imul((_q$1 = n / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 3);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	Encoding.methods = [{prop: "WithPadding", name: "WithPadding", pkg: "", typ: $funcType([$Int32], [ptrType], false)}, {prop: "Strict", name: "Strict", pkg: "", typ: $funcType([], [ptrType], false)}];
	ptrType.methods = [{prop: "Encode", name: "Encode", pkg: "", typ: $funcType([sliceType, sliceType], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", typ: $funcType([sliceType], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", typ: $funcType([sliceType, sliceType], [$Int, $Bool, $error], false)}, {prop: "Decode", name: "Decode", pkg: "", typ: $funcType([sliceType, sliceType], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", typ: $funcType([$String], [sliceType, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", typ: $funcType([$Int], [$Int], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Encoding.init("encoding/base64", [{prop: "encode", name: "encode", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "decodeMap", name: "decodeMap", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "padChar", name: "padChar", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "strict", name: "strict", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		$pkg.RawStdEncoding = $clone($pkg.StdEncoding, Encoding).WithPadding(-1);
		$pkg.RawURLEncoding = $clone($pkg.URLEncoding, Encoding).WithPadding(-1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, $init, errors, js, race, runtime, sync, SockaddrDatalink, mmapper, Errno, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, Timespec, Stat_t, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrDatalink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, Iovec, IPMreq, IPv6Mreq, Msghdr, sliceType, sliceType$1, ptrType$2, arrayType, arrayType$1, ptrType$11, arrayType$3, arrayType$4, arrayType$5, arrayType$6, arrayType$10, ptrType$16, arrayType$11, ptrType$17, ptrType$18, structType, ptrType$20, ptrType$21, ptrType$27, mapType, funcType$2, funcType$3, ptrType$28, ptrType$29, ptrType$30, ptrType$31, arrayType$15, ptrType$32, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envs, freebsdConfArch, minRoutingSockaddrLen, mapper, errEAGAIN, errEINVAL, errENOENT, ioSync, ioSync$24ptr, errors$1, init, printWarning, printToConsole, indexByte, runtime_envs, syscall, Syscall, Syscall6, BytePtrFromString, readInt, readIntBE, readIntLE, ParseDirent, CloseOnExec, SetNonblock, msanRead, msanWrite, rsaAlignOf, itoa, uitoa, ReadDirent, anyToSockaddr, Accept, Recvmsg, SendmsgN, direntIno, direntReclen, direntNamlen, errnoErr, Read, Write, Recvfrom, Sendto, SetsockoptByte, SetsockoptInt, SetsockoptInet4Addr, SetsockoptIPMreq, SetsockoptIPv6Mreq, SetsockoptLinger, accept, setsockopt, Shutdown, recvfrom, sendto, recvmsg, sendmsg, fcntl, Close, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Lstat, Pread, Pwrite, read, Seek, write, mmap, munmap;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	race = $packages["internal/race"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	SockaddrDatalink = $pkg.SockaddrDatalink = $newType(0, $kindStruct, "syscall.SockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			this.raw = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
		this.raw = raw_;
	});
	mmapper = $pkg.mmapper = $newType(0, $kindStruct, "syscall.mmapper", true, "syscall", false, function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.active = false;
			this.mmap = $throwNilPointerError;
			this.munmap = $throwNilPointerError;
			return;
		}
		this.Mutex = Mutex_;
		this.active = active_;
		this.mmap = mmap_;
		this.munmap = munmap_;
	});
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", true, "syscall", true, null);
	Sockaddr = $pkg.Sockaddr = $newType(8, $kindInterface, "syscall.Sockaddr", true, "syscall", true, null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, $kindStruct, "syscall.SockaddrInet4", true, "syscall", true, function(Port_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.raw = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero());
			return;
		}
		this.Port = Port_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, $kindStruct, "syscall.SockaddrInet6", true, "syscall", true, function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Port = 0;
			this.ZoneId = 0;
			this.Addr = arrayType.zero();
			this.raw = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0);
			return;
		}
		this.Port = Port_;
		this.ZoneId = ZoneId_;
		this.Addr = Addr_;
		this.raw = raw_;
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, $kindStruct, "syscall.SockaddrUnix", true, "syscall", true, function(Name_, raw_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.raw = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero());
			return;
		}
		this.Name = Name_;
		this.raw = raw_;
	});
	Timespec = $pkg.Timespec = $newType(0, $kindStruct, "syscall.Timespec", true, "syscall", true, function(Sec_, Nsec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Sec = new $Int64(0, 0);
			this.Nsec = new $Int64(0, 0);
			return;
		}
		this.Sec = Sec_;
		this.Nsec = Nsec_;
	});
	Stat_t = $pkg.Stat_t = $newType(0, $kindStruct, "syscall.Stat_t", true, "syscall", true, function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dev = 0;
			this.Mode = 0;
			this.Nlink = 0;
			this.Ino = new $Uint64(0, 0);
			this.Uid = 0;
			this.Gid = 0;
			this.Rdev = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Atimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Mtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Ctimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Birthtimespec = new Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0));
			this.Size = new $Int64(0, 0);
			this.Blocks = new $Int64(0, 0);
			this.Blksize = 0;
			this.Flags = 0;
			this.Gen = 0;
			this.Lspare = 0;
			this.Qspare = arrayType$15.zero();
			return;
		}
		this.Dev = Dev_;
		this.Mode = Mode_;
		this.Nlink = Nlink_;
		this.Ino = Ino_;
		this.Uid = Uid_;
		this.Gid = Gid_;
		this.Rdev = Rdev_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Atimespec = Atimespec_;
		this.Mtimespec = Mtimespec_;
		this.Ctimespec = Ctimespec_;
		this.Birthtimespec = Birthtimespec_;
		this.Size = Size_;
		this.Blocks = Blocks_;
		this.Blksize = Blksize_;
		this.Flags = Flags_;
		this.Gen = Gen_;
		this.Lspare = Lspare_;
		this.Qspare = Qspare_;
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, $kindStruct, "syscall.RawSockaddrInet4", true, "syscall", true, function(Len_, Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Addr = arrayType$1.zero();
			this.Zero = arrayType$6.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Addr = Addr_;
		this.Zero = Zero_;
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, $kindStruct, "syscall.RawSockaddrInet6", true, "syscall", true, function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Port = 0;
			this.Flowinfo = 0;
			this.Addr = arrayType.zero();
			this.Scope_id = 0;
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Port = Port_;
		this.Flowinfo = Flowinfo_;
		this.Addr = Addr_;
		this.Scope_id = Scope_id_;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, $kindStruct, "syscall.RawSockaddrUnix", true, "syscall", true, function(Len_, Family_, Path_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Path = arrayType$11.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Path = Path_;
	});
	RawSockaddrDatalink = $pkg.RawSockaddrDatalink = $newType(0, $kindStruct, "syscall.RawSockaddrDatalink", true, "syscall", true, function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Index = 0;
			this.Type = 0;
			this.Nlen = 0;
			this.Alen = 0;
			this.Slen = 0;
			this.Data = arrayType$3.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Index = Index_;
		this.Type = Type_;
		this.Nlen = Nlen_;
		this.Alen = Alen_;
		this.Slen = Slen_;
		this.Data = Data_;
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, $kindStruct, "syscall.RawSockaddr", true, "syscall", true, function(Len_, Family_, Data_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Len = 0;
			this.Family = 0;
			this.Data = arrayType$4.zero();
			return;
		}
		this.Len = Len_;
		this.Family = Family_;
		this.Data = Data_;
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, $kindStruct, "syscall.RawSockaddrAny", true, "syscall", true, function(Addr_, Pad_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Addr = new RawSockaddr.ptr(0, 0, arrayType$4.zero());
			this.Pad = arrayType$5.zero();
			return;
		}
		this.Addr = Addr_;
		this.Pad = Pad_;
	});
	_Socklen = $pkg._Socklen = $newType(4, $kindUint32, "syscall._Socklen", true, "syscall", false, null);
	Linger = $pkg.Linger = $newType(0, $kindStruct, "syscall.Linger", true, "syscall", true, function(Onoff_, Linger_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Onoff = 0;
			this.Linger = 0;
			return;
		}
		this.Onoff = Onoff_;
		this.Linger = Linger_;
	});
	Iovec = $pkg.Iovec = $newType(0, $kindStruct, "syscall.Iovec", true, "syscall", true, function(Base_, Len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Base = ptrType$2.nil;
			this.Len = new $Uint64(0, 0);
			return;
		}
		this.Base = Base_;
		this.Len = Len_;
	});
	IPMreq = $pkg.IPMreq = $newType(0, $kindStruct, "syscall.IPMreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType$1.zero();
			this.Interface = arrayType$1.zero();
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	IPv6Mreq = $pkg.IPv6Mreq = $newType(0, $kindStruct, "syscall.IPv6Mreq", true, "syscall", true, function(Multiaddr_, Interface_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Multiaddr = arrayType.zero();
			this.Interface = 0;
			return;
		}
		this.Multiaddr = Multiaddr_;
		this.Interface = Interface_;
	});
	Msghdr = $pkg.Msghdr = $newType(0, $kindStruct, "syscall.Msghdr", true, "syscall", true, function(Name_, Namelen_, Pad_cgo_0_, Iov_, Iovlen_, Pad_cgo_1_, Control_, Controllen_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = ptrType$2.nil;
			this.Namelen = 0;
			this.Pad_cgo_0 = arrayType$1.zero();
			this.Iov = ptrType$18.nil;
			this.Iovlen = 0;
			this.Pad_cgo_1 = arrayType$1.zero();
			this.Control = ptrType$2.nil;
			this.Controllen = 0;
			this.Flags = 0;
			return;
		}
		this.Name = Name_;
		this.Namelen = Namelen_;
		this.Pad_cgo_0 = Pad_cgo_0_;
		this.Iov = Iov_;
		this.Iovlen = Iovlen_;
		this.Pad_cgo_1 = Pad_cgo_1_;
		this.Control = Control_;
		this.Controllen = Controllen_;
		this.Flags = Flags_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($String);
	ptrType$2 = $ptrType($Uint8);
	arrayType = $arrayType($Uint8, 16);
	arrayType$1 = $arrayType($Uint8, 4);
	ptrType$11 = $ptrType(SockaddrDatalink);
	arrayType$3 = $arrayType($Int8, 12);
	arrayType$4 = $arrayType($Int8, 14);
	arrayType$5 = $arrayType($Int8, 92);
	arrayType$6 = $arrayType($Int8, 8);
	arrayType$10 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType($Uint16);
	arrayType$11 = $arrayType($Int8, 104);
	ptrType$17 = $ptrType(_Socklen);
	ptrType$18 = $ptrType(Iovec);
	structType = $structType("syscall", [{prop: "addr", name: "addr", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	ptrType$20 = $ptrType($Int64);
	ptrType$21 = $ptrType($Int32);
	ptrType$27 = $ptrType(mmapper);
	mapType = $mapType(ptrType$2, sliceType);
	funcType$2 = $funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false);
	funcType$3 = $funcType([$Uintptr, $Uintptr], [$error], false);
	ptrType$28 = $ptrType(SockaddrInet4);
	ptrType$29 = $ptrType(SockaddrInet6);
	ptrType$30 = $ptrType(SockaddrUnix);
	ptrType$31 = $ptrType(Timespec);
	arrayType$15 = $arrayType($Int64, 2);
	ptrType$32 = $ptrType(Msghdr);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize(($bytesToString(lineBuffer)), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			$global.console.error($externalize("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md", $String));
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var b, goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = indexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize(($bytesToString($subslice(lineBuffer, 0, i))), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	indexByte = function(s, c) {
		var _i, _ref, b, c, i, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	runtime_envs = function() {
		var envkeys, envs$1, i, jsEnv, key, process;
		process = $global.process;
		if (process === undefined) {
			return sliceType$1.nil;
		}
		jsEnv = process.env;
		envkeys = $global.Object.keys(jsEnv);
		envs$1 = $makeSlice(sliceType$1, $parseInt(envkeys.length));
		i = 0;
		while (true) {
			if (!(i < $parseInt(envkeys.length))) { break; }
			key = $internalize(envkeys[i], $String);
			((i < 0 || i >= envs$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : envs$1.$array[envs$1.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String));
			i = i + (1) >> 0;
		}
		return envs$1;
	};
	syscall = function(name) {
		var name, require, $deferred;
		/* */ var $err = null; try { $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === null) {
			if (alreadyTriedToLoad) {
				return null;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return null; } finally { $callDeferred($deferred, $err); }
	};
	Syscall = function(trap, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a1, a2, a3, array, err, f, r, r1, r2, slice, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = $makeSlice(sliceType, $parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = (($parseInt(array.length) >>> 0));
			_tmp$4 = 0;
			_tmp$5 = 0;
			r1 = _tmp$3;
			r2 = _tmp$4;
			err = _tmp$5;
			return [r1, r2, err];
		}
		if (trap === 1) {
			runtime.Goexit();
		}
		printWarning();
		_tmp$6 = ((minusOne >>> 0));
		_tmp$7 = 0;
		_tmp$8 = 13;
		r1 = _tmp$6;
		r2 = _tmp$7;
		err = _tmp$8;
		return [r1, r2, err];
	};
	$pkg.Syscall = Syscall;
	Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a1, a2, a3, a4, a5, a6, err, f, r, r1, r2, trap;
		r1 = 0;
		r2 = 0;
		err = 0;
		f = syscall("Syscall6");
		if (!(f === null)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = ((($parseInt(r[0]) >> 0) >>> 0));
			_tmp$1 = ((($parseInt(r[1]) >> 0) >>> 0));
			_tmp$2 = ((($parseInt(r[2]) >> 0) >>> 0));
			r1 = _tmp;
			r2 = _tmp$1;
			err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = ((minusOne >>> 0));
		_tmp$4 = 0;
		_tmp$5 = 13;
		r1 = _tmp$3;
		r2 = _tmp$4;
		err = _tmp$5;
		return [r1, r2, err];
	};
	$pkg.Syscall6 = Syscall6;
	BytePtrFromString = function(s) {
		var _i, _ref, array, b, i, s;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = (new sliceType($stringToBytes(s)));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [ptrType$2.nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [((array)), $ifaceNil];
	};
	$pkg.BytePtrFromString = BytePtrFromString;
	readInt = function(b, off, size) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, off, ok, size, u;
		u = new $Uint64(0, 0);
		ok = false;
		if (b.$length < (((off + size >>> 0) >> 0))) {
			_tmp = new $Uint64(0, 0);
			_tmp$1 = false;
			u = _tmp;
			ok = _tmp$1;
			return [u, ok];
		}
		if (false) {
			_tmp$2 = readIntBE($subslice(b, off), size);
			_tmp$3 = true;
			u = _tmp$2;
			ok = _tmp$3;
			return [u, ok];
		}
		_tmp$4 = readIntLE($subslice(b, off), size);
		_tmp$5 = true;
		u = _tmp$4;
		ok = _tmp$5;
		return [u, ok];
	};
	readIntBE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), x$1 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), x$5 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$15 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	readIntLE = function(b, size) {
		var _1, b, size, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		_1 = size;
		if (_1 === (1)) {
			return (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0])));
		} else if (_1 === (2)) {
			$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
			return (x = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$1 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
		} else if (_1 === (4)) {
			$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
			return (x$2 = (x$3 = (x$4 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$5 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$4.$high | x$5.$high, (x$4.$low | x$5.$low) >>> 0)), x$6 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$3.$high | x$6.$high, (x$3.$low | x$6.$low) >>> 0)), x$7 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$2.$high | x$7.$high, (x$2.$low | x$7.$low) >>> 0));
		} else if (_1 === (8)) {
			$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
			return (x$8 = (x$9 = (x$10 = (x$11 = (x$12 = (x$13 = (x$14 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$15 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$14.$high | x$15.$high, (x$14.$low | x$15.$low) >>> 0)), x$16 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$13.$high | x$16.$high, (x$13.$low | x$16.$low) >>> 0)), x$17 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$12.$high | x$17.$high, (x$12.$low | x$17.$low) >>> 0)), x$18 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$11.$high | x$18.$high, (x$11.$low | x$18.$low) >>> 0)), x$19 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$10.$high | x$19.$high, (x$10.$low | x$19.$low) >>> 0)), x$20 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$9.$high | x$20.$high, (x$9.$low | x$20.$low) >>> 0)), x$21 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x$8.$high | x$21.$high, (x$8.$low | x$21.$low) >>> 0));
		} else {
			$panic(new $String("syscall: readInt with unsupported size"));
		}
	};
	ParseDirent = function(buf, max, names) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, buf, c, consumed, count, i, ino, max, name, names, namlen, newnames, ok, origlen, rec, reclen, x, x$1, x$2;
		consumed = 0;
		count = 0;
		newnames = sliceType$1.nil;
		origlen = buf.$length;
		count = 0;
		while (true) {
			if (!(!((max === 0)) && buf.$length > 0)) { break; }
			_tuple = direntReclen(buf);
			reclen = _tuple[0];
			ok = _tuple[1];
			if (!ok || (x = (new $Uint64(0, buf.$length)), (reclen.$high > x.$high || (reclen.$high === x.$high && reclen.$low > x.$low)))) {
				_tmp = origlen;
				_tmp$1 = count;
				_tmp$2 = names;
				consumed = _tmp;
				count = _tmp$1;
				newnames = _tmp$2;
				return [consumed, count, newnames];
			}
			rec = $subslice(buf, 0, $flatten64(reclen));
			buf = $subslice(buf, $flatten64(reclen));
			_tuple$1 = direntIno(rec);
			ino = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				break;
			}
			if ((ino.$high === 0 && ino.$low === 0)) {
				continue;
			}
			_tuple$2 = direntNamlen(rec);
			namlen = _tuple$2[0];
			ok = _tuple$2[1];
			if (!ok || (x$1 = new $Uint64(0 + namlen.$high, 21 + namlen.$low), x$2 = (new $Uint64(0, rec.$length)), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				break;
			}
			name = $subslice(rec, 21, $flatten64(new $Uint64(0 + namlen.$high, 21 + namlen.$low)));
			_ref = name;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (c === 0) {
					name = $subslice(name, 0, i);
					break;
				}
				_i++;
			}
			if (($bytesToString(name)) === "." || ($bytesToString(name)) === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, ($bytesToString(name)));
		}
		_tmp$3 = origlen - buf.$length >> 0;
		_tmp$4 = count;
		_tmp$5 = names;
		consumed = _tmp$3;
		count = _tmp$4;
		newnames = _tmp$5;
		return [consumed, count, newnames];
	};
	$pkg.ParseDirent = ParseDirent;
	CloseOnExec = function(fd) {
		var fd;
		fcntl(fd, 2, 1);
	};
	$pkg.CloseOnExec = CloseOnExec;
	SetNonblock = function(fd, nonblocking) {
		var _tuple, _tuple$1, err, fd, flag, nonblocking;
		err = $ifaceNil;
		_tuple = fcntl(fd, 3, 0);
		flag = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | (4);
		} else {
			flag = (flag & ~(4)) >> 0;
		}
		_tuple$1 = fcntl(fd, 4, flag);
		err = _tuple$1[1];
		err = err;
		return err;
	};
	$pkg.SetNonblock = SetNonblock;
	msanRead = function(addr, len) {
		var addr, len;
	};
	msanWrite = function(addr, len) {
		var addr, len;
	};
	rsaAlignOf = function(salen) {
		var salen, salign;
		salign = 8;
		if (true) {
			salign = 4;
		} else if (false) {
			salign = 8;
		} else if (false) {
			if (freebsdConfArch === "amd64") {
				salign = 8;
			}
		}
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	itoa = function(val) {
		var val;
		if (val < 0) {
			return "-" + uitoa(((-val >>> 0)));
		}
		return uitoa(((val >>> 0)));
	};
	uitoa = function(val) {
		var _q, _r, buf, i, val;
		buf = arrayType$10.zero();
		i = 31;
		while (true) {
			if (!(val >= 10)) { break; }
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((val + 48 >>> 0) << 24 >>> 24)));
		return ($bytesToString($subslice(new sliceType(buf), i)));
	};
	Timespec.ptr.prototype.Unix = function() {
		var _tmp, _tmp$1, nsec, sec, ts;
		sec = new $Int64(0, 0);
		nsec = new $Int64(0, 0);
		ts = this;
		_tmp = (ts.Sec);
		_tmp$1 = (ts.Nsec);
		sec = _tmp;
		nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64((ts.Sec), new $Int64(0, 1000000000)), x$1 = (ts.Nsec), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = function(fd, buf) {
		var _tuple, base, buf, err, fd, n;
		n = 0;
		err = $ifaceNil;
		base = ((new Uint8Array(8)));
		_tuple = Getdirentries(fd, buf, base);
		n = _tuple[0];
		err = _tuple[1];
		return [n, err];
	};
	$pkg.ReadDirent = ReadDirent;
	SockaddrInet4.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 16;
		sa.raw.Family = 2;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		i = 0;
		while (true) {
			if (!(i < 4)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, p, sa, x, x$1, x$2;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 28;
		sa.raw.Family = 30;
		p = (((x = sa.raw, (x.$ptr_Port || (x.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, x))))));
		p.nilCheck, p[0] = (((sa.Port >> 8 >> 0) << 24 >>> 24));
		p.nilCheck, p[1] = ((sa.Port << 24 >>> 24));
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			(x$2 = sa.raw.Addr, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x$1 = sa.Addr, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, n, name, sa, x;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n >= 104 || (n === 0)) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = (((3 + n >> 0) << 24 >>> 24));
		sa.raw.Family = 1;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			(x = sa.raw.Path, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((name.charCodeAt(i) << 24 >> 24))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(106);
		return [(_array), ((sa.raw.Len >>> 0)), $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrDatalink.ptr.prototype.sockaddr = function() {
		var _array, _struct, _view, i, sa, x, x$1;
		sa = this;
		if (sa.Index === 0) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = sa.Len;
		sa.raw.Family = 18;
		sa.raw.Index = sa.Index;
		sa.raw.Type = sa.Type;
		sa.raw.Nlen = sa.Nlen;
		sa.raw.Alen = sa.Alen;
		sa.raw.Slen = sa.Slen;
		i = 0;
		while (true) {
			if (!(i < 12)) { break; }
			(x$1 = sa.raw.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = sa.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(20);
		return [(_array), 20, $ifaceNil];
	};
	SockaddrDatalink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _1, _array, _array$1, _array$2, _array$3, _array$4, _array$5, _array$6, _array$7, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _view, _view$1, _view$2, _view$3, _view$4, _view$5, _view$6, _view$7, bytes, i, i$1, i$2, i$3, n, p, p$1, pp, pp$1, pp$2, pp$3, rsa, sa, sa$1, sa$2, sa$3, x, x$1, x$2, x$3, x$4, x$5, x$6;
		_1 = rsa.Addr.Family;
		if (_1 === (18)) {
			_array$1 = new Uint8Array(108);
			pp = ((_array = (_array$1), _struct = new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Index = _view.getUint16(2, true), _struct.Type = _view.getUint8(4, true), _struct.Nlen = _view.getUint8(5, true), _struct.Alen = _view.getUint8(6, true), _struct.Slen = _view.getUint8(7, true), _struct.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct));
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray($kindInt8))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero(), new RawSockaddrDatalink.ptr(0, 0, 0, 0, 0, 0, 0, arrayType$3.zero()));
			sa.Len = pp.Len;
			sa.Family = pp.Family;
			sa.Index = pp.Index;
			sa.Type = pp.Type;
			sa.Nlen = pp.Nlen;
			sa.Alen = pp.Alen;
			sa.Slen = pp.Slen;
			i = 0;
			while (true) {
				if (!(i < 12)) { break; }
				(x$1 = sa.Data, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = (x = pp.Data, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))));
				i = i + (1) >> 0;
			}
			return [sa, $ifaceNil];
		} else if (_1 === (1)) {
			_array$3 = new Uint8Array(108);
			pp$1 = ((_array$2 = (_array$3), _struct$2 = new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Path = new ($nativeArray($kindInt8))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength)), _struct$2));
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$3.getUint8(0, true), _struct$3.Addr.Family = _view$3.getUint8(1, true), _struct$3.Addr.Data = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray($kindInt8))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			if (pp$1.Len < 2 || pp$1.Len > 106) {
				return [$ifaceNil, new Errno(22)];
			}
			sa$1 = new SockaddrUnix.ptr("", new RawSockaddrUnix.ptr(0, 0, arrayType$11.zero()));
			n = ((pp$1.Len >> 0)) - 2 >> 0;
			i$1 = 0;
			while (true) {
				if (!(i$1 < n)) { break; }
				if ((x$2 = pp$1.Path, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1])) === 0) {
					n = i$1;
					break;
				}
				i$1 = i$1 + (1) >> 0;
			}
			bytes = $subslice(new sliceType((($sliceToArray(new sliceType(pp$1.Path))))), 0, n);
			sa$1.Name = ($bytesToString(bytes));
			return [sa$1, $ifaceNil];
		} else if (_1 === (2)) {
			_array$5 = new Uint8Array(108);
			pp$2 = ((_array$4 = (_array$5), _struct$4 = new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Addr = new ($nativeArray($kindUint8))(_array$4.buffer, $min(_array$4.byteOffset + 4, _array$4.buffer.byteLength)), _struct$4.Zero = new ($nativeArray($kindInt8))(_array$4.buffer, $min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4));
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Len = _view$5.getUint8(0, true), _struct$5.Addr.Family = _view$5.getUint8(1, true), _struct$5.Addr.Data = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray($kindInt8))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrInet4.ptr(0, arrayType$1.zero(), new RawSockaddrInet4.ptr(0, 0, 0, arrayType$1.zero(), arrayType$6.zero()));
			p = (((pp$2.$ptr_Port || (pp$2.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$2)))));
			sa$2.Port = ((((p.nilCheck, p[0]) >> 0)) << 8 >> 0) + (((p.nilCheck, p[1]) >> 0)) >> 0;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 4)) { break; }
				(x$4 = sa$2.Addr, ((i$2 < 0 || i$2 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$2] = (x$3 = pp$2.Addr, ((i$2 < 0 || i$2 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$2]))));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$2, $ifaceNil];
		} else if (_1 === (30)) {
			_array$7 = new Uint8Array(108);
			pp$3 = ((_array$6 = (_array$7), _struct$6 = new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Len = _view$6.getUint8(0, true), _struct$6.Family = _view$6.getUint8(1, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Flowinfo = _view$6.getUint32(4, true), _struct$6.Addr = new ($nativeArray($kindUint8))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6.Scope_id = _view$6.getUint32(24, true), _struct$6));
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Len = _view$7.getUint8(0, true), _struct$7.Addr.Family = _view$7.getUint8(1, true), _struct$7.Addr.Data = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray($kindInt8))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet6.ptr(0, 0, arrayType.zero(), new RawSockaddrInet6.ptr(0, 0, 0, 0, arrayType.zero(), 0));
			p$1 = (((pp$3.$ptr_Port || (pp$3.$ptr_Port = new ptrType$16(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3)))));
			sa$3.Port = ((((p$1.nilCheck, p$1[0]) >> 0)) << 8 >> 0) + (((p$1.nilCheck, p$1[1]) >> 0)) >> 0;
			sa$3.ZoneId = pp$3.Scope_id;
			i$3 = 0;
			while (true) {
				if (!(i$3 < 16)) { break; }
				(x$6 = sa$3.Addr, ((i$3 < 0 || i$3 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i$3] = (x$5 = pp$3.Addr, ((i$3 < 0 || i$3 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i$3]))));
				i$3 = i$3 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		}
		return [$ifaceNil, new Errno(47)];
	};
	Accept = function(fd) {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, fd, len, len$24ptr, nfd, rsa, sa;
		nfd = 0;
		sa = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = accept(fd, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		nfd = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		if (true && (len === 0)) {
			Close(nfd);
			_tmp = 0;
			_tmp$1 = $ifaceNil;
			_tmp$2 = new Errno(53);
			nfd = _tmp;
			sa = _tmp$1;
			err = _tmp$2;
			return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa);
		sa = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	$pkg.Accept = Accept;
	Recvmsg = function(fd, p, oob, flags) {
		var _array, _struct, _tuple, _tuple$1, _view, dummy, dummy$24ptr, err, fd, flags, from, iov, msg, n, oob, oobn, p, recvflags, rsa;
		n = 0;
		oobn = 0;
		recvflags = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		msg = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		_array = new Uint8Array(108);
		msg.Name = ((_array));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		msg.Namelen = 108;
		iov = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov.Base = (($sliceToArray(p)));
			iov.SetLen(p.$length);
		}
		dummy = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov.Base = (dummy$24ptr || (dummy$24ptr = new ptrType$2(function() { return dummy; }, function($v) { dummy = $v; })));
				iov.SetLen(1);
			}
			msg.Control = (($sliceToArray(oob)));
			msg.SetControllen(oob.$length);
		}
		msg.Iov = iov;
		msg.Iovlen = 1;
		_tuple = recvmsg(fd, msg, flags);
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, oobn, recvflags, from, err];
		}
		oobn = ((msg.Controllen >> 0));
		recvflags = ((msg.Flags >> 0));
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, oobn, recvflags, from, err];
	};
	$pkg.Recvmsg = Recvmsg;
	SendmsgN = function(fd, p, oob, to, flags) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, dummy, err, fd, flags, iov, msg, n, oob, p, ptr, salen, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dummy = $f.dummy; err = $f.err; fd = $f.fd; flags = $f.flags; iov = $f.iov; msg = $f.msg; n = $f.n; oob = $f.oob; p = $f.p; ptr = $f.ptr; salen = $f.salen; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dummy = [dummy];
		iov = [iov];
		msg = [msg];
		n = 0;
		err = $ifaceNil;
		ptr = 0;
		salen = 0;
		/* */ if (!($interfaceIsEqual(to, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(to, $ifaceNil))) { */ case 1:
			_r = to.sockaddr(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			ptr = _tuple[0];
			salen = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ case 2:
		msg[0] = new Msghdr.ptr(ptrType$2.nil, 0, arrayType$1.zero(), ptrType$18.nil, 0, arrayType$1.zero(), ptrType$2.nil, 0, 0);
		msg[0].Name = ((ptr));
		msg[0].Namelen = ((salen >>> 0));
		iov[0] = new Iovec.ptr(ptrType$2.nil, new $Uint64(0, 0));
		if (p.$length > 0) {
			iov[0].Base = (($sliceToArray(p)));
			iov[0].SetLen(p.$length);
		}
		dummy[0] = 0;
		if (oob.$length > 0) {
			if (p.$length === 0) {
				iov[0].Base = (dummy.$ptr || (dummy.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, dummy)));
				iov[0].SetLen(1);
			}
			msg[0].Control = (($sliceToArray(oob)));
			msg[0].SetControllen(oob.$length);
		}
		msg[0].Iov = iov[0];
		msg[0].Iovlen = 1;
		_tuple$1 = sendmsg(fd, msg[0], flags);
		n = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0;
			_tmp$3 = err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		if (oob.$length > 0 && (p.$length === 0)) {
			n = 0;
		}
		_tmp$4 = n;
		_tmp$5 = $ifaceNil;
		n = _tmp$4;
		err = _tmp$5;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: SendmsgN }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dummy = dummy; $f.err = err; $f.fd = fd; $f.flags = flags; $f.iov = iov; $f.msg = msg; $f.n = n; $f.oob = oob; $f.p = p; $f.ptr = ptr; $f.salen = salen; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SendmsgN = SendmsgN;
	direntIno = function(buf) {
		var buf;
		return readInt(buf, 0, 8);
	};
	direntReclen = function(buf) {
		var buf;
		return readInt(buf, 16, 2);
	};
	direntNamlen = function(buf) {
		var buf;
		return readInt(buf, 18, 2);
	};
	Iovec.ptr.prototype.SetLen = function(length) {
		var iov, length;
		iov = this;
		iov.Len = (new $Uint64(0, length));
	};
	Iovec.prototype.SetLen = function(length) { return this.$val.SetLen(length); };
	Msghdr.ptr.prototype.SetControllen = function(length) {
		var length, msghdr;
		msghdr = this;
		msghdr.Controllen = ((length >>> 0));
	};
	Msghdr.prototype.SetControllen = function(length) { return this.$val.SetControllen(length); };
	mmapper.ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var _key, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, addr, b, data, err, errno, fd, flags, length, m, offset, p, prot, sl, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; addr = $f.addr; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; fd = $f.fd; flags = $f.flags; length = $f.length; m = $f.m; offset = $f.offset; p = $f.p; prot = $f.prot; sl = $f.sl; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		sl = [sl];
		data = sliceType.nil;
		err = $ifaceNil;
		m = this;
		if (length <= 0) {
			_tmp = sliceType.nil;
			_tmp$1 = new Errno(22);
			data = _tmp;
			err = _tmp$1;
			$s = -1; return [data, err];
		}
		_r = m.mmap(0, ((length >>> 0)), prot, flags, fd, offset); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		addr = _tuple[0];
		errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = errno;
			data = _tmp$2;
			err = _tmp$3;
			$s = -1; return [data, err];
		}
		sl[0] = new structType.ptr(addr, length, length);
		b = sl[0];
		p = $indexPtr(b.$array, b.$offset + (b.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[ptrType$2.keyFor(_key)] = { k: _key, v: b };
		_tmp$4 = b;
		_tmp$5 = $ifaceNil;
		data = _tmp$4;
		err = _tmp$5;
		$s = -1; return [data, err];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [data, err]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Mmap }; } $f._key = _key; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.addr = addr; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.fd = fd; $f.flags = flags; $f.length = length; $f.m = m; $f.offset = offset; $f.p = p; $f.prot = prot; $f.sl = sl; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.ptr.prototype.Munmap = function(data) {
		var _entry, _r, b, data, err, errno, m, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; b = $f.b; data = $f.data; err = $f.err; errno = $f.errno; m = $f.m; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = $ifaceNil;
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		p = $indexPtr(data.$array, data.$offset + (data.$capacity - 1 >> 0), ptrType$2);
		$r = m.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[ptrType$2.keyFor(p)], _entry !== undefined ? _entry.v : sliceType.nil);
		if (b === sliceType.nil || !($indexPtr(b.$array, b.$offset + 0, ptrType$2) === $indexPtr(data.$array, data.$offset + 0, ptrType$2))) {
			err = new Errno(22);
			$s = -1; return err;
		}
		_r = m.munmap((($sliceToArray(b))), ((b.$length >>> 0))); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		errno = _r;
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			$s = -1; return err;
		}
		delete m.active[ptrType$2.keyFor(p)];
		err = $ifaceNil;
		$s = -1; return err;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mmapper.ptr.prototype.Munmap }; } $f._entry = _entry; $f._r = _r; $f.b = b; $f.data = data; $f.err = err; $f.errno = errno; $f.m = m; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val;
		if (0 <= ((e >> 0)) && ((e >> 0)) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? ($throwRuntimeError("index out of range"), undefined) : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa(((e >> 0)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 4) || (e === 24) || (e === 54) || (e === 53) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	errnoErr = function(e) {
		var _1, e;
		_1 = e;
		if (_1 === (0)) {
			return $ifaceNil;
		} else if (_1 === (35)) {
			return errEAGAIN;
		} else if (_1 === (22)) {
			return errEINVAL;
		} else if (_1 === (2)) {
			return errENOENT;
		}
		return new Errno(e);
	};
	Read = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		_tuple = read(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false) {
			if (n > 0) {
				race.WriteRange(($sliceToArray(p)), n);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				race.Acquire(((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; })))));
			}
		}
		if (false && n > 0) {
			msanWrite(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Read = Read;
	Write = function(fd, p) {
		var _tuple, err, fd, n, p;
		n = 0;
		err = $ifaceNil;
		if (false) {
			race.ReleaseMerge(((ioSync$24ptr || (ioSync$24ptr = new ptrType$20(function() { return ioSync; }, function($v) { ioSync = $v; })))));
		}
		_tuple = write(fd, p);
		n = _tuple[0];
		err = _tuple[1];
		if (false && n > 0) {
			race.ReadRange(($sliceToArray(p)), n);
		}
		if (false && n > 0) {
			msanRead(($sliceToArray(p)), n);
		}
		return [n, err];
	};
	$pkg.Write = Write;
	Recvfrom = function(fd, p, flags) {
		var _tuple, _tuple$1, err, fd, flags, from, len, len$24ptr, n, p, rsa;
		n = 0;
		from = $ifaceNil;
		err = $ifaceNil;
		rsa = new RawSockaddrAny.ptr(new RawSockaddr.ptr(0, 0, arrayType$4.zero()), arrayType$5.zero());
		len = 108;
		_tuple = recvfrom(fd, p, flags, rsa, (len$24ptr || (len$24ptr = new ptrType$17(function() { return len; }, function($v) { len = $v; }))));
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, from, err];
		}
		if (!((rsa.Addr.Family === 0))) {
			_tuple$1 = anyToSockaddr(rsa);
			from = _tuple$1[0];
			err = _tuple$1[1];
		}
		return [n, from, err];
	};
	$pkg.Recvfrom = Recvfrom;
	Sendto = function(fd, p, flags, to) {
		var _r, _tuple, err, fd, flags, n, p, ptr, to, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; fd = $f.fd; flags = $f.flags; n = $f.n; p = $f.p; ptr = $f.ptr; to = $f.to; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		_r = to.sockaddr(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ptr = _tuple[0];
		n = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		err = sendto(fd, p, flags, ptr, n);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sendto }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.fd = fd; $f.flags = flags; $f.n = n; $f.p = p; $f.ptr = ptr; $f.to = to; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sendto = Sendto;
	SetsockoptByte = function(fd, level, opt, value) {
		var err, fd, level, opt, value, value$24ptr;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ((value$24ptr || (value$24ptr = new ptrType$2(function() { return value; }, function($v) { value = $v; })))), 1);
		return err;
	};
	$pkg.SetsockoptByte = SetsockoptByte;
	SetsockoptInt = function(fd, level, opt, value) {
		var err, fd, level, n, n$24ptr, opt, value;
		err = $ifaceNil;
		n = ((value >> 0));
		err = setsockopt(fd, level, opt, ((n$24ptr || (n$24ptr = new ptrType$21(function() { return n; }, function($v) { n = $v; })))), 4);
		return err;
	};
	$pkg.SetsockoptInt = SetsockoptInt;
	SetsockoptInet4Addr = function(fd, level, opt, value) {
		var err, fd, level, opt, value;
		err = $ifaceNil;
		err = setsockopt(fd, level, opt, ($sliceToArray(new sliceType(value))), 4);
		return err;
	};
	$pkg.SetsockoptInet4Addr = SetsockoptInet4Addr;
	SetsockoptIPMreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 4, _array.buffer.byteLength));
		return err;
	};
	$pkg.SetsockoptIPMreq = SetsockoptIPMreq;
	SetsockoptIPv6Mreq = function(fd, level, opt, mreq) {
		var _array, _struct, _view, err, fd, level, mreq, opt;
		err = $ifaceNil;
		_array = new Uint8Array(20);
		err = setsockopt(fd, level, opt, (_array), 20);
		_struct = mreq, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Multiaddr = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 0, _array.buffer.byteLength)), _struct.Interface = _view.getUint32(16, true);
		return err;
	};
	$pkg.SetsockoptIPv6Mreq = SetsockoptIPv6Mreq;
	SetsockoptLinger = function(fd, level, opt, l) {
		var _array, _struct, _view, err, fd, l, level, opt;
		err = $ifaceNil;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, (_array), 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	$pkg.SetsockoptLinger = SetsockoptLinger;
	accept = function(s, rsa, addrlen) {
		var _array, _struct, _tuple, _view, addrlen, e1, err, fd, r0, rsa, s;
		fd = 0;
		err = $ifaceNil;
		_array = new Uint8Array(108);
		_tuple = Syscall(30, ((s >>> 0)), ((_array)), ((addrlen)));
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		fd = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [fd, err];
	};
	setsockopt = function(s, level, name, val, vallen) {
		var _tuple, e1, err, level, name, s, val, vallen;
		err = $ifaceNil;
		_tuple = Syscall6(105, ((s >>> 0)), ((level >>> 0)), ((name >>> 0)), (val), (vallen), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	Shutdown = function(s, how) {
		var _tuple, e1, err, how, s;
		err = $ifaceNil;
		_tuple = Syscall(134, ((s >>> 0)), ((how >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Shutdown = Shutdown;
	recvfrom = function(fd, p, flags, from, fromlen) {
		var _array, _p0, _struct, _tuple, _view, e1, err, fd, flags, from, fromlen, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_array = new Uint8Array(108);
		_tuple = Syscall6(29, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((flags >>> 0)), ((_array)), ((fromlen)));
		_struct = from, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray($kindInt8))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendto = function(s, buf, flags, to, addrlen) {
		var _p0, _tuple, addrlen, buf, e1, err, flags, s, to;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(133, ((s >>> 0)), (_p0), ((buf.$length >>> 0)), ((flags >>> 0)), (to), ((addrlen >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	recvmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(27, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	sendmsg = function(s, msg, flags) {
		var _array, _struct, _tuple, _view, e1, err, flags, msg, n, r0, s;
		n = 0;
		err = $ifaceNil;
		_array = new Uint8Array(36);
		_tuple = Syscall(28, ((s >>> 0)), ((_array)), ((flags >>> 0)));
		_struct = msg, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Namelen = _view.getUint32(4, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct.Iovlen = _view.getInt32(16, true), _struct.Pad_cgo_1 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct.Controllen = _view.getUint32(28, true), _struct.Flags = _view.getInt32(32, true);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	fcntl = function(fd, cmd, arg) {
		var _tuple, arg, cmd, e1, err, fd, r0, val;
		val = 0;
		err = $ifaceNil;
		_tuple = Syscall(92, ((fd >>> 0)), ((cmd >>> 0)), ((arg >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		val = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [val, err];
	};
	Close = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(6, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Close = Close;
	Fchdir = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(13, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchdir = Fchdir;
	Fchmod = function(fd, mode) {
		var _tuple, e1, err, fd, mode;
		err = $ifaceNil;
		_tuple = Syscall(124, ((fd >>> 0)), ((mode >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchmod = Fchmod;
	Fchown = function(fd, uid, gid) {
		var _tuple, e1, err, fd, gid, uid;
		err = $ifaceNil;
		_tuple = Syscall(123, ((fd >>> 0)), ((uid >>> 0)), ((gid >>> 0)));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fchown = Fchown;
	Fstat = function(fd, stat) {
		var _array, _struct, _tuple, _view, e1, err, fd, stat;
		err = $ifaceNil;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, ((fd >>> 0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fstat = Fstat;
	Fsync = function(fd) {
		var _tuple, e1, err, fd;
		err = $ifaceNil;
		_tuple = Syscall(95, ((fd >>> 0)), 0, 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Fsync = Fsync;
	Ftruncate = function(fd, length) {
		var _tuple, e1, err, fd, length;
		err = $ifaceNil;
		_tuple = Syscall(201, ((fd >>> 0)), ((length.$low >>> 0)), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Ftruncate = Ftruncate;
	Getdirentries = function(fd, buf, basep) {
		var _p0, _tuple, basep, buf, e1, err, fd, n, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = ($sliceToArray(buf));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(344, ((fd >>> 0)), (_p0), ((buf.$length >>> 0)), ((basep)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Getdirentries = Getdirentries;
	Lstat = function(path, stat) {
		var _array, _p0, _struct, _tuple, _tuple$1, _view, e1, err, path, stat;
		err = $ifaceNil;
		_p0 = ptrType$2.nil;
		_tuple = BytePtrFromString(path);
		_p0 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, ((_p0)), ((_array)), 0);
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray($kindUint8))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray($kindInt64))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	$pkg.Lstat = Lstat;
	Pread = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(153, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pread = Pread;
	Pwrite = function(fd, p, offset) {
		var _p0, _tuple, e1, err, fd, n, offset, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall6(154, ((fd >>> 0)), (_p0), ((p.$length >>> 0)), ((offset.$low >>> 0)), 0, 0);
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	$pkg.Pwrite = Pwrite;
	read = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(3, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	Seek = function(fd, offset, whence) {
		var _tuple, e1, err, fd, newoffset, offset, r0, whence;
		newoffset = new $Int64(0, 0);
		err = $ifaceNil;
		_tuple = Syscall(199, ((fd >>> 0)), ((offset.$low >>> 0)), ((whence >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		newoffset = (new $Int64(0, r0.constructor === Number ? r0 : 1));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [newoffset, err];
	};
	$pkg.Seek = Seek;
	write = function(fd, p) {
		var _p0, _tuple, e1, err, fd, n, p, r0;
		n = 0;
		err = $ifaceNil;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = ($sliceToArray(p));
		} else {
			_p0 = (new Uint8Array(0));
		}
		_tuple = Syscall(4, ((fd >>> 0)), (_p0), ((p.$length >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		n = ((r0 >> 0));
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var _tuple, addr, e1, err, fd, flag, length, pos, prot, r0, ret;
		ret = 0;
		err = $ifaceNil;
		_tuple = Syscall6(197, (addr), (length), ((prot >>> 0)), ((flag >>> 0)), ((fd >>> 0)), ((pos.$low >>> 0)));
		r0 = _tuple[0];
		e1 = _tuple[2];
		ret = (r0);
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var _tuple, addr, e1, err, length;
		err = $ifaceNil;
		_tuple = Syscall(73, (addr), (length), 0);
		e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = errnoErr(e1);
		}
		return err;
	};
	ptrType$11.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$27.methods = [{prop: "Mmap", name: "Mmap", pkg: "", typ: $funcType([$Int, $Int64, $Int, $Int, $Int], [sliceType, $error], false)}, {prop: "Munmap", name: "Munmap", pkg: "", typ: $funcType([sliceType], [$error], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$28.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$29.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$30.methods = [{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}];
	ptrType$31.methods = [{prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64, $Int64], false)}, {prop: "Nano", name: "Nano", pkg: "", typ: $funcType([], [$Int64], false)}];
	ptrType$18.methods = [{prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}];
	ptrType$32.methods = [{prop: "SetControllen", name: "SetControllen", pkg: "", typ: $funcType([$Int], [], false)}];
	SockaddrDatalink.init("syscall", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrDatalink, tag: ""}]);
	mmapper.init("syscall", [{prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "active", name: "active", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "mmap", name: "mmap", anonymous: false, exported: false, typ: funcType$2, tag: ""}, {prop: "munmap", name: "munmap", anonymous: false, exported: false, typ: funcType$3, tag: ""}]);
	Sockaddr.init([{prop: "sockaddr", name: "sockaddr", pkg: "syscall", typ: $funcType([], [$UnsafePointer, _Socklen, $error], false)}]);
	SockaddrInet4.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet4, tag: ""}]);
	SockaddrInet6.init("syscall", [{prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "ZoneId", name: "ZoneId", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrInet6, tag: ""}]);
	SockaddrUnix.init("syscall", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "raw", name: "raw", anonymous: false, exported: false, typ: RawSockaddrUnix, tag: ""}]);
	Timespec.init("", [{prop: "Sec", name: "Sec", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Nsec", name: "Nsec", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	Stat_t.init("", [{prop: "Dev", name: "Dev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Mode", name: "Mode", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Nlink", name: "Nlink", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Ino", name: "Ino", anonymous: false, exported: true, typ: $Uint64, tag: ""}, {prop: "Uid", name: "Uid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gid", name: "Gid", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rdev", name: "Rdev", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Atimespec", name: "Atimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Mtimespec", name: "Mtimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Ctimespec", name: "Ctimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Birthtimespec", name: "Birthtimespec", anonymous: false, exported: true, typ: Timespec, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blocks", name: "Blocks", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Blksize", name: "Blksize", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Gen", name: "Gen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Lspare", name: "Lspare", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Qspare", name: "Qspare", anonymous: false, exported: true, typ: arrayType$15, tag: ""}]);
	RawSockaddrInet4.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Zero", name: "Zero", anonymous: false, exported: true, typ: arrayType$6, tag: ""}]);
	RawSockaddrInet6.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Port", name: "Port", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Flowinfo", name: "Flowinfo", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Scope_id", name: "Scope_id", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	RawSockaddrUnix.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: arrayType$11, tag: ""}]);
	RawSockaddrDatalink.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Nlen", name: "Nlen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Alen", name: "Alen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Slen", name: "Slen", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$3, tag: ""}]);
	RawSockaddr.init("", [{prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Family", name: "Family", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Data", name: "Data", anonymous: false, exported: true, typ: arrayType$4, tag: ""}]);
	RawSockaddrAny.init("", [{prop: "Addr", name: "Addr", anonymous: false, exported: true, typ: RawSockaddr, tag: ""}, {prop: "Pad", name: "Pad", anonymous: false, exported: true, typ: arrayType$5, tag: ""}]);
	Linger.init("", [{prop: "Onoff", name: "Onoff", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Linger", name: "Linger", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	Iovec.init("", [{prop: "Base", name: "Base", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Len", name: "Len", anonymous: false, exported: true, typ: $Uint64, tag: ""}]);
	IPMreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: arrayType$1, tag: ""}]);
	IPv6Mreq.init("", [{prop: "Multiaddr", name: "Multiaddr", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Interface", name: "Interface", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Msghdr.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Namelen", name: "Namelen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Pad_cgo_0", name: "Pad_cgo_0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Iov", name: "Iov", anonymous: false, exported: true, typ: ptrType$18, tag: ""}, {prop: "Iovlen", name: "Iovlen", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Pad_cgo_1", name: "Pad_cgo_1", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Control", name: "Control", anonymous: false, exported: true, typ: ptrType$2, tag: ""}, {prop: "Controllen", name: "Controllen", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Int32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = race.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		lineBuffer = sliceType.nil;
		syscallModule = null;
		freebsdConfArch = "";
		ioSync = new $Int64(0, 0);
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		envs = runtime_envs();
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errEAGAIN = new Errno(35);
		errEINVAL = new Errno(22);
		errENOENT = new Errno(2);
		errors$1 = $toNativeArray($kindString, ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		mapper = new mmapper.ptr(new sync.Mutex.ptr(0, 0), {}, mmap, munmap);
		minRoutingSockaddrLen = rsaAlignOf(0);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, $init, Mutex, Once, ptrType$1, funcType$1, ptrType$4;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", true, "github.com/gopherjs/gopherjs/nosync", true, function(locked_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.locked = false;
			return;
		}
		this.locked = locked_;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", true, "github.com/gopherjs/gopherjs/nosync", true, function(doing_, done_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.doing = false;
			this.done = false;
			return;
		}
		this.doing = doing_;
		this.done = done_;
	});
	ptrType$1 = $ptrType(Mutex);
	funcType$1 = $funcType([], [], false);
	ptrType$4 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.ptr.prototype.Do = function(f) {
		var f, o, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; o = $f.o; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		o = [o];
		o[0] = this;
		if (o[0].done) {
			$s = -1; return;
		}
		if (o[0].doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o[0].doing = true;
		$deferred.push([(function(o) { return function() {
			o[0].doing = false;
			o[0].done = true;
		}; })(o), []]);
		$r = f(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: Once.ptr.prototype.Do }; } $f.f = f; $f.o = o; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", typ: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", typ: $funcType([], [], false)}];
	ptrType$4.methods = [{prop: "Do", name: "Do", pkg: "", typ: $funcType([funcType$1], [], false)}];
	Mutex.init("github.com/gopherjs/gopherjs/nosync", [{prop: "locked", name: "locked", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	Once.init("github.com/gopherjs/gopherjs/nosync", [{prop: "doing", name: "doing", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "done", name: "done", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, $init, errors, js, nosync, runtime, syscall, runtimeTimer, ParseError, Timer, Ticker, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, ptrType, sliceType$2, structType, arrayType, sliceType$3, arrayType$1, arrayType$2, ptrType$2, chanType, arrayType$4, funcType$1, ptrType$3, ptrType$4, ptrType$5, chanType$1, ptrType$6, ptrType$7, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, utcLoc$24ptr, localLoc, localLoc$24ptr, localOnce, errLocation, badData, init, initLocal, runtimeNano, now, Sleep, startTimer, stopTimer, indexByte, startsWithLowerCase, nextStdChunk, match, lookup, appendInt, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, when, NewTimer, sendTime, After, NewTicker, absWeekday, absClock, fmtFrac, fmtInt, lessThanHalf, absDate, daysIn, Now, unixTime, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	syscall = $packages["syscall"];
	runtimeTimer = $pkg.runtimeTimer = $newType(0, $kindStruct, "time.runtimeTimer", true, "time", false, function(i_, when_, period_, f_, arg_, timeout_, active_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.i = 0;
			this.when = new $Int64(0, 0);
			this.period = new $Int64(0, 0);
			this.f = $throwNilPointerError;
			this.arg = $ifaceNil;
			this.timeout = null;
			this.active = false;
			return;
		}
		this.i = i_;
		this.when = when_;
		this.period = period_;
		this.f = f_;
		this.arg = arg_;
		this.timeout = timeout_;
		this.active = active_;
	});
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", true, "time", true, function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Layout = "";
			this.Value = "";
			this.LayoutElem = "";
			this.ValueElem = "";
			this.Message = "";
			return;
		}
		this.Layout = Layout_;
		this.Value = Value_;
		this.LayoutElem = LayoutElem_;
		this.ValueElem = ValueElem_;
		this.Message = Message_;
	});
	Timer = $pkg.Timer = $newType(0, $kindStruct, "time.Timer", true, "time", true, function(C_, r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = $chanNil;
			this.r = new runtimeTimer.ptr(0, new $Int64(0, 0), new $Int64(0, 0), $throwNilPointerError, $ifaceNil, null, false);
			return;
		}
		this.C = C_;
		this.r = r_;
	});
	Ticker = $pkg.Ticker = $newType(0, $kindStruct, "time.Ticker", true, "time", true, function(C_, r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = $chanNil;
			this.r = new runtimeTimer.ptr(0, new $Int64(0, 0), new $Int64(0, 0), $throwNilPointerError, $ifaceNil, null, false);
			return;
		}
		this.C = C_;
		this.r = r_;
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", true, "time", true, function(wall_, ext_, loc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.wall = new $Uint64(0, 0);
			this.ext = new $Int64(0, 0);
			this.loc = ptrType$2.nil;
			return;
		}
		this.wall = wall_;
		this.ext = ext_;
		this.loc = loc_;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", true, "time", true, null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", true, "time", true, null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", true, "time", true, null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", true, "time", true, function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.zone = sliceType.nil;
			this.tx = sliceType$1.nil;
			this.cacheStart = new $Int64(0, 0);
			this.cacheEnd = new $Int64(0, 0);
			this.cacheZone = ptrType.nil;
			return;
		}
		this.name = name_;
		this.zone = zone_;
		this.tx = tx_;
		this.cacheStart = cacheStart_;
		this.cacheEnd = cacheEnd_;
		this.cacheZone = cacheZone_;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", true, "time", false, function(name_, offset_, isDST_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.offset = 0;
			this.isDST = false;
			return;
		}
		this.name = name_;
		this.offset = offset_;
		this.isDST = isDST_;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", true, "time", false, function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.when = new $Int64(0, 0);
			this.index = 0;
			this.isstd = false;
			this.isutc = false;
			return;
		}
		this.when = when_;
		this.index = index_;
		this.isstd = isstd_;
		this.isutc = isutc_;
	});
	sliceType = $sliceType(zone);
	sliceType$1 = $sliceType(zoneTrans);
	ptrType = $ptrType(zone);
	sliceType$2 = $sliceType($String);
	structType = $structType("", []);
	arrayType = $arrayType($Uint8, 20);
	sliceType$3 = $sliceType($Uint8);
	arrayType$1 = $arrayType($Uint8, 9);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$2 = $ptrType(Location);
	chanType = $chanType(Time, false, false);
	arrayType$4 = $arrayType($Uint8, 32);
	funcType$1 = $funcType([$emptyInterface, $Uintptr], [], false);
	ptrType$3 = $ptrType(js.Object);
	ptrType$4 = $ptrType(ParseError);
	ptrType$5 = $ptrType(Timer);
	chanType$1 = $chanType(Time, false, true);
	ptrType$6 = $ptrType(Ticker);
	ptrType$7 = $ptrType(Time);
	init = function() {
		$unused(Unix(new $Int64(0, 0), new $Int64(0, 0)));
	};
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = indexByte(s, 40);
		j = indexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = $substring(s, (i + 1 >> 0), j);
		localLoc.zone = new sliceType([new zone.ptr(localLoc.name, $imul(($parseInt(d.getTimezoneOffset()) >> 0), -60), false)]);
	};
	runtimeNano = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var _tmp, _tmp$1, _tmp$2, mono, n, nsec, sec, x;
		sec = new $Int64(0, 0);
		nsec = 0;
		mono = new $Int64(0, 0);
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false);
		_tmp$1 = (((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		_tmp$2 = n;
		sec = _tmp;
		nsec = _tmp$1;
		mono = _tmp$2;
		return [sec, nsec, mono];
	};
	Sleep = function(d) {
		var _r, c, d, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; d = $f.d; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = [c];
		c[0] = new $Chan(structType, 0);
		$setTimeout((function(c) { return function() {
			$close(c[0]);
		}; })(c), (((x = $div64(d, new Duration(0, 1000000), false), x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		_r = $recv(c[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sleep }; } $f._r = _r; $f.c = c; $f.d = d; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sleep = Sleep;
	startTimer = function(t) {
		var diff, t, x, x$1;
		t.active = true;
		diff = $div64(((x = t.when, x$1 = runtimeNano(), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low))), new $Int64(0, 1000000), false);
		if ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 2147483647))) {
			return;
		}
		if ((diff.$high < 0 || (diff.$high === 0 && diff.$low < 0))) {
			diff = new $Int64(0, 0);
		}
		t.timeout = $setTimeout((function() {
			var x$2, x$3, x$4;
			t.active = false;
			if (!((x$2 = t.period, (x$2.$high === 0 && x$2.$low === 0)))) {
				t.when = (x$3 = t.when, x$4 = t.period, new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
				startTimer(t);
			}
			$go(t.f, [t.arg, 0]);
		}), $externalize(new $Int64(diff.$high + 0, diff.$low + 1), $Int64));
	};
	stopTimer = function(t) {
		var t, wasActive;
		$global.clearTimeout(t.timeout);
		wasActive = t.active;
		t.active = false;
		return wasActive;
	};
	indexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	startsWithLowerCase = function(str) {
		var c, str;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$81, _tmp$82, _tmp$83, _tmp$84, _tmp$85, _tmp$86, _tmp$9, c, ch, i, j, layout, prefix, std, std$1, suffix, x;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (true) {
			if (!(i < layout.length)) { break; }
			c = ((layout.charCodeAt(i) >> 0));
			_1 = c;
			if (_1 === (74)) {
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "January") {
						_tmp = $substring(layout, 0, i);
						_tmp$1 = 257;
						_tmp$2 = $substring(layout, (i + 7 >> 0));
						prefix = _tmp;
						std = _tmp$1;
						suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
						_tmp$3 = $substring(layout, 0, i);
						_tmp$4 = 258;
						_tmp$5 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$3;
						std = _tmp$4;
						suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (77)) {
				if (layout.length >= (i + 3 >> 0)) {
					if ($substring(layout, i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = $substring(layout, 0, i);
							_tmp$7 = 261;
							_tmp$8 = $substring(layout, (i + 6 >> 0));
							prefix = _tmp$6;
							std = _tmp$7;
							suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase($substring(layout, (i + 3 >> 0)))) {
							_tmp$9 = $substring(layout, 0, i);
							_tmp$10 = 262;
							_tmp$11 = $substring(layout, (i + 3 >> 0));
							prefix = _tmp$9;
							std = _tmp$10;
							suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if ($substring(layout, i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = $substring(layout, 0, i);
						_tmp$13 = 21;
						_tmp$14 = $substring(layout, (i + 3 >> 0));
						prefix = _tmp$12;
						std = _tmp$13;
						suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_1 === (48)) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = $substring(layout, 0, i);
					_tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? ($throwRuntimeError("index out of range"), undefined) : std0x[x]));
					_tmp$17 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$15;
					std = _tmp$16;
					suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_1 === (49)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = $substring(layout, 0, i);
					_tmp$19 = 522;
					_tmp$20 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$18;
					std = _tmp$19;
					suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = $substring(layout, 0, i);
				_tmp$22 = 259;
				_tmp$23 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$21;
				std = _tmp$22;
				suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_1 === (50)) {
				if (layout.length >= (i + 4 >> 0) && $substring(layout, i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = $substring(layout, 0, i);
					_tmp$25 = 273;
					_tmp$26 = $substring(layout, (i + 4 >> 0));
					prefix = _tmp$24;
					std = _tmp$25;
					suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = $substring(layout, 0, i);
				_tmp$28 = 263;
				_tmp$29 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$27;
				std = _tmp$28;
				suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_1 === (95)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					if (layout.length >= (i + 5 >> 0) && $substring(layout, (i + 1 >> 0), (i + 5 >> 0)) === "2006") {
						_tmp$30 = $substring(layout, 0, (i + 1 >> 0));
						_tmp$31 = 273;
						_tmp$32 = $substring(layout, (i + 5 >> 0));
						prefix = _tmp$30;
						std = _tmp$31;
						suffix = _tmp$32;
						return [prefix, std, suffix];
					}
					_tmp$33 = $substring(layout, 0, i);
					_tmp$34 = 264;
					_tmp$35 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$33;
					std = _tmp$34;
					suffix = _tmp$35;
					return [prefix, std, suffix];
				}
			} else if (_1 === (51)) {
				_tmp$36 = $substring(layout, 0, i);
				_tmp$37 = 523;
				_tmp$38 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$36;
				std = _tmp$37;
				suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_1 === (52)) {
				_tmp$39 = $substring(layout, 0, i);
				_tmp$40 = 525;
				_tmp$41 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$39;
				std = _tmp$40;
				suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_1 === (53)) {
				_tmp$42 = $substring(layout, 0, i);
				_tmp$43 = 527;
				_tmp$44 = $substring(layout, (i + 1 >> 0));
				prefix = _tmp$42;
				std = _tmp$43;
				suffix = _tmp$44;
				return [prefix, std, suffix];
			} else if (_1 === (80)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$45 = $substring(layout, 0, i);
					_tmp$46 = 531;
					_tmp$47 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$45;
					std = _tmp$46;
					suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_1 === (112)) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$48 = $substring(layout, 0, i);
					_tmp$49 = 532;
					_tmp$50 = $substring(layout, (i + 2 >> 0));
					prefix = _tmp$48;
					std = _tmp$49;
					suffix = _tmp$50;
					return [prefix, std, suffix];
				}
			} else if (_1 === (45)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "-070000") {
					_tmp$51 = $substring(layout, 0, i);
					_tmp$52 = 28;
					_tmp$53 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$51;
					std = _tmp$52;
					suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$54 = $substring(layout, 0, i);
					_tmp$55 = 31;
					_tmp$56 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$54;
					std = _tmp$55;
					suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "-0700") {
					_tmp$57 = $substring(layout, 0, i);
					_tmp$58 = 27;
					_tmp$59 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$57;
					std = _tmp$58;
					suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "-07:00") {
					_tmp$60 = $substring(layout, 0, i);
					_tmp$61 = 30;
					_tmp$62 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$60;
					std = _tmp$61;
					suffix = _tmp$62;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "-07") {
					_tmp$63 = $substring(layout, 0, i);
					_tmp$64 = 29;
					_tmp$65 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$63;
					std = _tmp$64;
					suffix = _tmp$65;
					return [prefix, std, suffix];
				}
			} else if (_1 === (90)) {
				if (layout.length >= (i + 7 >> 0) && $substring(layout, i, (i + 7 >> 0)) === "Z070000") {
					_tmp$66 = $substring(layout, 0, i);
					_tmp$67 = 23;
					_tmp$68 = $substring(layout, (i + 7 >> 0));
					prefix = _tmp$66;
					std = _tmp$67;
					suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && $substring(layout, i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$69 = $substring(layout, 0, i);
					_tmp$70 = 26;
					_tmp$71 = $substring(layout, (i + 9 >> 0));
					prefix = _tmp$69;
					std = _tmp$70;
					suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && $substring(layout, i, (i + 5 >> 0)) === "Z0700") {
					_tmp$72 = $substring(layout, 0, i);
					_tmp$73 = 22;
					_tmp$74 = $substring(layout, (i + 5 >> 0));
					prefix = _tmp$72;
					std = _tmp$73;
					suffix = _tmp$74;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && $substring(layout, i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$75 = $substring(layout, 0, i);
					_tmp$76 = 25;
					_tmp$77 = $substring(layout, (i + 6 >> 0));
					prefix = _tmp$75;
					std = _tmp$76;
					suffix = _tmp$77;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && $substring(layout, i, (i + 3 >> 0)) === "Z07") {
					_tmp$78 = $substring(layout, 0, i);
					_tmp$79 = 24;
					_tmp$80 = $substring(layout, (i + 3 >> 0));
					prefix = _tmp$78;
					std = _tmp$79;
					suffix = _tmp$80;
					return [prefix, std, suffix];
				}
			} else if (_1 === (46)) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (true) {
						if (!(j < layout.length && (layout.charCodeAt(j) === ch))) { break; }
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 32;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 33;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$81 = $substring(layout, 0, i);
						_tmp$82 = std$1;
						_tmp$83 = $substring(layout, j);
						prefix = _tmp$81;
						std = _tmp$82;
						suffix = _tmp$83;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$84 = layout;
		_tmp$85 = 0;
		_tmp$86 = "";
		prefix = _tmp$84;
		std = _tmp$85;
		suffix = _tmp$86;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i, s1, s2;
		i = 0;
		while (true) {
			if (!(i < s1.length)) { break; }
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, tab, v, val;
		_ref = tab;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match($substring(val, 0, v.length), v)) {
				return [i, $substring(val, v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendInt = function(b, x, width) {
		var _q, b, buf, i, q, u, w, width, x;
		u = ((x >>> 0));
		if (x < 0) {
			b = $append(b, 45);
			u = ((-x >>> 0));
		}
		buf = arrayType.zero();
		i = 20;
		while (true) {
			if (!(u >= 10)) { break; }
			i = i - (1) >> 0;
			q = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = ((((48 + u >>> 0) - (q * 10 >>> 0) >>> 0) << 24 >>> 24)));
			u = q;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[i] = (((48 + u >>> 0) << 24 >>> 24)));
		w = 20 - i >> 0;
		while (true) {
			if (!(w < width)) { break; }
			b = $append(b, 48);
			w = w + (1) >> 0;
		}
		return $appendSlice(b, $subslice(new sliceType$3(buf), i));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, neg, q, rem, s, x;
		x = 0;
		err = $ifaceNil;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = $substring(s, 1);
		}
		_tuple = leadingInt(s);
		q = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		x = (((q.$low + ((q.$high >> 31) * 4294967296)) >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0;
			_tmp$1 = atoiError;
			x = _tmp;
			err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, b, buf, n, nanosec, start, trim, u, x;
		u = nanosec;
		buf = arrayType$1.zero();
		start = 9;
		while (true) {
			if (!(start > 0)) { break; }
			start = start - (1) >> 0;
			((start < 0 || start >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[start] = ((((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24)));
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (true) {
				if (!(n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[x])) === 48))) { break; }
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, buf, m0, m1, m2, s, sign, t, wid, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; buf = $f.buf; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; s = $f.s; sign = $f.sign; t = $f.t; wid = $f.wid; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Format("2006-01-02 15:04:05.999999999 -0700 MST"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			m2 = ((x$2 = t.ext, new $Uint64(x$2.$high, x$2.$low)));
			sign = 43;
			if ((x$3 = t.ext, (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 0)))) {
				sign = 45;
				m2 = new $Uint64(-m2.$high, -m2.$low);
			}
			_tmp = $div64(m2, new $Uint64(0, 1000000000), false);
			_tmp$1 = $div64(m2, new $Uint64(0, 1000000000), true);
			m1 = _tmp;
			m2 = _tmp$1;
			_tmp$2 = $div64(m1, new $Uint64(0, 1000000000), false);
			_tmp$3 = $div64(m1, new $Uint64(0, 1000000000), true);
			m0 = _tmp$2;
			m1 = _tmp$3;
			buf = sliceType$3.nil;
			buf = $appendSlice(buf, " m=");
			buf = $append(buf, sign);
			wid = 0;
			if (!((m0.$high === 0 && m0.$low === 0))) {
				buf = appendInt(buf, ((m0.$low >> 0)), 0);
				wid = 9;
			}
			buf = appendInt(buf, ((m1.$low >> 0)), wid);
			buf = $append(buf, 46);
			buf = appendInt(buf, ((m2.$low >> 0)), 9);
			s = s + (($bytesToString(buf)));
		}
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.String }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.buf = buf; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.s = s; $f.sign = sign; $f.t = t; $f.wid = wid; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _r, b, buf, layout, max, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; buf = $f.buf; layout = $f.layout; max = $f.max; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		b = sliceType$3.nil;
		max = layout.length + 10 >> 0;
		if (max < 64) {
			buf = arrayType$2.zero();
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = $makeSlice(sliceType$3, 0, max);
		}
		_r = $clone(t, Time).AppendFormat(b, layout); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Format }; } $f._r = _r; $f.b = b; $f.buf = buf; $f.layout = layout; $f.max = max; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	Time.ptr.prototype.AppendFormat = function(b, layout) {
		var _1, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, _tuple$3, abs, absoffset, b, day, hour, hr, hr$1, layout, m, min, month, name, offset, prefix, s, sec, std, suffix, t, y, year, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; abs = $f.abs; absoffset = $f.absoffset; b = $f.b; day = $f.day; hour = $f.hour; hr = $f.hr; hr$1 = $f.hr$1; layout = $f.layout; m = $f.m; min = $f.min; month = $f.month; name = $f.name; offset = $f.offset; prefix = $f.prefix; s = $f.s; sec = $f.sec; std = $f.std; suffix = $f.suffix; t = $f.t; y = $f.y; year = $f.year; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).locabs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		while (true) {
			if (!(!(layout === ""))) { break; }
			_tuple$1 = nextStdChunk(layout);
			prefix = _tuple$1[0];
			std = _tuple$1[1];
			suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, prefix);
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true);
				year = _tuple$2[0];
				month = _tuple$2[1];
				day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs);
				hour = _tuple$3[0];
				min = _tuple$3[1];
				sec = _tuple$3[2];
			}
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					y = year;
					if (y < 0) {
						y = -y;
					}
					b = appendInt(b, (_r$1 = y % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")), 2);
				} else if (_1 === (273)) {
					b = appendInt(b, year, 4);
				} else if (_1 === (258)) {
					b = $appendSlice(b, $substring(new Month(month).String(), 0, 3));
				} else if (_1 === (257)) {
					m = new Month(month).String();
					b = $appendSlice(b, m);
				} else if (_1 === (259)) {
					b = appendInt(b, ((month >> 0)), 0);
				} else if (_1 === (260)) {
					b = appendInt(b, ((month >> 0)), 2);
				} else if (_1 === (262)) {
					b = $appendSlice(b, $substring(new Weekday(absWeekday(abs)).String(), 0, 3));
				} else if (_1 === (261)) {
					s = new Weekday(absWeekday(abs)).String();
					b = $appendSlice(b, s);
				} else if (_1 === (263)) {
					b = appendInt(b, day, 0);
				} else if (_1 === (264)) {
					if (day < 10) {
						b = $append(b, 32);
					}
					b = appendInt(b, day, 0);
				} else if (_1 === (265)) {
					b = appendInt(b, day, 2);
				} else if (_1 === (522)) {
					b = appendInt(b, hour, 2);
				} else if (_1 === (523)) {
					hr = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
					if (hr === 0) {
						hr = 12;
					}
					b = appendInt(b, hr, 0);
				} else if (_1 === (524)) {
					hr$1 = (_r$3 = hour % 12, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
					if (hr$1 === 0) {
						hr$1 = 12;
					}
					b = appendInt(b, hr$1, 2);
				} else if (_1 === (525)) {
					b = appendInt(b, min, 0);
				} else if (_1 === (526)) {
					b = appendInt(b, min, 2);
				} else if (_1 === (527)) {
					b = appendInt(b, sec, 0);
				} else if (_1 === (528)) {
					b = appendInt(b, sec, 2);
				} else if (_1 === (531)) {
					if (hour >= 12) {
						b = $appendSlice(b, "PM");
					} else {
						b = $appendSlice(b, "AM");
					}
				} else if (_1 === (532)) {
					if (hour >= 12) {
						b = $appendSlice(b, "pm");
					} else {
						b = $appendSlice(b, "am");
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (30)) || (_1 === (28)) || (_1 === (29)) || (_1 === (31))) {
					if ((offset === 0) && ((std === 22) || (std === 25) || (std === 23) || (std === 24) || (std === 26))) {
						b = $append(b, 90);
						break;
					}
					zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
					absoffset = offset;
					if (zone$1 < 0) {
						b = $append(b, 45);
						zone$1 = -zone$1;
						absoffset = -absoffset;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					if ((std === 25) || (std === 30) || (std === 26) || (std === 31)) {
						b = $append(b, 58);
					}
					if (!((std === 29)) && !((std === 24))) {
						b = appendInt(b, (_r$4 = zone$1 % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")), 2);
					}
					if ((std === 23) || (std === 28) || (std === 31) || (std === 26)) {
						if ((std === 31) || (std === 26)) {
							b = $append(b, 58);
						}
						b = appendInt(b, (_r$5 = absoffset % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")), 2);
					}
				} else if (_1 === (21)) {
					if (!(name === "")) {
						b = $appendSlice(b, name);
						break;
					}
					zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					if (zone$2 < 0) {
						b = $append(b, 45);
						zone$2 = -zone$2;
					} else {
						b = $append(b, 43);
					}
					b = appendInt(b, (_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")), 2);
					b = appendInt(b, (_r$6 = zone$2 % 60, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")), 2);
				} else if ((_1 === (32)) || (_1 === (33))) {
					b = formatNano(b, (($clone(t, Time).Nanosecond() >>> 0)), std >> 16 >> 0, (std & 65535) === 33);
				}
			}
		}
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AppendFormat }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.abs = abs; $f.absoffset = absoffset; $f.b = b; $f.day = day; $f.hour = hour; $f.hr = hr; $f.hr$1 = hr$1; $f.layout = layout; $f.m = m; $f.min = min; $f.month = month; $f.name = name; $f.offset = offset; $f.prefix = prefix; $f.s = s; $f.sec = sec; $f.std = std; $f.suffix = suffix; $f.t = t; $f.y = y; $f.year = year; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AppendFormat = function(b, layout) { return this.$val.AppendFormat(b, layout); };
	quote = function(s) {
		var s;
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c, i, s;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var fixed, s;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), $substring(s, 1), $ifaceNil];
		}
		return [($imul((((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0)), 10)) + (((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0)) >> 0, $substring(s, 2), $ifaceNil];
	};
	cutspace = function(s) {
		var s;
		while (true) {
			if (!(s.length > 0 && (s.charCodeAt(0) === 32))) { break; }
			s = $substring(s, 1);
		}
		return s;
	};
	skip = function(value, prefix) {
		var prefix, value;
		while (true) {
			if (!(prefix.length > 0)) { break; }
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = $substring(prefix, 1);
			value = $substring(value, 1);
		}
		return [value, $ifaceNil];
	};
	Parse = function(layout, value) {
		var _r, layout, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; layout = $f.layout; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = parse(layout, value, $pkg.UTC, $pkg.Local); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f.layout = layout; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(layout, value, defaultLocation, local) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, defaultLocation, err, hour, hour$1, hr, i, layout, local, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, value, x, x$1, year, z, zoneName, zoneOffset, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$29 = $f._tmp$29; _tmp$3 = $f._tmp$3; _tmp$30 = $f._tmp$30; _tmp$31 = $f._tmp$31; _tmp$32 = $f._tmp$32; _tmp$33 = $f._tmp$33; _tmp$34 = $f._tmp$34; _tmp$35 = $f._tmp$35; _tmp$36 = $f._tmp$36; _tmp$37 = $f._tmp$37; _tmp$38 = $f._tmp$38; _tmp$39 = $f._tmp$39; _tmp$4 = $f._tmp$4; _tmp$40 = $f._tmp$40; _tmp$41 = $f._tmp$41; _tmp$42 = $f._tmp$42; _tmp$43 = $f._tmp$43; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$16 = $f._tuple$16; _tuple$17 = $f._tuple$17; _tuple$18 = $f._tuple$18; _tuple$19 = $f._tuple$19; _tuple$2 = $f._tuple$2; _tuple$20 = $f._tuple$20; _tuple$21 = $f._tuple$21; _tuple$22 = $f._tuple$22; _tuple$23 = $f._tuple$23; _tuple$24 = $f._tuple$24; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; alayout = $f.alayout; amSet = $f.amSet; avalue = $f.avalue; day = $f.day; defaultLocation = $f.defaultLocation; err = $f.err; hour = $f.hour; hour$1 = $f.hour$1; hr = $f.hr; i = $f.i; layout = $f.layout; local = $f.local; min = $f.min; min$1 = $f.min$1; mm = $f.mm; month = $f.month; n = $f.n; n$1 = $f.n$1; name = $f.name; ndigit = $f.ndigit; nsec = $f.nsec; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; pmSet = $f.pmSet; prefix = $f.prefix; rangeErrString = $f.rangeErrString; sec = $f.sec; seconds = $f.seconds; sign = $f.sign; ss = $f.ss; std = $f.std; stdstr = $f.stdstr; suffix = $f.suffix; t = $f.t; t$1 = $f.t$1; value = $f.value; x = $f.x; x$1 = $f.x$1; year = $f.year; z = $f.z; zoneName = $f.zoneName; zoneOffset = $f.zoneOffset; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = layout;
		_tmp$1 = value;
		alayout = _tmp;
		avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$2.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple = nextStdChunk(layout);
			prefix = _tuple[0];
			std = _tuple[1];
			suffix = _tuple[2];
			stdstr = $substring(layout, prefix.length, (layout.length - suffix.length >> 0));
			_tuple$1 = skip(value, prefix);
			value = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			switch (0) { default:
				_1 = std & 65535;
				if (_1 === (274)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$2 = $substring(value, 0, 2);
					_tmp$3 = $substring(value, 2);
					p = _tmp$2;
					value = _tmp$3;
					_tuple$2 = atoi(p);
					year = _tuple$2[0];
					err = _tuple$2[1];
					if (year >= 69) {
						year = year + (1900) >> 0;
					} else {
						year = year + (2000) >> 0;
					}
				} else if (_1 === (273)) {
					if (value.length < 4 || !isDigit(value, 0)) {
						err = errBad;
						break;
					}
					_tmp$4 = $substring(value, 0, 4);
					_tmp$5 = $substring(value, 4);
					p = _tmp$4;
					value = _tmp$5;
					_tuple$3 = atoi(p);
					year = _tuple$3[0];
					err = _tuple$3[1];
				} else if (_1 === (258)) {
					_tuple$4 = lookup(shortMonthNames, value);
					month = _tuple$4[0];
					value = _tuple$4[1];
					err = _tuple$4[2];
				} else if (_1 === (257)) {
					_tuple$5 = lookup(longMonthNames, value);
					month = _tuple$5[0];
					value = _tuple$5[1];
					err = _tuple$5[2];
				} else if ((_1 === (259)) || (_1 === (260))) {
					_tuple$6 = getnum(value, std === 260);
					month = _tuple$6[0];
					value = _tuple$6[1];
					err = _tuple$6[2];
					if (month <= 0 || 12 < month) {
						rangeErrString = "month";
					}
				} else if (_1 === (262)) {
					_tuple$7 = lookup(shortDayNames, value);
					value = _tuple$7[1];
					err = _tuple$7[2];
				} else if (_1 === (261)) {
					_tuple$8 = lookup(longDayNames, value);
					value = _tuple$8[1];
					err = _tuple$8[2];
				} else if ((_1 === (263)) || (_1 === (264)) || (_1 === (265))) {
					if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
						value = $substring(value, 1);
					}
					_tuple$9 = getnum(value, std === 265);
					day = _tuple$9[0];
					value = _tuple$9[1];
					err = _tuple$9[2];
					if (day < 0) {
						rangeErrString = "day";
					}
				} else if (_1 === (522)) {
					_tuple$10 = getnum(value, false);
					hour = _tuple$10[0];
					value = _tuple$10[1];
					err = _tuple$10[2];
					if (hour < 0 || 24 <= hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (523)) || (_1 === (524))) {
					_tuple$11 = getnum(value, std === 524);
					hour = _tuple$11[0];
					value = _tuple$11[1];
					err = _tuple$11[2];
					if (hour < 0 || 12 < hour) {
						rangeErrString = "hour";
					}
				} else if ((_1 === (525)) || (_1 === (526))) {
					_tuple$12 = getnum(value, std === 526);
					min = _tuple$12[0];
					value = _tuple$12[1];
					err = _tuple$12[2];
					if (min < 0 || 60 <= min) {
						rangeErrString = "minute";
					}
				} else if ((_1 === (527)) || (_1 === (528))) {
					_tuple$13 = getnum(value, std === 528);
					sec = _tuple$13[0];
					value = _tuple$13[1];
					err = _tuple$13[2];
					if (sec < 0 || 60 <= sec) {
						rangeErrString = "second";
						break;
					}
					if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
						_tuple$14 = nextStdChunk(layout);
						std = _tuple$14[1];
						std = std & (65535);
						if ((std === 32) || (std === 33)) {
							break;
						}
						n = 2;
						while (true) {
							if (!(n < value.length && isDigit(value, n))) { break; }
							n = n + (1) >> 0;
						}
						_tuple$15 = parseNanoseconds(value, n);
						nsec = _tuple$15[0];
						rangeErrString = _tuple$15[1];
						err = _tuple$15[2];
						value = $substring(value, n);
					}
				} else if (_1 === (531)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$6 = $substring(value, 0, 2);
					_tmp$7 = $substring(value, 2);
					p = _tmp$6;
					value = _tmp$7;
					_2 = p;
					if (_2 === ("PM")) {
						pmSet = true;
					} else if (_2 === ("AM")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if (_1 === (532)) {
					if (value.length < 2) {
						err = errBad;
						break;
					}
					_tmp$8 = $substring(value, 0, 2);
					_tmp$9 = $substring(value, 2);
					p = _tmp$8;
					value = _tmp$9;
					_3 = p;
					if (_3 === ("pm")) {
						pmSet = true;
					} else if (_3 === ("am")) {
						amSet = true;
					} else {
						err = errBad;
					}
				} else if ((_1 === (22)) || (_1 === (25)) || (_1 === (23)) || (_1 === (24)) || (_1 === (26)) || (_1 === (27)) || (_1 === (29)) || (_1 === (30)) || (_1 === (28)) || (_1 === (31))) {
					if (((std === 22) || (std === 24) || (std === 25)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
						value = $substring(value, 1);
						z = $pkg.UTC;
						break;
					}
					_tmp$10 = "";
					_tmp$11 = "";
					_tmp$12 = "";
					_tmp$13 = "";
					sign = _tmp$10;
					hour$1 = _tmp$11;
					min$1 = _tmp$12;
					seconds = _tmp$13;
					if ((std === 25) || (std === 30)) {
						if (value.length < 6) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58))) {
							err = errBad;
							break;
						}
						_tmp$14 = $substring(value, 0, 1);
						_tmp$15 = $substring(value, 1, 3);
						_tmp$16 = $substring(value, 4, 6);
						_tmp$17 = "00";
						_tmp$18 = $substring(value, 6);
						sign = _tmp$14;
						hour$1 = _tmp$15;
						min$1 = _tmp$16;
						seconds = _tmp$17;
						value = _tmp$18;
					} else if ((std === 29) || (std === 24)) {
						if (value.length < 3) {
							err = errBad;
							break;
						}
						_tmp$19 = $substring(value, 0, 1);
						_tmp$20 = $substring(value, 1, 3);
						_tmp$21 = "00";
						_tmp$22 = "00";
						_tmp$23 = $substring(value, 3);
						sign = _tmp$19;
						hour$1 = _tmp$20;
						min$1 = _tmp$21;
						seconds = _tmp$22;
						value = _tmp$23;
					} else if ((std === 26) || (std === 31)) {
						if (value.length < 9) {
							err = errBad;
							break;
						}
						if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
							err = errBad;
							break;
						}
						_tmp$24 = $substring(value, 0, 1);
						_tmp$25 = $substring(value, 1, 3);
						_tmp$26 = $substring(value, 4, 6);
						_tmp$27 = $substring(value, 7, 9);
						_tmp$28 = $substring(value, 9);
						sign = _tmp$24;
						hour$1 = _tmp$25;
						min$1 = _tmp$26;
						seconds = _tmp$27;
						value = _tmp$28;
					} else if ((std === 23) || (std === 28)) {
						if (value.length < 7) {
							err = errBad;
							break;
						}
						_tmp$29 = $substring(value, 0, 1);
						_tmp$30 = $substring(value, 1, 3);
						_tmp$31 = $substring(value, 3, 5);
						_tmp$32 = $substring(value, 5, 7);
						_tmp$33 = $substring(value, 7);
						sign = _tmp$29;
						hour$1 = _tmp$30;
						min$1 = _tmp$31;
						seconds = _tmp$32;
						value = _tmp$33;
					} else {
						if (value.length < 5) {
							err = errBad;
							break;
						}
						_tmp$34 = $substring(value, 0, 1);
						_tmp$35 = $substring(value, 1, 3);
						_tmp$36 = $substring(value, 3, 5);
						_tmp$37 = "00";
						_tmp$38 = $substring(value, 5);
						sign = _tmp$34;
						hour$1 = _tmp$35;
						min$1 = _tmp$36;
						seconds = _tmp$37;
						value = _tmp$38;
					}
					_tmp$39 = 0;
					_tmp$40 = 0;
					_tmp$41 = 0;
					hr = _tmp$39;
					mm = _tmp$40;
					ss = _tmp$41;
					_tuple$16 = atoi(hour$1);
					hr = _tuple$16[0];
					err = _tuple$16[1];
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$17 = atoi(min$1);
						mm = _tuple$17[0];
						err = _tuple$17[1];
					}
					if ($interfaceIsEqual(err, $ifaceNil)) {
						_tuple$18 = atoi(seconds);
						ss = _tuple$18[0];
						err = _tuple$18[1];
					}
					zoneOffset = ($imul(((($imul(hr, 60)) + mm >> 0)), 60)) + ss >> 0;
					_4 = sign.charCodeAt(0);
					if (_4 === (43)) {
					} else if (_4 === (45)) {
						zoneOffset = -zoneOffset;
					} else {
						err = errBad;
					}
				} else if (_1 === (21)) {
					if (value.length >= 3 && $substring(value, 0, 3) === "UTC") {
						z = $pkg.UTC;
						value = $substring(value, 3);
						break;
					}
					_tuple$19 = parseTimeZone(value);
					n$1 = _tuple$19[0];
					ok = _tuple$19[1];
					if (!ok) {
						err = errBad;
						break;
					}
					_tmp$42 = $substring(value, 0, n$1);
					_tmp$43 = $substring(value, n$1);
					zoneName = _tmp$42;
					value = _tmp$43;
				} else if (_1 === (32)) {
					ndigit = 1 + ((std >> 16 >> 0)) >> 0;
					if (value.length < ndigit) {
						err = errBad;
						break;
					}
					_tuple$20 = parseNanoseconds(value, ndigit);
					nsec = _tuple$20[0];
					rangeErrString = _tuple$20[1];
					err = _tuple$20[2];
					value = $substring(value, ndigit);
				} else if (_1 === (33)) {
					if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
						break;
					}
					i = 0;
					while (true) {
						if (!(i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57)) { break; }
						i = i + (1) >> 0;
					}
					_tuple$21 = parseNanoseconds(value, 1 + i >> 0);
					nsec = _tuple$21[0];
					rangeErrString = _tuple$21[1];
					err = _tuple$21[2];
					value = $substring(value, (1 + i >> 0));
				}
			}
			if (!(rangeErrString === "")) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (day < 1 || day > daysIn(((month >> 0)), year)) {
			$s = -1; return [new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil), new ParseError.ptr(alayout, avalue, "", value, ": day out of range")];
		}
		/* */ if (!(z === ptrType$2.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(z === ptrType$2.nil)) { */ case 1:
			_r = Date(year, ((month >> 0)), day, hour, min, sec, nsec, z); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [_r, $ifaceNil];
		/* } */ case 2:
		/* */ if (!((zoneOffset === -1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((zoneOffset === -1))) { */ case 4:
			_r$1 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			t = $clone(_r$1, Time);
			t.addSec((x = (new $Int64(0, zoneOffset)), new $Int64(-x.$high, -x.$low)));
			_r$2 = local.lookup(t.unixSec()); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$22 = _r$2;
			name = _tuple$22[0];
			offset = _tuple$22[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.setLoc(local);
				$s = -1; return [t, $ifaceNil];
			}
			t.setLoc(FixedZone(zoneName, zoneOffset));
			$s = -1; return [t, $ifaceNil];
		/* } */ case 5:
		/* */ if (!(zoneName === "")) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!(zoneName === "")) { */ case 8:
			_r$3 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, $pkg.UTC); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			t$1 = $clone(_r$3, Time);
			_r$4 = local.lookupName(zoneName, t$1.unixSec()); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$23 = _r$4;
			offset$1 = _tuple$23[0];
			ok$1 = _tuple$23[2];
			if (ok$1) {
				t$1.addSec((x$1 = (new $Int64(0, offset$1)), new $Int64(-x$1.$high, -x$1.$low)));
				t$1.setLoc(local);
				$s = -1; return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && $substring(zoneName, 0, 3) === "GMT") {
				_tuple$24 = atoi($substring(zoneName, 3));
				offset$1 = _tuple$24[0];
				offset$1 = $imul(offset$1, (3600));
			}
			t$1.setLoc(FixedZone(zoneName, offset$1));
			$s = -1; return [t$1, $ifaceNil];
		/* } */ case 9:
		_r$5 = Date(year, ((month >> 0)), day, hour, min, sec, nsec, defaultLocation); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$29 = _tmp$29; $f._tmp$3 = _tmp$3; $f._tmp$30 = _tmp$30; $f._tmp$31 = _tmp$31; $f._tmp$32 = _tmp$32; $f._tmp$33 = _tmp$33; $f._tmp$34 = _tmp$34; $f._tmp$35 = _tmp$35; $f._tmp$36 = _tmp$36; $f._tmp$37 = _tmp$37; $f._tmp$38 = _tmp$38; $f._tmp$39 = _tmp$39; $f._tmp$4 = _tmp$4; $f._tmp$40 = _tmp$40; $f._tmp$41 = _tmp$41; $f._tmp$42 = _tmp$42; $f._tmp$43 = _tmp$43; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$16 = _tuple$16; $f._tuple$17 = _tuple$17; $f._tuple$18 = _tuple$18; $f._tuple$19 = _tuple$19; $f._tuple$2 = _tuple$2; $f._tuple$20 = _tuple$20; $f._tuple$21 = _tuple$21; $f._tuple$22 = _tuple$22; $f._tuple$23 = _tuple$23; $f._tuple$24 = _tuple$24; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.alayout = alayout; $f.amSet = amSet; $f.avalue = avalue; $f.day = day; $f.defaultLocation = defaultLocation; $f.err = err; $f.hour = hour; $f.hour$1 = hour$1; $f.hr = hr; $f.i = i; $f.layout = layout; $f.local = local; $f.min = min; $f.min$1 = min$1; $f.mm = mm; $f.month = month; $f.n = n; $f.n$1 = n$1; $f.name = name; $f.ndigit = ndigit; $f.nsec = nsec; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.pmSet = pmSet; $f.prefix = prefix; $f.rangeErrString = rangeErrString; $f.sec = sec; $f.seconds = seconds; $f.sign = sign; $f.ss = ss; $f.std = std; $f.stdstr = stdstr; $f.suffix = suffix; $f.t = t; $f.t$1 = t$1; $f.value = value; $f.x = x; $f.x$1 = x$1; $f.year = year; $f.z = z; $f.zoneName = zoneName; $f.zoneOffset = zoneOffset; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseTimeZone = function(value) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length, nUpper, ok, value;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tmp = 0;
			_tmp$1 = false;
			length = _tmp;
			ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && ($substring(value, 0, 4) === "ChST" || $substring(value, 0, 4) === "MeST")) {
			_tmp$2 = 4;
			_tmp$3 = true;
			length = _tmp$2;
			ok = _tmp$3;
			return [length, ok];
		}
		if ($substring(value, 0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length;
			_tmp$5 = true;
			length = _tmp$4;
			ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (true) {
			if (!(nUpper < 6)) { break; }
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_1 = nUpper;
		if ((_1 === (0)) || (_1 === (1)) || (_1 === (2)) || (_1 === (6))) {
			_tmp$6 = 0;
			_tmp$7 = false;
			length = _tmp$6;
			ok = _tmp$7;
			return [length, ok];
		} else if (_1 === (5)) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5;
				_tmp$9 = true;
				length = _tmp$8;
				ok = _tmp$9;
				return [length, ok];
			}
		} else if (_1 === (4)) {
			if ((value.charCodeAt(3) === 84) || $substring(value, 0, 4) === "WITA") {
				_tmp$10 = 4;
				_tmp$11 = true;
				length = _tmp$10;
				ok = _tmp$11;
				return [length, ok];
			}
		} else if (_1 === (3)) {
			_tmp$12 = 3;
			_tmp$13 = true;
			length = _tmp$12;
			ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0;
		_tmp$15 = false;
		length = _tmp$14;
		ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple, err, rem, sign, value, x;
		value = $substring(value, 3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt($substring(value, 1));
		x = _tuple[0];
		rem = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple, err, i, nbytes, ns, rangeErrString, scaleDigits, value;
		ns = 0;
		rangeErrString = "";
		err = $ifaceNil;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi($substring(value, 1, nbytes));
		ns = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (true) {
			if (!(i < scaleDigits)) { break; }
			ns = $imul(ns, (10));
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, c, err, i, rem, s, x, x$1, x$2, x$3;
		x = new $Int64(0, 0);
		rem = "";
		err = $ifaceNil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low > 3435973836))) {
				_tmp = new $Int64(0, 0);
				_tmp$1 = "";
				_tmp$2 = errLeadingInt;
				x = _tmp;
				rem = _tmp$1;
				err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = (new $Int64(0, c)), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
				_tmp$3 = new $Int64(0, 0);
				_tmp$4 = "";
				_tmp$5 = errLeadingInt;
				x = _tmp$3;
				rem = _tmp$4;
				err = _tmp$5;
				return [x, rem, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = x;
		_tmp$7 = $substring(s, i);
		_tmp$8 = $ifaceNil;
		x = _tmp$6;
		rem = _tmp$7;
		err = _tmp$8;
		return [x, rem, err];
	};
	when = function(d) {
		var d, t, x, x$1;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return runtimeNano();
		}
		t = (x = runtimeNano(), x$1 = (new $Int64(d.$high, d.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if ((t.$high < 0 || (t.$high === 0 && t.$low < 0))) {
			t = new $Int64(2147483647, 4294967295);
		}
		return t;
	};
	Timer.ptr.prototype.Stop = function() {
		var t;
		t = this;
		if (t.r.f === $throwNilPointerError) {
			$panic(new $String("time: Stop called on uninitialized Timer"));
		}
		return stopTimer(t.r);
	};
	Timer.prototype.Stop = function() { return this.$val.Stop(); };
	NewTimer = function(d) {
		var c, d, t;
		c = new $Chan(Time, 1);
		t = new Timer.ptr(c, new runtimeTimer.ptr(0, when(d), new $Int64(0, 0), sendTime, new chanType(c), null, false));
		startTimer(t.r);
		return t;
	};
	$pkg.NewTimer = NewTimer;
	Timer.ptr.prototype.Reset = function(d) {
		var active, d, t, w;
		t = this;
		if (t.r.f === $throwNilPointerError) {
			$panic(new $String("time: Reset called on uninitialized Timer"));
		}
		w = when(d);
		active = stopTimer(t.r);
		t.r.when = w;
		startTimer(t.r);
		return active;
	};
	Timer.prototype.Reset = function(d) { return this.$val.Reset(d); };
	sendTime = function(c, seq) {
		var _selection, c, seq, $r;
		/* */ var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _selection = $f._selection; c = $f.c; seq = $f.seq; $r = $f.$r; }
		_selection = $select([[$assertType(c, chanType), $clone(Now(), Time)], []]);
		if (_selection[0] === 0) {
		} else if (_selection[0] === 1) {
		}
		/* */ if ($f === undefined) { $f = { $blk: sendTime }; } $f._selection = _selection; $f.c = c; $f.seq = seq; $f.$r = $r; return $f;
	};
	After = function(d) {
		var d;
		return NewTimer(d).C;
	};
	$pkg.After = After;
	NewTicker = function(d) {
		var c, d, t;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			$panic(errors.New("non-positive interval for NewTicker"));
		}
		c = new $Chan(Time, 1);
		t = new Ticker.ptr(c, new runtimeTimer.ptr(0, when(d), (new $Int64(d.$high, d.$low)), sendTime, new chanType(c), null, false));
		startTimer(t.r);
		return t;
	};
	$pkg.NewTicker = NewTicker;
	Ticker.ptr.prototype.Stop = function() {
		var t;
		t = this;
		stopTimer(t.r);
	};
	Ticker.prototype.Stop = function() { return this.$val.Stop(); };
	Time.ptr.prototype.nsec = function() {
		var t, x;
		t = this;
		return (((x = t.wall, new $Uint64(x.$high & 0, (x.$low & 1073741823) >>> 0)).$low >> 0));
	};
	Time.prototype.nsec = function() { return this.$val.nsec(); };
	Time.ptr.prototype.sec = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$2 = ((x$3 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$3.$high, x$3.$low))), new $Int64(13 + x$2.$high, 3618733952 + x$2.$low));
		}
		return (t.ext);
	};
	Time.prototype.sec = function() { return this.$val.sec(); };
	Time.ptr.prototype.unixSec = function() {
		var t, x;
		t = this;
		return (x = t.sec(), new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.unixSec = function() { return this.$val.unixSec(); };
	Time.ptr.prototype.addSec = function(d) {
		var d, dsec, sec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			sec = ((x$2 = $shiftRightUint64($shiftLeft64(t.wall, 1), 31), new $Int64(x$2.$high, x$2.$low)));
			dsec = new $Int64(sec.$high + d.$high, sec.$low + d.$low);
			if ((0 < dsec.$high || (0 === dsec.$high && 0 <= dsec.$low)) && (dsec.$high < 1 || (dsec.$high === 1 && dsec.$low <= 4294967295))) {
				t.wall = (x$3 = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & 0, (x$5.$low & 1073741823) >>> 0)), x$6 = $shiftLeft64((new $Uint64(dsec.$high, dsec.$low)), 30), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0)), new $Uint64(x$3.$high | 2147483648, (x$3.$low | 0) >>> 0));
				return;
			}
			t.stripMono();
		}
		t.ext = (x$7 = t.ext, x$8 = d, new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
	};
	Time.prototype.addSec = function(d) { return this.$val.addSec(d); };
	Time.ptr.prototype.setLoc = function(loc) {
		var loc, t;
		t = this;
		if (loc === utcLoc) {
			loc = ptrType$2.nil;
		}
		t.stripMono();
		t.loc = loc;
	};
	Time.prototype.setLoc = function(loc) { return this.$val.setLoc(loc); };
	Time.ptr.prototype.stripMono = function() {
		var t, x, x$1, x$2, x$3;
		t = this;
		if (!((x = (x$1 = t.wall, new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			t.ext = t.sec();
			t.wall = (x$2 = t.wall, x$3 = new $Uint64(0, 1073741823), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
	};
	Time.prototype.stripMono = function() { return this.$val.stripMono(); };
	Time.ptr.prototype.After = function(u) {
		var t, ts, u, us, x, x$1, x$2, x$3, x$4, x$5;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high > x$5.$high || (x$4.$high === x$5.$high && x$4.$low > x$5.$low)));
		}
		ts = t.sec();
		us = u.sec();
		return (ts.$high > us.$high || (ts.$high === us.$high && ts.$low > us.$low)) || (ts.$high === us.$high && ts.$low === us.$low) && t.nsec() > u.nsec();
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high < x$5.$high || (x$4.$high === x$5.$high && x$4.$low < x$5.$low)));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high < x$7.$high || (x$6.$high === x$7.$high && x$6.$low < x$7.$low))) || (x$8 = t.sec(), x$9 = u.sec(), (x$8.$high === x$9.$high && x$8.$low === x$9.$low)) && t.nsec() < u.nsec();
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, u, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			return (x$4 = t.ext, x$5 = u.ext, (x$4.$high === x$5.$high && x$4.$low === x$5.$low));
		}
		return (x$6 = t.sec(), x$7 = u.sec(), (x$6.$high === x$7.$high && x$6.$low === x$7.$low)) && (t.nsec() === u.nsec());
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var buf, m, n, x;
		m = this.$val;
		if (1 <= m && m <= 12) {
			return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? ($throwRuntimeError("index out of range"), undefined) : months[x]));
		}
		buf = $makeSlice(sliceType$3, 20);
		n = fmtInt(buf, (new $Uint64(0, m)));
		return "%!Month(" + ($bytesToString($subslice(buf, n))) + ")";
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? ($throwRuntimeError("index out of range"), undefined) : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = this;
		return (x = t.sec(), (x.$high === 0 && x.$low === 0)) && (t.nsec() === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _r, _r$1, _tuple, l, offset, sec, t, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; l = $f.l; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 6:
				sec = (x$2 = (new $Int64(0, l.cacheZone.offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = l.lookup(sec); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				offset = _tuple[1];
				sec = (x$3 = (new $Int64(0, offset)), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			/* } */ case 8:
		/* } */ case 5:
		$s = -1; return ((x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.abs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.l = l; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _r, _r$1, _tuple, abs, l, name, offset, sec, t, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; abs = $f.abs; l = $f.l; name = $f.name; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		abs = new $Uint64(0, 0);
		t = this;
		l = t.loc;
		/* */ if (l === ptrType$2.nil || l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === ptrType$2.nil || l === localLoc) { */ case 1:
			_r = l.get(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			l = _r;
		/* } */ case 2:
		sec = t.unixSec();
		/* */ if (!(l === utcLoc)) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(l === utcLoc)) { */ case 4:
			/* */ if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(l.cacheZone === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) { */ case 7:
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
				$s = 9; continue;
			/* } else { */ case 8:
				_r$1 = l.lookup(sec); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				name = _tuple[0];
				offset = _tuple[1];
			/* } */ case 9:
			sec = (x$2 = (new $Int64(0, offset)), new $Int64(sec.$high + x$2.$high, sec.$low + x$2.$low));
			$s = 6; continue;
		/* } else { */ case 5:
			name = "UTC";
		/* } */ case 6:
		abs = ((x$3 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$3.$high, x$3.$low)));
		$s = -1; return [name, offset, abs];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.locabs }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.abs = abs; $f.l = l; $f.name = name; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _r, _tuple, day, month, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; month = $f.month; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		$s = -1; return [year, month, day];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Date }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.month = month; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _r, _tuple, t, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		$s = -1; return year;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Year }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _r, _tuple, month, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; month = $f.month; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		month = _tuple[1];
		$s = -1; return month;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Month }; } $f._r = _r; $f._tuple = _tuple; $f.month = month; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _r, _tuple, day, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; day = $f.day; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		day = _tuple[2];
		$s = -1; return day;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Day }; } $f._r = _r; $f._tuple = _tuple; $f.day = day; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var _r, _r$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absWeekday(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Weekday }; } $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, abs, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return (((_q = ((sec.$low >> 0)) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _r$1, _r$2, _r$3, _r$4, _tuple, day, dec31wday, jan1wday, month, t, wday, week, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; day = $f.day; dec31wday = $f.dec31wday; jan1wday = $f.jan1wday; month = $f.month; t = $f.t; wday = $f.wday; week = $f.week; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		week = 0;
		t = this;
		_r = $clone(t, Time).date(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		_r$2 = $clone(t, Time).Weekday(); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		wday = (_r$1 = (((_r$2 + 6 >> 0) >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$3 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$4 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		$s = -1; return [year, week];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.ISOWeek }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f.day = day; $f.dec31wday = dec31wday; $f.jan1wday = jan1wday; $f.month = month; $f.t = t; $f.wday = wday; $f.week = week; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _r, _r$1, _tuple, hour, min, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; hour = $f.hour; min = $f.min; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hour = 0;
		min = 0;
		sec = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absClock(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		hour = _tuple[0];
		min = _tuple[1];
		sec = _tuple[2];
		$s = -1; return [hour, min, sec];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Clock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.hour = hour; $f.min = min; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, abs, hour, min, sec;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (($div64(abs, new $Uint64(0, 86400), true).$low >> 0));
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(hour, 3600))) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (($imul(min, 60))) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 86400), true).$low >> 0)) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Hour }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (_q = (($div64(_r, new $Uint64(0, 3600), true).$low >> 0)) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Minute }; } $f._q = _q; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($div64(_r, new $Uint64(0, 60), true).$low >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Second }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = this;
		return ((t.nsec() >> 0));
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _r, _tuple, t, yday, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; t = $f.t; yday = $f.yday; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).date(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		yday = _tuple[3];
		$s = -1; return yday + 1 >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.YearDay }; } $f._r = _r; $f._tuple = _tuple; $f.t = t; $f.yday = yday; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple, _tuple$1, buf, d, neg, prec, u, w;
		d = this;
		buf = arrayType$4.zero();
		w = 32;
		u = (new $Uint64(d.$high, d.$low));
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0s";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 110);
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
			}
			_tuple = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec);
			w = _tuple[0];
			u = _tuple[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 115);
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9);
			w = _tuple$1[0];
			u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 109);
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 104);
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
		}
		return ($bytesToString($subslice(new sliceType$3(buf), w)));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, buf, digit, i, nv, nw, prec, print, v, w;
		nw = 0;
		nv = new $Uint64(0, 0);
		w = buf.$length;
		print = false;
		i = 0;
		while (true) {
			if (!(i < prec)) { break; }
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = (((digit.$low << 24 >>> 24)) + 48 << 24 >>> 24));
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 46);
		}
		_tmp = w;
		_tmp$1 = v;
		nw = _tmp;
		nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var buf, v, w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = 48);
		} else {
			while (true) {
				if (!((v.$high > 0 || (v.$high === 0 && v.$low > 0)))) { break; }
				w = w - (1) >> 0;
				((w < 0 || w >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + w] = ((($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24)) + 48 << 24 >>> 24));
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return (new $Int64(d.$high, d.$low));
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return ($flatten64(sec)) + ($flatten64(nsec)) / 1e+09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return ($flatten64(min)) + ($flatten64(nsec)) / 6e+10;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return ($flatten64(hour)) + ($flatten64(nsec)) / 3.6e+12;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Duration.prototype.Truncate = function(m) {
		var d, m, x;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		return (x = $div64(d, m, true), new Duration(d.$high - x.$high, d.$low - x.$low));
	};
	$ptrType(Duration).prototype.Truncate = function(m) { return this.$get().Truncate(m); };
	lessThanHalf = function(x, y) {
		var x, x$1, x$2, x$3, x$4, y;
		return (x$1 = (x$2 = (new $Uint64(x.$high, x.$low)), x$3 = (new $Uint64(x.$high, x.$low)), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), x$4 = (new $Uint64(y.$high, y.$low)), (x$1.$high < x$4.$high || (x$1.$high === x$4.$high && x$1.$low < x$4.$low)));
	};
	Duration.prototype.Round = function(m) {
		var d, d1, d1$1, m, r, x, x$1;
		d = this;
		if ((m.$high < 0 || (m.$high === 0 && m.$low <= 0))) {
			return d;
		}
		r = $div64(d, m, true);
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 0))) {
			r = new Duration(-r.$high, -r.$low);
			if (lessThanHalf(r, m)) {
				return new Duration(d.$high + r.$high, d.$low + r.$low);
			}
			d1 = (x = new Duration(d.$high - m.$high, d.$low - m.$low), new Duration(x.$high + r.$high, x.$low + r.$low));
			if ((d1.$high < d.$high || (d1.$high === d.$high && d1.$low < d.$low))) {
				return d1;
			}
			return new Duration(-2147483648, 0);
		}
		if (lessThanHalf(r, m)) {
			return new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		d1$1 = (x$1 = new Duration(d.$high + m.$high, d.$low + m.$low), new Duration(x$1.$high - r.$high, x$1.$low - r.$low));
		if ((d1$1.$high > d.$high || (d1$1.$high === d.$high && d1$1.$low > d.$low))) {
			return d1$1;
		}
		return new Duration(2147483647, 4294967295);
	};
	$ptrType(Duration).prototype.Round = function(m) { return this.$get().Round(m); };
	Time.ptr.prototype.Add = function(d) {
		var d, dsec, nsec, t, te, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		dsec = ((x = $div64(d, new Duration(0, 1000000000), false), new $Int64(x.$high, x.$low)));
		nsec = t.nsec() + (((x$1 = $div64(d, new Duration(0, 1000000000), true), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0)) >> 0;
		if (nsec >= 1000000000) {
			dsec = (x$2 = new $Int64(0, 1), new $Int64(dsec.$high + x$2.$high, dsec.$low + x$2.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			dsec = (x$3 = new $Int64(0, 1), new $Int64(dsec.$high - x$3.$high, dsec.$low - x$3.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.wall = (x$4 = (x$5 = t.wall, new $Uint64(x$5.$high & ~0, (x$5.$low & ~1073741823) >>> 0)), x$6 = (new $Uint64(0, nsec)), new $Uint64(x$4.$high | x$6.$high, (x$4.$low | x$6.$low) >>> 0));
		t.addSec(dsec);
		if (!((x$7 = (x$8 = t.wall, new $Uint64(x$8.$high & 2147483648, (x$8.$low & 0) >>> 0)), (x$7.$high === 0 && x$7.$low === 0)))) {
			te = (x$9 = t.ext, x$10 = (new $Int64(d.$high, d.$low)), new $Int64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (x$11 = (t.ext), (te.$high > x$11.$high || (te.$high === x$11.$high && te.$low > x$11.$low))) || (d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (x$12 = (t.ext), (te.$high < x$12.$high || (te.$high === x$12.$high && te.$low < x$12.$low)))) {
				t.stripMono();
			} else {
				t.ext = te;
			}
		}
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, d$1, t, te, u, ue, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (!((x = (x$1 = (x$2 = t.wall, x$3 = u.wall, new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0)), new $Uint64(x$1.$high & 2147483648, (x$1.$low & 0) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			te = (t.ext);
			ue = (u.ext);
			d = ((x$4 = new $Int64(te.$high - ue.$high, te.$low - ue.$low), new Duration(x$4.$high, x$4.$low)));
			if ((d.$high < 0 || (d.$high === 0 && d.$low < 0)) && (te.$high > ue.$high || (te.$high === ue.$high && te.$low > ue.$low))) {
				return new Duration(2147483647, 4294967295);
			}
			if ((d.$high > 0 || (d.$high === 0 && d.$low > 0)) && (te.$high < ue.$high || (te.$high === ue.$high && te.$low < ue.$low))) {
				return new Duration(-2147483648, 0);
			}
			return d;
		}
		d$1 = (x$5 = $mul64(((x$6 = (x$7 = t.sec(), x$8 = u.sec(), new $Int64(x$7.$high - x$8.$high, x$7.$low - x$8.$low)), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$9 = (new Duration(0, (t.nsec() - u.nsec() >> 0))), new Duration(x$5.$high + x$9.$high, x$5.$low + x$9.$low));
		if ($clone($clone(u, Time).Add(d$1), Time).Equal($clone(t, Time))) {
			return d$1;
		} else if ($clone(t, Time).Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, day, days$1, hour, min, month, months$1, sec, t, year, years, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; day = $f.day; days$1 = $f.days$1; hour = $f.hour; min = $f.min; month = $f.month; months$1 = $f.months$1; sec = $f.sec; t = $f.t; year = $f.year; years = $f.years; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Date(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		_r$1 = $clone(t, Time).Clock(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		hour = _tuple$1[0];
		min = _tuple$1[1];
		sec = _tuple$1[2];
		_r$2 = Date(year + years >> 0, month + ((months$1 >> 0)) >> 0, day + days$1 >> 0, hour, min, sec, ((t.nsec() >> 0)), $clone(t, Time).Location()); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.AddDate }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.day = day; $f.days$1 = days$1; $f.hour = hour; $f.min = min; $f.month = month; $f.months$1 = months$1; $f.sec = sec; $f.t = t; $f.year = year; $f.years = years; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _r, _r$1, _tuple, day, full, month, t, yday, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; day = $f.day; full = $f.full; month = $f.month; t = $f.t; yday = $f.yday; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = this;
		_r = $clone(t, Time).abs(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = absDate(_r, full); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		year = _tuple[0];
		month = _tuple[1];
		day = _tuple[2];
		yday = _tuple[3];
		$s = -1; return [year, month, day, yday];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.date }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.day = day; $f.full = full; $f.month = month; $f.t = t; $f.yday = yday; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, abs, begin, d, day, end, full, month, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday, year;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = (((x$9 = (x$10 = (new $Int64(y.$high, y.$low)), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0));
		yday = ((d.$low >> 0));
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if ((day === 59)) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = (((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		end = (((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$11])) >> 0));
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = ((((month < 0 || month >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[month]) >> 0));
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		var m, x, year;
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return (((((m < 0 || m >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[m]) - (x = m - 1 >> 0, ((x < 0 || x >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x])) >> 0) >> 0));
	};
	Now = function() {
		var _tuple, mono, nsec, sec, x, x$1, x$2, x$3, x$4;
		_tuple = now();
		sec = _tuple[0];
		nsec = _tuple[1];
		mono = _tuple[2];
		sec = (x = new $Int64(0, 2682288000), new $Int64(sec.$high + x.$high, sec.$low + x.$low));
		if (!((x$1 = $shiftRightUint64((new $Uint64(sec.$high, sec.$low)), 33), (x$1.$high === 0 && x$1.$low === 0)))) {
			return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 13, sec.$low + 3618733952), $pkg.Local);
		}
		return new Time.ptr((x$2 = (x$3 = $shiftLeft64((new $Uint64(sec.$high, sec.$low)), 30), new $Uint64(2147483648 | x$3.$high, (0 | x$3.$low) >>> 0)), x$4 = (new $Uint64(0, nsec)), new $Uint64(x$2.$high | x$4.$high, (x$2.$low | x$4.$low) >>> 0)), mono, $pkg.Local);
	};
	$pkg.Now = Now;
	unixTime = function(sec, nsec) {
		var nsec, sec;
		return new Time.ptr((new $Uint64(0, nsec)), new $Int64(sec.$high + 14, sec.$low + 2006054656), $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = this;
		t.setLoc(utcLoc);
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = this;
		t.setLoc($pkg.Local);
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var loc, t;
		t = this;
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.setLoc(loc);
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = this;
		l = t.loc;
		if (l === ptrType$2.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _r, _tuple, name, offset, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; name = $f.name; offset = $f.offset; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		t = this;
		_r = t.loc.lookup(t.unixSec()); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		name = _tuple[0];
		offset = _tuple[1];
		$s = -1; return [name, offset];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.Zone }; } $f._r = _r; $f._tuple = _tuple; $f.name = name; $f.offset = offset; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t;
		t = this;
		return t.unixSec();
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1;
		t = this;
		return (x = $mul64((t.unixSec()), new $Int64(0, 1000000000)), x$1 = (new $Int64(0, t.nsec())), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _r$1, _tuple, enc, nsec, offset, offsetMin, sec, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; enc = $f.enc; nsec = $f.nsec; offset = $f.offset; offsetMin = $f.offsetMin; sec = $f.sec; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		offsetMin = 0;
		/* */ if ($clone(t, Time).Location() === $pkg.UTC) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(t, Time).Location() === $pkg.UTC) { */ case 1:
			offsetMin = -1;
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $clone(t, Time).Zone(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			offset = _tuple[1];
			if (!(((_r$1 = offset % 60, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0))) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = ((offset << 16 >> 16));
		/* } */ case 3:
		sec = t.sec();
		nsec = t.nsec();
		enc = new sliceType$3([1, (($shiftRightInt64(sec, 56).$low << 24 >>> 24)), (($shiftRightInt64(sec, 48).$low << 24 >>> 24)), (($shiftRightInt64(sec, 40).$low << 24 >>> 24)), (($shiftRightInt64(sec, 32).$low << 24 >>> 24)), (($shiftRightInt64(sec, 24).$low << 24 >>> 24)), (($shiftRightInt64(sec, 16).$low << 24 >>> 24)), (($shiftRightInt64(sec, 8).$low << 24 >>> 24)), ((sec.$low << 24 >>> 24)), (((nsec >> 24 >> 0) << 24 >>> 24)), (((nsec >> 16 >> 0) << 24 >>> 24)), (((nsec >> 8 >> 0) << 24 >>> 24)), ((nsec << 24 >>> 24)), (((offsetMin >> 8 << 16 >> 16) << 24 >>> 24)), ((offsetMin << 24 >>> 24))]);
		$s = -1; return [enc, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalBinary }; } $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.enc = enc; $f.nsec = nsec; $f.offset = offset; $f.offsetMin = offsetMin; $f.sec = sec; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var _r, _tuple, buf, data$1, localoff, nsec, offset, sec, t, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; data$1 = $f.data$1; localoff = $f.localoff; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			$s = -1; return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) === 1))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			$s = -1; return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Int64(0, (7 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 7]))), x$7 = $shiftLeft64((new $Int64(0, (6 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 6]))), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Int64(0, (5 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 5]))), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Int64(0, (4 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 4]))), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Int64(0, (3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]))), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Int64(0, (2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]))), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Int64(0, (1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]))), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Int64(0, (0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]))), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		nsec = (((((3 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 3]) >> 0)) | ((((2 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 2]) >> 0)) << 8 >> 0)) | ((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) >> 0)) << 16 >> 0)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) >> 0)) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = $imul(((((((1 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 1]) << 16 >> 16)) | ((((0 >= buf.$length ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + 0]) << 16 >> 16)) << 8 << 16 >> 16)) >> 0)), 60);
		Time.copy(t, new Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$2.nil));
		t.wall = (new $Uint64(0, nsec));
		t.ext = sec;
		/* */ if (offset === -60) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset === -60) { */ case 1:
			t.setLoc(utcLoc);
			$s = 3; continue;
		/* } else { */ case 2:
			_r = $pkg.Local.lookup(t.unixSec()); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			localoff = _tuple[1];
			if (offset === localoff) {
				t.setLoc($pkg.Local);
			} else {
				t.setLoc(FixedZone("", offset));
			}
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalBinary }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.data$1 = data$1; $f.localoff = localoff; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).MarshalBinary(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobEncode }; } $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var _r, data$1, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data$1 = $f.data$1; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = t.UnmarshalBinary(data$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.GobDecode }; } $f._r = _r; $f.data$1 = data$1; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 37);
		b = $append(b, 34);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b = _r$1;
		b = $append(b, 34);
		$s = -1; return [b, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalJSON }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var _r, _tuple, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (($bytesToString(data$1)) === "null") {
			$s = -1; return $ifaceNil;
		}
		err = $ifaceNil;
		_r = Parse("\"2006-01-02T15:04:05Z07:00\"", ($bytesToString(data$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalJSON }; } $f._r = _r; $f._tuple = _tuple; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var _r, _r$1, b, t, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; t = $f.t; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = $clone(t, Time).Year(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		y = _r;
		if (y < 0 || y >= 10000) {
			$s = -1; return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		b = $makeSlice(sliceType$3, 0, 35);
		_r$1 = $clone(t, Time).AppendFormat(b, "2006-01-02T15:04:05.999999999Z07:00"); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return [_r$1, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.MarshalText }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.t = t; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var _r, _tuple, data$1, err, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; data$1 = $f.data$1; err = $f.err; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		err = $ifaceNil;
		_r = Parse("2006-01-02T15:04:05Z07:00", ($bytesToString(data$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		Time.copy(t, _tuple[0]);
		err = _tuple[1];
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Time.ptr.prototype.UnmarshalText }; } $f._r = _r; $f._tuple = _tuple; $f.data$1 = data$1; $f.err = err; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = function(sec, nsec) {
		var n, nsec, sec, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return unixTime(sec, (((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0)));
	};
	$pkg.Unix = Unix;
	isLeap = function(year) {
		var _r, _r$1, _r$2, year;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, base, hi, lo, n, n$1, nhi, nlo;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (($imul(n, base))) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (($imul(n$1, base))) >> 0;
		}
		_tmp = hi;
		_tmp$1 = lo;
		nhi = _tmp;
		nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _r, _r$1, _r$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, abs, d, day, end, hour, loc, m, min, month, n, nsec, offset, sec, start, t, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, year, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; abs = $f.abs; d = $f.d; day = $f.day; end = $f.end; hour = $f.hour; loc = $f.loc; m = $f.m; min = $f.min; month = $f.month; n = $f.n; nsec = $f.nsec; offset = $f.offset; sec = $f.sec; start = $f.start; t = $f.t; unix = $f.unix; utc = $f.utc; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; year = $f.year; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (loc === ptrType$2.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = ((month >> 0)) - 1 >> 0;
		_tuple = norm(year, m, 12);
		year = _tuple[0];
		m = _tuple[1];
		month = ((m >> 0)) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000);
		sec = _tuple$1[0];
		nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60);
		min = _tuple$2[0];
		sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60);
		hour = _tuple$3[0];
		min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24);
		day = _tuple$4[0];
		hour = _tuple$4[1];
		y = ((x = (x$1 = (new $Int64(0, year)), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low)));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = (new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? ($throwRuntimeError("index out of range"), undefined) : daysBefore[x$9])))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = (new $Uint64(0, (day - 1 >> 0))), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = (new $Uint64(0, ((($imul(hour, 3600)) + ($imul(min, 60)) >> 0) + sec >> 0))), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = (new $Int64(abs.$high, abs.$low)), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_r = loc.lookup(unix); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$5 = _r;
		offset = _tuple$5[1];
		start = _tuple$5[3];
		end = _tuple$5[4];
		/* */ if (!((offset === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((offset === 0))) { */ case 2:
				utc = (x$14 = (new $Int64(0, offset)), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
				/* */ if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { $s = 5; continue; }
				/* */ if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) { */ case 5:
					_r$1 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$6 = _r$1;
					offset = _tuple$6[1];
					$s = 7; continue;
				/* } else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) { */ case 6:
					_r$2 = loc.lookup(end); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$7 = _r$2;
					offset = _tuple$7[1];
				/* } */ case 7:
			case 4:
			unix = (x$15 = (new $Int64(0, offset)), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		/* } */ case 3:
		t = $clone(unixTime(unix, ((nsec >> 0))), Time);
		t.setLoc(loc);
		$s = -1; return t;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Date }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.abs = abs; $f.d = d; $f.day = day; $f.end = end; $f.hour = hour; $f.loc = loc; $f.m = m; $f.min = min; $f.month = month; $f.n = n; $f.nsec = nsec; $f.offset = offset; $f.sec = sec; $f.start = start; $f.t = t; $f.unix = unix; $f.utc = utc; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.year = year; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Date = Date;
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple, d, r, t;
		t = this;
		t.stripMono();
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple = div($clone(t, Time), d);
		r = _tuple[1];
		if (lessThanHalf(r, d)) {
			return $clone(t, Time).Add(new Duration(-r.$high, -r.$low));
		}
		return $clone(t, Time).Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d, d0, d1, d1$1, neg, nsec, qmod2, r, sec, sec$1, t, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = t.nsec();
		sec = t.sec();
		if ((sec.$high < 0 || (sec.$high === 0 && sec.$low < 0))) {
			neg = true;
			sec = new $Int64(-sec.$high, -sec.$low);
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				sec = (x = new $Int64(0, 1), new $Int64(sec.$high - x.$high, sec.$low - x.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$1 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$1.$high === 0 && x$1.$low === 0))) {
			qmod2 = (((_q = nsec / (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) & 1;
			r = (new Duration(0, (_r = nsec % (((d.$low + ((d.$high >> 31) * 4294967296)) >> 0)), _r === _r ? _r : $throwRuntimeError("integer divide by zero"))));
		} else if ((x$2 = $div64(d, new Duration(0, 1000000000), true), (x$2.$high === 0 && x$2.$low === 0))) {
			d1 = ((x$3 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$3.$high, x$3.$low)));
			qmod2 = (((x$4 = $div64(sec, d1, false), x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0)) & 1;
			r = (x$5 = $mul64(((x$6 = $div64(sec, d1, true), new Duration(x$6.$high, x$6.$low))), new Duration(0, 1000000000)), x$7 = (new Duration(0, nsec)), new Duration(x$5.$high + x$7.$high, x$5.$low + x$7.$low));
		} else {
			sec$1 = (new $Uint64(sec.$high, sec.$low));
			tmp = $mul64(($shiftRightUint64(sec$1, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64((new $Uint64(sec$1.$high & 0, (sec$1.$low & 4294967295) >>> 0)), new $Uint64(0, 1000000000));
			_tmp = u0;
			_tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low);
			u0x = _tmp;
			u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$8 = new $Uint64(0, 1), new $Uint64(u1.$high + x$8.$high, u1.$low + x$8.$low));
			}
			_tmp$2 = u0;
			_tmp$3 = (x$9 = (new $Uint64(0, nsec)), new $Uint64(u0.$high + x$9.$high, u0.$low + x$9.$low));
			u0x = _tmp$2;
			u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$10 = new $Uint64(0, 1), new $Uint64(u1.$high + x$10.$high, u1.$low + x$10.$low));
			}
			d1$1 = (new $Uint64(d.$high, d.$low));
			while (true) {
				if (!(!((x$11 = $shiftRightUint64(d1$1, 63), (x$11.$high === 0 && x$11.$low === 1))))) { break; }
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0;
					_tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low);
					u0x = _tmp$4;
					u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high - x$12.$high, u1.$low - x$12.$low));
					}
					u1 = (x$13 = d1$1, new $Uint64(u1.$high - x$13.$high, u1.$low - x$13.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$14 = (new $Uint64(d.$high, d.$low)), (d0.$high === x$14.$high && d0.$low === x$14.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$15 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$15.$high, (d0.$low | x$15.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = (new Duration(u0.$high, u0.$low));
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		if (l === ptrType$2.nil) {
			$s = -1; return utcLoc;
		}
		/* */ if (l === localLoc) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (l === localLoc) { */ case 1:
			$r = localOnce.Do(initLocal); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return l;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.get }; } $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var _r, l, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; l = $f.l; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.name;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.String }; } $f._r = _r; $f.l = l; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = function(name, offset) {
		var l, name, offset, x;
		l = new Location.ptr(name, new sliceType([new zone.ptr(name, offset, false)]), new sliceType$1([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		return l;
	};
	$pkg.FixedZone = FixedZone;
	Location.ptr.prototype.lookup = function(sec) {
		var _q, _r, end, hi, isDST, l, lim, lo, m, name, offset, sec, start, tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; end = $f.end; hi = $f.hi; isDST = $f.isDST; l = $f.l; lim = $f.lim; lo = $f.lo; m = $f.m; name = $f.name; offset = $f.offset; sec = $f.sec; start = $f.start; tx = $f.tx; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; zone$1 = $f.zone$1; zone$2 = $f.zone$2; zone$3 = $f.zone$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name = "";
		offset = 0;
		isDST = false;
		start = new $Int64(0, 0);
		end = new $Int64(0, 0);
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			$s = -1; return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			$s = -1; return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			$s = -1; return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while (true) {
			if (!((hi - lo >> 0) > 1)) { break; }
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? ($throwRuntimeError("index out of range"), undefined) : tx.$array[tx.$offset + lo]).when;
		$s = -1; return [name, offset, isDST, start, end];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookup }; } $f._q = _q; $f._r = _r; $f.end = end; $f.hi = hi; $f.isDST = isDST; $f.l = l; $f.lim = lim; $f.lo = lo; $f.m = m; $f.name = name; $f.offset = offset; $f.sec = sec; $f.start = start; $f.tx = tx; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.zone$3 = zone$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).isDST) {
			zi = (((x$3 = l.tx, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).index >> 0)) - 1 >> 0;
			while (true) {
				if (!(zi >= 0)) { break; }
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, i$1, isDST, isDST$1, l, nam, name, offset, offset$1, ok, unix, x, x$1, x$2, zone$1, zone$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; i$1 = $f.i$1; isDST = $f.isDST; isDST$1 = $f.isDST$1; l = $f.l; nam = $f.nam; name = $f.name; offset = $f.offset; offset$1 = $f.offset$1; ok = $f.ok; unix = $f.unix; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; zone$1 = $f.zone$1; zone$2 = $f.zone$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		_r = l.get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		l = _r;
		_ref = l.zone;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			/* */ if (zone$1.name === name) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (zone$1.name === name) { */ case 4:
				_r$1 = l.lookup((x$1 = (new $Int64(0, zone$1.offset)), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple = _r$1;
				nam = _tuple[0];
				offset$1 = _tuple[1];
				isDST$1 = _tuple[2];
				if (nam === zone$1.name) {
					_tmp = offset$1;
					_tmp$1 = isDST$1;
					_tmp$2 = true;
					offset = _tmp;
					isDST = _tmp$1;
					ok = _tmp$2;
					$s = -1; return [offset, isDST, ok];
				}
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = l.zone;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset;
				_tmp$4 = zone$2.isDST;
				_tmp$5 = true;
				offset = _tmp$3;
				isDST = _tmp$4;
				ok = _tmp$5;
				$s = -1; return [offset, isDST, ok];
			}
			_i$1++;
		}
		$s = -1; return [offset, isDST, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Location.ptr.prototype.lookupName }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.i$1 = i$1; $f.isDST = isDST; $f.isDST$1 = isDST$1; $f.l = l; $f.nam = nam; $f.name = name; $f.offset = offset; $f.offset$1 = offset$1; $f.ok = ok; $f.unix = unix; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.zone$1 = zone$1; $f.zone$2 = zone$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([Duration], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [], false)}];
	Time.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Format", name: "Format", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "AppendFormat", name: "AppendFormat", pkg: "", typ: $funcType([sliceType$3, $String], [sliceType$3], false)}, {prop: "After", name: "After", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([Time], [$Bool], false)}, {prop: "IsZero", name: "IsZero", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "abs", name: "abs", pkg: "time", typ: $funcType([], [$Uint64], false)}, {prop: "locabs", name: "locabs", pkg: "time", typ: $funcType([], [$String, $Int, $Uint64], false)}, {prop: "Date", name: "Date", pkg: "", typ: $funcType([], [$Int, Month, $Int], false)}, {prop: "Year", name: "Year", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", typ: $funcType([], [Month], false)}, {prop: "Day", name: "Day", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Weekday", name: "Weekday", pkg: "", typ: $funcType([], [Weekday], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "Clock", name: "Clock", pkg: "", typ: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Hour", name: "Hour", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Minute", name: "Minute", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Second", name: "Second", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Time], [Duration], false)}, {prop: "AddDate", name: "AddDate", pkg: "", typ: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "date", name: "date", pkg: "time", typ: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "UTC", name: "UTC", pkg: "", typ: $funcType([], [Time], false)}, {prop: "Local", name: "Local", pkg: "", typ: $funcType([], [Time], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([ptrType$2], [Time], false)}, {prop: "Location", name: "Location", pkg: "", typ: $funcType([], [ptrType$2], false)}, {prop: "Zone", name: "Zone", pkg: "", typ: $funcType([], [$String, $Int], false)}, {prop: "Unix", name: "Unix", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", typ: $funcType([], [sliceType$3, $error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Time], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Time], false)}];
	ptrType$7.methods = [{prop: "nsec", name: "nsec", pkg: "time", typ: $funcType([], [$Int32], false)}, {prop: "sec", name: "sec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "unixSec", name: "unixSec", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "addSec", name: "addSec", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "setLoc", name: "setLoc", pkg: "time", typ: $funcType([ptrType$2], [], false)}, {prop: "stripMono", name: "stripMono", pkg: "time", typ: $funcType([], [], false)}, {prop: "setMono", name: "setMono", pkg: "time", typ: $funcType([$Int64], [], false)}, {prop: "mono", name: "mono", pkg: "time", typ: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", typ: $funcType([sliceType$3], [$error], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Hours", name: "Hours", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([Duration], [Duration], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([Duration], [Duration], false)}];
	ptrType$2.methods = [{prop: "get", name: "get", pkg: "time", typ: $funcType([], [ptrType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "lookup", name: "lookup", pkg: "time", typ: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", typ: $funcType([], [$Int], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", typ: $funcType([], [$Bool], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", typ: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	runtimeTimer.init("time", [{prop: "i", name: "i", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "when", name: "when", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "period", name: "period", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "f", name: "f", anonymous: false, exported: false, typ: funcType$1, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "timeout", name: "timeout", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "active", name: "active", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ParseError.init("", [{prop: "Layout", name: "Layout", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Message", name: "Message", anonymous: false, exported: true, typ: $String, tag: ""}]);
	Timer.init("time", [{prop: "C", name: "C", anonymous: false, exported: true, typ: chanType$1, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: runtimeTimer, tag: ""}]);
	Ticker.init("time", [{prop: "C", name: "C", anonymous: false, exported: true, typ: chanType$1, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: runtimeTimer, tag: ""}]);
	Time.init("time", [{prop: "wall", name: "wall", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "ext", name: "ext", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "loc", name: "loc", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	Location.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "zone", name: "zone", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "tx", name: "tx", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "cacheStart", name: "cacheStart", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	zone.init("time", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "isDST", name: "isDST", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	zoneTrans.init("time", [{prop: "when", name: "when", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "isutc", name: "isutc", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		localLoc = new Location.ptr("", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		localOnce = new nosync.Once.ptr(false, false);
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType$2(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType$2(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType$2(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType$2(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType.nil, sliceType$1.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		errLocation = errors.New("time: invalid location name");
		badData = errors.New("malformed time zone information");
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["internal/poll"] = (function() {
	var $pkg = {}, $init, errors, io, atomic, syscall, time, pollDesc, TimeoutError, fdMutex, FD, ptrType, ptrType$1, arrayType, sliceType, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, sliceType$1, ptrType$8, funcType, funcType$1, ptrType$9, ptrType$10, ptrType$11, sliceType$2, ptrType$12, errClosing, consume, runtime_Semacquire, runtime_Semrelease, accept;
	errors = $packages["errors"];
	io = $packages["io"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	pollDesc = $pkg.pollDesc = $newType(0, $kindStruct, "poll.pollDesc", true, "internal/poll", false, function(closing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closing = false;
			return;
		}
		this.closing = closing_;
	});
	TimeoutError = $pkg.TimeoutError = $newType(0, $kindStruct, "poll.TimeoutError", true, "internal/poll", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	fdMutex = $pkg.fdMutex = $newType(0, $kindStruct, "poll.fdMutex", true, "internal/poll", false, function(state_, rsema_, wsema_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.state = new $Uint64(0, 0);
			this.rsema = 0;
			this.wsema = 0;
			return;
		}
		this.state = state_;
		this.rsema = rsema_;
		this.wsema = wsema_;
	});
	FD = $pkg.FD = $newType(0, $kindStruct, "poll.FD", true, "internal/poll", true, function(fdmu_, Sysfd_, pd_, iovecs_, IsStream_, ZeroReadIsEOF_, isFile_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.fdmu = new fdMutex.ptr(new $Uint64(0, 0), 0, 0);
			this.Sysfd = 0;
			this.pd = new pollDesc.ptr(false);
			this.iovecs = ptrType$2.nil;
			this.IsStream = false;
			this.ZeroReadIsEOF = false;
			this.isFile = false;
			return;
		}
		this.fdmu = fdmu_;
		this.Sysfd = Sysfd_;
		this.pd = pd_;
		this.iovecs = iovecs_;
		this.IsStream = IsStream_;
		this.ZeroReadIsEOF = ZeroReadIsEOF_;
		this.isFile = isFile_;
	});
	ptrType = $ptrType($Uint64);
	ptrType$1 = $ptrType($Uint32);
	arrayType = $arrayType($Uint8, 4);
	sliceType = $sliceType(syscall.Iovec);
	ptrType$2 = $ptrType(sliceType);
	ptrType$3 = $ptrType($Uint8);
	ptrType$4 = $ptrType(FD);
	ptrType$5 = $ptrType(pollDesc);
	ptrType$6 = $ptrType(TimeoutError);
	ptrType$7 = $ptrType(fdMutex);
	sliceType$1 = $sliceType($Uint8);
	ptrType$8 = $ptrType(syscall.Stat_t);
	funcType = $funcType([$Uintptr], [], false);
	funcType$1 = $funcType([$Uintptr], [$Bool], false);
	ptrType$9 = $ptrType(syscall.Linger);
	ptrType$10 = $ptrType(syscall.IPMreq);
	ptrType$11 = $ptrType(syscall.IPv6Mreq);
	sliceType$2 = $sliceType(sliceType$1);
	ptrType$12 = $ptrType(sliceType$2);
	pollDesc.ptr.prototype.init = function(fd) {
		var fd, pd;
		pd = this;
		return $ifaceNil;
	};
	pollDesc.prototype.init = function(fd) { return this.$val.init(fd); };
	pollDesc.ptr.prototype.close = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.close = function() { return this.$val.close(); };
	pollDesc.ptr.prototype.evict = function() {
		var pd;
		pd = this;
		pd.closing = true;
	};
	pollDesc.prototype.evict = function() { return this.$val.evict(); };
	pollDesc.ptr.prototype.prepare = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $ifaceNil;
	};
	pollDesc.prototype.prepare = function(mode, isFile) { return this.$val.prepare(mode, isFile); };
	pollDesc.ptr.prototype.prepareRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(114, isFile);
	};
	pollDesc.prototype.prepareRead = function(isFile) { return this.$val.prepareRead(isFile); };
	pollDesc.ptr.prototype.prepareWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.prepare(119, isFile);
	};
	pollDesc.prototype.prepareWrite = function(isFile) { return this.$val.prepareWrite(isFile); };
	pollDesc.ptr.prototype.wait = function(mode, isFile) {
		var isFile, mode, pd;
		pd = this;
		if (pd.closing) {
			return errClosing(isFile);
		}
		return $pkg.ErrTimeout;
	};
	pollDesc.prototype.wait = function(mode, isFile) { return this.$val.wait(mode, isFile); };
	pollDesc.ptr.prototype.waitRead = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(114, isFile);
	};
	pollDesc.prototype.waitRead = function(isFile) { return this.$val.waitRead(isFile); };
	pollDesc.ptr.prototype.waitWrite = function(isFile) {
		var isFile, pd;
		pd = this;
		return pd.wait(119, isFile);
	};
	pollDesc.prototype.waitWrite = function(isFile) { return this.$val.waitWrite(isFile); };
	pollDesc.ptr.prototype.pollable = function() {
		return true;
	};
	pollDesc.prototype.pollable = function() { return this.$val.pollable(); };
	FD.ptr.prototype.SetDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	FD.ptr.prototype.SetReadDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	FD.ptr.prototype.SetWriteDeadline = function(t) {
		var t;
		return $ifaceNil;
	};
	FD.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	errClosing = function(isFile) {
		var isFile;
		if (isFile) {
			return $pkg.ErrFileClosing;
		}
		return $pkg.ErrNetClosing;
	};
	TimeoutError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	TimeoutError.prototype.Error = function() { return this.$val.Error(); };
	TimeoutError.ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Timeout = function() { return this.$val.Timeout(); };
	TimeoutError.ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	TimeoutError.prototype.Temporary = function() { return this.$val.Temporary(); };
	consume = function(v, n) {
		var ln0, n, v, x, x$1, x$2, x$3;
		while (true) {
			if (!(v.$get().$length > 0)) { break; }
			ln0 = (new $Int64(0, (x = v.$get(), (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).$length));
			if ((ln0.$high > n.$high || (ln0.$high === n.$high && ln0.$low > n.$low))) {
				(x$2 = v.$get(), (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = $subslice((x$1 = v.$get(), (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])), $flatten64(n))));
				return;
			}
			n = (x$3 = ln0, new $Int64(n.$high - x$3.$high, n.$low - x$3.$low));
			v.$set($subslice((v.$get()), 1));
		}
	};
	fdMutex.ptr.prototype.incref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.incref = function() { return this.$val.incref(); };
	fdMutex.ptr.prototype.increfAndClose = function() {
		var mu, new$1, old, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high & ~x$3.$high, (new$1.$low & ~x$3.$low) >>> 0));
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				while (true) {
					if (!(!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0))))) { break; }
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					runtime_Semrelease((mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType$1(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu))));
				}
				while (true) {
					if (!(!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0))))) { break; }
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					runtime_Semrelease((mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType$1(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu))));
				}
				return true;
			}
		}
	};
	fdMutex.prototype.increfAndClose = function() { return this.$val.increfAndClose(); };
	fdMutex.ptr.prototype.decref = function() {
		var mu, new$1, old, x, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.decref = function() { return this.$val.decref(); };
	fdMutex.ptr.prototype.rwlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5;
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType$1.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType$1(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType$1(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("inconsistent poll.fdMutex"));
				}
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					return true;
				}
				runtime_Semacquire(mutexSema);
			}
		}
	};
	fdMutex.prototype.rwlock = function(read) { return this.$val.rwlock(read); };
	fdMutex.ptr.prototype.rwunlock = function(read) {
		var _tmp, _tmp$1, _tmp$2, mu, mutexBit, mutexMask, mutexSema, mutexWait, new$1, old, read, x, x$1, x$2, x$3, x$4, x$5, x$6;
		mu = this;
		_tmp = new $Uint64(0, 0);
		_tmp$1 = new $Uint64(0, 0);
		_tmp$2 = new $Uint64(0, 0);
		mutexBit = _tmp;
		mutexWait = _tmp$1;
		mutexMask = _tmp$2;
		mutexSema = ptrType$1.nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = (mu.$ptr_rsema || (mu.$ptr_rsema = new ptrType$1(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu)));
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = (mu.$ptr_wsema || (mu.$ptr_wsema = new ptrType$1(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu)));
		}
		while (true) {
			old = atomic.LoadUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("inconsistent poll.fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high & ~mutexBit.$high, (old.$low & ~mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			if (atomic.CompareAndSwapUint64((mu.$ptr_state || (mu.$ptr_state = new ptrType(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu))), old, new$1)) {
				if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
					runtime_Semrelease(mutexSema);
				}
				return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			}
		}
	};
	fdMutex.prototype.rwunlock = function(read) { return this.$val.rwunlock(read); };
	runtime_Semacquire = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$throwRuntimeError("native function not implemented: internal/poll.runtime_Semrelease");
	};
	FD.ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.incref()) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.incref = function() { return this.$val.incref(); };
	FD.ptr.prototype.decref = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.decref()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.decref()) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.decref }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.decref = function() { return this.$val.decref(); };
	FD.ptr.prototype.readLock = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.rwlock(true)) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.readLock = function() { return this.$val.readLock(); };
	FD.ptr.prototype.readUnlock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.rwunlock(true)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.rwunlock(true)) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.readUnlock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	FD.ptr.prototype.writeLock = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.rwlock(false)) {
			return errClosing(fd.isFile);
		}
		return $ifaceNil;
	};
	FD.prototype.writeLock = function() { return this.$val.writeLock(); };
	FD.ptr.prototype.writeUnlock = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		/* */ if (fd.fdmu.rwunlock(false)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (fd.fdmu.rwunlock(false)) { */ case 1:
			_r = fd.destroy(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.writeUnlock }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	FD.ptr.prototype.eofError = function(n, err) {
		var err, fd, n;
		fd = this;
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && fd.ZeroReadIsEOF) {
			return io.EOF;
		}
		return err;
	};
	FD.prototype.eofError = function(n, err) { return this.$val.eofError(n, err); };
	FD.ptr.prototype.Fchmod = function(mode) {
		var err, fd, mode, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; mode = $f.mode; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchmod(fd.Sysfd, mode);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchmod }; } $f.err = err; $f.fd = fd; $f.mode = mode; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchmod = function(mode) { return this.$val.Fchmod(mode); };
	FD.ptr.prototype.Fchown = function(uid, gid) {
		var err, fd, gid, uid, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; gid = $f.gid; uid = $f.uid; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchown(fd.Sysfd, uid, gid);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchown }; } $f.err = err; $f.fd = fd; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchown = function(uid, gid) { return this.$val.Fchown(uid, gid); };
	FD.ptr.prototype.Ftruncate = function(size) {
		var err, fd, size, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; size = $f.size; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Ftruncate(fd.Sysfd, size);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Ftruncate }; } $f.err = err; $f.fd = fd; $f.size = size; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Ftruncate = function(size) { return this.$val.Ftruncate(size); };
	FD.ptr.prototype.Fsync = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fsync(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fsync }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fsync = function() { return this.$val.Fsync(); };
	FD.ptr.prototype.Init = function(net, pollable) {
		var fd, net, pollable;
		fd = this;
		if (net === "file") {
			fd.isFile = true;
		}
		if (!pollable) {
			return $ifaceNil;
		}
		return fd.pd.init(fd);
	};
	FD.prototype.Init = function(net, pollable) { return this.$val.Init(net, pollable); };
	FD.ptr.prototype.destroy = function() {
		var _r, err, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		fd.pd.close();
		_r = $pkg.CloseFunc(fd.Sysfd); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		fd.Sysfd = -1;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.destroy }; } $f._r = _r; $f.err = err; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.destroy = function() { return this.$val.destroy(); };
	FD.ptr.prototype.Close = function() {
		var _r, fd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; fd = $f.fd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		if (!fd.fdmu.increfAndClose()) {
			$s = -1; return errClosing(fd.isFile);
		}
		fd.pd.evict();
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Close }; } $f._r = _r; $f.fd = fd; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Close = function() { return this.$val.Close(); };
	FD.ptr.prototype.Shutdown = function(how) {
		var err, fd, how, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; how = $f.how; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Shutdown(fd.Sysfd, how);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Shutdown }; } $f.err = err; $f.fd = fd; $f.how = how; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Shutdown = function(how) { return this.$val.Shutdown(how); };
	FD.ptr.prototype.Read = function(p) {
		var _tuple, err, err$1, err$2, fd, n, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		while (true) {
			_tuple = syscall.Read(fd.Sysfd, p);
			n = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, err$2];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Read }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Read = function(p) { return this.$val.Read(p); };
	FD.ptr.prototype.Pread = function(p, off) {
		var _r, _tuple, err, err$1, fd, n, off, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; off = $f.off; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		if (fd.IsStream && p.$length > 1073741824) {
			p = $subslice(p, 0, 1073741824);
		}
		_tuple = syscall.Pread(fd.Sysfd, p, off);
		n = _tuple[0];
		err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			n = 0;
		}
		_r = fd.decref(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		err$1 = fd.eofError(n, err$1);
		$s = -1; return [n, err$1];
		/* */ } return; } if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pread }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.off = off; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.prototype.Pread = function(p, off) { return this.$val.Pread(p, off); };
	FD.ptr.prototype.ReadFrom = function(p) {
		var _tuple, err, err$1, err$2, fd, n, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvfrom(fd.Sysfd, p, 0);
			n = _tuple[0];
			sa = _tuple[1];
			err$2 = _tuple[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, sa, err$2];
		}
		$s = -1; return [0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadFrom }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadFrom = function(p) { return this.$val.ReadFrom(p); };
	FD.ptr.prototype.ReadMsg = function(p, oob) {
		var _tuple, err, err$1, err$2, fd, flags, n, oob, oobn, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; flags = $f.flags; n = $f.n; oob = $f.oob; oobn = $f.oobn; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, 0, $ifaceNil, err$1];
		}
		while (true) {
			_tuple = syscall.Recvmsg(fd.Sysfd, p, oob, 0);
			n = _tuple[0];
			oobn = _tuple[1];
			flags = _tuple[2];
			sa = _tuple[3];
			err$2 = _tuple[4];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						continue;
					}
				}
			}
			err$2 = fd.eofError(n, err$2);
			$s = -1; return [n, oobn, flags, sa, err$2];
		}
		$s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, 0, $ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadMsg }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.flags = flags; $f.n = n; $f.oob = oob; $f.oobn = oobn; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadMsg = function(p, oob) { return this.$val.ReadMsg(p, oob); };
	FD.ptr.prototype.Write = function(p) {
		var _tuple, err, err$1, err$2, fd, max, n, nn, p, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; p = $f.p; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Write(fd.Sysfd, $subslice(p, nn, max));
			n = _tuple[0];
			err$2 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$2];
			}
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [nn, err$2];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Write }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.p = p; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Write = function(p) { return this.$val.Write(p); };
	FD.ptr.prototype.Pwrite = function(p, off) {
		var _tuple, err, err$1, fd, max, n, nn, off, p, x, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; fd = $f.fd; max = $f.max; n = $f.n; nn = $f.nn; off = $f.off; p = $f.p; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		nn = 0;
		while (true) {
			max = p.$length;
			if (fd.IsStream && (max - nn >> 0) > 1073741824) {
				max = nn + 1073741824 >> 0;
			}
			_tuple = syscall.Pwrite(fd.Sysfd, $subslice(p, nn, max), (x = (new $Int64(0, nn)), new $Int64(off.$high + x.$high, off.$low + x.$low)));
			n = _tuple[0];
			err$1 = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				$s = -1; return [nn, err$1];
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [nn, err$1];
			}
			if (n === 0) {
				$s = -1; return [nn, io.ErrUnexpectedEOF];
			}
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Pwrite }; } $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.max = max; $f.n = n; $f.nn = nn; $f.off = off; $f.p = p; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Pwrite = function(p, off) { return this.$val.Pwrite(p, off); };
	FD.ptr.prototype.WriteTo = function(p, sa) {
		var _r, err, err$1, err$2, fd, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		/* while (true) { */ case 1:
			_r = syscall.Sendto(fd.Sysfd, p, 0, sa); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err$2 = _r;
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 1; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [0, err$2];
			}
			$s = -1; return [p.$length, $ifaceNil];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteTo }; } $f._r = _r; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteTo = function(p, sa) { return this.$val.WriteTo(p, sa); };
	FD.ptr.prototype.WriteMsg = function(p, oob, sa) {
		var _r, _tuple, err, err$1, err$2, fd, n, oob, p, sa, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; n = $f.n; oob = $f.oob; p = $f.p; sa = $f.sa; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, 0, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, 0, err$1];
		}
		/* while (true) { */ case 1:
			_r = syscall.SendmsgN(fd.Sysfd, p, oob, sa, 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err$2 = _tuple[1];
			if ($interfaceIsEqual(err$2, new syscall.Errno(35)) && fd.pd.pollable()) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 1; continue;
				}
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [n, 0, err$2];
			}
			$s = -1; return [n, oob.$length, err$2];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, 0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, 0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.WriteMsg }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.n = n; $f.oob = oob; $f.p = p; $f.sa = sa; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.WriteMsg = function(p, oob, sa) { return this.$val.WriteMsg(p, oob, sa); };
	FD.ptr.prototype.Accept = function() {
		var _1, _r, _tuple, err, err$1, err$2, errcall, fd, rsa, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; errcall = $f.errcall; fd = $f.fd; rsa = $f.rsa; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "", err$1];
		}
		/* while (true) { */ case 1:
			_r = accept(fd.Sysfd); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			s = _tuple[0];
			rsa = _tuple[1];
			errcall = _tuple[2];
			err$2 = _tuple[3];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				$s = -1; return [s, rsa, "", err$2];
			}
			_1 = err$2;
			if ($interfaceIsEqual(_1, new syscall.Errno((35)))) {
				if (fd.pd.pollable()) {
					err$2 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$2, $ifaceNil)) {
						/* continue; */ $s = 1; continue;
					}
				}
			} else if ($interfaceIsEqual(_1, new syscall.Errno((53)))) {
				/* continue; */ $s = 1; continue;
			}
			$s = -1; return [-1, $ifaceNil, errcall, err$2];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil, "", $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil, "", $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Accept }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.errcall = errcall; $f.fd = fd; $f.rsa = rsa; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Accept = function() { return this.$val.Accept(); };
	FD.ptr.prototype.Seek = function(offset, whence) {
		var err, fd, offset, whence, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; offset = $f.offset; whence = $f.whence; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Seek(fd.Sysfd, offset, whence);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Seek }; } $f.err = err; $f.fd = fd; $f.offset = offset; $f.whence = whence; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	FD.ptr.prototype.ReadDirent = function(buf) {
		var _tuple, buf, err, err$1, fd, n, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; buf = $f.buf; err = $f.err; err$1 = $f.err$1; fd = $f.fd; n = $f.n; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		while (true) {
			_tuple = syscall.ReadDirent(fd.Sysfd, buf);
			n = _tuple[0];
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err$1, new syscall.Errno(35)) && fd.pd.pollable()) {
					err$1 = fd.pd.waitRead(fd.isFile);
					if ($interfaceIsEqual(err$1, $ifaceNil)) {
						continue;
					}
				}
			}
			$s = -1; return [n, err$1];
		}
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [0, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.ReadDirent }; } $f._tuple = _tuple; $f.buf = buf; $f.err = err; $f.err$1 = err$1; $f.fd = fd; $f.n = n; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.ReadDirent = function(buf) { return this.$val.ReadDirent(buf); };
	FD.ptr.prototype.Fchdir = function() {
		var err, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fchdir(fd.Sysfd);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fchdir }; } $f.err = err; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fchdir = function() { return this.$val.Fchdir(); };
	FD.ptr.prototype.Fstat = function(s) {
		var err, fd, s, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; s = $f.s; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.Fstat(fd.Sysfd, s);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Fstat }; } $f.err = err; $f.fd = fd; $f.s = s; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Fstat = function(s) { return this.$val.Fstat(s); };
	FD.ptr.prototype.WaitWrite = function() {
		var fd;
		fd = this;
		return fd.pd.waitWrite(fd.isFile);
	};
	FD.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	FD.ptr.prototype.RawControl = function(f) {
		var err, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$r = f(((fd.Sysfd >>> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawControl }; } $f.err = err; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawControl = function(f) { return this.$val.RawControl(f); };
	FD.ptr.prototype.RawRead = function(f) {
		var _r, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.readLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$1 = fd.pd.prepareRead(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 1:
			_r = f(((fd.Sysfd >>> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$s = -1; return $ifaceNil;
			/* } */ case 4:
			err$2 = fd.pd.waitRead(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawRead }; } $f._r = _r; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawRead = function(f) { return this.$val.RawRead(f); };
	FD.ptr.prototype.RawWrite = function(f) {
		var _r, err, err$1, err$2, f, fd, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fd = $f.fd; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return err$1;
		}
		/* while (true) { */ case 1:
			_r = f(((fd.Sysfd >>> 0))); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r) { */ case 3:
				$s = -1; return $ifaceNil;
			/* } */ case 4:
			err$2 = fd.pd.waitWrite(fd.isFile);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.RawWrite }; } $f._r = _r; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fd = fd; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.RawWrite = function(f) { return this.$val.RawWrite(f); };
	FD.ptr.prototype.SetsockoptInt = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInt(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInt }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInt = function(level, name, arg) { return this.$val.SetsockoptInt(level, name, arg); };
	FD.ptr.prototype.SetsockoptInet4Addr = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptInet4Addr(fd.Sysfd, level, name, $clone(arg, arrayType));
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptInet4Addr }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptInet4Addr = function(level, name, arg) { return this.$val.SetsockoptInet4Addr(level, name, arg); };
	FD.ptr.prototype.SetsockoptLinger = function(level, name, l) {
		var err, fd, l, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; l = $f.l; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptLinger(fd.Sysfd, level, name, l);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptLinger }; } $f.err = err; $f.fd = fd; $f.l = l; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptLinger = function(level, name, l) { return this.$val.SetsockoptLinger(level, name, l); };
	FD.ptr.prototype.SetsockoptByte = function(level, name, arg) {
		var arg, err, fd, level, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; arg = $f.arg; err = $f.err; fd = $f.fd; level = $f.level; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptByte(fd.Sysfd, level, name, arg);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptByte }; } $f.arg = arg; $f.err = err; $f.fd = fd; $f.level = level; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptByte = function(level, name, arg) { return this.$val.SetsockoptByte(level, name, arg); };
	FD.ptr.prototype.SetsockoptIPMreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPMreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPMreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPMreq = function(level, name, mreq) { return this.$val.SetsockoptIPMreq(level, name, mreq); };
	FD.ptr.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) {
		var err, fd, level, mreq, name, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; err = $f.err; fd = $f.fd; level = $f.level; mreq = $f.mreq; name = $f.name; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		$s = -1; return syscall.SetsockoptIPv6Mreq(fd.Sysfd, level, name, mreq);
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.SetsockoptIPv6Mreq }; } $f.err = err; $f.fd = fd; $f.level = level; $f.mreq = mreq; $f.name = name; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.SetsockoptIPv6Mreq = function(level, name, mreq) { return this.$val.SetsockoptIPv6Mreq(level, name, mreq); };
	accept = function(s) {
		var _r, _r$1, _tuple, err, ns, s, sa, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; ns = $f.ns; s = $f.s; sa = $f.sa; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.AcceptFunc(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ns = _tuple[0];
		sa = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [-1, $ifaceNil, "accept", err];
		}
		err = syscall.SetNonblock(ns, true);
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = $pkg.CloseFunc(ns); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			$s = -1; return [-1, $ifaceNil, "setnonblock", err];
		/* } */ case 3:
		$s = -1; return [ns, sa, "", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: accept }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.ns = ns; $f.s = s; $f.sa = sa; $f.$s = $s; $f.$r = $r; return $f;
	};
	FD.ptr.prototype.Writev = function(v) {
		var _i, _ref, _tuple, chunk, e0, err, err$1, err$2, fd, iovecs, maxVec, n, v, wrote, x, x$1, x$2, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tuple = $f._tuple; chunk = $f.chunk; e0 = $f.e0; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; fd = $f.fd; iovecs = $f.iovecs; maxVec = $f.maxVec; n = $f.n; v = $f.v; wrote = $f.wrote; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		iovecs = [iovecs];
		fd = this;
		err = fd.writeLock();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$1 = fd.pd.prepareWrite(fd.isFile);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [new $Int64(0, 0), err$1];
		}
		iovecs[0] = sliceType.nil;
		if (!(fd.iovecs === ptrType$2.nil)) {
			iovecs[0] = fd.iovecs.$get();
		}
		maxVec = 1024;
		n = new $Int64(0, 0);
		err$2 = $ifaceNil;
		/* while (true) { */ case 1:
			/* if (!(v.$get().$length > 0)) { break; } */ if(!(v.$get().$length > 0)) { $s = 2; continue; }
			iovecs[0] = $subslice(iovecs[0], 0, 0);
			_ref = v.$get();
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				chunk = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (chunk.$length === 0) {
					_i++;
					/* continue; */ $s = 3; continue;
				}
				iovecs[0] = $append(iovecs[0], new syscall.Iovec.ptr($indexPtr(chunk.$array, chunk.$offset + 0, ptrType$3), new $Uint64(0, 0)));
				if (fd.IsStream && chunk.$length > 1073741824) {
					(x = iovecs[0].$length - 1 >> 0, ((x < 0 || x >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x])).SetLen(1073741824);
					/* break; */ $s = 4; continue;
				}
				(x$1 = iovecs[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= iovecs[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : iovecs[0].$array[iovecs[0].$offset + x$1])).SetLen(chunk.$length);
				if (iovecs[0].$length === maxVec) {
					/* break; */ $s = 4; continue;
				}
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (iovecs[0].$length === 0) {
				/* break; */ $s = 2; continue;
			}
			fd.iovecs = (iovecs.$ptr || (iovecs.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, iovecs)));
			_tuple = syscall.Syscall(121, ((fd.Sysfd >>> 0)), (($sliceToArray(iovecs[0]))), ((iovecs[0].$length >>> 0)));
			wrote = _tuple[0];
			e0 = _tuple[2];
			if (wrote === 4294967295) {
				wrote = 0;
			}
			$r = $pkg.TestHookDidWritev(((wrote >> 0))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			n = (x$2 = (new $Int64(0, wrote.constructor === Number ? wrote : 1)), new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			consume(v, (new $Int64(0, wrote.constructor === Number ? wrote : 1)));
			if (e0 === 35) {
				err$2 = fd.pd.waitWrite(fd.isFile);
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					/* continue; */ $s = 1; continue;
				}
			} else if (!((e0 === 0))) {
				err$2 = new syscall.Errno((e0));
			}
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				/* break; */ $s = 2; continue;
			}
			if ((n.$high === 0 && n.$low === 0)) {
				err$2 = io.ErrUnexpectedEOF;
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err$2];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [new $Int64(0, 0), $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: FD.ptr.prototype.Writev }; } $f._i = _i; $f._ref = _ref; $f._tuple = _tuple; $f.chunk = chunk; $f.e0 = e0; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.fd = fd; $f.iovecs = iovecs; $f.maxVec = maxVec; $f.n = n; $f.v = v; $f.wrote = wrote; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	FD.prototype.Writev = function(v) { return this.$val.Writev(v); };
	ptrType$5.methods = [{prop: "init", name: "init", pkg: "internal/poll", typ: $funcType([ptrType$4], [$error], false)}, {prop: "close", name: "close", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "evict", name: "evict", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "prepare", name: "prepare", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "prepareRead", name: "prepareRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "prepareWrite", name: "prepareWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "wait", name: "wait", pkg: "internal/poll", typ: $funcType([$Int, $Bool], [$error], false)}, {prop: "waitRead", name: "waitRead", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitWrite", name: "waitWrite", pkg: "internal/poll", typ: $funcType([$Bool], [$error], false)}, {prop: "waitCanceled", name: "waitCanceled", pkg: "internal/poll", typ: $funcType([$Int], [], false)}, {prop: "pollable", name: "pollable", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Timeout", name: "Timeout", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Temporary", name: "Temporary", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "increfAndClose", name: "increfAndClose", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$Bool], false)}, {prop: "rwlock", name: "rwlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}, {prop: "rwunlock", name: "rwunlock", pkg: "internal/poll", typ: $funcType([$Bool], [$Bool], false)}];
	ptrType$4.methods = [{prop: "SetDeadline", name: "SetDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetReadDeadline", name: "SetReadDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "SetWriteDeadline", name: "SetWriteDeadline", pkg: "", typ: $funcType([time.Time], [$error], false)}, {prop: "incref", name: "incref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "decref", name: "decref", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readLock", name: "readLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "readUnlock", name: "readUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "writeLock", name: "writeLock", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "writeUnlock", name: "writeUnlock", pkg: "internal/poll", typ: $funcType([], [], false)}, {prop: "eofError", name: "eofError", pkg: "internal/poll", typ: $funcType([$Int, $error], [$error], false)}, {prop: "Fchmod", name: "Fchmod", pkg: "", typ: $funcType([$Uint32], [$error], false)}, {prop: "Fchown", name: "Fchown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Ftruncate", name: "Ftruncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Fsync", name: "Fsync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([$String, $Bool], [$error], false)}, {prop: "destroy", name: "destroy", pkg: "internal/poll", typ: $funcType([], [$error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Shutdown", name: "Shutdown", pkg: "", typ: $funcType([$Int], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Pread", name: "Pread", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", typ: $funcType([sliceType$1], [$Int, syscall.Sockaddr, $error], false)}, {prop: "ReadMsg", name: "ReadMsg", pkg: "", typ: $funcType([sliceType$1, sliceType$1], [$Int, $Int, $Int, syscall.Sockaddr, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Pwrite", name: "Pwrite", pkg: "", typ: $funcType([sliceType$1, $Int64], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([sliceType$1, syscall.Sockaddr], [$Int, $error], false)}, {prop: "WriteMsg", name: "WriteMsg", pkg: "", typ: $funcType([sliceType$1, sliceType$1, syscall.Sockaddr], [$Int, $Int, $error], false)}, {prop: "Accept", name: "Accept", pkg: "", typ: $funcType([], [$Int, syscall.Sockaddr, $String, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "ReadDirent", name: "ReadDirent", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "Fchdir", name: "Fchdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Fstat", name: "Fstat", pkg: "", typ: $funcType([ptrType$8], [$error], false)}, {prop: "WaitWrite", name: "WaitWrite", pkg: "", typ: $funcType([], [$error], false)}, {prop: "RawControl", name: "RawControl", pkg: "", typ: $funcType([funcType], [$error], false)}, {prop: "RawRead", name: "RawRead", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "RawWrite", name: "RawWrite", pkg: "", typ: $funcType([funcType$1], [$error], false)}, {prop: "SetsockoptInt", name: "SetsockoptInt", pkg: "", typ: $funcType([$Int, $Int, $Int], [$error], false)}, {prop: "SetsockoptInet4Addr", name: "SetsockoptInet4Addr", pkg: "", typ: $funcType([$Int, $Int, arrayType], [$error], false)}, {prop: "SetsockoptLinger", name: "SetsockoptLinger", pkg: "", typ: $funcType([$Int, $Int, ptrType$9], [$error], false)}, {prop: "SetsockoptByte", name: "SetsockoptByte", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [$error], false)}, {prop: "SetsockoptIPMreq", name: "SetsockoptIPMreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$10], [$error], false)}, {prop: "SetsockoptIPv6Mreq", name: "SetsockoptIPv6Mreq", pkg: "", typ: $funcType([$Int, $Int, ptrType$11], [$error], false)}, {prop: "Writev", name: "Writev", pkg: "", typ: $funcType([ptrType$12], [$Int64, $error], false)}];
	pollDesc.init("internal/poll", [{prop: "closing", name: "closing", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	TimeoutError.init("", []);
	fdMutex.init("internal/poll", [{prop: "state", name: "state", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "rsema", name: "rsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "wsema", name: "wsema", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	FD.init("internal/poll", [{prop: "fdmu", name: "fdmu", anonymous: false, exported: false, typ: fdMutex, tag: ""}, {prop: "Sysfd", name: "Sysfd", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "pd", name: "pd", anonymous: false, exported: false, typ: pollDesc, tag: ""}, {prop: "iovecs", name: "iovecs", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "IsStream", name: "IsStream", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "ZeroReadIsEOF", name: "ZeroReadIsEOF", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "isFile", name: "isFile", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrNetClosing = errors.New("use of closed network connection");
		$pkg.ErrFileClosing = errors.New("use of closed file");
		$pkg.ErrTimeout = new TimeoutError.ptr();
		$pkg.TestHookDidWritev = (function(wrote) {
			var wrote;
		});
		$pkg.CloseFunc = syscall.Close;
		$pkg.AcceptFunc = syscall.Accept;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, $init, errors, js, poll, io, runtime, sync, atomic, syscall, time, PathError, SyscallError, LinkError, file, dirInfo, File, FileInfo, FileMode, fileStat, sliceType, ptrType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$3, ptrType$4, arrayType, sliceType$5, ptrType$12, ptrType$13, funcType$1, ptrType$15, arrayType$3, arrayType$5, ptrType$16, errFinished, lstat, useSyscallwd, runtime_args, init, NewSyscallError, IsNotExist, underlyingError, wrapSyscallError, isNotExist, sigpipe, syscallMode, NewFile, newFile, epipecheck, init$1, useSyscallwdDarwin, IsPathSeparator, basename, init$2, fillFileStatFromSys, timespecToTime, Lstat;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	poll = $packages["internal/poll"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", true, "os", true, function(Op_, Path_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Path = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Path = Path_;
		this.Err = Err_;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", true, "os", true, function(Syscall_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Syscall = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Syscall = Syscall_;
		this.Err = Err_;
	});
	LinkError = $pkg.LinkError = $newType(0, $kindStruct, "os.LinkError", true, "os", true, function(Op_, Old_, New_, Err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = "";
			this.Old = "";
			this.New = "";
			this.Err = $ifaceNil;
			return;
		}
		this.Op = Op_;
		this.Old = Old_;
		this.New = New_;
		this.Err = Err_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", true, "os", false, function(pfd_, name_, dirinfo_, nonblock_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pfd = new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), 0, new poll.pollDesc.ptr(false), ptrType$12.nil, false, false, false);
			this.name = "";
			this.dirinfo = ptrType$1.nil;
			this.nonblock = false;
			return;
		}
		this.pfd = pfd_;
		this.name = name_;
		this.dirinfo = dirinfo_;
		this.nonblock = nonblock_;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", true, "os", false, function(buf_, nbuf_, bufp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType$2.nil;
			this.nbuf = 0;
			this.bufp = 0;
			return;
		}
		this.buf = buf_;
		this.nbuf = nbuf_;
		this.bufp = bufp_;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", true, "os", true, function(file_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = ptrType$13.nil;
			return;
		}
		this.file = file_;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", true, "os", true, null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", true, "os", true, null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", true, "os", false, function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil);
			this.sys = new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero());
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
		this.sys = sys_;
	});
	sliceType = $sliceType($String);
	ptrType = $ptrType(File);
	sliceType$1 = $sliceType(FileInfo);
	ptrType$1 = $ptrType(dirInfo);
	sliceType$2 = $sliceType($Uint8);
	ptrType$2 = $ptrType(PathError);
	ptrType$3 = $ptrType(LinkError);
	ptrType$4 = $ptrType(SyscallError);
	arrayType = $arrayType($Uint8, 4);
	sliceType$5 = $sliceType(syscall.Iovec);
	ptrType$12 = $ptrType(sliceType$5);
	ptrType$13 = $ptrType(file);
	funcType$1 = $funcType([ptrType$13], [$error], false);
	ptrType$15 = $ptrType(time.Location);
	arrayType$3 = $arrayType($Int64, 2);
	arrayType$5 = $arrayType($Uint8, 32);
	ptrType$16 = $ptrType(fileStat);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = $makeSlice(sliceType, ($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (true) {
				if (!(i < ($parseInt(argv.length) - 1 >> 0))) { break; }
				((i < 0 || i >= $pkg.Args.$length) ? ($throwRuntimeError("index out of range"), undefined) : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String));
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.Readdir = function(n) {
		var _r, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [sliceType$1.nil, $pkg.ErrInvalid];
		}
		_r = f.readdir(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdir }; } $f._r = _r; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tuple, err, f, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f === ptrType.nil) {
			_tmp = sliceType.nil;
			_tmp$1 = $pkg.ErrInvalid;
			names = _tmp;
			err = _tmp$1;
			$s = -1; return [names, err];
		}
		_r = f.readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	File.ptr.prototype.readdir = function(n) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, dirname, err, f, fi, filename, fip, lerr, n, names, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; dirname = $f.dirname; err = $f.err; f = $f.f; fi = $f.fi; filename = $f.filename; fip = $f.fip; lerr = $f.lerr; n = $f.n; names = $f.names; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fi = sliceType$1.nil;
		err = $ifaceNil;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_r = f.Readdirnames(n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		names = _tuple[0];
		err = _tuple[1];
		fi = $makeSlice(sliceType$1, 0, names.$length);
		_ref = names;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			filename = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = lstat(dirname + "/" + filename); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			fip = _tuple$1[0];
			lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi;
				_tmp$1 = lerr;
				fi = _tmp;
				err = _tmp$1;
				$s = -1; return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		/* } */ $s = 2; continue; case 3:
		if ((fi.$length === 0) && $interfaceIsEqual(err, $ifaceNil) && n > 0) {
			err = io.EOF;
		}
		_tmp$2 = fi;
		_tmp$3 = err;
		fi = _tmp$2;
		err = _tmp$3;
		$s = -1; return [fi, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdir }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.dirname = dirname; $f.err = err; $f.f = f; $f.fi = fi; $f.filename = filename; $f.fip = fip; $f.lerr = lerr; $f.n = n; $f.names = names; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readdirnames = function(n) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, d, err, errno, f, n, names, nb, nc, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; errno = $f.errno; f = $f.f; n = $f.n; names = $f.names; nb = $f.nb; nc = $f.nc; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		names = sliceType.nil;
		err = $ifaceNil;
		f = this;
		if (f.file.dirinfo === ptrType$1.nil) {
			f.file.dirinfo = new dirInfo.ptr(sliceType$2.nil, 0, 0);
			f.file.dirinfo.buf = $makeSlice(sliceType$2, 4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = $makeSlice(sliceType, 0, size);
		/* while (true) { */ case 1:
			/* if (!(!((n === 0)))) { break; } */ if(!(!((n === 0)))) { $s = 2; continue; }
			/* */ if (d.bufp >= d.nbuf) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.bufp >= d.nbuf) { */ case 3:
				d.bufp = 0;
				errno = $ifaceNil;
				_r = f.file.pfd.ReadDirent(d.buf); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				d.nbuf = _tuple[0];
				errno = _tuple[1];
				runtime.KeepAlive(f);
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names;
					_tmp$1 = wrapSyscallError("readdirent", errno);
					names = _tmp;
					err = _tmp$1;
					$s = -1; return [names, err];
				}
				if (d.nbuf <= 0) {
					/* break; */ $s = 2; continue;
				}
			/* } */ case 4:
			_tmp$2 = 0;
			_tmp$3 = 0;
			nb = _tmp$2;
			nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names);
			nb = _tuple$1[0];
			nc = _tuple$1[1];
			names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		/* } */ $s = 1; continue; case 2:
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names;
			_tmp$5 = io.EOF;
			names = _tmp$4;
			err = _tmp$5;
			$s = -1; return [names, err];
		}
		_tmp$6 = names;
		_tmp$7 = $ifaceNil;
		names = _tmp$6;
		err = _tmp$7;
		$s = -1; return [names, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.readdirnames }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.errno = errno; $f.f = f; $f.n = n; $f.names = names; $f.nb = nb; $f.nc = nc; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Path + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PathError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Syscall + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SyscallError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = function(syscall$1, err) {
		var err, syscall$1;
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	$pkg.NewSyscallError = NewSyscallError;
	IsNotExist = function(err) {
		var err;
		return isNotExist(err);
	};
	$pkg.IsNotExist = IsNotExist;
	underlyingError = function(err) {
		var _ref, err, err$1, err$2, err$3;
		_ref = err;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			err$1 = _ref.$val;
			return err$1.Err;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			err$2 = _ref.$val;
			return err$2.Err;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			err$3 = _ref.$val;
			return err$3.Err;
		}
		return err;
	};
	wrapSyscallError = function(name, err) {
		var _tuple, err, name, ok;
		_tuple = $assertType(err, syscall.Errno, true);
		ok = _tuple[1];
		if (ok) {
			err = NewSyscallError(name, err);
		}
		return err;
	};
	isNotExist = function(err) {
		var err;
		err = underlyingError(err);
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.ptr.prototype.Error = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = e.Err.Error(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return e.Op + " " + e.Old + " " + e.New + ": " + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: LinkError.ptr.prototype.Error }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.ptr.prototype.Read = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		_tmp$2 = n;
		_tmp$3 = f.wrapErr("read", e);
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("read");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("readat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pread(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("read", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.ReadAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = f.write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = f.wrapErr("write", e);
		}
		_tmp$2 = n;
		_tmp$3 = err;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err, err$1, f, m, n, off, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; m = $f.m; n = $f.n; off = $f.off; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("write");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp$2 = 0;
			_tmp$3 = new PathError.ptr("writeat", f.file.name, errors.New("negative offset"));
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		/* while (true) { */ case 1:
			/* if (!(b.$length > 0)) { break; } */ if(!(b.$length > 0)) { $s = 2; continue; }
			_r = f.pwrite(b, off); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			m = _tuple[0];
			e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = f.wrapErr("write", e);
				/* break; */ $s = 2; continue;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = (new $Int64(0, m)), new $Int64(off.$high + x.$high, off.$low + x.$low));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteAt }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.m = m; $f.n = n; $f.off = off; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err, err$1, f, offset, r, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; e = $f.e; err = $f.err; err$1 = $f.err$1; f = $f.f; offset = $f.offset; r = $f.r; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		err$1 = f.checkValid("seek");
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = new $Int64(0, 0);
			_tmp$1 = err$1;
			ret = _tmp;
			err = _tmp$1;
			$s = -1; return [ret, err];
		}
		_r = f.seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$1.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0);
			_tmp$3 = f.wrapErr("seek", e);
			ret = _tmp$2;
			err = _tmp$3;
			$s = -1; return [ret, err];
		}
		_tmp$4 = r;
		_tmp$5 = $ifaceNil;
		ret = _tmp$4;
		err = _tmp$5;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.e = e; $f.err = err; $f.err$1 = err$1; $f.f = f; $f.offset = offset; $f.r = r; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _r, _tuple, err, f, n, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.Write((new sliceType$2($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.WriteString }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.wrapErr = function(op, err) {
		var err, f, op;
		f = this;
		if ($interfaceIsEqual(err, $ifaceNil) || $interfaceIsEqual(err, io.EOF)) {
			return err;
		}
		if ($interfaceIsEqual(err, poll.ErrFileClosing)) {
			err = $pkg.ErrClosed;
		}
		return new PathError.ptr(op, f.file.name, err);
	};
	File.prototype.wrapErr = function(op, err) { return this.$val.wrapErr(op, err); };
	File.ptr.prototype.Chmod = function(mode) {
		var _r, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.chmod(mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chmod }; } $f._r = _r; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	sigpipe = function() {
		$throwRuntimeError("native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var i, o;
		o = 0;
		o = (o | (((new FileMode(i).Perm() >>> 0)))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.chmod = function(mode) {
		var _r, e, err, f, mode, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; mode = $f.mode; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chmod");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchmod(syscallMode(mode)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chmod", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.chmod }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.mode = mode; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.chmod = function(mode) { return this.$val.chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var _r, e, err, f, gid, uid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; gid = $f.gid; uid = $f.uid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chown");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchown(uid, gid); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chown", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chown }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.gid = gid; $f.uid = uid; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var _r, e, err, f, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("truncate");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Ftruncate(size); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("truncate", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Truncate }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("sync");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fsync(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("sync", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Sync }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Chdir = function() {
		var _r, e, err, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		err = f.checkValid("chdir");
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r = f.file.pfd.Fchdir(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$s = -1; return f.wrapErr("chdir", e);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Chdir }; } $f._r = _r; $f.e = e; $f.err = err; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	File.ptr.prototype.checkValid = function(op) {
		var f, op;
		f = this;
		if (f === ptrType.nil) {
			return $pkg.ErrInvalid;
		}
		return $ifaceNil;
	};
	File.prototype.checkValid = function(op) { return this.$val.checkValid(op); };
	File.ptr.prototype.Fd = function() {
		var f;
		f = this;
		if (f === ptrType.nil) {
			return 4294967295;
		}
		if (f.file.nonblock) {
			syscall.SetNonblock(f.file.pfd.Sysfd, false);
		}
		return ((f.file.pfd.Sysfd >>> 0));
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = function(fd, name) {
		var fd, name;
		return newFile(fd, name, false);
	};
	$pkg.NewFile = NewFile;
	newFile = function(fd, name, pollable) {
		var err, err$1, f, fd, fdi, name, pollable;
		fdi = ((fd >> 0));
		if (fdi < 0) {
			return ptrType.nil;
		}
		f = new File.ptr(new file.ptr(new poll.FD.ptr(new poll.fdMutex.ptr(new $Uint64(0, 0), 0, 0), fdi, new poll.pollDesc.ptr(false), ptrType$12.nil, true, true, false), name, ptrType$1.nil, false));
		if (false) {
			pollable = false;
		}
		err = f.file.pfd.Init("file", pollable);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
		} else if (pollable) {
			err$1 = syscall.SetNonblock(fdi, true);
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				f.file.nonblock = true;
			}
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$13, "close")));
		return f;
	};
	epipecheck = function(file$1, e) {
		var e, file$1;
		if ($interfaceIsEqual(e, new syscall.Errno(32)) && ((file$1.file.pfd.Sysfd === 1) || (file$1.file.pfd.Sysfd === 2))) {
			sigpipe();
		}
	};
	File.ptr.prototype.Close = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return $pkg.ErrInvalid;
		}
		_r = f.file.close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Close }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var _r, e, err, file$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; err = $f.err; file$1 = $f.file$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		file$1 = this;
		if (file$1 === ptrType$13.nil) {
			$s = -1; return new syscall.Errno(22);
		}
		err = $ifaceNil;
		_r = file$1.pfd.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = _r;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, poll.ErrFileClosing)) {
				e = $pkg.ErrClosed;
			}
			err = new PathError.ptr("close", file$1.name, e);
		}
		runtime.SetFinalizer(file$1, $ifaceNil);
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: file.ptr.prototype.close }; } $f._r = _r; $f.e = e; $f.err = err; $f.file$1 = file$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.read = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Read(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.read }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pread(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pread }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.write = function(b) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Write(b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.write }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var _r, _tmp, _tmp$1, _tuple, b, err, f, n, off, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; f = $f.f; n = $f.n; off = $f.off; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Pwrite(b, off); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = n;
		_tmp$1 = err;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.pwrite }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.f = f; $f.n = n; $f.off = off; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var _r, _tmp, _tmp$1, _tuple, err, f, offset, ret, whence, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; err = $f.err; f = $f.f; offset = $f.offset; ret = $f.ret; whence = $f.whence; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ret = new $Int64(0, 0);
		err = $ifaceNil;
		f = this;
		_r = f.file.pfd.Seek(offset, whence); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		ret = _tuple[0];
		err = _tuple[1];
		runtime.KeepAlive(f);
		_tmp = ret;
		_tmp$1 = err;
		ret = _tmp;
		err = _tmp$1;
		$s = -1; return [ret, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.seek }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.offset = offset; $f.ret = ret; $f.whence = whence; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	init$1 = function() {
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		var err;
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	IsPathSeparator = function(c) {
		var c;
		return 47 === c;
	};
	$pkg.IsPathSeparator = IsPathSeparator;
	basename = function(name) {
		var i, name;
		i = name.length - 1 >> 0;
		while (true) {
			if (!(i > 0 && (name.charCodeAt(i) === 47))) { break; }
			name = $substring(name, 0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (name.charCodeAt(i) === 47) {
				name = $substring(name, (i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	init$2 = function() {
		if (false) {
			return;
		}
		$pkg.Args = runtime_args();
	};
	fillFileStatFromSys = function(fs, name) {
		var _1, fs, name;
		fs.name = basename(name);
		fs.size = fs.sys.Size;
		time.Time.copy(fs.modTime, timespecToTime($clone(fs.sys.Mtimespec, syscall.Timespec)));
		fs.mode = ((((fs.sys.Mode & 511) >>> 0) >>> 0));
		_1 = (fs.sys.Mode & 61440) >>> 0;
		if ((_1 === (24576)) || (_1 === (57344))) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_1 === (8192)) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_1 === (16384)) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_1 === (4096)) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_1 === (40960)) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_1 === (32768)) {
		} else if (_1 === (49152)) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((fs.sys.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((fs.sys.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((fs.sys.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
	};
	timespecToTime = function(ts) {
		var ts;
		return time.Unix((ts.Sec), (ts.Nsec));
	};
	File.ptr.prototype.Stat = function() {
		var _r, err, f, fs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; fs = $f.fs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fs = [fs];
		f = this;
		if (f === ptrType.nil) {
			$s = -1; return [$ifaceNil, $pkg.ErrInvalid];
		}
		fs[0] = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		_r = f.file.pfd.Fstat(fs[0].sys); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, new PathError.ptr("stat", f.file.name, err)];
		}
		fillFileStatFromSys(fs[0], f.file.name);
		$s = -1; return [fs[0], $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: File.ptr.prototype.Stat }; } $f._r = _r; $f.err = err; $f.f = f; $f.fs = fs; $f.$s = $s; $f.$r = $r; return $f;
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Lstat = function(name) {
		var err, fs, name;
		fs = new fileStat.ptr("", new $Int64(0, 0), 0, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$15.nil), new syscall.Stat_t.ptr(0, 0, 0, new $Uint64(0, 0), 0, 0, 0, arrayType.zero(), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new syscall.Timespec.ptr(new $Int64(0, 0), new $Int64(0, 0)), new $Int64(0, 0), new $Int64(0, 0), 0, 0, 0, 0, arrayType$3.zero()));
		err = syscall.Lstat(name, fs.sys);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new PathError.ptr("lstat", name, err)];
		}
		fillFileStatFromSys(fs, name);
		return [fs, $ifaceNil];
	};
	$pkg.Lstat = Lstat;
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = arrayType$5.zero();
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = (((31 - i >> 0) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c << 24 >>> 24)));
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.length)) { break; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = (((8 - i$1 >> 0) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = ((c$1 << 24 >>> 24)));
			} else {
				((w < 0 || w >= buf.length) ? ($throwRuntimeError("index out of range"), undefined) : buf[w] = 45);
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return ($bytesToString($subslice(new sliceType$2(buf), 0, w)));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "close", name: "close", pkg: "os", typ: $funcType([], [$error], false)}];
	ptrType.methods = [{prop: "Readdir", name: "Readdir", pkg: "", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", typ: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}, {prop: "wrapErr", name: "wrapErr", pkg: "os", typ: $funcType([$String, $error], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", typ: $funcType([FileMode], [$error], false)}, {prop: "chmod", name: "chmod", pkg: "os", typ: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", typ: $funcType([$Int, $Int], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", typ: $funcType([$Int64], [$error], false)}, {prop: "Sync", name: "Sync", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Chdir", name: "Chdir", pkg: "", typ: $funcType([], [$error], false)}, {prop: "checkValid", name: "checkValid", pkg: "os", typ: $funcType([$String], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "read", name: "read", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pread", name: "pread", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "write", name: "write", pkg: "os", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", typ: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "seek", name: "seek", pkg: "os", typ: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [FileInfo, $error], false)}];
	FileMode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([], [FileMode], false)}];
	ptrType$16.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	PathError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Path", name: "Path", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	SyscallError.init("", [{prop: "Syscall", name: "Syscall", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	LinkError.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Old", name: "Old", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "New", name: "New", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Err", name: "Err", anonymous: false, exported: true, typ: $error, tag: ""}]);
	file.init("os", [{prop: "pfd", name: "pfd", anonymous: false, exported: false, typ: poll.FD, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "nonblock", name: "nonblock", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	dirInfo.init("os", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "nbuf", name: "nbuf", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "bufp", name: "bufp", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	File.init("os", [{prop: "file", name: "file", anonymous: true, exported: false, typ: ptrType$13, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}]);
	fileStat.init("os", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: FileMode, tag: ""}, {prop: "modTime", name: "modTime", anonymous: false, exported: false, typ: time.Time, tag: ""}, {prop: "sys", name: "sys", anonymous: false, exported: false, typ: syscall.Stat_t, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = poll.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syscall.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.ErrClosed = errors.New("file already closed");
		errFinished = errors.New("os: process already finished");
		$pkg.Stdin = NewFile(((syscall.Stdin >>> 0)), "/dev/stdin");
		$pkg.Stdout = NewFile(((syscall.Stdout >>> 0)), "/dev/stdout");
		$pkg.Stderr = NewFile(((syscall.Stderr >>> 0)), "/dev/stderr");
		useSyscallwd = (function(param) {
			var param;
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, $init, errors, js, math, runtime, strconv, sync, unicode, utf8, uncommonType, funcType, name, nameData, mapIter, Type, Kind, tflag, rtype, typeAlg, method, ChanDir, arrayType, chanType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, nameOff, typeOff, textOff, StructField, StructTag, fieldScan, Value, flag, ValueError, sliceType$1, ptrType$1, sliceType$2, sliceType$3, ptrType$2, funcType$1, sliceType$4, ptrType$3, ptrType$4, sliceType$5, sliceType$6, sliceType$7, ptrType$5, ptrType$6, structType$3, sliceType$8, sliceType$9, sliceType$10, sliceType$11, ptrType$7, ptrType$8, sliceType$13, sliceType$14, ptrType$9, sliceType$15, ptrType$15, sliceType$17, ptrType$16, funcType$3, funcType$4, funcType$5, ptrType$17, arrayType$12, ptrType$18, initialized, uncommonTypeMap, nameMap, nameOffList, typeOffList, callHelper, jsObjectPtr, selectHelper, kindNames, methodCache, uint8Type, init, jsType, reflectType, setKindType, newName, newNameOff, newTypeOff, internalStr, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, FuncOf, SliceOf, Zero, unsafe_New, makeInt, typedmemmove, makemap, keyFor, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, wrapJsObject, unwrapJsObject, getJsTag, chanrecv, chansend, Swapper, PtrTo, implements$1, directlyAssignable, haveIdenticalType, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, MakeMap, MakeMapWithSize, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", true, "reflect", false, function(pkgPath_, mcount_, _$2_, moff_, _$4_, _methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pkgPath = 0;
			this.mcount = 0;
			this._$2 = 0;
			this.moff = 0;
			this._$4 = 0;
			this._methods = sliceType$5.nil;
			return;
		}
		this.pkgPath = pkgPath_;
		this.mcount = mcount_;
		this._$2 = _$2_;
		this.moff = moff_;
		this._$4 = _$4_;
		this._methods = _methods_;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", true, "reflect", false, function(rtype_, inCount_, outCount_, _in_, _out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.inCount = 0;
			this.outCount = 0;
			this._in = sliceType$2.nil;
			this._out = sliceType$2.nil;
			return;
		}
		this.rtype = rtype_;
		this.inCount = inCount_;
		this.outCount = outCount_;
		this._in = _in_;
		this._out = _out_;
	});
	name = $pkg.name = $newType(0, $kindStruct, "reflect.name", true, "reflect", false, function(bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = ptrType$4.nil;
			return;
		}
		this.bytes = bytes_;
	});
	nameData = $pkg.nameData = $newType(0, $kindStruct, "reflect.nameData", true, "reflect", false, function(name_, tag_, pkgPath_, exported_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.tag = "";
			this.pkgPath = "";
			this.exported = false;
			return;
		}
		this.name = name_;
		this.tag = tag_;
		this.pkgPath = pkgPath_;
		this.exported = exported_;
	});
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", true, "reflect", false, function(t_, m_, keys_, i_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.t = $ifaceNil;
			this.m = null;
			this.keys = null;
			this.i = 0;
			return;
		}
		this.t = t_;
		this.m = m_;
		this.keys = keys_;
		this.i = i_;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", true, "reflect", true, null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", true, "reflect", true, null);
	tflag = $pkg.tflag = $newType(1, $kindUint8, "reflect.tflag", true, "reflect", false, null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", true, "reflect", false, function(size_, ptrdata_, hash_, tflag_, align_, fieldAlign_, kind_, alg_, gcdata_, str_, ptrToThis_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = 0;
			this.ptrdata = 0;
			this.hash = 0;
			this.tflag = 0;
			this.align = 0;
			this.fieldAlign = 0;
			this.kind = 0;
			this.alg = ptrType$3.nil;
			this.gcdata = ptrType$4.nil;
			this.str = 0;
			this.ptrToThis = 0;
			return;
		}
		this.size = size_;
		this.ptrdata = ptrdata_;
		this.hash = hash_;
		this.tflag = tflag_;
		this.align = align_;
		this.fieldAlign = fieldAlign_;
		this.kind = kind_;
		this.alg = alg_;
		this.gcdata = gcdata_;
		this.str = str_;
		this.ptrToThis = ptrToThis_;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", true, "reflect", false, function(hash_, equal_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hash = $throwNilPointerError;
			this.equal = $throwNilPointerError;
			return;
		}
		this.hash = hash_;
		this.equal = equal_;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", true, "reflect", false, function(name_, mtyp_, ifn_, tfn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.mtyp = 0;
			this.ifn = 0;
			this.tfn = 0;
			return;
		}
		this.name = name_;
		this.mtyp = mtyp_;
		this.ifn = ifn_;
		this.tfn = tfn_;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", true, "reflect", true, null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", true, "reflect", false, function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.slice = ptrType$1.nil;
			this.len = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.slice = slice_;
		this.len = len_;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", true, "reflect", false, function(rtype_, elem_, dir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			this.dir = 0;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
		this.dir = dir_;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", true, "reflect", false, function(name_, typ_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = 0;
			this.typ = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", true, "reflect", false, function(rtype_, pkgPath_, methods_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.methods = sliceType$6.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.methods = methods_;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", true, "reflect", false, function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_, reflexivekey_, needkeyupdate_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.key = ptrType$1.nil;
			this.elem = ptrType$1.nil;
			this.bucket = ptrType$1.nil;
			this.hmap = ptrType$1.nil;
			this.keysize = 0;
			this.indirectkey = 0;
			this.valuesize = 0;
			this.indirectvalue = 0;
			this.bucketsize = 0;
			this.reflexivekey = false;
			this.needkeyupdate = false;
			return;
		}
		this.rtype = rtype_;
		this.key = key_;
		this.elem = elem_;
		this.bucket = bucket_;
		this.hmap = hmap_;
		this.keysize = keysize_;
		this.indirectkey = indirectkey_;
		this.valuesize = valuesize_;
		this.indirectvalue = indirectvalue_;
		this.bucketsize = bucketsize_;
		this.reflexivekey = reflexivekey_;
		this.needkeyupdate = needkeyupdate_;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", true, "reflect", false, function(rtype_, elem_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.elem = ptrType$1.nil;
			return;
		}
		this.rtype = rtype_;
		this.elem = elem_;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", true, "reflect", false, function(name_, typ_, offsetAnon_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = new name.ptr(ptrType$4.nil);
			this.typ = ptrType$1.nil;
			this.offsetAnon = 0;
			return;
		}
		this.name = name_;
		this.typ = typ_;
		this.offsetAnon = offsetAnon_;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", true, "reflect", false, function(rtype_, pkgPath_, fields_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rtype = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
			this.pkgPath = new name.ptr(ptrType$4.nil);
			this.fields = sliceType$7.nil;
			return;
		}
		this.rtype = rtype_;
		this.pkgPath = pkgPath_;
		this.fields = fields_;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", true, "reflect", true, function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Func = new Value.ptr(ptrType$1.nil, 0, 0);
			this.Index = 0;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Func = Func_;
		this.Index = Index_;
	});
	nameOff = $pkg.nameOff = $newType(4, $kindInt32, "reflect.nameOff", true, "reflect", false, null);
	typeOff = $pkg.typeOff = $newType(4, $kindInt32, "reflect.typeOff", true, "reflect", false, null);
	textOff = $pkg.textOff = $newType(4, $kindInt32, "reflect.textOff", true, "reflect", false, null);
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", true, "reflect", true, function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.PkgPath = "";
			this.Type = $ifaceNil;
			this.Tag = "";
			this.Offset = 0;
			this.Index = sliceType$13.nil;
			this.Anonymous = false;
			return;
		}
		this.Name = Name_;
		this.PkgPath = PkgPath_;
		this.Type = Type_;
		this.Tag = Tag_;
		this.Offset = Offset_;
		this.Index = Index_;
		this.Anonymous = Anonymous_;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", true, "reflect", true, null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", true, "reflect", false, function(typ_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$9.nil;
			this.index = sliceType$13.nil;
			return;
		}
		this.typ = typ_;
		this.index = index_;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", true, "reflect", true, function(typ_, ptr_, flag_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.typ = ptrType$1.nil;
			this.ptr = 0;
			this.flag = 0;
			return;
		}
		this.typ = typ_;
		this.ptr = ptr_;
		this.flag = flag_;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", true, "reflect", false, null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", true, "reflect", true, function(Method_, Kind_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Method = "";
			this.Kind = 0;
			return;
		}
		this.Method = Method_;
		this.Kind = Kind_;
	});
	sliceType$1 = $sliceType(name);
	ptrType$1 = $ptrType(rtype);
	sliceType$2 = $sliceType(ptrType$1);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(js.Object);
	funcType$1 = $funcType([sliceType$3], [ptrType$2], true);
	sliceType$4 = $sliceType($String);
	ptrType$3 = $ptrType(typeAlg);
	ptrType$4 = $ptrType($Uint8);
	sliceType$5 = $sliceType(method);
	sliceType$6 = $sliceType(imethod);
	sliceType$7 = $sliceType(structField);
	ptrType$5 = $ptrType(uncommonType);
	ptrType$6 = $ptrType(nameData);
	structType$3 = $structType("reflect", [{prop: "str", name: "str", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType$8 = $sliceType(ptrType$2);
	sliceType$9 = $sliceType(Value);
	sliceType$10 = $sliceType(Type);
	sliceType$11 = $sliceType(sliceType$8);
	ptrType$7 = $ptrType(interfaceType);
	ptrType$8 = $ptrType(imethod);
	sliceType$13 = $sliceType($Int);
	sliceType$14 = $sliceType(fieldScan);
	ptrType$9 = $ptrType(structType);
	sliceType$15 = $sliceType($Uint8);
	ptrType$15 = $ptrType($UnsafePointer);
	sliceType$17 = $sliceType($Int32);
	ptrType$16 = $ptrType(funcType);
	funcType$3 = $funcType([$String], [$Bool], false);
	funcType$4 = $funcType([$UnsafePointer, $Uintptr], [$Uintptr], false);
	funcType$5 = $funcType([$UnsafePointer, $UnsafePointer], [$Bool], false);
	ptrType$17 = $ptrType(structField);
	arrayType$12 = $arrayType($Uintptr, 2);
	ptrType$18 = $ptrType(ValueError);
	init = function() {
		var used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; used = $f.used; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		used = (function(i) {
			var i;
		});
		$r = used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$1 = new uncommonType.ptr(0, 0, 0, 0, 0, sliceType$5.nil), new x$1.constructor.elem(x$1))); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$2 = new method.ptr(0, 0, 0, 0), new x$2.constructor.elem(x$2))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$3 = new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$4 = new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, 0), new x$4.constructor.elem(x$4))); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$5 = new funcType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), 0, 0, sliceType$2.nil, sliceType$2.nil), new x$5.constructor.elem(x$5))); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$6 = new interfaceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$6.nil), new x$6.constructor.elem(x$6))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$7 = new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false), new x$7.constructor.elem(x$7))); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$8 = new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$8.constructor.elem(x$8))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$9 = new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), ptrType$1.nil), new x$9.constructor.elem(x$9))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$10 = new structType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), new name.ptr(ptrType$4.nil), sliceType$7.nil), new x$10.constructor.elem(x$10))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$11 = new imethod.ptr(0, 0), new x$11.constructor.elem(x$11))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = used((x$12 = new structField.ptr(new name.ptr(ptrType$4.nil), ptrType$1.nil, 0), new x$12.constructor.elem(x$12))); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.used = used; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	jsType = function(typ) {
		var typ;
		return typ.jsType;
	};
	reflectType = function(typ) {
		var _1, _i, _i$1, _i$2, _i$3, _i$4, _key, _ref, _ref$1, _ref$2, _ref$3, _ref$4, dir, f, fields, i, i$1, i$2, i$3, i$4, imethods, in$1, m, m$1, methodSet, methods, offsetAnon, out, outCount, params, reflectFields, reflectMethods, results, rt, typ, ut;
		if (typ.reflectType === undefined) {
			rt = new rtype.ptr(((($parseInt(typ.size) >> 0) >>> 0)), 0, 0, 0, 0, 0, ((($parseInt(typ.kind) >> 0) << 24 >>> 24)), ptrType$3.nil, ptrType$4.nil, newNameOff($clone(newName(internalStr(typ.string), "", "", !!(typ.exported)), name)), 0);
			rt.jsType = typ;
			typ.reflectType = rt;
			methodSet = $methodSet(typ);
			if (!(($parseInt(methodSet.length) === 0)) || !!(typ.named)) {
				rt.tflag = (rt.tflag | (1)) >>> 0;
				if (!!(typ.named)) {
					rt.tflag = (rt.tflag | (4)) >>> 0;
				}
				reflectMethods = $makeSlice(sliceType$5, $parseInt(methodSet.length));
				_ref = reflectMethods;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i = _i;
					m = methodSet[i];
					method.copy(((i < 0 || i >= reflectMethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectMethods.$array[reflectMethods.$offset + i]), new method.ptr(newNameOff($clone(newName(internalStr(m.name), "", "", internalStr(m.pkg) === ""), name)), newTypeOff(reflectType(m.typ)), 0, 0));
					_i++;
				}
				ut = new uncommonType.ptr(newNameOff($clone(newName(internalStr(typ.pkg), "", "", false), name)), (($parseInt(methodSet.length) << 16 >>> 16)), 0, 0, 0, reflectMethods);
				_key = rt; (uncommonTypeMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: ut };
				ut.jsType = typ;
			}
			_1 = rt.Kind();
			if (_1 === (17)) {
				setKindType(rt, new arrayType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ptrType$1.nil, ((($parseInt(typ.len) >> 0) >>> 0))));
			} else if (_1 === (18)) {
				dir = 3;
				if (!!(typ.sendOnly)) {
					dir = 2;
				}
				if (!!(typ.recvOnly)) {
					dir = 1;
				}
				setKindType(rt, new chanType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem), ((dir >>> 0))));
			} else if (_1 === (19)) {
				params = typ.params;
				in$1 = $makeSlice(sliceType$2, $parseInt(params.length));
				_ref$1 = in$1;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					i$1 = _i$1;
					((i$1 < 0 || i$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i$1] = reflectType(params[i$1]));
					_i$1++;
				}
				results = typ.results;
				out = $makeSlice(sliceType$2, $parseInt(results.length));
				_ref$2 = out;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					((i$2 < 0 || i$2 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$2] = reflectType(results[i$2]));
					_i$2++;
				}
				outCount = (($parseInt(results.length) << 16 >>> 16));
				if (!!(typ.variadic)) {
					outCount = (outCount | (32768)) >>> 0;
				}
				setKindType(rt, new funcType.ptr($clone(rt, rtype), (($parseInt(params.length) << 16 >>> 16)), outCount, in$1, out));
			} else if (_1 === (20)) {
				methods = typ.methods;
				imethods = $makeSlice(sliceType$6, $parseInt(methods.length));
				_ref$3 = imethods;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					i$3 = _i$3;
					m$1 = methods[i$3];
					imethod.copy(((i$3 < 0 || i$3 >= imethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : imethods.$array[imethods.$offset + i$3]), new imethod.ptr(newNameOff($clone(newName(internalStr(m$1.name), "", "", internalStr(m$1.pkg) === ""), name)), newTypeOff(reflectType(m$1.typ))));
					_i$3++;
				}
				setKindType(rt, new interfaceType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkg), "", "", false), name), imethods));
			} else if (_1 === (21)) {
				setKindType(rt, new mapType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.key), reflectType(typ.elem), ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0, false, false));
			} else if (_1 === (22)) {
				setKindType(rt, new ptrType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (23)) {
				setKindType(rt, new sliceType.ptr(new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0), reflectType(typ.elem)));
			} else if (_1 === (25)) {
				fields = typ.fields;
				reflectFields = $makeSlice(sliceType$7, $parseInt(fields.length));
				_ref$4 = reflectFields;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					i$4 = _i$4;
					f = fields[i$4];
					offsetAnon = ((i$4 >>> 0)) << 1 >>> 0;
					if (!!(f.anonymous)) {
						offsetAnon = (offsetAnon | (1)) >>> 0;
					}
					structField.copy(((i$4 < 0 || i$4 >= reflectFields.$length) ? ($throwRuntimeError("index out of range"), undefined) : reflectFields.$array[reflectFields.$offset + i$4]), new structField.ptr($clone(newName(internalStr(f.name), internalStr(f.tag), "", !!(f.exported)), name), reflectType(f.typ), offsetAnon));
					_i$4++;
				}
				setKindType(rt, new structType.ptr($clone(rt, rtype), $clone(newName(internalStr(typ.pkgPath), "", "", false), name), reflectFields));
			}
		}
		return ((typ.reflectType));
	};
	setKindType = function(rt, kindType) {
		var kindType, rt;
		rt.kindType = kindType;
		kindType.rtype = rt;
	};
	uncommonType.ptr.prototype.methods = function() {
		var t;
		t = this;
		return t._methods;
	};
	uncommonType.prototype.methods = function() { return this.$val.methods(); };
	rtype.ptr.prototype.uncommon = function() {
		var _entry, t;
		t = this;
		return (_entry = uncommonTypeMap[ptrType$1.keyFor(t)], _entry !== undefined ? _entry.v : ptrType$5.nil);
	};
	rtype.prototype.uncommon = function() { return this.$val.uncommon(); };
	funcType.ptr.prototype.in$ = function() {
		var t;
		t = this;
		return t._in;
	};
	funcType.prototype.in$ = function() { return this.$val.in$(); };
	funcType.ptr.prototype.out = function() {
		var t;
		t = this;
		return t._out;
	};
	funcType.prototype.out = function() { return this.$val.out(); };
	name.ptr.prototype.name = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).name;
		return s;
	};
	name.prototype.name = function() { return this.$val.name(); };
	name.ptr.prototype.tag = function() {
		var _entry, n, s;
		s = "";
		n = this;
		s = (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).tag;
		return s;
	};
	name.prototype.tag = function() { return this.$val.tag(); };
	name.ptr.prototype.pkgPath = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).pkgPath;
	};
	name.prototype.pkgPath = function() { return this.$val.pkgPath(); };
	name.ptr.prototype.isExported = function() {
		var _entry, n;
		n = this;
		return (_entry = nameMap[ptrType$4.keyFor(n.bytes)], _entry !== undefined ? _entry.v : ptrType$6.nil).exported;
	};
	name.prototype.isExported = function() { return this.$val.isExported(); };
	newName = function(n, tag, pkgPath, exported) {
		var _key, b, exported, n, pkgPath, tag;
		b = $newDataPointer(0, ptrType$4);
		_key = b; (nameMap || $throwRuntimeError("assignment to entry in nil map"))[ptrType$4.keyFor(_key)] = { k: _key, v: new nameData.ptr(n, tag, pkgPath, exported) };
		return new name.ptr(b);
	};
	rtype.ptr.prototype.nameOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= nameOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : nameOffList.$array[nameOffList.$offset + x]));
	};
	rtype.prototype.nameOff = function(off) { return this.$val.nameOff(off); };
	newNameOff = function(n) {
		var i, n;
		i = nameOffList.$length;
		nameOffList = $append(nameOffList, n);
		return ((i >> 0));
	};
	rtype.ptr.prototype.typeOff = function(off) {
		var off, t, x;
		t = this;
		return (x = ((off >> 0)), ((x < 0 || x >= typeOffList.$length) ? ($throwRuntimeError("index out of range"), undefined) : typeOffList.$array[typeOffList.$offset + x]));
	};
	rtype.prototype.typeOff = function(off) { return this.$val.typeOff(off); };
	newTypeOff = function(t) {
		var i, t;
		i = typeOffList.$length;
		typeOffList = $append(typeOffList, t);
		return ((i >> 0));
	};
	internalStr = function(strObj) {
		var c, strObj;
		c = new structType$3.ptr("");
		c.str = strObj;
		return c.str;
	};
	isWrapped = function(typ) {
		var typ;
		return !!(jsType(typ).wrapped);
	};
	copyStruct = function(dst, src, typ) {
		var dst, fields, i, prop, src, typ;
		fields = jsType(typ).fields;
		i = 0;
		while (true) {
			if (!(i < $parseInt(fields.length))) { break; }
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _v, _v$1, fl, rt, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _v = $f._v; _v$1 = $f._v$1; fl = $f.fl; rt = $f.rt; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rt = _r;
		_r$1 = t.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (_r$1 === 17) { _v$1 = true; $s = 5; continue s; }
		_r$2 = t.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_v$1 = _r$2 === 25; case 5:
		if (_v$1) { _v = true; $s = 4; continue s; }
		_r$3 = t.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3 === 22; case 4:
		/* */ if (_v) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_v) { */ case 2:
			_r$4 = t.Kind(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return new Value.ptr(rt, (v), (fl | ((_r$4 >>> 0))) >>> 0);
		/* } */ case 3:
		_r$5 = t.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(rt, ($newDataPointer(v, jsType(rt.ptrTo()))), (((fl | ((_r$5 >>> 0))) >>> 0) | 128) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeValue }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._v = _v; $f._v$1 = _v$1; $f.fl = fl; $f.rt = rt; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeSlice = function(typ, len, cap) {
		var _r, _r$1, cap, len, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; len = $f.len; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		typ = [typ];
		_r = typ[0].Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 23))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 23))) { */ case 1:
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		/* } */ case 2:
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		_r$1 = makeValue(typ[0], $makeSlice(jsType(typ[0]), len, cap, (function(typ) { return function $b() {
			var _r$1, _r$2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; _r$2 = $f._r$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$1 = typ[0].Elem(); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = jsType(_r$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2.zero();
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f._r$2 = _r$2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(typ)), 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeSlice }; } $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.len = len; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeSlice = MakeSlice;
	TypeOf = function(i) {
		var i;
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, 0, ptrType$3.nil, ptrType$4.nil, 0, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	$pkg.TypeOf = TypeOf;
	ValueOf = function(i) {
		var _r, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(i, $ifaceNil)) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = makeValue(reflectType(i.constructor), i.$val, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ValueOf }; } $f._r = _r; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ValueOf = ValueOf;
	FuncOf = function(in$1, out, variadic) {
		var _i, _i$1, _r, _ref, _ref$1, _v, _v$1, i, i$1, in$1, jsIn, jsOut, out, v, v$1, variadic, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _v = $f._v; _v$1 = $f._v$1; i = $f.i; i$1 = $f.i$1; in$1 = $f.in$1; jsIn = $f.jsIn; jsOut = $f.jsOut; out = $f.out; v = $f.v; v$1 = $f.v$1; variadic = $f.variadic; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!(variadic)) { _v = false; $s = 3; continue s; }
		if (in$1.$length === 0) { _v$1 = true; $s = 4; continue s; }
		_r = (x = in$1.$length - 1 >> 0, ((x < 0 || x >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x])).Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v$1 = !((_r === 23)); case 4:
		_v = _v$1; case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect.FuncOf: last arg of variadic func must be slice"));
		/* } */ case 2:
		jsIn = $makeSlice(sliceType$8, in$1.$length);
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= jsIn.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsIn.$array[jsIn.$offset + i] = jsType(v));
			_i++;
		}
		jsOut = $makeSlice(sliceType$8, out.$length);
		_ref$1 = out;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			((i$1 < 0 || i$1 >= jsOut.$length) ? ($throwRuntimeError("index out of range"), undefined) : jsOut.$array[jsOut.$offset + i$1] = jsType(v$1));
			_i$1++;
		}
		$s = -1; return reflectType($funcType($externalize(jsIn, sliceType$8), $externalize(jsOut, sliceType$8), $externalize(variadic, $Bool)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FuncOf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._v = _v; $f._v$1 = _v$1; $f.i = i; $f.i$1 = i$1; $f.in$1 = in$1; $f.jsIn = jsIn; $f.jsOut = jsOut; $f.out = out; $f.v = v; $f.v$1 = v$1; $f.variadic = variadic; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FuncOf = FuncOf;
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = function(t) {
		var t;
		return reflectType($sliceType(jsType(t)));
	};
	$pkg.SliceOf = SliceOf;
	Zero = function(typ) {
		var _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeValue(typ, jsType(typ).zero(), 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Zero }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Zero = Zero;
	unsafe_New = function(typ) {
		var _1, typ;
		_1 = typ.Kind();
		if (_1 === (25)) {
			return (new (jsType(typ).ptr)());
		} else if (_1 === (17)) {
			return (jsType(typ).zero());
		} else {
			return ($newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo())));
		}
	};
	makeInt = function(f, bits, t) {
		var _1, _r, bits, f, ptr, t, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bits = $f.bits; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.Kind();
		if (_1 === (3)) {
			(ptr).$set(((bits.$low << 24 >> 24)));
		} else if (_1 === (4)) {
			(ptr).$set(((bits.$low << 16 >> 16)));
		} else if ((_1 === (2)) || (_1 === (5))) {
			(ptr).$set(((bits.$low >> 0)));
		} else if (_1 === (6)) {
			(ptr).$set((new $Int64(bits.$high, bits.$low)));
		} else if (_1 === (8)) {
			(ptr).$set(((bits.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(ptr).$set(((bits.$low << 16 >>> 16)));
		} else if ((_1 === (7)) || (_1 === (10)) || (_1 === (12))) {
			(ptr).$set(((bits.$low >>> 0)));
		} else if (_1 === (11)) {
			(ptr).$set((bits));
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeInt }; } $f._1 = _1; $f._r = _r; $f.bits = bits; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	typedmemmove = function(t, dst, src) {
		var dst, src, t;
		dst.$set(src.$get());
	};
	makemap = function(t, cap) {
		var cap, m, t;
		m = 0;
		m = (new ($global.Object)());
		return m;
	};
	keyFor = function(t, key) {
		var k, key, kv, t;
		kv = key;
		if (!(kv.$get === undefined)) {
			kv = kv.$get();
		}
		k = $internalize(jsType(t.Key()).keyFor(kv), $String);
		return [kv, k];
	};
	mapaccess = function(t, m, key) {
		var _tuple, entry, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		entry = m[$externalize(k, $String)];
		if (entry === undefined) {
			return 0;
		}
		return ($newDataPointer(entry.v, jsType(PtrTo(t.Elem()))));
	};
	mapassign = function(t, m, key, val) {
		var _r, _tuple, entry, et, jsVal, k, key, kv, m, newVal, t, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; entry = $f.entry; et = $f.et; jsVal = $f.jsVal; k = $f.k; key = $f.key; kv = $f.kv; m = $f.m; newVal = $f.newVal; t = $f.t; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = keyFor(t, key);
		kv = _tuple[0];
		k = _tuple[1];
		jsVal = val.$get();
		et = t.Elem();
		_r = et.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r === 25) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r === 25) { */ case 1:
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		/* } */ case 2:
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize(k, $String)] = entry;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapassign }; } $f._r = _r; $f._tuple = _tuple; $f.entry = entry; $f.et = et; $f.jsVal = jsVal; $f.k = k; $f.key = key; $f.kv = kv; $f.m = m; $f.newVal = newVal; $f.t = t; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapdelete = function(t, m, key) {
		var _tuple, k, key, m, t;
		_tuple = keyFor(t, key);
		k = _tuple[1];
		delete m[$externalize(k, $String)];
	};
	mapiterinit = function(t, m) {
		var m, t;
		return ((new mapIter.ptr(t, m, $keys(m), 0)));
	};
	mapiterkey = function(it) {
		var _r, _r$1, _r$2, it, iter, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; it = $f.it; iter = $f.iter; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		iter = ((it));
		k = iter.keys[iter.i];
		_r = iter.t.Key(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = PtrTo(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = jsType(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return ($newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, _r$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: mapiterkey }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.it = it; $f.iter = iter; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	mapiternext = function(it) {
		var it, iter;
		iter = ((it));
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		var m;
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _1, _arg, _arg$1, _arg$2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, k, slice, srcVal, typ, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; k = $f.k; slice = $f.slice; srcVal = $f.srcVal; typ = $f.typ; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		srcVal = $clone(v, Value).object();
		/* */ if (srcVal === jsType(v.typ).nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (srcVal === jsType(v.typ).nil) { */ case 1:
			_r = makeValue(typ, jsType(typ).nil, v.flag); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		val = null;
			_r$1 = typ.Kind(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			k = _r$1;
			_1 = k;
			/* */ if (_1 === (23)) { $s = 6; continue; }
			/* */ if (_1 === (22)) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (23)) { */ case 6:
				slice = new (jsType(typ))(srcVal.$array);
				slice.$offset = srcVal.$offset;
				slice.$length = srcVal.$length;
				slice.$capacity = srcVal.$capacity;
				val = $newDataPointer(slice, jsType(PtrTo(typ)));
				$s = 11; continue;
			/* } else if (_1 === (22)) { */ case 7:
				_r$2 = typ.Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 25) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_r$3 === 25) { */ case 12:
					_r$4 = typ.Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if ($interfaceIsEqual(_r$4, v.typ.Elem())) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($interfaceIsEqual(_r$4, v.typ.Elem())) { */ case 16:
						val = srcVal;
						/* break; */ $s = 4; continue;
					/* } */ case 17:
					val = new (jsType(typ))();
					_arg = val;
					_arg$1 = srcVal;
					_r$5 = typ.Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_arg$2 = _r$5;
					$r = copyStruct(_arg, _arg$1, _arg$2); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 4; continue;
				/* } */ case 13:
				val = new (jsType(typ))(srcVal.$get, srcVal.$set);
				$s = 11; continue;
			/* } else if (_1 === (25)) { */ case 8:
				val = new (jsType(typ).ptr)();
				copyStruct(val, srcVal, typ);
				$s = 11; continue;
			/* } else if ((_1 === (17)) || (_1 === (1)) || (_1 === (18)) || (_1 === (19)) || (_1 === (20)) || (_1 === (21)) || (_1 === (24))) { */ case 9:
				val = v.ptr;
				$s = 11; continue;
			/* } else { */ case 10:
				$panic(new ValueError.ptr("reflect.Convert", k));
			/* } */ case 11:
		case 4:
		_r$6 = typ.common(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_r$7 = typ.Kind(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$6, (val), (((v.flag & 224) >>> 0) | ((_r$7 >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtDirect }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.k = k; $f.slice = slice; $f.srcVal = srcVal; $f.typ = typ; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Copy = function(dst, src) {
		var dk, dst, dstVal, sk, src, srcVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dk = $f.dk; dst = $f.dst; dstVal = $f.dstVal; sk = $f.sk; src = $f.src; srcVal = $f.srcVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		$r = typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dstVal = $clone(dst, Value).object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = $clone(src, Value).object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		$s = -1; return $parseInt($copySlice(dstVal, srcVal)) >> 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Copy }; } $f.dk = dk; $f.dst = dst; $f.dstVal = dstVal; $f.sk = sk; $f.src = src; $f.srcVal = srcVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Copy = Copy;
	methodReceiver = function(op, v, i) {
		var _$38, fn, i, m, m$1, op, prop, rcvr, t, tt, ut, v, x, x$1;
		_$38 = ptrType$1.nil;
		t = ptrType$1.nil;
		fn = 0;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if (!$clone(tt.rtype.nameOff(m.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = tt.rtype.typeOff(m.typ);
			prop = $clone(tt.rtype.nameOff(m.name), name).name();
		} else {
			ut = v.typ.uncommon();
			if (ut === ptrType$5.nil || ((i >>> 0)) >= ((ut.mcount >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
			if (!$clone(v.typ.nameOff(m$1.name), name).isExported()) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = v.typ.typeOff(m$1.mtyp);
			prop = $internalize($methodSet(jsType(v.typ))[i].prop, $String);
		}
		rcvr = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = (rcvr[$externalize(prop, $String)]);
		return [_$38, t, fn];
	};
	valueInterface = function(v, safe) {
		var _r, safe, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; safe = $f.safe; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 96) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Interface", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		if (isWrapped(v.typ)) {
			$s = -1; return ((new (jsType(v.typ))($clone(v, Value).object())));
		}
		$s = -1; return (($clone(v, Value).object()));
		/* */ } return; } if ($f === undefined) { $f = { $blk: valueInterface }; } $f._r = _r; $f.safe = safe; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ifaceE2I = function(t, src, dst) {
		var dst, src, t;
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _r, _tuple, fn, fv, op, rcvr, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; fn = $f.fn; fv = $f.fv; op = $f.op; rcvr = $f.rcvr; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fn = [fn];
		rcvr = [rcvr];
		if (((v.flag & 512) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
		fn[0] = _tuple[2];
		rcvr[0] = $clone(v, Value).object();
		if (isWrapped(v.typ)) {
			rcvr[0] = new (jsType(v.typ))(rcvr[0]);
		}
		fv = js.MakeFunc((function(fn, rcvr) { return function(this$1, arguments$1) {
			var arguments$1, this$1;
			return new $jsObjectPtr(fn[0].apply(rcvr[0], $externalize(arguments$1, sliceType$8)));
		}; })(fn, rcvr));
		_r = $clone(v, Value).Type().common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r, (fv), (((v.flag & 96) >>> 0) | 19) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeMethodValue }; } $f._r = _r; $f._tuple = _tuple; $f.fn = fn; $f.fv = fv; $f.op = op; $f.rcvr = rcvr; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.ptr.prototype.pointers = function() {
		var _1, t;
		t = this;
		_1 = t.Kind();
		if ((_1 === (22)) || (_1 === (21)) || (_1 === (18)) || (_1 === (19)) || (_1 === (25)) || (_1 === (17))) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _1, _r, _r$1, i, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; i = $f.i; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
			_1 = t.Kind();
			/* */ if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { $s = 2; continue; }
			/* */ if (_1 === (17)) { $s = 3; continue; }
			/* */ if (_1 === (25)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (19)) || (_1 === (23)) || (_1 === (21))) { */ case 2:
				$s = -1; return false;
			/* } else if (_1 === (17)) { */ case 3:
				_r = t.Elem().Comparable(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (25)) { */ case 4:
				i = 0;
				/* while (true) { */ case 7:
					/* if (!(i < t.NumField())) { break; } */ if(!(i < t.NumField())) { $s = 8; continue; }
					_r$1 = t.Field(i).Type.Comparable(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (!_r$1) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!_r$1) { */ case 9:
						$s = -1; return false;
					/* } */ case 10:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
			/* } */ case 5:
		case 1:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Comparable }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	rtype.ptr.prototype.Method = function(i) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, arg, fl, fn, ft, i, in$1, m, methods, mt, mtyp, out, p, pname, prop, ret, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; arg = $f.arg; fl = $f.fl; fn = $f.fn; ft = $f.ft; i = $f.i; in$1 = $f.in$1; m = $f.m; methods = $f.methods; mt = $f.mt; mtyp = $f.mtyp; out = $f.out; p = $f.p; pname = $f.pname; prop = $f.prop; ret = $f.ret; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prop = [prop];
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			Method.copy(m, tt.Method(i));
			$s = -1; return m;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		methods = _r;
		if (i < 0 || i >= methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = $clone(((i < 0 || i >= methods.$length) ? ($throwRuntimeError("index out of range"), undefined) : methods.$array[methods.$offset + i]), method);
		pname = $clone(t.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		fl = 19;
		mtyp = t.typeOff(p.mtyp);
		ft = (mtyp.kindType);
		in$1 = $makeSlice(sliceType$10, 0, (1 + ft.in$().$length >> 0));
		in$1 = $append(in$1, t);
		_ref = ft.in$();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			in$1 = $append(in$1, arg);
			_i++;
		}
		out = $makeSlice(sliceType$10, 0, ft.out().$length);
		_ref$1 = ft.out();
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			ret = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			out = $append(out, ret);
			_i$1++;
		}
		_r$1 = FuncOf(in$1, out, ft.rtype.IsVariadic()); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		mt = _r$1;
		m.Type = mt;
		prop[0] = $internalize($methodSet(t.jsType)[i].prop, $String);
		fn = js.MakeFunc((function(prop) { return function(this$1, arguments$1) {
			var arguments$1, rcvr, this$1;
			rcvr = (0 >= arguments$1.$length ? ($throwRuntimeError("index out of range"), undefined) : arguments$1.$array[arguments$1.$offset + 0]);
			return new $jsObjectPtr(rcvr[$externalize(prop[0], $String)].apply(rcvr, $externalize($subslice(arguments$1, 1), sliceType$8)));
		}; })(prop));
		m.Func = new Value.ptr($assertType(mt, ptrType$1), (fn), fl);
		m.Index = i;
		Method.copy(m, m);
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Method }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.arg = arg; $f.fl = fl; $f.fn = fn; $f.ft = ft; $f.i = i; $f.in$1 = in$1; $f.m = m; $f.methods = methods; $f.mt = mt; $f.mtyp = mtyp; $f.out = out; $f.p = p; $f.pname = pname; $f.prop = prop; $f.ret = ret; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _1, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				switch (0) { default:
					_1 = v.typ.Kind();
					if ((_1 === (11)) || (_1 === (6))) {
						val = new (jsType(v.typ))(val.$high, val.$low);
					} else if ((_1 === (15)) || (_1 === (16))) {
						val = new (jsType(v.typ))(val.$real, val.$imag);
					} else if (_1 === (23)) {
						if (val === val.constructor.nil) {
							val = jsType(v.typ).nil;
							break;
						}
						newVal = new (jsType(v.typ))(val.$array);
						newVal.$offset = val.$offset;
						newVal.$length = val.$length;
						newVal.$capacity = val.$capacity;
						val = newVal;
					}
				}
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _1, _arg, _arg$1, _arg$2, _arg$3, _i, _i$1, _i$2, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, in$1, isSlice, m, n, nin, nout, op, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; arg = $f.arg; argsArray = $f.argsArray; elem = $f.elem; fn = $f.fn; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; in$1 = $f.in$1; isSlice = $f.isSlice; m = $f.m; n = $f.n; nin = $f.nin; nout = $f.nout; op = $f.op; origIn = $f.origIn; rcvr = $f.rcvr; results = $f.results; ret = $f.ret; slice = $f.slice; t = $f.t; targ = $f.targ; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; xt = $f.xt; xt$1 = $f.xt$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		t = ptrType$1.nil;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 512) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), ((v.flag >> 0)) >> 10 >> 0);
			t = _tuple[1];
			fn = _tuple[2];
			rcvr = $clone(v, Value).object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			t = v.typ;
			fn = ($clone(v, Value).object());
			rcvr = undefined;
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($clone(x, Value).Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_tmp = $clone(((i < 0 || i >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + i]), Value).Type();
			_tmp$1 = t.In(i);
			xt = _tmp;
			targ = _tmp$1;
			_r = xt.AssignableTo(targ); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				_r$1 = xt.String(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = targ.String(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$panic(new $String("reflect: " + op + " using " + _r$1 + " as type " + _r$2));
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!isSlice && t.IsVariadic()) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!isSlice && t.IsVariadic()) { */ case 8:
			m = in$1.$length - n >> 0;
			_r$3 = MakeSlice(t.In(n), m, m); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			slice = _r$3;
			_r$4 = t.In(n).Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			elem = _r$4;
			i$1 = 0;
			/* while (true) { */ case 12:
				/* if (!(i$1 < m)) { break; } */ if(!(i$1 < m)) { $s = 13; continue; }
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + x$1]));
				xt$1 = $clone(x$2, Value).Type();
				_r$5 = xt$1.AssignableTo(elem); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				/* */ if (!_r$5) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!_r$5) { */ case 14:
					_r$6 = xt$1.String(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_r$7 = elem.String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$panic(new $String("reflect: cannot use " + _r$6 + " as type " + _r$7 + " in " + op));
				/* } */ case 15:
				_r$8 = $clone(slice, Value).Index(i$1); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				$r = $clone(_r$8, Value).Set($clone(x$2, Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 12; continue; case 13:
			origIn = in$1;
			in$1 = $makeSlice(sliceType$9, (n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			((n < 0 || n >= in$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : in$1.$array[in$1.$offset + n] = slice);
		/* } */ case 9:
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		/* while (true) { */ case 21:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 22; continue; }
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_arg = t.In(i$2);
			_r$9 = t.In(i$2).common(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_arg$1 = _r$9;
			_arg$2 = 0;
			_r$10 = $clone(arg, Value).assignTo("reflect.Value.Call", _arg$1, _arg$2); /* */ $s = 24; case 24: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$11 = $clone(_r$10, Value).object(); /* */ $s = 25; case 25: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			_arg$3 = _r$11;
			_r$12 = unwrapJsObject(_arg, _arg$3); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			argsArray[i$2] = _r$12;
			_i$1++;
		/* } */ $s = 21; continue; case 22:
		_r$13 = callHelper(new sliceType$3([new $jsObjectPtr(fn), new $jsObjectPtr(rcvr), new $jsObjectPtr(argsArray)])); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
		results = _r$13;
			_1 = nout;
			/* */ if (_1 === (0)) { $s = 29; continue; }
			/* */ if (_1 === (1)) { $s = 30; continue; }
			/* */ $s = 31; continue;
			/* if (_1 === (0)) { */ case 29:
				$s = -1; return sliceType$9.nil;
			/* } else if (_1 === (1)) { */ case 30:
				_r$14 = makeValue(t.Out(0), wrapJsObject(t.Out(0), results), 0); /* */ $s = 33; case 33: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$s = -1; return new sliceType$9([$clone(_r$14, Value)]);
			/* } else { */ case 31:
				ret = $makeSlice(sliceType$9, nout);
				_ref$2 = ret;
				_i$2 = 0;
				/* while (true) { */ case 34:
					/* if (!(_i$2 < _ref$2.$length)) { break; } */ if(!(_i$2 < _ref$2.$length)) { $s = 35; continue; }
					i$3 = _i$2;
					_r$15 = makeValue(t.Out(i$3), wrapJsObject(t.Out(i$3), results[i$3]), 0); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					((i$3 < 0 || i$3 >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i$3] = _r$15);
					_i$2++;
				/* } */ $s = 34; continue; case 35:
				$s = -1; return ret;
			/* } */ case 32:
		case 28:
		$s = -1; return sliceType$9.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.call }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.arg = arg; $f.argsArray = argsArray; $f.elem = elem; $f.fn = fn; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.in$1 = in$1; $f.isSlice = isSlice; $f.m = m; $f.n = n; $f.nin = nin; $f.nout = nout; $f.op = op; $f.origIn = origIn; $f.rcvr = rcvr; $f.results = results; $f.ret = ret; $f.slice = slice; $f.t = t; $f.targ = targ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.xt = xt; $f.xt$1 = xt$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (17)) {
			return v.typ.Len();
		} else if ((_1 === (18)) || (_1 === (23))) {
			return $parseInt($clone(v, Value).object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	wrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return new (jsType(jsObjectPtr))(val);
		}
		return val;
	};
	unwrapJsObject = function(typ, val) {
		var typ, val;
		if ($interfaceIsEqual(typ, jsObjectPtr)) {
			return val.object;
		}
		return val;
	};
	Value.ptr.prototype.Elem = function() {
		var _1, _r, fl, k, tt, typ, v, val, val$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; fl = $f.fl; k = $f.k; tt = $f.tt; typ = $f.typ; v = $f.v; val = $f.val; val$1 = $f.val$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (20)) { $s = 2; continue; }
			/* */ if (_1 === (22)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (20)) { */ case 2:
				val = $clone(v, Value).object();
				if (val === $ifaceNil) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				typ = reflectType(val.constructor);
				_r = makeValue(typ, val.$val, (v.flag & 96) >>> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (22)) { */ case 3:
				if ($clone(v, Value).IsNil()) {
					$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
				}
				val$1 = $clone(v, Value).object();
				tt = (v.typ.kindType);
				fl = (((((v.flag & 96) >>> 0) | 128) >>> 0) | 256) >>> 0;
				fl = (fl | (((tt.elem.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(tt.elem, (wrapJsObject(tt.elem, val$1)), fl);
			/* } else { */ case 4:
				$panic(new ValueError.ptr("reflect.Value.Elem", k));
			/* } */ case 5:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Elem }; } $f._1 = _1; $f._r = _r; $f.fl = fl; $f.k = k; $f.tt = tt; $f.typ = typ; $f.v = v; $f.val = val; $f.val$1 = val$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var _r, _r$1, _r$2, field, fl, i, jsTag, o, prop, s, tag, tt, typ, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; field = $f.field; fl = $f.fl; i = $f.i; jsTag = $f.jsTag; o = $f.o; prop = $f.prop; s = $f.s; tag = $f.tag; tt = $f.tt; typ = $f.typ; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsTag = [jsTag];
		prop = [prop];
		s = [s];
		typ = [typ];
		v = this;
		if (!((new flag(v.flag).kind() === 25))) {
			$panic(new ValueError.ptr("reflect.Value.Field", new flag(v.flag).kind()));
		}
		tt = (v.typ.kindType);
		if (((i >>> 0)) >= ((tt.fields.$length >>> 0))) {
			$panic(new $String("reflect: Field index out of range"));
		}
		prop[0] = $internalize(jsType(v.typ).fields[i].prop, $String);
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		typ[0] = field.typ;
		fl = (((v.flag & 416) >>> 0) | ((typ[0].Kind() >>> 0))) >>> 0;
		if (!$clone(field.name, name).isExported()) {
			if (field.anon()) {
				fl = (fl | (64)) >>> 0;
			} else {
				fl = (fl | (32)) >>> 0;
			}
		}
		tag = $clone((x$1 = tt.fields, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).name, name).tag();
		/* */ if (!(tag === "") && !((i === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(tag === "") && !((i === 0))) { */ case 1:
			jsTag[0] = getJsTag(tag);
			/* */ if (!(jsTag[0] === "")) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!(jsTag[0] === "")) { */ case 3:
				/* while (true) { */ case 5:
					o = [o];
					_r = $clone(v, Value).Field(0); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					/* */ if (v.typ === jsObjectPtr) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (v.typ === jsObjectPtr) { */ case 8:
						o[0] = $clone(v, Value).object().object;
						$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, o, prop, s, typ) { return function() {
							return $internalize(o[0][$externalize(jsTag[0], $String)], jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ), (function(jsTag, o, prop, s, typ) { return function(x$2) {
							var x$2;
							o[0][$externalize(jsTag[0], $String)] = $externalize(x$2, jsType(typ[0]));
						}; })(jsTag, o, prop, s, typ))), fl);
					/* } */ case 9:
					/* */ if (v.typ.Kind() === 22) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (v.typ.Kind() === 22) { */ case 10:
						_r$1 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						v = _r$1;
					/* } */ case 11:
				/* } */ $s = 5; continue; case 6:
			/* } */ case 4:
		/* } */ case 2:
		s[0] = v.ptr;
		/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 13; continue; }
		/* */ $s = 14; continue;
		/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 13:
			$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(jsTag, prop, s, typ) { return function() {
				return wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]);
			}; })(jsTag, prop, s, typ), (function(jsTag, prop, s, typ) { return function(x$2) {
				var x$2;
				s[0][$externalize(prop[0], $String)] = unwrapJsObject(typ[0], x$2);
			}; })(jsTag, prop, s, typ))), fl);
		/* } */ case 14:
		_r$2 = makeValue(typ[0], wrapJsObject(typ[0], s[0][$externalize(prop[0], $String)]), fl); /* */ $s = 15; case 15: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Field }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.field = field; $f.fl = fl; $f.i = i; $f.jsTag = jsTag; $f.o = o; $f.prop = prop; $f.s = s; $f.tag = tag; $f.tt = tt; $f.typ = typ; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	getJsTag = function(tag) {
		var _tuple, i, name$1, qvalue, tag, value;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (name$1 === "js") {
				_tuple = strconv.Unquote(qvalue);
				value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	Value.ptr.prototype.Index = function(i) {
		var _1, _r, _r$1, a, a$1, c, fl, fl$1, fl$2, i, k, s, str, tt, tt$1, typ, typ$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; a = $f.a; a$1 = $f.a$1; c = $f.c; fl = $f.fl; fl$1 = $f.fl$1; fl$2 = $f.fl$2; i = $f.i; k = $f.k; s = $f.s; str = $f.str; tt = $f.tt; tt$1 = $f.tt$1; typ = $f.typ; typ$1 = $f.typ$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		a = [a];
		a$1 = [a$1];
		c = [c];
		i = [i];
		typ = [typ];
		typ$1 = [typ$1];
		v = this;
			k = new flag(v.flag).kind();
			_1 = k;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				tt = (v.typ.kindType);
				if (i[0] < 0 || i[0] > ((tt.len >> 0))) {
					$panic(new $String("reflect: array index out of range"));
				}
				typ[0] = tt.elem;
				fl = (v.flag & 480) >>> 0;
				fl = (fl | (((typ[0].Kind() >>> 0)))) >>> 0;
				a[0] = v.ptr;
				/* */ if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!((((fl & 128) >>> 0) === 0)) && !((typ[0].Kind() === 17)) && !((typ[0].Kind() === 25))) { */ case 7:
					$s = -1; return new Value.ptr(typ[0], (new (jsType(PtrTo(typ[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ[0], a[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a[0][i[0]] = unwrapJsObject(typ[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl);
				/* } */ case 8:
				_r = makeValue(typ[0], wrapJsObject(typ[0], a[0][i[0]]), fl); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if (_1 === (23)) { */ case 3:
				s = $clone(v, Value).object();
				if (i[0] < 0 || i[0] >= ($parseInt(s.$length) >> 0)) {
					$panic(new $String("reflect: slice index out of range"));
				}
				tt$1 = (v.typ.kindType);
				typ$1[0] = tt$1.elem;
				fl$1 = (384 | ((v.flag & 96) >>> 0)) >>> 0;
				fl$1 = (fl$1 | (((typ$1[0].Kind() >>> 0)))) >>> 0;
				i[0] = i[0] + (($parseInt(s.$offset) >> 0)) >> 0;
				a$1[0] = s.$array;
				/* */ if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!((((fl$1 & 128) >>> 0) === 0)) && !((typ$1[0].Kind() === 17)) && !((typ$1[0].Kind() === 25))) { */ case 10:
					$s = -1; return new Value.ptr(typ$1[0], (new (jsType(PtrTo(typ$1[0])))((function(a, a$1, c, i, typ, typ$1) { return function() {
						return wrapJsObject(typ$1[0], a$1[0][i[0]]);
					}; })(a, a$1, c, i, typ, typ$1), (function(a, a$1, c, i, typ, typ$1) { return function(x) {
						var x;
						a$1[0][i[0]] = unwrapJsObject(typ$1[0], x);
					}; })(a, a$1, c, i, typ, typ$1))), fl$1);
				/* } */ case 11:
				_r$1 = makeValue(typ$1[0], wrapJsObject(typ$1[0], a$1[0][i[0]]), fl$1); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i[0] < 0 || i[0] >= str.length) {
					$panic(new $String("reflect: string index out of range"));
				}
				fl$2 = (((v.flag & 96) >>> 0) | 8) >>> 0;
				c[0] = str.charCodeAt(i[0]);
				$s = -1; return new Value.ptr(uint8Type, ((c.$ptr || (c.$ptr = new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, c)))), (fl$2 | 128) >>> 0);
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Index", k));
			/* } */ case 6:
		case 1:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Index }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.a$1 = a$1; $f.c = c; $f.fl = fl; $f.fl$1 = fl$1; $f.fl$2 = fl$2; $f.i = i; $f.k = k; $f.s = s; $f.str = str; $f.tt = tt; $f.tt$1 = tt$1; $f.typ = typ; $f.typ$1 = typ$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		$panic(errors.New("InterfaceData is not supported by GopherJS"));
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsNil = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (22)) || (_1 === (23))) {
			return $clone(v, Value).object() === jsType(v.typ).nil;
		} else if (_1 === (18)) {
			return $clone(v, Value).object() === $chanNil;
		} else if (_1 === (19)) {
			return $clone(v, Value).object() === $throwNilPointerError;
		} else if (_1 === (21)) {
			return $clone(v, Value).object() === false;
		} else if (_1 === (20)) {
			return $clone(v, Value).object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (17)) || (_1 === (24))) {
			return $parseInt($clone(v, Value).object().length);
		} else if (_1 === (23)) {
			return $parseInt($clone(v, Value).object().$length) >> 0;
		} else if (_1 === (18)) {
			return $parseInt($clone(v, Value).object().$buffer.length) >> 0;
		} else if (_1 === (21)) {
			return $parseInt($keys($clone(v, Value).object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (18)) || (_1 === (21)) || (_1 === (22)) || (_1 === (26))) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object();
		} else if (_1 === (19)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return 1;
		} else if (_1 === (23)) {
			if ($clone(v, Value).IsNil()) {
				return 0;
			}
			return $clone(v, Value).object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _1, _r, _r$1, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Set", v.typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		/* */ if (!((((v.flag & 128) >>> 0) === 0))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((((v.flag & 128) >>> 0) === 0))) { */ case 2:
				_1 = v.typ.Kind();
				/* */ if (_1 === (17)) { $s = 5; continue; }
				/* */ if (_1 === (20)) { $s = 6; continue; }
				/* */ if (_1 === (25)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (17)) { */ case 5:
					jsType(v.typ).copy(v.ptr, x.ptr);
					$s = 9; continue;
				/* } else if (_1 === (20)) { */ case 6:
					_r$1 = valueInterface($clone(x, Value), false); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					v.ptr.$set(_r$1);
					$s = 9; continue;
				/* } else if (_1 === (25)) { */ case 7:
					copyStruct(v.ptr, x.ptr, v.typ);
					$s = 9; continue;
				/* } else { */ case 8:
					v.ptr.$set($clone(x, Value).object());
				/* } */ case 9:
			case 4:
			$s = -1; return;
		/* } */ case 3:
		v.ptr = x.ptr;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Set }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var _r, _r$1, _v, slice, typedSlice, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; slice = $f.slice; typedSlice = $f.typedSlice; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		/* } */ case 2:
		slice = x;
		if (!(v.typ.Name() === "")) { _v = true; $s = 6; continue s; }
		_r$1 = v.typ.Elem().Name(); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_v = !(_r$1 === ""); case 6:
		/* */ if (_v) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_v) { */ case 4:
			typedSlice = new (jsType(v.typ))(slice.$array);
			typedSlice.$offset = slice.$offset;
			typedSlice.$length = slice.$length;
			typedSlice.$capacity = slice.$capacity;
			slice = typedSlice;
		/* } */ case 5:
		v.ptr.$set(slice);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.slice = slice; $f.typedSlice = typedSlice; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var n, newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _1, _r, _r$1, cap, i, j, kind, s, str, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; cap = $f.cap; i = $f.i; j = $f.j; kind = $f.kind; s = $f.s; str = $f.str; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
			kind = new flag(v.flag).kind();
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (23)) { $s = 3; continue; }
			/* */ if (_1 === (24)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (17)) { */ case 2:
				if (((v.flag & 256) >>> 0) === 0) {
					$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
				}
				tt = (v.typ.kindType);
				cap = ((tt.len >> 0));
				typ = SliceOf(tt.elem);
				s = new (jsType(typ))($clone(v, Value).object());
				$s = 6; continue;
			/* } else if (_1 === (23)) { */ case 3:
				typ = v.typ;
				s = $clone(v, Value).object();
				cap = $parseInt(s.$capacity) >> 0;
				$s = 6; continue;
			/* } else if (_1 === (24)) { */ case 4:
				str = (v.ptr).$get();
				if (i < 0 || j < i || j > str.length) {
					$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
				}
				_r = ValueOf(new $String($substring(str, i, j))); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else { */ case 5:
				$panic(new ValueError.ptr("reflect.Value.Slice", kind));
			/* } */ case 6:
		case 1:
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		_r$1 = makeValue(typ, $subslice(s, i, j), (v.flag & 96) >>> 0); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.cap = cap; $f.i = i; $f.j = j; $f.kind = kind; $f.s = s; $f.str = str; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _1, _r, cap, i, j, k, kind, s, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; cap = $f.cap; i = $f.i; j = $f.j; k = $f.k; kind = $f.kind; s = $f.s; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_1 = kind;
		if (_1 === (17)) {
			if (((v.flag & 256) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = (v.typ.kindType);
			cap = ((tt.len >> 0));
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))($clone(v, Value).object());
		} else if (_1 === (23)) {
			typ = v.typ;
			s = $clone(v, Value).object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		_r = makeValue(typ, $subslice(s, i, j, k), (v.flag & 96) >>> 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Slice3 }; } $f._1 = _1; $f._r = _r; $f.cap = cap; $f.i = i; $f.j = j; $f.k = k; $f.kind = kind; $f.s = s; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close($clone(v, Value).object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	chanrecv = function(ch, nb, val) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, ch, comms, nb, received, recvRes, selectRes, selected, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ch = $f.ch; comms = $f.comms; nb = $f.nb; received = $f.received; recvRes = $f.recvRes; selectRes = $f.selectRes; selected = $f.selected; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		received = false;
		comms = new sliceType$11([new sliceType$8([ch])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			_tmp = false;
			_tmp$1 = false;
			selected = _tmp;
			received = _tmp$1;
			$s = -1; return [selected, received];
		}
		recvRes = selectRes[1];
		val.$set(recvRes[0]);
		_tmp$2 = true;
		_tmp$3 = !!(recvRes[1]);
		selected = _tmp$2;
		received = _tmp$3;
		$s = -1; return [selected, received];
		/* */ } return; } if ($f === undefined) { $f = { $blk: chanrecv }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.received = received; $f.recvRes = recvRes; $f.selectRes = selectRes; $f.selected = selected; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	chansend = function(ch, val, nb) {
		var _r, ch, comms, nb, selectRes, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; comms = $f.comms; nb = $f.nb; selectRes = $f.selectRes; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		comms = new sliceType$11([new sliceType$8([ch, val.$get()])]);
		if (nb) {
			comms = $append(comms, new sliceType$8([]));
		}
		_r = selectHelper(new sliceType$3([comms])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		selectRes = _r;
		if (nb && (($parseInt(selectRes[0]) >> 0) === 1)) {
			$s = -1; return false;
		}
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: chansend }; } $f._r = _r; $f.ch = ch; $f.comms = comms; $f.nb = nb; $f.selectRes = selectRes; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Swapper = function(slice) {
		var _1, _r, _r$1, _r$2, _r$3, slice, tmp, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; slice = $f.slice; tmp = $f.tmp; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tmp = [tmp];
		v = [v];
		_r = ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v[0] = _r;
		if (!(($clone(v[0], Value).Kind() === 23))) {
			$panic(new ValueError.ptr("Swapper", $clone(v[0], Value).Kind()));
		}
			_1 = $clone(v[0], Value).Len();
			if (_1 === (0)) {
				$s = -1; return (function(tmp, v) { return function(i, j) {
					var i, j;
					$panic(new $String("reflect: slice index out of range"));
				}; })(tmp, v);
			} else if (_1 === (1)) {
				$s = -1; return (function(tmp, v) { return function(i, j) {
					var i, j;
					if (!((i === 0)) || !((j === 0))) {
						$panic(new $String("reflect: slice index out of range"));
					}
				}; })(tmp, v);
			}
		case 2:
		_r$1 = $clone(v[0], Value).Type().Elem(); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = New(_r$1); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, Value).Elem(); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		tmp[0] = _r$3;
		$s = -1; return (function(tmp, v) { return function $b(i, j) {
			var _r$4, _r$5, i, j, v1, v2, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; v1 = $f.v1; v2 = $f.v2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r$4 = $clone(v[0], Value).Index(i); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v1 = _r$4;
			_r$5 = $clone(v[0], Value).Index(j); /* */ $s = 2; case 2: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			v2 = _r$5;
			$r = $clone(tmp[0], Value).Set($clone(v1, Value)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $clone(v1, Value).Set($clone(v2, Value)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $clone(v2, Value).Set($clone(tmp[0], Value)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.v1 = v1; $f.v2 = v2; $f.$s = $s; $f.$r = $r; return $f;
		}; })(tmp, v);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Swapper }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.slice = slice; $f.tmp = tmp; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Swapper = Swapper;
	structField.ptr.prototype.offset = function() {
		var f;
		f = this;
		return f.offsetAnon >>> 1 >>> 0;
	};
	structField.prototype.offset = function() { return this.$val.offset(); };
	structField.ptr.prototype.anon = function() {
		var f;
		f = this;
		return !((((f.offsetAnon & 1) >>> 0) === 0));
	};
	structField.prototype.anon = function() { return this.$val.anon(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if (((k >> 0)) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa(((k >> 0)));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	rtype.ptr.prototype.String = function() {
		var s, t;
		t = this;
		s = $clone(t.nameOff(t.str), name).name();
		if (!((((t.tflag & 2) >>> 0) === 0))) {
			return $substring(s, 1);
		}
		return s;
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return $imul(((t.size >> 0)), 8);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return ((t.align >> 0));
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return ((t.fieldAlign >> 0));
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return ((((t.kind & 31) >>> 0) >>> 0));
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	rtype.ptr.prototype.exportedMethods = function() {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _tuple, _tuple$1, allExported, allm, found, m, m$1, methods, methodsi, name$1, name$2, t, ut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; allExported = $f.allExported; allm = $f.allm; found = $f.found; m = $f.m; m$1 = $f.m$1; methods = $f.methods; methodsi = $f.methodsi; name$1 = $f.name$1; name$2 = $f.name$2; t = $f.t; ut = $f.ut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r = methodCache.Load(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		methodsi = _tuple[0];
		found = _tuple[1];
		if (found) {
			$s = -1; return $assertType(methodsi, sliceType$5);
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			$s = -1; return sliceType$5.nil;
		}
		allm = ut.methods();
		allExported = true;
		_ref = allm;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			m = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), method);
			name$1 = $clone(t.nameOff(m.name), name);
			if (!$clone(name$1, name).isExported()) {
				allExported = false;
				break;
			}
			_i++;
		}
		methods = sliceType$5.nil;
		if (allExported) {
			methods = allm;
		} else {
			methods = $makeSlice(sliceType$5, 0, allm.$length);
			_ref$1 = allm;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				m$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), method);
				name$2 = $clone(t.nameOff(m$1.name), name);
				if ($clone(name$2, name).isExported()) {
					methods = $append(methods, m$1);
				}
				_i$1++;
			}
			methods = $subslice(methods, 0, methods.$length, methods.$length);
		}
		_r$1 = methodCache.LoadOrStore(t, methods); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		methodsi = _tuple$1[0];
		$s = -1; return $assertType(methodsi, sliceType$5);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.exportedMethods }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.allExported = allExported; $f.allm = allm; $f.found = found; $f.m = m; $f.m$1 = m$1; $f.methods = methods; $f.methodsi = methodsi; $f.name$1 = name$1; $f.name$2 = name$2; $f.t = t; $f.ut = ut; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.exportedMethods = function() { return this.$val.exportedMethods(); };
	rtype.ptr.prototype.NumMethod = function() {
		var _r, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			$s = -1; return tt.NumMethod();
		}
		if (((t.tflag & 1) >>> 0) === 0) {
			$s = -1; return 0;
		}
		_r = t.exportedMethods(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r.$length;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.NumMethod }; } $f._r = _r; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.MethodByName = function(name$1) {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, i, m, name$1, ok, p, pname, t, tt, ut, utmethods, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; i = $f.i; m = $f.m; name$1 = $f.name$1; ok = $f.ok; p = $f.p; pname = $f.pname; t = $f.t; tt = $f.tt; ut = $f.ut; utmethods = $f.utmethods; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = (t.kindType);
			_tuple = tt.MethodByName(name$1);
			Method.copy(m, _tuple[0]);
			ok = _tuple[1];
			$s = -1; return [m, ok];
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			_tmp = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
			_tmp$1 = false;
			Method.copy(m, _tmp);
			ok = _tmp$1;
			$s = -1; return [m, ok];
		}
		utmethods = ut.methods();
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < ((ut.mcount >> 0)))) { break; } */ if(!(i < ((ut.mcount >> 0)))) { $s = 2; continue; }
			p = $clone(((i < 0 || i >= utmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : utmethods.$array[utmethods.$offset + i]), method);
			pname = $clone(t.nameOff(p.name), name);
			/* */ if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($clone(pname, name).isExported() && $clone(pname, name).name() === name$1) { */ case 3:
				_r = t.Method(i); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tmp$2 = $clone(_r, Method);
				_tmp$3 = true;
				Method.copy(m, _tmp$2);
				ok = _tmp$3;
				$s = -1; return [m, ok];
			/* } */ case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		_tmp$4 = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		_tmp$5 = false;
		Method.copy(m, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [m, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.MethodByName }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f.i = i; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.p = p; $f.pname = pname; $f.t = t; $f.tt = tt; $f.ut = ut; $f.utmethods = utmethods; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	rtype.ptr.prototype.PkgPath = function() {
		var t, ut;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		ut = t.uncommon();
		if (ut === ptrType$5.nil) {
			return "";
		}
		return $clone(t.nameOff(ut.pkgPath), name).name();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var i, s, t;
		t = this;
		if (((t.tflag & 4) >>> 0) === 0) {
			return "";
		}
		s = t.String();
		i = s.length - 1 >> 0;
		while (true) {
			if (!(i >= 0)) { break; }
			if (s.charCodeAt(i) === 46) {
				break;
			}
			i = i - (1) >> 0;
		}
		return $substring(s, (i + 1 >> 0));
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = (t.kindType);
		return ((tt.dir >> 0));
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = (t.kindType);
		return !((((tt.outCount & 32768) >>> 0) === 0));
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _1, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_1 = t.Kind();
		if (_1 === (17)) {
			tt = (t.kindType);
			return toType(tt.elem);
		} else if (_1 === (18)) {
			tt$1 = (t.kindType);
			return toType(tt$1.elem);
		} else if (_1 === (21)) {
			tt$2 = (t.kindType);
			return toType(tt$2.elem);
		} else if (_1 === (22)) {
			tt$3 = (t.kindType);
			return toType(tt$3.elem);
		} else if (_1 === (23)) {
			tt$4 = (t.kindType);
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var i, t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = (t.kindType);
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var _r, index, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; index = $f.index; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByIndex(index); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByIndex }; } $f._r = _r; $f.index = index; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name$1) {
		var _r, name$1, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; name$1 = $f.name$1; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByName }; } $f._r = _r; $f.name$1 = name$1; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, match, t, tt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; match = $f.match; t = $f.t; tt = $f.tt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = (t.kindType);
		_r = tt.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f.match = match; $f.t = t; $f.tt = tt; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.in$(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = (t.kindType);
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = (t.kindType);
		return ((tt.len >> 0));
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = (t.kindType);
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = (t.kindType);
		return ((tt.inCount >> 0));
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = (t.kindType);
		return tt.out().$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var i, t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = (t.kindType);
		return toType((x = tt.out(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _1, d;
		d = this.$val;
		_1 = d;
		if (_1 === (2)) {
			return "chan<-";
		} else if (_1 === (1)) {
			return "<-chan";
		} else if (_1 === (3)) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa(((d >> 0)));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var i, m, p, pname, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		pname = $clone(t.rtype.nameOff(p.name), name);
		m.Name = $clone(pname, name).name();
		if (!$clone(pname, name).isExported()) {
			m.PkgPath = $clone(pname, name).pkgPath();
			if (m.PkgPath === "") {
				m.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		m.Type = toType(t.rtype.typeOff(p.typ));
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name$1) {
		var _i, _ref, _tmp, _tmp$1, i, m, name$1, ok, p, t, x;
		m = new Method.ptr("", "", $ifaceNil, new Value.ptr(ptrType$1.nil, 0, 0), 0);
		ok = false;
		t = this;
		if (t === ptrType$7.nil) {
			return [m, ok];
		}
		p = ptrType$8.nil;
		_ref = t.methods;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			if ($clone(t.rtype.nameOff(p.name), name).name() === name$1) {
				_tmp = $clone(t.Method(i), Method);
				_tmp$1 = true;
				Method.copy(m, _tmp);
				ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	StructTag.prototype.Get = function(key) {
		var _tuple, key, tag, v;
		tag = this.$val;
		_tuple = new StructTag(tag).Lookup(key);
		v = _tuple[0];
		return v;
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	StructTag.prototype.Lookup = function(key) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, err, i, key, name$1, ok, qvalue, tag, value, value$1;
		value = "";
		ok = false;
		tag = this.$val;
		while (true) {
			if (!(!(tag === ""))) { break; }
			i = 0;
			while (true) {
				if (!(i < tag.length && (tag.charCodeAt(i) === 32))) { break; }
				i = i + (1) >> 0;
			}
			tag = $substring(tag, i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (true) {
				if (!(i < tag.length && tag.charCodeAt(i) > 32 && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34)) && !((tag.charCodeAt(i) === 127)))) { break; }
				i = i + (1) >> 0;
			}
			if ((i === 0) || (i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name$1 = ($substring(tag, 0, i));
			tag = $substring(tag, (i + 1 >> 0));
			i = 1;
			while (true) {
				if (!(i < tag.length && !((tag.charCodeAt(i) === 34)))) { break; }
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = ($substring(tag, 0, (i + 1 >> 0)));
			tag = $substring(tag, (i + 1 >> 0));
			if (key === name$1) {
				_tuple = strconv.Unquote(qvalue);
				value$1 = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				_tmp = value$1;
				_tmp$1 = true;
				value = _tmp;
				ok = _tmp$1;
				return [value, ok];
			}
		}
		_tmp$2 = "";
		_tmp$3 = false;
		value = _tmp$2;
		ok = _tmp$3;
		return [value, ok];
	};
	$ptrType(StructTag).prototype.Lookup = function(key) { return new StructTag(this.$get()).Lookup(key); };
	structType.ptr.prototype.Field = function(i) {
		var f, i, p, t, tag, x;
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			$panic(new $String("reflect: Field index out of bounds"));
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		f.Name = $clone(p.name, name).name();
		f.Anonymous = p.anon();
		if (!$clone(p.name, name).isExported()) {
			f.PkgPath = $clone(p.name, name).pkgPath();
			if (f.PkgPath === "") {
				f.PkgPath = $clone(t.pkgPath, name).name();
			}
		}
		tag = $clone(p.name, name).tag();
		if (!(tag === "")) {
			f.Tag = (tag);
		}
		f.Offset = p.offset();
		f.Index = new sliceType$13([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _v, f, ft, i, index, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _v = $f._v; f = $f.f; ft = $f.ft; i = $f.i; index = $f.index; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i > 0) { */ case 3:
				ft = f.Type;
				_r = ft.Kind(); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				if (!(_r === 22)) { _v = false; $s = 7; continue s; }
				_r$1 = ft.Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.Kind(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v = _r$2 === 25; case 7:
				/* */ if (_v) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (_v) { */ case 5:
					_r$3 = ft.Elem(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ft = _r$3;
				/* } */ case 6:
				f.Type = ft;
			/* } */ case 4:
			_r$4 = f.Type.Field(x); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			StructField.copy(f, _r$4);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._v = _v; $f.f = f; $f.ft = ft; $f.i = i; $f.index = index; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _r, _r$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, match, next, nextCount, ntyp, ok, result, scan, styp, t, t$1, visited, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _i$1 = $f._i$1; _key = $f._key; _key$1 = $f._key$1; _key$2 = $f._key$2; _key$3 = $f._key$3; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; count = $f.count; current = $f.current; f = $f.f; fname = $f.fname; i = $f.i; index = $f.index; match = $f.match; next = $f.next; nextCount = $f.nextCount; ntyp = $f.ntyp; ok = $f.ok; result = $f.result; scan = $f.scan; styp = $f.styp; t = $f.t; t$1 = $f.t$1; visited = $f.visited; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		ok = false;
		t = this;
		current = new sliceType$14([]);
		next = new sliceType$14([new fieldScan.ptr(t, sliceType$13.nil)]);
		nextCount = false;
		visited = $makeMap(ptrType$9.keyFor, []);
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				/* */ if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[ptrType$9.keyFor(t$1)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key)] = { k: _key, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				/* while (true) { */ case 7:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 8; continue; }
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
					fname = $clone(f.name, name).name();
					ntyp = ptrType$1.nil;
					/* */ if (f.anon()) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (f.anon()) { */ case 9:
						ntyp = f.typ;
						/* */ if (ntyp.Kind() === 22) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (ntyp.Kind() === 22) { */ case 11:
							_r = ntyp.Elem().common(); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
							ntyp = _r;
						/* } */ case 12:
					/* } */ case 10:
					_r$1 = match(fname); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					/* */ if (_r$1) { $s = 14; continue; }
					/* */ $s = 15; continue;
					/* if (_r$1) { */ case 14:
						if ((_entry$1 = count[ptrType$9.keyFor(t$1)], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
							_tmp$3 = false;
							StructField.copy(result, _tmp$2);
							ok = _tmp$3;
							$s = -1; return [result, ok];
						}
						StructField.copy(result, t$1.Field(i));
						result.Index = sliceType$13.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						/* continue; */ $s = 7; continue;
					/* } */ case 15:
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					styp = (ntyp.kindType);
					if ((_entry$2 = nextCount[ptrType$9.keyFor(styp)], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$1 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$1)] = { k: _key$1, v: 2 };
						_i$1++;
						/* continue; */ $s = 7; continue;
					}
					if (nextCount === false) {
						nextCount = $makeMap(ptrType$9.keyFor, []);
					}
					_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$2)] = { k: _key$2, v: 1 };
					if ((_entry$3 = count[ptrType$9.keyFor(t$1)], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$3 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[ptrType$9.keyFor(_key$3)] = { k: _key$3, v: 2 };
					}
					index = sliceType$13.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
			if (ok) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [result, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByNameFunc }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._i$1 = _i$1; $f._key = _key; $f._key$1 = _key$1; $f._key$2 = _key$2; $f._key$3 = _key$3; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.count = count; $f.current = current; $f.f = f; $f.fname = fname; $f.i = i; $f.index = index; $f.match = match; $f.next = next; $f.nextCount = nextCount; $f.ntyp = ntyp; $f.ok = ok; $f.result = result; $f.scan = scan; $f.styp = styp; $f.t = t; $f.t$1 = t$1; $f.visited = visited; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name$1) {
		var _i, _r, _ref, _tmp, _tmp$1, _tuple, f, hasAnon, i, name$1, present, t, tf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; f = $f.f; hasAnon = $f.hasAnon; i = $f.i; name$1 = $f.name$1; present = $f.present; t = $f.t; tf = $f.tf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		name$1 = [name$1];
		f = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$13.nil, false);
		present = false;
		t = this;
		hasAnon = false;
		if (!(name$1[0] === "")) {
			_ref = t.fields;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				if ($clone(tf.name, name).name() === name$1[0]) {
					_tmp = $clone(t.Field(i), StructField);
					_tmp$1 = true;
					StructField.copy(f, _tmp);
					present = _tmp$1;
					$s = -1; return [f, present];
				}
				if (tf.anon()) {
					hasAnon = true;
				}
				_i++;
			}
		}
		if (!hasAnon) {
			$s = -1; return [f, present];
		}
		_r = t.FieldByNameFunc((function(name$1) { return function(s) {
			var s;
			return s === name$1[0];
		}; })(name$1)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		StructField.copy(f, _tuple[0]);
		present = _tuple[1];
		$s = -1; return [f, present];
		/* */ } return; } if ($f === undefined) { $f = { $blk: structType.ptr.prototype.FieldByName }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.f = f; $f.hasAnon = hasAnon; $f.i = i; $f.name$1 = name$1; $f.present = present; $f.t = t; $f.tf = tf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	structType.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	PtrTo = function(t) {
		var t;
		return $assertType(t, ptrType$1).ptrTo();
	};
	$pkg.PtrTo = PtrTo;
	rtype.ptr.prototype.Implements = function(u) {
		var _r, t, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		_r = u.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 20))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 20))) { */ case 1:
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		/* } */ case 2:
		$s = -1; return implements$1($assertType(u, ptrType$1), t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.Implements }; } $f._r = _r; $f.t = t; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = directlyAssignable(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r || implements$1(uu, t);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.AssignableTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var _r, t, u, uu, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; u = $f.u; uu = $f.uu; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		_r = convertOp(uu, t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === $throwNilPointerError);
		/* */ } return; } if ($f === undefined) { $f = { $blk: rtype.ptr.prototype.ConvertibleTo }; } $f._r = _r; $f.t = t; $f.u = u; $f.uu = uu; $f.$s = $s; $f.$r = $r; return $f;
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var T, V, i, i$1, j, j$1, t, tm, tm$1, tmName, tmName$1, tmPkgPath, tmPkgPath$1, v, v$1, vm, vm$1, vmName, vmName$1, vmPkgPath, vmPkgPath$1, vmethods, x, x$1, x$2;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = (T.kindType);
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = (V.kindType);
			i = 0;
			j = 0;
			while (true) {
				if (!(j < v.methods.$length)) { break; }
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
				tmName = $clone(t.rtype.nameOff(tm.name), name);
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
				vmName = $clone(V.nameOff(vm.name), name);
				if ($clone(vmName, name).name() === $clone(tmName, name).name() && V.typeOff(vm.typ) === t.rtype.typeOff(tm.typ)) {
					if (!$clone(tmName, name).isExported()) {
						tmPkgPath = $clone(tmName, name).pkgPath();
						if (tmPkgPath === "") {
							tmPkgPath = $clone(t.pkgPath, name).name();
						}
						vmPkgPath = $clone(vmName, name).pkgPath();
						if (vmPkgPath === "") {
							vmPkgPath = $clone(v.pkgPath, name).name();
						}
						if (!(tmPkgPath === vmPkgPath)) {
							j = j + (1) >> 0;
							continue;
						}
					}
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommon();
		if (v$1 === ptrType$5.nil) {
			return false;
		}
		i$1 = 0;
		vmethods = v$1.methods();
		j$1 = 0;
		while (true) {
			if (!(j$1 < ((v$1.mcount >> 0)))) { break; }
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]));
			tmName$1 = $clone(t.rtype.nameOff(tm$1.name), name);
			vm$1 = $clone(((j$1 < 0 || j$1 >= vmethods.$length) ? ($throwRuntimeError("index out of range"), undefined) : vmethods.$array[vmethods.$offset + j$1]), method);
			vmName$1 = $clone(V.nameOff(vm$1.name), name);
			if ($clone(vmName$1, name).name() === $clone(tmName$1, name).name() && V.typeOff(vm$1.mtyp) === t.rtype.typeOff(tm$1.typ)) {
				if (!$clone(tmName$1, name).isExported()) {
					tmPkgPath$1 = $clone(tmName$1, name).pkgPath();
					if (tmPkgPath$1 === "") {
						tmPkgPath$1 = $clone(t.pkgPath, name).name();
					}
					vmPkgPath$1 = $clone(vmName$1, name).pkgPath();
					if (vmPkgPath$1 === "") {
						vmPkgPath$1 = $clone(V.nameOff(v$1.pkgPath), name).name();
					}
					if (!(tmPkgPath$1 === vmPkgPath$1)) {
						j$1 = j$1 + (1) >> 0;
						continue;
					}
				}
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		var T, V, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			$s = -1; return false;
		}
		_r = haveIdenticalUnderlyingType(T, V, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: directlyAssignable }; } $f.T = T; $f.V = V; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalType = function(T, V, cmpTags) {
		var T, V, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _v, cmpTags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _v = $f._v; cmpTags = $f.cmpTags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (cmpTags) {
			$s = -1; return $interfaceIsEqual(T, V);
		}
		_r = T.Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = V.Name(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		if (!(_r === _r$1)) { _v = true; $s = 3; continue s; }
		_r$2 = T.Kind(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = V.Kind(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !((_r$2 === _r$3)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$s = -1; return false;
		/* } */ case 2:
		_r$4 = T.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg = _r$4;
		_r$5 = V.common(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg$1 = _r$5;
		_r$6 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalType }; } $f.T = T; $f.V = V; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._v = _v; $f.cmpTags = cmpTags; $f.$s = $s; $f.$r = $r; return $f;
	};
	haveIdenticalUnderlyingType = function(T, V, cmpTags) {
		var T, V, _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _v, _v$1, _v$2, _v$3, cmpTags, i, i$1, i$2, kind, t, t$1, t$2, tf, tp, v, v$1, v$2, vf, vp, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; T = $f.T; V = $f.V; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; cmpTags = $f.cmpTags; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; kind = $f.kind; t = $f.t; t$1 = $f.t$1; t$2 = $f.t$2; tf = $f.tf; tp = $f.tp; v = $f.v; v$1 = $f.v$1; v$2 = $f.v$2; vf = $f.vf; vp = $f.vp; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (T === V) {
			$s = -1; return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			$s = -1; return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			$s = -1; return true;
		}
			_1 = kind;
			/* */ if (_1 === (17)) { $s = 2; continue; }
			/* */ if (_1 === (18)) { $s = 3; continue; }
			/* */ if (_1 === (19)) { $s = 4; continue; }
			/* */ if (_1 === (20)) { $s = 5; continue; }
			/* */ if (_1 === (21)) { $s = 6; continue; }
			/* */ if ((_1 === (22)) || (_1 === (23))) { $s = 7; continue; }
			/* */ if (_1 === (25)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (17)) { */ case 2:
				if (!(T.Len() === V.Len())) { _v = false; $s = 10; continue s; }
				_r = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 10:
				$s = -1; return _v;
			/* } else if (_1 === (18)) { */ case 3:
				if (!(V.ChanDir() === 3)) { _v$1 = false; $s = 14; continue s; }
				_r$1 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 15; case 15: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = _r$1; case 14:
				/* */ if (_v$1) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (_v$1) { */ case 12:
					$s = -1; return true;
				/* } */ case 13:
				if (!(V.ChanDir() === T.ChanDir())) { _v$2 = false; $s = 16; continue s; }
				_r$2 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 17; case 17: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 16:
				$s = -1; return _v$2;
			/* } else if (_1 === (19)) { */ case 4:
				t = (T.kindType);
				v = (V.kindType);
				if (!((t.outCount === v.outCount)) || !((t.inCount === v.inCount))) {
					$s = -1; return false;
				}
				i = 0;
				/* while (true) { */ case 18:
					/* if (!(i < t.rtype.NumIn())) { break; } */ if(!(i < t.rtype.NumIn())) { $s = 19; continue; }
					_r$3 = haveIdenticalType(t.rtype.In(i), v.rtype.In(i), cmpTags); /* */ $s = 22; case 22: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* */ if (!_r$3) { $s = 20; continue; }
					/* */ $s = 21; continue;
					/* if (!_r$3) { */ case 20:
						$s = -1; return false;
					/* } */ case 21:
					i = i + (1) >> 0;
				/* } */ $s = 18; continue; case 19:
				i$1 = 0;
				/* while (true) { */ case 23:
					/* if (!(i$1 < t.rtype.NumOut())) { break; } */ if(!(i$1 < t.rtype.NumOut())) { $s = 24; continue; }
					_r$4 = haveIdenticalType(t.rtype.Out(i$1), v.rtype.Out(i$1), cmpTags); /* */ $s = 27; case 27: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!_r$4) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if (!_r$4) { */ case 25:
						$s = -1; return false;
					/* } */ case 26:
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 23; continue; case 24:
				$s = -1; return true;
			/* } else if (_1 === (20)) { */ case 5:
				t$1 = (T.kindType);
				v$1 = (V.kindType);
				if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
					$s = -1; return true;
				}
				$s = -1; return false;
			/* } else if (_1 === (21)) { */ case 6:
				_r$5 = haveIdenticalType(T.Key(), V.Key(), cmpTags); /* */ $s = 29; case 29: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				if (!(_r$5)) { _v$3 = false; $s = 28; continue s; }
				_r$6 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 30; case 30: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$3 = _r$6; case 28:
				$s = -1; return _v$3;
			/* } else if ((_1 === (22)) || (_1 === (23))) { */ case 7:
				_r$7 = haveIdenticalType(T.Elem(), V.Elem(), cmpTags); /* */ $s = 31; case 31: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } else if (_1 === (25)) { */ case 8:
				t$2 = (T.kindType);
				v$2 = (V.kindType);
				if (!((t$2.fields.$length === v$2.fields.$length))) {
					$s = -1; return false;
				}
				_ref = t$2.fields;
				_i = 0;
				/* while (true) { */ case 32:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 33; continue; }
					i$2 = _i;
					tf = (x = t$2.fields, ((i$2 < 0 || i$2 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$2]));
					vf = (x$1 = v$2.fields, ((i$2 < 0 || i$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$2]));
					if (!($clone(tf.name, name).name() === $clone(vf.name, name).name())) {
						$s = -1; return false;
					}
					_r$8 = haveIdenticalType(tf.typ, vf.typ, cmpTags); /* */ $s = 36; case 36: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					/* */ if (!_r$8) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (!_r$8) { */ case 34:
						$s = -1; return false;
					/* } */ case 35:
					if (cmpTags && !($clone(tf.name, name).tag() === $clone(vf.name, name).tag())) {
						$s = -1; return false;
					}
					if (!((tf.offsetAnon === vf.offsetAnon))) {
						$s = -1; return false;
					}
					if (!$clone(tf.name, name).isExported()) {
						tp = $clone(tf.name, name).pkgPath();
						if (tp === "") {
							tp = $clone(t$2.pkgPath, name).name();
						}
						vp = $clone(vf.name, name).pkgPath();
						if (vp === "") {
							vp = $clone(v$2.pkgPath, name).name();
						}
						if (!(tp === vp)) {
							$s = -1; return false;
						}
					}
					_i++;
				/* } */ $s = 32; continue; case 33:
				$s = -1; return true;
			/* } */ case 9:
		case 1:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: haveIdenticalUnderlyingType }; } $f.T = T; $f.V = V; $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.cmpTags = cmpTags; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.kind = kind; $f.t = t; $f.t$1 = t$1; $f.t$2 = t$2; $f.tf = tf; $f.tp = tp; $f.v = v; $f.v$1 = v$1; $f.v$2 = v$2; $f.vf = vf; $f.vp = vp; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	toType = function(t) {
		var t;
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		var t;
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return ((((f & 31) >>> 0) >>> 0));
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 128) >>> 0) === 0))) {
			return (v.ptr).$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var expected, f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 96) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 256) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 96) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return (v.ptr).$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 8))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 8))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Bytes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		/* } */ case 2:
		$s = -1; return (v.ptr).$get();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.runes }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 256) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 352) >>> 0) === 256;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("Call", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Call }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var _r, in$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; in$1 = $f.in$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).call("CallSlice", in$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.CallSlice }; } $f._r = _r; $f.in$1 = in$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return ((x = (v.ptr).$get(), new $Complex128(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _r, _r$1, _r$2, _r$3, _ref, _v, i, index, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; _v = $f._v; i = $f.i; index = $f.index; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (index.$length === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (index.$length === 1) { */ case 1:
			_r = $clone(v, Value).Field((0 >= index.$length ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + 0])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (i > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i > 0) { */ case 6:
				if (!($clone(v, Value).Kind() === 22)) { _v = false; $s = 10; continue s; }
				_r$1 = v.typ.Elem().Kind(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v = _r$1 === 25; case 10:
				/* */ if (_v) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_v) { */ case 8:
					if ($clone(v, Value).IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					_r$2 = $clone(v, Value).Elem(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					v = _r$2;
				/* } */ case 9:
			/* } */ case 7:
			_r$3 = $clone(v, Value).Field(x); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByIndex }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f._v = _v; $f.i = i; $f.index = index; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name$1) {
		var _r, _r$1, _tuple, f, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(25);
		_r = v.typ.FieldByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByName = function(name$1) { return this.$val.FieldByName(name$1); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _r, _r$1, _tuple, f, match, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; f = $f.f; match = $f.match; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = v.typ.FieldByNameFunc(match); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		f = $clone(_tuple[0], StructField);
		ok = _tuple[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = $clone(v, Value).FieldByIndex(f.Index); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.FieldByNameFunc }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.f = f; $f.match = match; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _1, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return ((v.ptr).$get());
		} else if (_1 === (14)) {
			return (v.ptr).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _1, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (2)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (3)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (4)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (5)) {
			return (new $Int64(0, (p).$get()));
		} else if (_1 === (6)) {
			return (p).$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 96) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var _r, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = $ifaceNil;
		v = this;
		_r = valueInterface($clone(v, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		i = _r;
		$s = -1; return i;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Interface }; } $f._r = _r; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var _r, c, e, fl, k, key, tt, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; e = $f.e; fl = $f.fl; k = $f.k; key = $f.key; tt = $f.tt; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.MapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		e = mapaccess(v.typ, $clone(v, Value).pointer(), k);
		if (e === 0) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 96) >>> 0;
		fl = (fl | (((typ.Kind() >>> 0)))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			typedmemmove(typ, c, e);
			$s = -1; return new Value.ptr(typ, c, (fl | 128) >>> 0);
		} else {
			$s = -1; return new Value.ptr(typ, (e).$get(), fl);
		}
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapIndex }; } $f._r = _r; $f.c = c; $f.e = e; $f.fl = fl; $f.k = k; $f.key = key; $f.tt = tt; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var _r, a, c, fl, i, it, key, keyType, m, mlen, tt, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; c = $f.c; fl = $f.fl; i = $f.i; it = $f.it; key = $f.key; keyType = $f.keyType; m = $f.m; mlen = $f.mlen; tt = $f.tt; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		tt = (v.typ.kindType);
		keyType = tt.key;
		fl = (((v.flag & 96) >>> 0) | ((keyType.Kind() >>> 0))) >>> 0;
		m = $clone(v, Value).pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = $makeSlice(sliceType$9, mlen);
		i = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < a.$length)) { break; } */ if(!(i < a.$length)) { $s = 2; continue; }
			_r = mapiterkey(it); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			key = _r;
			if (key === 0) {
				/* break; */ $s = 2; continue;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				typedmemmove(keyType, c, key);
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 128) >>> 0));
			} else {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = new Value.ptr(keyType, (key).$get(), fl));
			}
			mapiternext(it);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $subslice(a, 0, i);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MapKeys }; } $f._r = _r; $f.a = a; $f.c = c; $f.fl = fl; $f.i = i; $f.it = it; $f.key = key; $f.keyType = keyType; $f.m = m; $f.mlen = mlen; $f.tt = tt; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var _r, _v, fl, i, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; fl = $f.fl; i = $f.i; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) { _v = true; $s = 3; continue s; }
		_r = v.typ.NumMethod(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_v = ((i >>> 0)) >= ((_r >>> 0)); case 3:
		/* */ if (_v) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v) { */ case 1:
			$panic(new $String("reflect: Method index out of range"));
		/* } */ case 2:
		if ((v.typ.Kind() === 20) && $clone(v, Value).IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 160) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | ((((((i >>> 0)) << 10 >>> 0) | 512) >>> 0))) >>> 0;
		$s = -1; return new Value.ptr(v.typ, v.ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Method }; } $f._r = _r; $f._v = _v; $f.fl = fl; $f.i = i; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var _r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return 0;
		}
		_r = v.typ.NumMethod(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.NumMethod }; } $f._r = _r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name$1) {
		var _r, _r$1, _tuple, m, name$1, ok, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; m = $f.m; name$1 = $f.name$1; ok = $f.ok; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 512) >>> 0) === 0))) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r = v.typ.MethodByName(name$1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		m = $clone(_tuple[0], Method);
		ok = _tuple[1];
		if (!ok) {
			$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_r$1 = $clone(v, Value).Method(m.Index); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.MethodByName }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.m = m; $f.name$1 = name$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.MethodByName = function(name$1) { return this.$val.MethodByName(name$1); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = (v.typ.kindType);
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_1 === (16)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _1, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			return overflowFloat32(x);
		} else if (_1 === (14)) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		var x;
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _1, bitSize, k, trunc, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if ((_1 === (7)) || (_1 === (12)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11))) {
			bitSize = $imul(v.typ.size, 8) >>> 0;
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.Recv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Recv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Value.ptr.prototype.recv = function(nb) {
		var _r, _tuple, nb, ok, p, selected, t, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; nb = $f.nb; ok = $f.ok; p = $f.p; selected = $f.selected; t = $f.t; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		val = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		t = tt.elem;
		val = new Value.ptr(t, 0, ((t.Kind() >>> 0)));
		p = 0;
		if (ifaceIndir(t)) {
			p = unsafe_New(t);
			val.ptr = p;
			val.flag = (val.flag | (128)) >>> 0;
		} else {
			p = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		_r = chanrecv($clone(v, Value).pointer(), nb, p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		selected = _tuple[0];
		ok = _tuple[1];
		if (!selected) {
			val = new Value.ptr(ptrType$1.nil, 0, 0);
		}
		$s = -1; return [val, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.recv }; } $f._r = _r; $f._tuple = _tuple; $f.nb = nb; $f.ok = ok; $f.p = p; $f.selected = selected; $f.t = t; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.recv = function(nb) { return this.$val.recv(nb); };
	Value.ptr.prototype.Send = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Send }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.send = function(x, nb) {
		var _r, _r$1, nb, p, selected, tt, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; nb = $f.nb; p = $f.p; selected = $f.selected; tt = $f.tt; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		selected = false;
		v = this;
		tt = (v.typ.kindType);
		if ((((tt.dir >> 0)) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		_r = $clone(x, Value).assignTo("reflect.Value.Send", tt.elem, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		x = _r;
		p = 0;
		if (!((((x.flag & 128) >>> 0) === 0))) {
			p = x.ptr;
		} else {
			p = ((x.$ptr_ptr || (x.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, x))));
		}
		_r$1 = chansend($clone(v, Value).pointer(), p, nb); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		selected = _r$1;
		$s = -1; return selected;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.send }; } $f._r = _r; $f._r$1 = _r$1; $f.nb = nb; $f.p = p; $f.selected = selected; $f.tt = tt; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.send = function(x, nb) { return this.$val.send(x, nb); };
	Value.ptr.prototype.SetBool = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		(v.ptr).$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		_r = v.typ.Elem().Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 5))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 5))) { */ case 1:
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		/* } */ case 2:
		(v.ptr).$set(x);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.setRunes }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (15)) {
			(v.ptr).$set((new $Complex64(x.$real, x.$imag)));
		} else if (_1 === (16)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (13)) {
			(v.ptr).$set(($fround(x)));
		} else if (_1 === (14)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (2)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (3)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24)));
		} else if (_1 === (4)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16)));
		} else if (_1 === (5)) {
			(v.ptr).$set((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)));
		} else if (_1 === (6)) {
			(v.ptr).$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var _r, _r$1, e, k, key, tt, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; k = $f.k; key = $f.key; tt = $f.tt; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = (v.typ.kindType);
		_r = $clone(key, Value).assignTo("reflect.Value.SetMapIndex", tt.key, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		key = _r;
		k = 0;
		if (!((((key.flag & 128) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = ((key.$ptr_ptr || (key.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key))));
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, $clone(v, Value).pointer(), k);
			$s = -1; return;
		}
		new flag(val.flag).mustBeExported();
		_r$1 = $clone(val, Value).assignTo("reflect.Value.SetMapIndex", tt.elem, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		val = _r$1;
		e = 0;
		if (!((((val.flag & 128) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = ((val.$ptr_ptr || (val.$ptr_ptr = new ptrType$15(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val))));
		}
		$r = mapassign(v.typ, $clone(v, Value).pointer(), k, e); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.SetMapIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.k = k; $f.key = key; $f.tt = tt; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _1, k, v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (7)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (8)) {
			(v.ptr).$set(((x.$low << 24 >>> 24)));
		} else if (_1 === (9)) {
			(v.ptr).$set(((x.$low << 16 >>> 16)));
		} else if (_1 === (10)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else if (_1 === (11)) {
			(v.ptr).$set(x);
		} else if (_1 === (12)) {
			(v.ptr).$set(((x.$low >>> 0)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		(v.ptr).$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v, x;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		(v.ptr).$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _1, _r, k, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; k = $f.k; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		k = new flag(v.flag).kind();
		_1 = k;
		if (_1 === (0)) {
			$s = -1; return "<invalid Value>";
		} else if (_1 === (24)) {
			$s = -1; return (v.ptr).$get();
		}
		_r = $clone(v, Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return "<" + _r + " Value>";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.String }; } $f._1 = _1; $f._r = _r; $f.k = k; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.TryRecv = function() {
		var _r, _tuple, ok, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; ok = $f.ok; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = new Value.ptr(ptrType$1.nil, 0, 0);
		ok = false;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).recv(true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		ok = _tuple[1];
		$s = -1; return [x, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TryRecv }; } $f._r = _r; $f._tuple = _tuple; $f.ok = ok; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.TrySend = function(x) {
		var _r, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		_r = $clone(v, Value).send($clone(x, Value), true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.TrySend }; } $f._r = _r; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Type = function() {
		var f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 512) >>> 0) === 0) {
			return v.typ;
		}
		i = ((v.flag >> 0)) >> 10 >> 0;
		if (v.typ.Kind() === 20) {
			tt = (v.typ.kindType);
			if (((i >>> 0)) >= ((tt.methods.$length >>> 0))) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			return v.typ.typeOff(m.typ);
		}
		ut = v.typ.uncommon();
		if (ut === ptrType$5.nil || ((i >>> 0)) >= ((ut.mcount >>> 0))) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = $clone((x$1 = ut.methods(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), method);
		return v.typ.typeOff(m$1.mtyp);
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _1, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_1 = k;
		if (_1 === (7)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (8)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (9)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (10)) {
			return (new $Uint64(0, (p).$get()));
		} else if (_1 === (11)) {
			return (p).$get();
		} else if (_1 === (12)) {
			return ((x = (p).$get(), new $Uint64(0, x.constructor === Number ? x : 1)));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return (v.ptr);
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		var _r, _r$1, t1, t2, what, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; t1 = $f.t1; t2 = $f.t2; what = $f.what; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($interfaceIsEqual(t1, t2))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(t1, t2))) { */ case 1:
			_r = t1.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = t2.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$panic(new $String(what + ": " + _r + " != " + _r$1));
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: typesMustMatch }; } $f._r = _r; $f._r$1 = _r$1; $f.t1 = t1; $f.t2 = t2; $f.what = what; $f.$s = $s; $f.$r = $r; return $f;
	};
	MakeMap = function(typ) {
		var _r, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = MakeMapWithSize(typ, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMap }; } $f._r = _r; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMap = MakeMap;
	MakeMapWithSize = function(typ, n) {
		var _r, _r$1, m, n, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; m = $f.m; n = $f.n; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!((_r === 21))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r === 21))) { */ case 1:
			$panic(new $String("reflect.MakeMapWithSize of non-map type"));
		/* } */ case 2:
		m = makemap($assertType(typ, ptrType$1), n);
		_r$1 = typ.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, m, 21);
		/* */ } return; } if ($f === undefined) { $f = { $blk: MakeMapWithSize }; } $f._r = _r; $f._r$1 = _r$1; $f.m = m; $f.n = n; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MakeMapWithSize = MakeMapWithSize;
	New = function(typ) {
		var _r, _r$1, fl, ptr, typ, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; fl = $f.fl; ptr = $f.ptr; typ = $f.typ; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.ptrTo(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$1, ptr, fl);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f._r = _r; $f._r$1 = _r$1; $f.fl = fl; $f.ptr = ptr; $f.typ = typ; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var _r, _r$1, _r$2, _r$3, context, dst, fl, target, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; context = $f.context; dst = $f.dst; fl = $f.fl; target = $f.target; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue(context, $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
			_r$1 = directlyAssignable(dst, v.typ); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 5; continue; }
			/* */ if (implements$1(dst, v.typ)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_r$1) { */ case 5:
				fl = (v.flag & 480) >>> 0;
				fl = (fl | (((dst.Kind() >>> 0)))) >>> 0;
				$s = -1; return new Value.ptr(dst, v.ptr, fl);
			/* } else if (implements$1(dst, v.typ)) { */ case 6:
				if (target === 0) {
					target = unsafe_New(dst);
				}
				_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				x = _r$2;
				_r$3 = dst.NumMethod(); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3 === 0) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_r$3 === 0) { */ case 10:
					(target).$set(x);
					$s = 12; continue;
				/* } else { */ case 11:
					ifaceE2I(dst, x, target);
				/* } */ case 12:
				$s = -1; return new Value.ptr(dst, target, 148);
			/* } */ case 7:
		case 4:
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
		$s = -1; return new Value.ptr(ptrType$1.nil, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.assignTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.context = context; $f.dst = dst; $f.fl = fl; $f.target = target; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var _r, _r$1, _r$2, _r$3, _r$4, op, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; op = $f.op; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		/* */ if (!((((v.flag & 512) >>> 0) === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((((v.flag & 512) >>> 0) === 0))) { */ case 1:
			_r = makeMethodValue("Convert", $clone(v, Value)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
		/* } */ case 2:
		_r$1 = t.common(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = convertOp(_r$1, v.typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		op = _r$2;
		/* */ if (op === $throwNilPointerError) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (op === $throwNilPointerError) { */ case 6:
			_r$3 = t.String(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + _r$3));
		/* } */ case 7:
		_r$4 = op($clone(v, Value), t); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Value.ptr.prototype.Convert }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.op = op; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _1, _2, _3, _4, _5, _6, _7, _arg, _arg$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _v, _v$1, _v$2, dst, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _7 = $f._7; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; dst = $f.dst; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = src.Kind();
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 2; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 3; continue; }
			/* */ if ((_1 === (13)) || (_1 === (14))) { $s = 4; continue; }
			/* */ if ((_1 === (15)) || (_1 === (16))) { $s = 5; continue; }
			/* */ if (_1 === (24)) { $s = 6; continue; }
			/* */ if (_1 === (23)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 2:
				_2 = dst.Kind();
				if ((_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) {
					$s = -1; return cvtInt;
				} else if ((_2 === (13)) || (_2 === (14))) {
					$s = -1; return cvtIntFloat;
				} else if (_2 === (24)) {
					$s = -1; return cvtIntString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 3:
				_3 = dst.Kind();
				if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6)) || (_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) {
					$s = -1; return cvtUint;
				} else if ((_3 === (13)) || (_3 === (14))) {
					$s = -1; return cvtUintFloat;
				} else if (_3 === (24)) {
					$s = -1; return cvtUintString;
				}
				$s = 8; continue;
			/* } else if ((_1 === (13)) || (_1 === (14))) { */ case 4:
				_4 = dst.Kind();
				if ((_4 === (2)) || (_4 === (3)) || (_4 === (4)) || (_4 === (5)) || (_4 === (6))) {
					$s = -1; return cvtFloatInt;
				} else if ((_4 === (7)) || (_4 === (8)) || (_4 === (9)) || (_4 === (10)) || (_4 === (11)) || (_4 === (12))) {
					$s = -1; return cvtFloatUint;
				} else if ((_4 === (13)) || (_4 === (14))) {
					$s = -1; return cvtFloat;
				}
				$s = 8; continue;
			/* } else if ((_1 === (15)) || (_1 === (16))) { */ case 5:
				_5 = dst.Kind();
				if ((_5 === (15)) || (_5 === (16))) {
					$s = -1; return cvtComplex;
				}
				$s = 8; continue;
			/* } else if (_1 === (24)) { */ case 6:
				if (!(dst.Kind() === 23)) { _v = false; $s = 11; continue s; }
				_r = dst.Elem().PkgPath(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r === ""; case 11:
				/* */ if (_v) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if (_v) { */ case 9:
						_r$1 = dst.Elem().Kind(); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_6 = _r$1;
						if (_6 === (8)) {
							$s = -1; return cvtStringBytes;
						} else if (_6 === (5)) {
							$s = -1; return cvtStringRunes;
						}
					case 13:
				/* } */ case 10:
				$s = 8; continue;
			/* } else if (_1 === (23)) { */ case 7:
				if (!(dst.Kind() === 24)) { _v$1 = false; $s = 17; continue s; }
				_r$2 = src.Elem().PkgPath(); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$1 = _r$2 === ""; case 17:
				/* */ if (_v$1) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_v$1) { */ case 15:
						_r$3 = src.Elem().Kind(); /* */ $s = 20; case 20: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_7 = _r$3;
						if (_7 === (8)) {
							$s = -1; return cvtBytesString;
						} else if (_7 === (5)) {
							$s = -1; return cvtRunesString;
						}
					case 19:
				/* } */ case 16:
			/* } */ case 8:
		case 1:
		_r$4 = haveIdenticalUnderlyingType(dst, src, false); /* */ $s = 23; case 23: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (_r$4) { */ case 21:
			$s = -1; return cvtDirect;
		/* } */ case 22:
		if (!((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "")) { _v$2 = false; $s = 26; continue s; }
		_r$5 = dst.Elem().common(); /* */ $s = 27; case 27: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_arg = _r$5;
		_r$6 = src.Elem().common(); /* */ $s = 28; case 28: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		_arg$1 = _r$6;
		_r$7 = haveIdenticalUnderlyingType(_arg, _arg$1, false); /* */ $s = 29; case 29: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v$2 = _r$7; case 26:
		/* */ if (_v$2) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_v$2) { */ case 24:
			$s = -1; return cvtDirect;
		/* } */ case 25:
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				$s = -1; return cvtI2I;
			}
			$s = -1; return cvtT2I;
		}
		$s = -1; return $throwNilPointerError;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertOp }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._7 = _7; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.dst = dst; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeFloat = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (4)) {
			(ptr).$set(($fround(v)));
		} else if (_1 === (8)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeFloat }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeComplex = function(f, v, t) {
		var _1, _r, f, ptr, t, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; f = $f.f; ptr = $f.ptr; t = $f.t; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = t.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		typ = _r;
		ptr = unsafe_New(typ);
		_1 = typ.size;
		if (_1 === (8)) {
			(ptr).$set((new $Complex64(v.$real, v.$imag)));
		} else if (_1 === (16)) {
			(ptr).$set(v);
		}
		$s = -1; return new Value.ptr(typ, ptr, (((f | 128) >>> 0) | ((typ.Kind() >>> 0))) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeComplex }; } $f._1 = _1; $f._r = _r; $f.f = f; $f.ptr = ptr; $f.t = t; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeString = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$clone(ret, Value).SetString(v);
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeString }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeBytes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).SetBytes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeBytes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	makeRunes = function(f, v, t) {
		var _r, _r$1, f, ret, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; ret = $f.ret; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New(t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(_r, Value).Elem(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		ret = _r$1;
		$r = $clone(ret, Value).setRunes(v); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ret.flag = (((ret.flag & ~256) >>> 0) | f) >>> 0;
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeRunes }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.ret = ret; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, ((x = $clone(v, Value).Int(), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, $clone(v, Value).Uint(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatInt = function(v, t) {
		var _r, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, ((x = (new $Int64(0, $clone(v, Value).Float())), new $Uint64(x.$high, x.$low))), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatInt }; } $f._r = _r; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloatUint = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeInt((v.flag & 96) >>> 0, (new $Uint64(0, $clone(v, Value).Float())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloatUint }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, ($flatten64($clone(v, Value).Int())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, ($flatten64($clone(v, Value).Uint())), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtFloat = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeFloat((v.flag & 96) >>> 0, $clone(v, Value).Float(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtFloat }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtComplex = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeComplex((v.flag & 96) >>> 0, $clone(v, Value).Complex(), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtComplex }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtIntString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, ($encodeRune($clone(v, Value).Int().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtIntString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtUintString = function(v, t) {
		var _r, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = makeString((v.flag & 96) >>> 0, ($encodeRune($clone(v, Value).Uint().$low)), t); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtUintString }; } $f._r = _r; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtBytesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).Bytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($bytesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtBytesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringBytes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$15($stringToBytes(_r)));
		_arg$2 = t;
		_r$1 = makeBytes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringBytes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtRunesString = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).runes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = ($runesToString(_r));
		_arg$2 = t;
		_r$1 = makeString(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtRunesString }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtStringRunes = function(v, t) {
		var _arg, _arg$1, _arg$2, _r, _r$1, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (v.flag & 96) >>> 0;
		_r = $clone(v, Value).String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = (new sliceType$17($stringToRunes(_r)));
		_arg$2 = t;
		_r$1 = makeRunes(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtStringRunes }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtT2I = function(v, typ) {
		var _r, _r$1, _r$2, _r$3, _r$4, target, typ, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; target = $f.target; typ = $f.typ; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = typ.common(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = unsafe_New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		target = _r$1;
		_r$2 = valueInterface($clone(v, Value), false); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		x = _r$2;
		_r$3 = typ.NumMethod(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (_r$3 === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (_r$3 === 0) { */ case 4:
			(target).$set(x);
			$s = 6; continue;
		/* } else { */ case 5:
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		/* } */ case 6:
		_r$4 = typ.common(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return new Value.ptr(_r$4, target, (((((v.flag & 96) >>> 0) | 128) >>> 0) | 20) >>> 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtT2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.target = target; $f.typ = typ; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	cvtI2I = function(v, typ) {
		var _r, _r$1, _r$2, ret, typ, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; ret = $f.ret; typ = $f.typ; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($clone(v, Value).IsNil()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(v, Value).IsNil()) { */ case 1:
			_r = Zero(typ); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			ret = _r;
			ret.flag = (ret.flag | (((v.flag & 96) >>> 0))) >>> 0;
			$s = -1; return ret;
		/* } */ case 2:
		_r$1 = $clone(v, Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = cvtT2I($clone(_r$1, Value), typ); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cvtI2I }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.ret = ret; $f.typ = typ; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$5.methods = [{prop: "methods", name: "methods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}];
	ptrType$16.methods = [{prop: "in$", name: "in", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}, {prop: "out", name: "out", pkg: "reflect", typ: $funcType([], [sliceType$2], false)}];
	name.methods = [{prop: "name", name: "name", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "tag", name: "tag", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", typ: $funcType([], [$String], false)}, {prop: "isExported", name: "isExported", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "data", name: "data", pkg: "reflect", typ: $funcType([$Int], [ptrType$4], false)}, {prop: "nameLen", name: "nameLen", pkg: "reflect", typ: $funcType([], [$Int], false)}, {prop: "tagLen", name: "tagLen", pkg: "reflect", typ: $funcType([], [$Int], false)}];
	Kind.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}, {prop: "nameOff", name: "nameOff", pkg: "reflect", typ: $funcType([nameOff], [name], false)}, {prop: "typeOff", name: "typeOff", pkg: "reflect", typ: $funcType([typeOff], [ptrType$1], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", typ: $funcType([], [$Bool], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "textOff", name: "textOff", pkg: "reflect", typ: $funcType([textOff], [$UnsafePointer], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "exportedMethods", name: "exportedMethods", pkg: "reflect", typ: $funcType([], [sliceType$5], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}];
	ptrType$17.methods = [{prop: "offset", name: "offset", pkg: "reflect", typ: $funcType([], [$Uintptr], false)}, {prop: "anon", name: "anon", pkg: "reflect", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "Lookup", name: "Lookup", pkg: "", typ: $funcType([$String], [$String, $Bool], false)}];
	Value.methods = [{prop: "object", name: "object", pkg: "reflect", typ: $funcType([], [ptrType$2], false)}, {prop: "call", name: "call", pkg: "reflect", typ: $funcType([$String, sliceType$9], [sliceType$9], false)}, {prop: "Cap", name: "Cap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", typ: $funcType([], [arrayType$12], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Pointer", name: "Pointer", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([Value], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", typ: $funcType([sliceType$15], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "Slice", name: "Slice", pkg: "", typ: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", typ: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", typ: $funcType([], [$UnsafePointer], false)}, {prop: "Addr", name: "Addr", pkg: "", typ: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", typ: $funcType([], [sliceType$15], false)}, {prop: "runes", name: "runes", pkg: "reflect", typ: $funcType([], [sliceType$17], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", typ: $funcType([sliceType$9], [sliceType$9], false)}, {prop: "Complex", name: "Complex", pkg: "", typ: $funcType([], [$Complex128], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [Value], false)}, {prop: "Float", name: "Float", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Interface", name: "Interface", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "IsValid", name: "IsValid", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", typ: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", typ: $funcType([], [sliceType$9], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Value], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", typ: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", typ: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", typ: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", typ: $funcType([$Uint64], [$Bool], false)}, {prop: "Recv", name: "Recv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "recv", name: "recv", pkg: "reflect", typ: $funcType([$Bool], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([Value], [], false)}, {prop: "send", name: "send", pkg: "reflect", typ: $funcType([Value, $Bool], [$Bool], false)}, {prop: "SetBool", name: "SetBool", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", typ: $funcType([sliceType$17], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", typ: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", typ: $funcType([Value, Value], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", typ: $funcType([$Uint64], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", typ: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", typ: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", typ: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", typ: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Type], [Value], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", typ: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", typ: $funcType([Kind], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", typ: $funcType([], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", typ: $funcType([], [], false)}];
	ptrType$18.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	uncommonType.init("reflect", [{prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mcount", name: "mcount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_$2", name: "_", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "moff", name: "moff", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_$4", name: "_", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "_methods", name: "_methods", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	funcType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"func\""}, {prop: "inCount", name: "inCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "outCount", name: "outCount", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "_in", name: "_in", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "_out", name: "_out", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	name.init("reflect", [{prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	nameData.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "tag", name: "tag", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "exported", name: "exported", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	mapIter.init("reflect", [{prop: "t", name: "t", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "keys", name: "keys", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", typ: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", typ: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", typ: $funcType([sliceType$13], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", typ: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", typ: $funcType([funcType$3], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", typ: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", typ: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", typ: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", typ: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", typ: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", typ: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", typ: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", typ: $funcType([], [ptrType$5], false)}]);
	rtype.init("reflect", [{prop: "size", name: "size", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "ptrdata", name: "ptrdata", anonymous: false, exported: false, typ: $Uintptr, tag: ""}, {prop: "hash", name: "hash", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tflag", name: "tflag", anonymous: false, exported: false, typ: tflag, tag: ""}, {prop: "align", name: "align", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "kind", name: "kind", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "alg", name: "alg", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "gcdata", name: "gcdata", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "str", name: "str", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	typeAlg.init("reflect", [{prop: "hash", name: "hash", anonymous: false, exported: false, typ: funcType$4, tag: ""}, {prop: "equal", name: "equal", anonymous: false, exported: false, typ: funcType$5, tag: ""}]);
	method.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "mtyp", name: "mtyp", anonymous: false, exported: false, typ: typeOff, tag: ""}, {prop: "ifn", name: "ifn", anonymous: false, exported: false, typ: textOff, tag: ""}, {prop: "tfn", name: "tfn", anonymous: false, exported: false, typ: textOff, tag: ""}]);
	arrayType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "slice", name: "slice", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	chanType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "dir", name: "dir", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	imethod.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: nameOff, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: typeOff, tag: ""}]);
	interfaceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"interface\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "methods", name: "methods", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	mapType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "reflexivekey", name: "reflexivekey", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "needkeyupdate", name: "needkeyupdate", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	ptrType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	sliceType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", anonymous: false, exported: false, typ: ptrType$1, tag: ""}]);
	structField.init("reflect", [{prop: "name", name: "name", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "offsetAnon", name: "offsetAnon", anonymous: false, exported: false, typ: $Uintptr, tag: ""}]);
	structType.init("reflect", [{prop: "rtype", name: "rtype", anonymous: true, exported: false, typ: rtype, tag: "reflect:\"struct\""}, {prop: "pkgPath", name: "pkgPath", anonymous: false, exported: false, typ: name, tag: ""}, {prop: "fields", name: "fields", anonymous: false, exported: false, typ: sliceType$7, tag: ""}]);
	Method.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Func", name: "Func", anonymous: false, exported: true, typ: Value, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	StructField.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Tag", name: "Tag", anonymous: false, exported: true, typ: StructTag, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Uintptr, tag: ""}, {prop: "Index", name: "Index", anonymous: false, exported: true, typ: sliceType$13, tag: ""}, {prop: "Anonymous", name: "Anonymous", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	fieldScan.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$13, tag: ""}]);
	Value.init("reflect", [{prop: "typ", name: "typ", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", anonymous: false, exported: false, typ: $UnsafePointer, tag: ""}, {prop: "flag", name: "flag", anonymous: true, exported: false, typ: flag, tag: ""}]);
	ValueError.init("", [{prop: "Method", name: "Method", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Kind", name: "Kind", anonymous: false, exported: true, typ: Kind, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		nameOffList = sliceType$1.nil;
		typeOffList = sliceType$2.nil;
		methodCache = new sync.Map.ptr(new sync.Mutex.ptr(0, 0), new $packages["sync/atomic"].Value.ptr(new $packages["sync/atomic"].noCopy.ptr(), $ifaceNil), false, 0);
		initialized = false;
		uncommonTypeMap = {};
		nameMap = {};
		callHelper = $assertType($internalize($call, $emptyInterface), funcType$1);
		selectHelper = $assertType($internalize($select, $emptyInterface), funcType$1);
		jsObjectPtr = reflectType($jsObjectPtr);
		kindNames = new sliceType$4(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, $init, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, scanError, ss, ssave, sliceType, ptrType, ptrType$1, arrayType, arrayType$1, sliceType$1, sliceType$2, arrayType$2, ptrType$2, ptrType$5, ptrType$25, funcType, ppFree, space, ssFree, complexError, boolError, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Print, Sprint, Fprintln, Println, getField, tooLarge, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", true, "fmt", false, function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, zero_, plusV_, sharpV_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.widPresent = false;
			this.precPresent = false;
			this.minus = false;
			this.plus = false;
			this.sharp = false;
			this.space = false;
			this.zero = false;
			this.plusV = false;
			this.sharpV = false;
			return;
		}
		this.widPresent = widPresent_;
		this.precPresent = precPresent_;
		this.minus = minus_;
		this.plus = plus_;
		this.sharp = sharp_;
		this.space = space_;
		this.zero = zero_;
		this.plusV = plusV_;
		this.sharpV = sharpV_;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", true, "fmt", false, function(buf_, fmtFlags_, wid_, prec_, intbuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = ptrType$1.nil;
			this.fmtFlags = new fmtFlags.ptr(false, false, false, false, false, false, false, false, false);
			this.wid = 0;
			this.prec = 0;
			this.intbuf = arrayType.zero();
			return;
		}
		this.buf = buf_;
		this.fmtFlags = fmtFlags_;
		this.wid = wid_;
		this.prec = prec_;
		this.intbuf = intbuf_;
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", true, "fmt", true, null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", true, "fmt", true, null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", true, "fmt", true, null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", true, "fmt", true, null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", true, "fmt", false, null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", true, "fmt", false, function(buf_, arg_, value_, fmt_, reordered_, goodArgNum_, panicking_, erroring_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = buffer.nil;
			this.arg = $ifaceNil;
			this.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
			this.fmt = new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero());
			this.reordered = false;
			this.goodArgNum = false;
			this.panicking = false;
			this.erroring = false;
			return;
		}
		this.buf = buf_;
		this.arg = arg_;
		this.value = value_;
		this.fmt = fmt_;
		this.reordered = reordered_;
		this.goodArgNum = goodArgNum_;
		this.panicking = panicking_;
		this.erroring = erroring_;
	});
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", true, "fmt", false, function(err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.err = $ifaceNil;
			return;
		}
		this.err = err_;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", true, "fmt", false, function(rs_, buf_, count_, atEOF_, ssave_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = $ifaceNil;
			this.buf = buffer.nil;
			this.count = 0;
			this.atEOF = false;
			this.ssave = new ssave.ptr(false, false, false, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.buf = buf_;
		this.count = count_;
		this.atEOF = atEOF_;
		this.ssave = ssave_;
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", true, "fmt", false, function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.validSave = false;
			this.nlIsEnd = false;
			this.nlIsSpace = false;
			this.argLimit = 0;
			this.limit = 0;
			this.maxWid = 0;
			return;
		}
		this.validSave = validSave_;
		this.nlIsEnd = nlIsEnd_;
		this.nlIsSpace = nlIsSpace_;
		this.argLimit = argLimit_;
		this.limit = limit_;
		this.maxWid = maxWid_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(reflect.rtype);
	ptrType$1 = $ptrType(buffer);
	arrayType = $arrayType($Uint8, 68);
	arrayType$1 = $arrayType($Uint16, 2);
	sliceType$1 = $sliceType(arrayType$1);
	sliceType$2 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 5);
	ptrType$2 = $ptrType(pp);
	ptrType$5 = $ptrType(ss);
	ptrType$25 = $ptrType(fmt);
	funcType = $funcType([$Int32], [$Bool], false);
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		fmtFlags.copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false));
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var buf, f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.writePadding = function(n) {
		var _i, _ref, buf, f, i, n, newLen, oldLen, padByte, padding;
		f = this;
		if (n <= 0) {
			return;
		}
		buf = f.buf.$get();
		oldLen = buf.$length;
		newLen = oldLen + n >> 0;
		if (newLen > buf.$capacity) {
			buf = $makeSlice(buffer, (($imul(buf.$capacity, 2)) + n >> 0));
			$copySlice(buf, f.buf.$get());
		}
		padByte = 32;
		if (f.fmtFlags.zero) {
			padByte = 48;
		}
		padding = $subslice(buf, oldLen, newLen);
		_ref = padding;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= padding.$length) ? ($throwRuntimeError("index out of range"), undefined) : padding.$array[padding.$offset + i] = padByte);
			_i++;
		}
		f.buf.$set($subslice(buf, 0, newLen));
	};
	fmt.prototype.writePadding = function(n) { return this.$val.writePadding(n); };
	fmt.ptr.prototype.pad = function(b) {
		var b, f, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		width = f.wid - utf8.RuneCount(b) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.Write(b);
		} else {
			f.buf.Write(b);
			f.writePadding(width);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var f, s, width;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		width = f.wid - utf8.RuneCountInString(s) >> 0;
		if (!f.fmtFlags.minus) {
			f.writePadding(width);
			f.buf.WriteString(s);
		} else {
			f.buf.WriteString(s);
			f.writePadding(width);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f, v;
		f = this;
		if (v) {
			f.padString("true");
		} else {
			f.padString("false");
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.fmt_unicode = function(u) {
		var buf, f, i, oldZero, prec, u, width;
		f = this;
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		prec = 4;
		if (f.fmtFlags.precPresent && f.prec > 4) {
			prec = f.prec;
			width = (((2 + prec >> 0) + 2 >> 0) + 4 >> 0) + 1 >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		i = buf.$length;
		if (f.fmtFlags.sharp && (u.$high < 0 || (u.$high === 0 && u.$low <= 1114111)) && strconv.IsPrint(((u.$low >> 0)))) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (utf8.RuneLen(((u.$low >> 0)))) >> 0;
			utf8.EncodeRune($subslice(buf, i), ((u.$low >> 0)));
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 39);
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		while (true) {
			if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
			prec = prec - (1) >> 0;
			u = $shiftRightUint64(u, (4));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = "0123456789ABCDEFX".charCodeAt($flatten64(u)));
		prec = prec - (1) >> 0;
		while (true) {
			if (!(prec > 0)) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			prec = prec - (1) >> 0;
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 85);
		oldZero = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero;
	};
	fmt.prototype.fmt_unicode = function(u) { return this.$val.fmt_unicode(u); };
	fmt.ptr.prototype.fmt_integer = function(u, base, isSigned, digits) {
		var _1, _2, base, buf, digits, f, i, isSigned, negative, next, oldZero, oldZero$1, prec, u, width, x, x$1, x$2, x$3, x$4;
		f = this;
		negative = isSigned && (x = (new $Int64(u.$high, u.$low)), (x.$high < 0 || (x.$high === 0 && x.$low < 0)));
		if (negative) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0);
		if (f.fmtFlags.widPresent || f.fmtFlags.precPresent) {
			width = (3 + f.wid >> 0) + f.prec >> 0;
			if (width > buf.$length) {
				buf = $makeSlice(sliceType$2, width);
			}
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			if ((prec === 0) && (u.$high === 0 && u.$low === 0)) {
				oldZero = f.fmtFlags.zero;
				f.fmtFlags.zero = false;
				f.writePadding(f.wid);
				f.fmtFlags.zero = oldZero;
				return;
			}
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		_1 = base;
		if (_1 === (10)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 10)))) { break; }
				i = i - (1) >> 0;
				next = $div64(u, new $Uint64(0, 10), false);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$1 = new $Uint64(0 + u.$high, 48 + u.$low), x$2 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)).$low << 24 >>> 24)));
				u = next;
			}
		} else if (_1 === (16)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 16)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(u.$high & 0, (u.$low & 15) >>> 0))));
				u = $shiftRightUint64(u, (4));
			}
		} else if (_1 === (8)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 8)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$3 = new $Uint64(u.$high & 0, (u.$low & 7) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (3));
			}
		} else if (_1 === (2)) {
			while (true) {
				if (!((u.$high > 0 || (u.$high === 0 && u.$low >= 2)))) { break; }
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (((x$4 = new $Uint64(u.$high & 0, (u.$low & 1) >>> 0), new $Uint64(0 + x$4.$high, 48 + x$4.$low)).$low << 24 >>> 24)));
				u = $shiftRightUint64(u, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(u)));
		while (true) {
			if (!(i > 0 && prec > (buf.$length - i >> 0))) { break; }
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
		}
		if (f.fmtFlags.sharp) {
			_2 = base;
			if (_2 === (8)) {
				if (!((((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
				}
			} else if (_2 === (16)) {
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = digits.charCodeAt(16));
				i = i - (1) >> 0;
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 48);
			}
		}
		if (negative) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 45);
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 43);
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = 32);
		}
		oldZero$1 = f.fmtFlags.zero;
		f.fmtFlags.zero = false;
		f.pad($subslice(buf, i));
		f.fmtFlags.zero = oldZero$1;
	};
	fmt.prototype.fmt_integer = function(u, base, isSigned, digits) { return this.$val.fmt_integer(u, base, isSigned, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n, s;
		f = this;
		if (f.fmtFlags.precPresent) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				n = n - (1) >> 0;
				if (n < 0) {
					return $substring(s, 0, i);
				}
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f, s;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var b, buf, c, digits, f, i, length, s, width;
		f = this;
		length = b.$length;
		if (b === sliceType$2.nil) {
			length = s.length;
		}
		if (f.fmtFlags.precPresent && f.prec < length) {
			length = f.prec;
		}
		width = $imul(2, length);
		if (width > 0) {
			if (f.fmtFlags.space) {
				if (f.fmtFlags.sharp) {
					width = $imul(width, (2));
				}
				width = width + ((length - 1 >> 0)) >> 0;
			} else if (f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
		} else {
			if (f.fmtFlags.widPresent) {
				f.writePadding(f.wid);
			}
			return;
		}
		if (f.fmtFlags.widPresent && f.wid > width && !f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
		buf = f.buf.$get();
		if (f.fmtFlags.sharp) {
			buf = $append(buf, 48, digits.charCodeAt(16));
		}
		c = 0;
		i = 0;
		while (true) {
			if (!(i < length)) { break; }
			if (f.fmtFlags.space && i > 0) {
				buf = $append(buf, 32);
				if (f.fmtFlags.sharp) {
					buf = $append(buf, 48, digits.charCodeAt(16));
				}
			}
			if (!(b === sliceType$2.nil)) {
				c = ((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]);
			} else {
				c = s.charCodeAt(i);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.buf.$set(buf);
		if (f.fmtFlags.widPresent && f.wid > width && f.fmtFlags.minus) {
			f.writePadding(f.wid - width >> 0);
		}
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var digits, f, s;
		f = this;
		f.fmt_sbx(s, sliceType$2.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var b, digits, f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var buf, f, s;
		f = this;
		s = f.truncate(s);
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			f.padString("`" + s + "`");
			return;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteToASCII(buf, s));
		} else {
			f.pad(strconv.AppendQuote(buf, s));
		}
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_c = function(c) {
		var buf, c, f, r, w;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		w = utf8.EncodeRune($subslice(buf, 0, 4), r);
		f.pad($subslice(buf, 0, w));
	};
	fmt.prototype.fmt_c = function(c) { return this.$val.fmt_c(c); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var buf, c, f, r;
		f = this;
		r = ((c.$low >> 0));
		if ((c.$high > 0 || (c.$high === 0 && c.$low > 1114111))) {
			r = 65533;
		}
		buf = $subslice(new sliceType$2(f.intbuf), 0, 0);
		if (f.fmtFlags.plus) {
			f.pad(strconv.AppendQuoteRuneToASCII(buf, r));
		} else {
			f.pad(strconv.AppendQuoteRune(buf, r));
		}
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	fmt.ptr.prototype.fmt_float = function(v, size, verb, prec) {
		var _1, _2, digits, f, hasDecimalPoint, i, num, oldZero, prec, size, tail, tailBuf, v, verb;
		f = this;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
		}
		num = strconv.AppendFloat($subslice(new sliceType$2(f.intbuf), 0, 1), v, ((verb << 24 >>> 24)), prec, size);
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 45) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 43);
		}
		if (f.fmtFlags.space && ((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43) && !f.fmtFlags.plus) {
			(0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0] = 32);
		}
		if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 73) || ((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78)) {
			oldZero = f.fmtFlags.zero;
			f.fmtFlags.zero = false;
			if (((1 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 1]) === 78) && !f.fmtFlags.space && !f.fmtFlags.plus) {
				num = $subslice(num, 1);
			}
			f.pad(num);
			f.fmtFlags.zero = oldZero;
			return;
		}
		if (f.fmtFlags.sharp && !((verb === 98))) {
			digits = 0;
			_1 = verb;
			if ((_1 === (118)) || (_1 === (103)) || (_1 === (71))) {
				digits = prec;
				if (digits === -1) {
					digits = 6;
				}
			}
			tailBuf = arrayType$2.zero();
			tail = $subslice(new sliceType$2(tailBuf), 0, 0);
			hasDecimalPoint = false;
			i = 1;
			while (true) {
				if (!(i < num.$length)) { break; }
				_2 = ((i < 0 || i >= num.$length) ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + i]);
				if (_2 === (46)) {
					hasDecimalPoint = true;
				} else if ((_2 === (101)) || (_2 === (69))) {
					tail = $appendSlice(tail, $subslice(num, i));
					num = $subslice(num, 0, i);
				} else {
					digits = digits - (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (!hasDecimalPoint) {
				num = $append(num, 46);
			}
			while (true) {
				if (!(digits > 0)) { break; }
				num = $append(num, 48);
				digits = digits - (1) >> 0;
			}
			num = $appendSlice(num, tail);
		}
		if (f.fmtFlags.plus || !(((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]) === 43))) {
			if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
				f.buf.WriteByte((0 >= num.$length ? ($throwRuntimeError("index out of range"), undefined) : num.$array[num.$offset + 0]));
				f.writePadding(f.wid - num.$length >> 0);
				f.buf.Write($subslice(num, 1));
				return;
			}
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
	};
	fmt.prototype.fmt_float = function(v, size, verb, prec) { return this.$val.fmt_float(v, size, verb, prec); };
	$ptrType(buffer).prototype.Write = function(p) {
		var b, p;
		b = this;
		b.$set($appendSlice(b.$get(), p));
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var b, s;
		b = this;
		b.$set($appendSlice(b.$get(), s));
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b, c;
		b = this;
		b.$set($append(b.$get(), c));
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, r, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), ((r << 24 >>> 24))));
			return;
		}
		b = bp.$get();
		n = b.$length;
		while (true) {
			if (!((n + 4 >> 0) > b.$capacity)) { break; }
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
	};
	newPrinter = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = ppFree.Get(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = $assertType(_r, ptrType$2);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init((p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))));
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPrinter }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok, p, wid;
		wid = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.wid;
		_tmp$1 = p.fmt.fmtFlags.widPresent;
		wid = _tmp;
		ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok, p, prec;
		prec = 0;
		ok = false;
		p = this;
		_tmp = p.fmt.prec;
		_tmp$1 = p.fmt.fmtFlags.precPresent;
		prec = _tmp;
		ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _1, b, p;
		p = this;
		_1 = b;
		if (_1 === (45)) {
			return p.fmt.fmtFlags.minus;
		} else if (_1 === (43)) {
			return p.fmt.fmtFlags.plus || p.fmt.fmtFlags.plusV;
		} else if (_1 === (35)) {
			return p.fmt.fmtFlags.sharp || p.fmt.fmtFlags.sharpV;
		} else if (_1 === (32)) {
			return p.fmt.fmtFlags.space;
		} else if (_1 === (48)) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, b, err, p, ret;
		ret = 0;
		err = $ifaceNil;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).Write(b);
		_tmp = b.$length;
		_tmp$1 = $ifaceNil;
		ret = _tmp;
		err = _tmp$1;
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = function(w, format, a) {
		var _r, _r$1, _tuple, a, err, format, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintf }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintf = Fprintf;
	Printf = function(format, a) {
		var _r, _tuple, a, err, format, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; format = $f.format; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintf(os.Stdout, format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Printf }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.format = format; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Printf = Printf;
	Sprintf = function(format, a) {
		var _r, a, format, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; format = $f.format; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintf(format, a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprintf }; } $f._r = _r; $f.a = a; $f.format = format; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprintf = Sprintf;
	Errorf = function(format, a) {
		var _r, _r$1, a, format, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; a = $f.a; format = $f.format; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Sprintf(format, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Errorf }; } $f._r = _r; $f._r$1 = _r$1; $f.a = a; $f.format = format; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Errorf = Errorf;
	Fprint = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprint }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprint = Fprint;
	Print = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprint(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Print }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Print = Print;
	Sprint = function(a) {
		var _r, a, p, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; p = $f.p; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrint(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s = ($bytesToString(p.buf));
		p.free();
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprint }; } $f._r = _r; $f.a = a; $f.p = p; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sprint = Sprint;
	Fprintln = function(w, a) {
		var _r, _r$1, _tuple, a, err, n, p, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; p = $f.p; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = newPrinter(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		$r = p.doPrintln(a); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = w.Write((x = p.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		p.free();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Fprintln }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.p = p; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Fprintln = Fprintln;
	Println = function(a) {
		var _r, _tuple, a, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		_r = Fprintln(os.Stdout, a); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Println }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Println = Println;
	getField = function(v, i) {
		var _r, _r$1, i, v, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; v = $f.v; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(v, reflect.Value).Field(i); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		val = _r;
		/* */ if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (($clone(val, reflect.Value).Kind() === 20) && !$clone(val, reflect.Value).IsNil()) { */ case 2:
			_r$1 = $clone(val, reflect.Value).Elem(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			val = _r$1;
		/* } */ case 3:
		$s = -1; return val;
		/* */ } return; } if ($f === undefined) { $f = { $blk: getField }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.v = v; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	tooLarge = function(x) {
		var x;
		return x > 1000000 || x < -1000000;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, end, isnum, newi, num, s, start;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tmp = 0;
			_tmp$1 = false;
			_tmp$2 = end;
			num = _tmp;
			isnum = _tmp$1;
			newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (true) {
			if (!(newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57)) { break; }
			if (tooLarge(num)) {
				_tmp$3 = 0;
				_tmp$4 = false;
				_tmp$5 = end;
				num = _tmp$3;
				isnum = _tmp$4;
				newi = _tmp$5;
				return [num, isnum, newi];
			}
			num = ($imul(num, 10)) + (((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0)) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var _r, p, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(v, reflect.Value).IsValid()) {
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			$s = -1; return;
		}
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		_r = $clone(v, reflect.Value).Type().String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(63);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.unknownType }; } $f._r = _r; $f.p = p; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var _r, _r$1, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.erroring = true;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
			/* */ if (!($interfaceIsEqual(p.arg, $ifaceNil))) { $s = 2; continue; }
			/* */ if ($clone(p.value, reflect.Value).IsValid()) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(p.arg, $ifaceNil))) { */ case 2:
				_r = reflect.TypeOf(p.arg).String(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printArg(p.arg, 118); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else if ($clone(p.value, reflect.Value).IsValid()) { */ case 3:
				_r$1 = $clone(p.value, reflect.Value).Type().String(); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
				$r = p.printValue($clone(p.value, reflect.Value), 118, 0); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 5; continue;
			/* } else { */ case 4:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
			/* } */ case 5:
		case 1:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		p.erroring = false;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.badVerb }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (116)) || (_1 === (118))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (116)) || (_1 === (118))) { */ case 2:
				p.fmt.fmt_boolean(v);
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBool }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var leading0x, p, sharp, v;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.fmt_integer(v, 16, false, "0123456789abcdefx");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtInteger = function(v, isSigned, verb) {
		var _1, isSigned, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; isSigned = $f.isSigned; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (100)) { $s = 3; continue; }
			/* */ if (_1 === (98)) { $s = 4; continue; }
			/* */ if (_1 === (111)) { $s = 5; continue; }
			/* */ if (_1 === (120)) { $s = 6; continue; }
			/* */ if (_1 === (88)) { $s = 7; continue; }
			/* */ if (_1 === (99)) { $s = 8; continue; }
			/* */ if (_1 === (113)) { $s = 9; continue; }
			/* */ if (_1 === (85)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV && !isSigned) {
					p.fmt0x64(v, true);
				} else {
					p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				}
				$s = 12; continue;
			/* } else if (_1 === (100)) { */ case 3:
				p.fmt.fmt_integer(v, 10, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (98)) { */ case 4:
				p.fmt.fmt_integer(v, 2, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (111)) { */ case 5:
				p.fmt.fmt_integer(v, 8, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (120)) { */ case 6:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789abcdefx");
				$s = 12; continue;
			/* } else if (_1 === (88)) { */ case 7:
				p.fmt.fmt_integer(v, 16, isSigned, "0123456789ABCDEFX");
				$s = 12; continue;
			/* } else if (_1 === (99)) { */ case 8:
				p.fmt.fmt_c(v);
				$s = 12; continue;
			/* } else if (_1 === (113)) { */ case 9:
				/* */ if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if ((v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) { */ case 13:
					p.fmt.fmt_qc(v);
					$s = 15; continue;
				/* } else { */ case 14:
					$r = p.badVerb(verb); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 15:
				$s = 12; continue;
			/* } else if (_1 === (85)) { */ case 10:
				p.fmt.fmt_unicode(v);
				$s = 12; continue;
			/* } else { */ case 11:
				$r = p.badVerb(verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtInteger }; } $f._1 = _1; $f.isSigned = isSigned; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtInteger = function(v, isSigned, verb) { return this.$val.fmtInteger(v, isSigned, verb); };
	pp.ptr.prototype.fmtFloat = function(v, size, verb) {
		var _1, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { $s = 3; continue; }
			/* */ if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { $s = 4; continue; }
			/* */ if (_1 === (70)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (118)) { */ case 2:
				p.fmt.fmt_float(v, size, 103, -1);
				$s = 7; continue;
			/* } else if ((_1 === (98)) || (_1 === (103)) || (_1 === (71))) { */ case 3:
				p.fmt.fmt_float(v, size, verb, -1);
				$s = 7; continue;
			/* } else if ((_1 === (102)) || (_1 === (101)) || (_1 === (69))) { */ case 4:
				p.fmt.fmt_float(v, size, verb, 6);
				$s = 7; continue;
			/* } else if (_1 === (70)) { */ case 5:
				p.fmt.fmt_float(v, size, 102, 6);
				$s = 7; continue;
			/* } else { */ case 6:
				$r = p.badVerb(verb); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtFloat }; } $f._1 = _1; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtFloat = function(v, size, verb) { return this.$val.fmtFloat(v, size, verb); };
	pp.ptr.prototype.fmtComplex = function(v, size, verb) {
		var _1, _q, _q$1, oldPlus, p, size, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _q$1 = $f._q$1; oldPlus = $f.oldPlus; p = $f.p; size = $f.size; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (118)) || (_1 === (98)) || (_1 === (103)) || (_1 === (71)) || (_1 === (102)) || (_1 === (70)) || (_1 === (101)) || (_1 === (69))) { */ case 2:
				oldPlus = p.fmt.fmtFlags.plus;
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
				$r = p.fmtFloat(v.$real, (_q = size / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				p.fmt.fmtFlags.plus = true;
				$r = p.fmtFloat(v.$imag, (_q$1 = size / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), verb); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("i)");
				p.fmt.fmtFlags.plus = oldPlus;
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtComplex }; } $f._1 = _1; $f._q = _q; $f._q$1 = _q$1; $f.oldPlus = oldPlus; $f.p = p; $f.size = size; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtComplex = function(v, size, verb) { return this.$val.fmtComplex(v, size, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _1, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if (_1 === (118)) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (118)) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					p.fmt.fmt_q(v);
				} else {
					p.fmt.fmt_s(v);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(v);
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_sx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_sx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(v);
				$s = 8; continue;
			/* } else { */ case 7:
				$r = p.badVerb(verb); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtString }; } $f._1 = _1; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typeString) {
		var _1, _i, _i$1, _r, _ref, _ref$1, c, c$1, i, i$1, p, typeString, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; c = $f.c; c$1 = $f.c$1; i = $f.i; i$1 = $f.i$1; p = $f.p; typeString = $f.typeString; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
			_1 = verb;
			/* */ if ((_1 === (118)) || (_1 === (100))) { $s = 2; continue; }
			/* */ if (_1 === (115)) { $s = 3; continue; }
			/* */ if (_1 === (120)) { $s = 4; continue; }
			/* */ if (_1 === (88)) { $s = 5; continue; }
			/* */ if (_1 === (113)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if ((_1 === (118)) || (_1 === (100))) { */ case 2:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(typeString);
					if (v === sliceType$2.nil) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					_ref = v;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						if (i > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						p.fmt0x64((new $Uint64(0, c)), true);
						_i++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					_ref$1 = v;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						if (i$1 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						p.fmt.fmt_integer((new $Uint64(0, c$1)), 10, false, "0123456789abcdefx");
						_i$1++;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 8; continue;
			/* } else if (_1 === (115)) { */ case 3:
				p.fmt.fmt_s(($bytesToString(v)));
				$s = 8; continue;
			/* } else if (_1 === (120)) { */ case 4:
				p.fmt.fmt_bx(v, "0123456789abcdefx");
				$s = 8; continue;
			/* } else if (_1 === (88)) { */ case 5:
				p.fmt.fmt_bx(v, "0123456789ABCDEFX");
				$s = 8; continue;
			/* } else if (_1 === (113)) { */ case 6:
				p.fmt.fmt_q(($bytesToString(v)));
				$s = 8; continue;
			/* } else { */ case 7:
				_r = reflect.ValueOf(v); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r, reflect.Value), verb, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtBytes }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i$1 = i$1; $f.p = p; $f.typeString = typeString; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtBytes = function(v, verb, typeString) { return this.$val.fmtBytes(v, verb, typeString); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _1, _2, _r, p, u, value, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; p = $f.p; u = $f.u; value = $f.value; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		u = 0;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if ((_1 === (18)) || (_1 === (19)) || (_1 === (21)) || (_1 === (22)) || (_1 === (23)) || (_1 === (26))) { */ case 2:
				u = $clone(value, reflect.Value).Pointer();
				$s = 4; continue;
			/* } else { */ case 3:
				$r = p.badVerb(verb); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
		case 1:
			_2 = verb;
			/* */ if (_2 === (118)) { $s = 7; continue; }
			/* */ if (_2 === (112)) { $s = 8; continue; }
			/* */ if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_2 === (118)) { */ case 7:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 12:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(40);
					_r = $clone(value, reflect.Value).Type().String(); /* */ $s = 15; case 15: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(")(");
					if (u === 0) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("nil");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), true);
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
					$s = 14; continue;
				/* } else { */ case 13:
					if (u === 0) {
						p.fmt.padString("<nil>");
					} else {
						p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
					}
				/* } */ case 14:
				$s = 11; continue;
			/* } else if (_2 === (112)) { */ case 8:
				p.fmt0x64((new $Uint64(0, u.constructor === Number ? u : 1)), !p.fmt.fmtFlags.sharp);
				$s = 11; continue;
			/* } else if ((_2 === (98)) || (_2 === (111)) || (_2 === (100)) || (_2 === (120)) || (_2 === (88))) { */ case 9:
				$r = p.fmtInteger((new $Uint64(0, u.constructor === Number ? u : 1)), false, verb); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 11; continue;
			/* } else { */ case 10:
				$r = p.badVerb(verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 11:
		case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.fmtPointer }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f.p = p; $f.u = u; $f.value = value; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var _r, arg, err, oldFlags, p, v, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; arg = $f.arg; err = $f.err; oldFlags = $f.oldFlags; p = $f.p; v = $f.v; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		err = $recover();
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			_r = reflect.ValueOf(arg); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			v = _r;
			if (($clone(v, reflect.Value).Kind() === 22) && $clone(v, reflect.Value).IsNil()) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
				$s = -1; return;
			}
			if (p.panicking) {
				$panic(err);
			}
			oldFlags = $clone(p.fmt.fmtFlags, fmtFlags);
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(PANIC=");
			p.panicking = true;
			$r = p.printArg(err, 118); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			p.panicking = false;
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
			fmtFlags.copy(p.fmt.fmtFlags, oldFlags);
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.catchPanic }; } $f._r = _r; $f.arg = arg; $f.err = err; $f.oldFlags = oldFlags; $f.p = p; $f.v = v; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.handleMethods = function(verb) {
		var _1, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, formatter, handled, ok, ok$1, p, stringer, v, v$1, verb, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; formatter = $f.formatter; handled = $f.handled; ok = $f.ok; ok$1 = $f.ok$1; p = $f.p; stringer = $f.stringer; v = $f.v; v$1 = $f.v$1; verb = $f.verb; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		handled = false;
		p = this;
		if (p.erroring) {
			$s = -1; return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true);
		formatter = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			handled = true;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			$r = formatter.Format(p, verb); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return handled;
		/* } */ case 2:
		/* */ if (p.fmt.fmtFlags.sharpV) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (p.fmt.fmtFlags.sharpV) { */ case 4:
			_tuple$1 = $assertType(p.arg, GoStringer, true);
			stringer = _tuple$1[0];
			ok$1 = _tuple$1[1];
			/* */ if (ok$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (ok$1) { */ case 7:
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				_r = stringer.GoString(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return handled;
			/* } */ case 8:
			$s = 6; continue;
		/* } else { */ case 5:
				_1 = verb;
				/* */ if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if ((_1 === (118)) || (_1 === (115)) || (_1 === (120)) || (_1 === (88)) || (_1 === (113))) { */ case 12:
					_ref = p.arg;
					/* */ if ($assertType(_ref, $error, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref, Stringer, true)[1]) { $s = 15; continue; }
					/* */ $s = 16; continue;
					/* if ($assertType(_ref, $error, true)[1]) { */ case 14:
						v = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$1 = v.Error(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$1, verb); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } else if ($assertType(_ref, Stringer, true)[1]) { */ case 15:
						v$1 = _ref;
						handled = true;
						$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
						_r$2 = v$1.String(); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						$r = p.fmtString(_r$2, verb); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = -1; return handled;
					/* } */ case 16:
				/* } */ case 13:
			case 11:
		/* } */ case 6:
		handled = false;
		$s = -1; return handled;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  handled; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: pp.ptr.prototype.handleMethods }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.formatter = formatter; $f.handled = handled; $f.ok = ok; $f.ok$1 = ok$1; $f.p = p; $f.stringer = stringer; $f.v = v; $f.v$1 = v$1; $f.verb = verb; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	pp.prototype.handleMethods = function(verb) { return this.$val.handleMethods(verb); };
	pp.ptr.prototype.printArg = function(arg, verb) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, arg, f, f$1, f$10, f$11, f$12, f$13, f$14, f$15, f$16, f$17, f$18, f$19, f$2, f$3, f$4, f$5, f$6, f$7, f$8, f$9, p, verb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; arg = $f.arg; f = $f.f; f$1 = $f.f$1; f$10 = $f.f$10; f$11 = $f.f$11; f$12 = $f.f$12; f$13 = $f.f$13; f$14 = $f.f$14; f$15 = $f.f$15; f$16 = $f.f$16; f$17 = $f.f$17; f$18 = $f.f$18; f$19 = $f.f$19; f$2 = $f.f$2; f$3 = $f.f$3; f$4 = $f.f$4; f$5 = $f.f$5; f$6 = $f.f$6; f$7 = $f.f$7; f$8 = $f.f$8; f$9 = $f.f$9; p = $f.p; verb = $f.verb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType.nil, 0, 0);
		/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 1:
				_1 = verb;
				/* */ if ((_1 === (84)) || (_1 === (118))) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if ((_1 === (84)) || (_1 === (118))) { */ case 4:
					p.fmt.padString("<nil>");
					$s = 6; continue;
				/* } else { */ case 5:
					$r = p.badVerb(verb); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
			case 3:
			$s = -1; return;
		/* } */ case 2:
			_2 = verb;
			/* */ if (_2 === (84)) { $s = 9; continue; }
			/* */ if (_2 === (112)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_2 === (84)) { */ case 9:
				_r = reflect.TypeOf(arg).String(); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$r = p.fmt.fmt_s(_r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } else if (_2 === (112)) { */ case 10:
				_r$1 = reflect.ValueOf(arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$r = p.fmtPointer($clone(_r$1, reflect.Value), 112); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 11:
		case 8:
		_ref = arg;
		/* */ if ($assertType(_ref, $Bool, true)[1]) { $s = 16; continue; }
		/* */ if ($assertType(_ref, $Float32, true)[1]) { $s = 17; continue; }
		/* */ if ($assertType(_ref, $Float64, true)[1]) { $s = 18; continue; }
		/* */ if ($assertType(_ref, $Complex64, true)[1]) { $s = 19; continue; }
		/* */ if ($assertType(_ref, $Complex128, true)[1]) { $s = 20; continue; }
		/* */ if ($assertType(_ref, $Int, true)[1]) { $s = 21; continue; }
		/* */ if ($assertType(_ref, $Int8, true)[1]) { $s = 22; continue; }
		/* */ if ($assertType(_ref, $Int16, true)[1]) { $s = 23; continue; }
		/* */ if ($assertType(_ref, $Int32, true)[1]) { $s = 24; continue; }
		/* */ if ($assertType(_ref, $Int64, true)[1]) { $s = 25; continue; }
		/* */ if ($assertType(_ref, $Uint, true)[1]) { $s = 26; continue; }
		/* */ if ($assertType(_ref, $Uint8, true)[1]) { $s = 27; continue; }
		/* */ if ($assertType(_ref, $Uint16, true)[1]) { $s = 28; continue; }
		/* */ if ($assertType(_ref, $Uint32, true)[1]) { $s = 29; continue; }
		/* */ if ($assertType(_ref, $Uint64, true)[1]) { $s = 30; continue; }
		/* */ if ($assertType(_ref, $Uintptr, true)[1]) { $s = 31; continue; }
		/* */ if ($assertType(_ref, $String, true)[1]) { $s = 32; continue; }
		/* */ if ($assertType(_ref, sliceType$2, true)[1]) { $s = 33; continue; }
		/* */ if ($assertType(_ref, reflect.Value, true)[1]) { $s = 34; continue; }
		/* */ $s = 35; continue;
		/* if ($assertType(_ref, $Bool, true)[1]) { */ case 16:
			f = _ref.$val;
			$r = p.fmtBool(f, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float32, true)[1]) { */ case 17:
			f$1 = _ref.$val;
			$r = p.fmtFloat((f$1), 32, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Float64, true)[1]) { */ case 18:
			f$2 = _ref.$val;
			$r = p.fmtFloat(f$2, 64, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex64, true)[1]) { */ case 19:
			f$3 = _ref.$val;
			$r = p.fmtComplex((new $Complex128(f$3.$real, f$3.$imag)), 64, verb); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Complex128, true)[1]) { */ case 20:
			f$4 = _ref.$val;
			$r = p.fmtComplex(f$4, 128, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int, true)[1]) { */ case 21:
			f$5 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$5)), true, verb); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int8, true)[1]) { */ case 22:
			f$6 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$6)), true, verb); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int16, true)[1]) { */ case 23:
			f$7 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$7)), true, verb); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int32, true)[1]) { */ case 24:
			f$8 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$8)), true, verb); /* */ $s = 45; case 45: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Int64, true)[1]) { */ case 25:
			f$9 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(f$9.$high, f$9.$low)), true, verb); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint, true)[1]) { */ case 26:
			f$10 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$10)), false, verb); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint8, true)[1]) { */ case 27:
			f$11 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$11)), false, verb); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint16, true)[1]) { */ case 28:
			f$12 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$12)), false, verb); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint32, true)[1]) { */ case 29:
			f$13 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$13)), false, verb); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uint64, true)[1]) { */ case 30:
			f$14 = _ref.$val;
			$r = p.fmtInteger(f$14, false, verb); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $Uintptr, true)[1]) { */ case 31:
			f$15 = _ref.$val;
			$r = p.fmtInteger((new $Uint64(0, f$15.constructor === Number ? f$15 : 1)), false, verb); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, $String, true)[1]) { */ case 32:
			f$16 = _ref.$val;
			$r = p.fmtString(f$16, verb); /* */ $s = 53; case 53: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, sliceType$2, true)[1]) { */ case 33:
			f$17 = _ref.$val;
			$r = p.fmtBytes(f$17, verb, "[]byte"); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else if ($assertType(_ref, reflect.Value, true)[1]) { */ case 34:
			f$18 = _ref.$val;
			/* */ if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { $s = 55; continue; }
			/* */ $s = 56; continue;
			/* if ($clone(f$18, reflect.Value).IsValid() && $clone(f$18, reflect.Value).CanInterface()) { */ case 55:
				_r$2 = $clone(f$18, reflect.Value).Interface(); /* */ $s = 57; case 57: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				p.arg = _r$2;
				_r$3 = p.handleMethods(verb); /* */ $s = 60; case 60: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				/* */ if (_r$3) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (_r$3) { */ case 58:
					$s = -1; return;
				/* } */ case 59:
			/* } */ case 56:
			$r = p.printValue($clone(f$18, reflect.Value), verb, 0); /* */ $s = 61; case 61: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 36; continue;
		/* } else { */ case 35:
			f$19 = _ref;
			_r$4 = p.handleMethods(verb); /* */ $s = 64; case 64: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 62; continue; }
			/* */ $s = 63; continue;
			/* if (!_r$4) { */ case 62:
				_r$5 = reflect.ValueOf(f$19); /* */ $s = 65; case 65: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = p.printValue($clone(_r$5, reflect.Value), verb, 0); /* */ $s = 66; case 66: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 63:
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printArg }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f.arg = arg; $f.f = f; $f.f$1 = f$1; $f.f$10 = f$10; $f.f$11 = f$11; $f.f$12 = f$12; $f.f$13 = f$13; $f.f$14 = f$14; $f.f$15 = f$15; $f.f$16 = f$16; $f.f$17 = f$17; $f.f$18 = f$18; $f.f$19 = f$19; $f.f$2 = f$2; $f.f$3 = f$3; $f.f$4 = f$4; $f.f$5 = f$5; $f.f$6 = f$6; $f.f$7 = f$7; $f.f$8 = f$8; $f.f$9 = f$9; $f.p = p; $f.verb = verb; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printArg = function(arg, verb) { return this.$val.printArg(arg, verb); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _1, _2, _3, _4, _arg, _arg$1, _arg$2, _i, _i$1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$21, _r$22, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, a, bytes, depth, f, i, i$1, i$2, i$3, i$4, key, keys, name, p, t, value, value$1, verb, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; a = $f.a; bytes = $f.bytes; depth = $f.depth; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; key = $f.key; keys = $f.keys; name = $f.name; p = $f.p; t = $f.t; value = $f.value; value$1 = $f.value$1; verb = $f.verb; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (depth > 0 && $clone(value, reflect.Value).IsValid() && $clone(value, reflect.Value).CanInterface()) { */ case 1:
			_r = $clone(value, reflect.Value).Interface(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p.arg = _r;
			_r$1 = p.handleMethods(verb); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_r$1) { */ case 4:
				$s = -1; return;
			/* } */ case 5:
		/* } */ case 2:
		p.arg = $ifaceNil;
		p.value = value;
			f = value;
			_1 = $clone(value, reflect.Value).Kind();
			/* */ if (_1 === (0)) { $s = 8; continue; }
			/* */ if (_1 === (1)) { $s = 9; continue; }
			/* */ if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { $s = 10; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { $s = 11; continue; }
			/* */ if (_1 === (13)) { $s = 12; continue; }
			/* */ if (_1 === (14)) { $s = 13; continue; }
			/* */ if (_1 === (15)) { $s = 14; continue; }
			/* */ if (_1 === (16)) { $s = 15; continue; }
			/* */ if (_1 === (24)) { $s = 16; continue; }
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ if (_1 === (20)) { $s = 19; continue; }
			/* */ if ((_1 === (17)) || (_1 === (23))) { $s = 20; continue; }
			/* */ if (_1 === (22)) { $s = 21; continue; }
			/* */ if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { $s = 22; continue; }
			/* */ $s = 23; continue;
			/* if (_1 === (0)) { */ case 8:
				/* */ if (depth === 0) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if (depth === 0) { */ case 25:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<invalid reflect.Value>");
					$s = 27; continue;
				/* } else { */ case 26:
						_2 = verb;
						/* */ if (_2 === (118)) { $s = 29; continue; }
						/* */ $s = 30; continue;
						/* if (_2 === (118)) { */ case 29:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
							$s = 31; continue;
						/* } else { */ case 30:
							$r = p.badVerb(verb); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 31:
					case 28:
				/* } */ case 27:
				$s = 24; continue;
			/* } else if (_1 === (1)) { */ case 9:
				$r = p.fmtBool($clone(f, reflect.Value).Bool(), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) { */ case 10:
				$r = p.fmtInteger(((x = $clone(f, reflect.Value).Int(), new $Uint64(x.$high, x.$low))), true, verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) { */ case 11:
				$r = p.fmtInteger($clone(f, reflect.Value).Uint(), false, verb); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (13)) { */ case 12:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 32, verb); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (14)) { */ case 13:
				$r = p.fmtFloat($clone(f, reflect.Value).Float(), 64, verb); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (15)) { */ case 14:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 64, verb); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (16)) { */ case 15:
				$r = p.fmtComplex($clone(f, reflect.Value).Complex(), 128, verb); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (24)) { */ case 16:
				_r$2 = $clone(f, reflect.Value).String(); /* */ $s = 40; case 40: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$r = p.fmtString(_r$2, verb); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if (_1 === (21)) { */ case 17:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 42:
					_r$3 = $clone(f, reflect.Value).Type().String(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$3); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if ($clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					$s = 44; continue;
				/* } else { */ case 43:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("map[");
				/* } */ case 44:
				_r$4 = $clone(f, reflect.Value).MapKeys(); /* */ $s = 47; case 47: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				keys = _r$4;
				_ref = keys;
				_i = 0;
				/* while (true) { */ case 48:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 49; continue; }
					i = _i;
					key = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (i > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					$r = p.printValue($clone(key, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
					_r$5 = $clone(f, reflect.Value).MapIndex($clone(key, reflect.Value)); /* */ $s = 51; case 51: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$5, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 52; case 52: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 48; continue; case 49:
				if (p.fmt.fmtFlags.sharpV) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				} else {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				}
				$s = 24; continue;
			/* } else if (_1 === (25)) { */ case 18:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 53; continue; }
				/* */ $s = 54; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 53:
					_r$6 = $clone(f, reflect.Value).Type().String(); /* */ $s = 55; case 55: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$6); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 54:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
				i$1 = 0;
				/* while (true) { */ case 57:
					/* if (!(i$1 < $clone(f, reflect.Value).NumField())) { break; } */ if(!(i$1 < $clone(f, reflect.Value).NumField())) { $s = 58; continue; }
					if (i$1 > 0) {
						if (p.fmt.fmtFlags.sharpV) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						} else {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
					}
					/* */ if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { $s = 59; continue; }
					/* */ $s = 60; continue;
					/* if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) { */ case 59:
						_r$7 = $clone(f, reflect.Value).Type().Field(i$1); /* */ $s = 61; case 61: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						name = _r$7.Name;
						if (!(name === "")) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(name);
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(58);
						}
					/* } */ case 60:
					_r$8 = getField($clone(f, reflect.Value), i$1); /* */ $s = 62; case 62: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					$r = p.printValue($clone(_r$8, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 63; case 63: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = i$1 + (1) >> 0;
				/* } */ $s = 57; continue; case 58:
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
				$s = 24; continue;
			/* } else if (_1 === (20)) { */ case 19:
				_r$9 = $clone(f, reflect.Value).Elem(); /* */ $s = 64; case 64: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				value$1 = _r$9;
				/* */ if (!$clone(value$1, reflect.Value).IsValid()) { $s = 65; continue; }
				/* */ $s = 66; continue;
				/* if (!$clone(value$1, reflect.Value).IsValid()) { */ case 65:
					/* */ if (p.fmt.fmtFlags.sharpV) { $s = 68; continue; }
					/* */ $s = 69; continue;
					/* if (p.fmt.fmtFlags.sharpV) { */ case 68:
						_r$10 = $clone(f, reflect.Value).Type().String(); /* */ $s = 71; case 71: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$10); /* */ $s = 72; case 72: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = 70; continue;
					/* } else { */ case 69:
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					/* } */ case 70:
					$s = 67; continue;
				/* } else { */ case 66:
					$r = p.printValue($clone(value$1, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 73; case 73: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 67:
				$s = 24; continue;
			/* } else if ((_1 === (17)) || (_1 === (23))) { */ case 20:
					_3 = verb;
					/* */ if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { $s = 75; continue; }
					/* */ $s = 76; continue;
					/* if ((_3 === (115)) || (_3 === (113)) || (_3 === (120)) || (_3 === (88))) { */ case 75:
						t = $clone(f, reflect.Value).Type();
						_r$11 = t.Elem(); /* */ $s = 79; case 79: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						_r$12 = _r$11.Kind(); /* */ $s = 80; case 80: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 8) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$12 === 8) { */ case 77:
							bytes = sliceType$2.nil;
							/* */ if ($clone(f, reflect.Value).Kind() === 23) { $s = 81; continue; }
							/* */ if ($clone(f, reflect.Value).CanAddr()) { $s = 82; continue; }
							/* */ $s = 83; continue;
							/* if ($clone(f, reflect.Value).Kind() === 23) { */ case 81:
								_r$13 = $clone(f, reflect.Value).Bytes(); /* */ $s = 85; case 85: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
								bytes = _r$13;
								$s = 84; continue;
							/* } else if ($clone(f, reflect.Value).CanAddr()) { */ case 82:
								_r$14 = $clone(f, reflect.Value).Slice(0, $clone(f, reflect.Value).Len()); /* */ $s = 86; case 86: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
								_r$15 = $clone(_r$14, reflect.Value).Bytes(); /* */ $s = 87; case 87: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
								bytes = _r$15;
								$s = 84; continue;
							/* } else { */ case 83:
								bytes = $makeSlice(sliceType$2, $clone(f, reflect.Value).Len());
								_ref$1 = bytes;
								_i$1 = 0;
								/* while (true) { */ case 88:
									/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 89; continue; }
									i$2 = _i$1;
									_r$16 = $clone(f, reflect.Value).Index(i$2); /* */ $s = 90; case 90: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
									_r$17 = $clone(_r$16, reflect.Value).Uint(); /* */ $s = 91; case 91: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
									((i$2 < 0 || i$2 >= bytes.$length) ? ($throwRuntimeError("index out of range"), undefined) : bytes.$array[bytes.$offset + i$2] = ((_r$17.$low << 24 >>> 24)));
									_i$1++;
								/* } */ $s = 88; continue; case 89:
							/* } */ case 84:
							_arg = bytes;
							_arg$1 = verb;
							_r$18 = t.String(); /* */ $s = 92; case 92: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
							_arg$2 = _r$18;
							$r = p.fmtBytes(_arg, _arg$1, _arg$2); /* */ $s = 93; case 93: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 78:
					/* } */ case 76:
				case 74:
				/* */ if (p.fmt.fmtFlags.sharpV) { $s = 94; continue; }
				/* */ $s = 95; continue;
				/* if (p.fmt.fmtFlags.sharpV) { */ case 94:
					_r$19 = $clone(f, reflect.Value).Type().String(); /* */ $s = 97; case 97: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$19); /* */ $s = 98; case 98: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					if (($clone(f, reflect.Value).Kind() === 23) && $clone(f, reflect.Value).IsNil()) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(nil)");
						$s = -1; return;
					}
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(123);
					i$3 = 0;
					/* while (true) { */ case 99:
						/* if (!(i$3 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$3 < $clone(f, reflect.Value).Len())) { $s = 100; continue; }
						if (i$3 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
						}
						_r$20 = $clone(f, reflect.Value).Index(i$3); /* */ $s = 101; case 101: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$20, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$3 = i$3 + (1) >> 0;
					/* } */ $s = 99; continue; case 100:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(125);
					$s = 96; continue;
				/* } else { */ case 95:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(91);
					i$4 = 0;
					/* while (true) { */ case 103:
						/* if (!(i$4 < $clone(f, reflect.Value).Len())) { break; } */ if(!(i$4 < $clone(f, reflect.Value).Len())) { $s = 104; continue; }
						if (i$4 > 0) {
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
						}
						_r$21 = $clone(f, reflect.Value).Index(i$4); /* */ $s = 105; case 105: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						$r = p.printValue($clone(_r$21, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 106; case 106: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$4 = i$4 + (1) >> 0;
					/* } */ $s = 103; continue; case 104:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(93);
				/* } */ case 96:
				$s = 24; continue;
			/* } else if (_1 === (22)) { */ case 21:
				/* */ if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if ((depth === 0) && !(($clone(f, reflect.Value).Pointer() === 0))) { */ case 107:
						_r$22 = $clone(f, reflect.Value).Elem(); /* */ $s = 110; case 110: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						a = _r$22;
						_4 = $clone(a, reflect.Value).Kind();
						/* */ if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { $s = 111; continue; }
						/* */ $s = 112; continue;
						/* if ((_4 === (17)) || (_4 === (23)) || (_4 === (25)) || (_4 === (21))) { */ case 111:
							(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(38);
							$r = p.printValue($clone(a, reflect.Value), verb, depth + 1 >> 0); /* */ $s = 113; case 113: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 112:
					case 109:
				/* } */ case 108:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else if ((_1 === (18)) || (_1 === (19)) || (_1 === (26))) { */ case 22:
				$r = p.fmtPointer($clone(f, reflect.Value), verb); /* */ $s = 115; case 115: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 24; continue;
			/* } else { */ case 23:
				$r = p.unknownType($clone(f, reflect.Value)); /* */ $s = 116; case 116: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 24:
		case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.printValue }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f.a = a; $f.bytes = bytes; $f.depth = depth; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.key = key; $f.keys = keys; $f.name = name; $f.p = p; $f.t = t; $f.value = value; $f.value$1 = value$1; $f.verb = verb; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _1, _r, _tuple, a, argNum, isInt, n, n$1, newArgNum, num, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; argNum = $f.argNum; isInt = $f.isInt; n = $f.n; n$1 = $f.n$1; newArgNum = $f.newArgNum; num = $f.num; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		/* */ if (argNum < a.$length) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (argNum < a.$length) { */ case 1:
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), $Int, true);
			num = _tuple[0];
			isInt = _tuple[1];
			/* */ if (!isInt) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!isInt) { */ case 3:
					_r = reflect.ValueOf(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum])); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					v = _r;
					_1 = $clone(v, reflect.Value).Kind();
					if ((_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6))) {
						n = $clone(v, reflect.Value).Int();
						if ((x = (new $Int64(0, (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0)))), (x.$high === n.$high && x.$low === n.$low))) {
							num = (((n.$low + ((n.$high >> 31) * 4294967296)) >> 0));
							isInt = true;
						}
					} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (12))) {
						n$1 = $clone(v, reflect.Value).Uint();
						if ((x$1 = (new $Int64(n$1.$high, n$1.$low)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0))) && (x$2 = (new $Uint64(0, ((n$1.$low >> 0)))), (x$2.$high === n$1.$high && x$2.$low === n$1.$low))) {
							num = ((n$1.$low >> 0));
							isInt = true;
						}
					}
				case 5:
			/* } */ case 4:
			newArgNum = argNum + 1 >> 0;
			if (tooLarge(num)) {
				num = 0;
				isInt = false;
			}
		/* } */ case 2:
		$s = -1; return [num, isInt, newArgNum];
		/* */ } return; } if ($f === undefined) { $f = { $blk: intFromArg }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.argNum = argNum; $f.isInt = isInt; $f.n = n; $f.n$1 = n$1; $f.newArgNum = newArgNum; $f.num = num; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, format, i, index, newi, ok, ok$1, wid, width;
		index = 0;
		wid = 0;
		ok = false;
		if (format.length < 3) {
			_tmp = 0;
			_tmp$1 = 1;
			_tmp$2 = false;
			index = _tmp;
			wid = _tmp$1;
			ok = _tmp$2;
			return [index, wid, ok];
		}
		i = 1;
		while (true) {
			if (!(i < format.length)) { break; }
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i);
				width = _tuple[0];
				ok$1 = _tuple[1];
				newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp$3 = 0;
					_tmp$4 = i + 1 >> 0;
					_tmp$5 = false;
					index = _tmp$3;
					wid = _tmp$4;
					ok = _tmp$5;
					return [index, wid, ok];
				}
				_tmp$6 = width - 1 >> 0;
				_tmp$7 = i + 1 >> 0;
				_tmp$8 = true;
				index = _tmp$6;
				wid = _tmp$7;
				ok = _tmp$8;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$9 = 0;
		_tmp$10 = 1;
		_tmp$11 = false;
		index = _tmp$9;
		wid = _tmp$10;
		ok = _tmp$11;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, argNum, format, found, i, index, newArgNum, newi, numArgs, ok, p, wid;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum;
			_tmp$1 = i;
			_tmp$2 = false;
			newArgNum = _tmp;
			newi = _tmp$1;
			found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber($substring(format, i));
		index = _tuple[0];
		wid = _tuple[1];
		ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index;
			_tmp$4 = i + wid >> 0;
			_tmp$5 = true;
			newArgNum = _tmp$3;
			newi = _tmp$4;
			found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum;
		_tmp$7 = i + wid >> 0;
		_tmp$8 = ok;
		newArgNum = _tmp$6;
		newi = _tmp$7;
		found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.badArgNum = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(BADINDEX)");
	};
	pp.prototype.badArgNum = function(verb) { return this.$val.badArgNum(verb); };
	pp.ptr.prototype.missingArg = function(verb) {
		var p, verb;
		p = this;
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!");
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteRune(verb);
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("(MISSING)");
	};
	pp.prototype.missingArg = function(verb) { return this.$val.missingArg(verb); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _1, _i, _r, _r$1, _r$2, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, a, afterIndex, arg, argNum, c, end, format, i, i$1, lasti, p, verb, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; a = $f.a; afterIndex = $f.afterIndex; arg = $f.arg; argNum = $f.argNum; c = $f.c; end = $f.end; format = $f.format; i = $f.i; i$1 = $f.i$1; lasti = $f.lasti; p = $f.p; verb = $f.verb; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 2; continue; }
			p.goodArgNum = true;
			lasti = i;
			while (true) {
				if (!(i < end && !((format.charCodeAt(i) === 37)))) { break; }
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString($substring(format, lasti, i));
			}
			if (i >= end) {
				/* break; */ $s = 2; continue;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			/* while (true) { */ case 3:
				/* if (!(i < end)) { break; } */ if(!(i < end)) { $s = 4; continue; }
				c = format.charCodeAt(i);
					_1 = c;
					/* */ if (_1 === (35)) { $s = 6; continue; }
					/* */ if (_1 === (48)) { $s = 7; continue; }
					/* */ if (_1 === (43)) { $s = 8; continue; }
					/* */ if (_1 === (45)) { $s = 9; continue; }
					/* */ if (_1 === (32)) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (_1 === (35)) { */ case 6:
						p.fmt.fmtFlags.sharp = true;
						$s = 12; continue;
					/* } else if (_1 === (48)) { */ case 7:
						p.fmt.fmtFlags.zero = !p.fmt.fmtFlags.minus;
						$s = 12; continue;
					/* } else if (_1 === (43)) { */ case 8:
						p.fmt.fmtFlags.plus = true;
						$s = 12; continue;
					/* } else if (_1 === (45)) { */ case 9:
						p.fmt.fmtFlags.minus = true;
						p.fmt.fmtFlags.zero = false;
						$s = 12; continue;
					/* } else if (_1 === (32)) { */ case 10:
						p.fmt.fmtFlags.space = true;
						$s = 12; continue;
					/* } else { */ case 11:
						/* */ if (97 <= c && c <= 122 && argNum < a.$length) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (97 <= c && c <= 122 && argNum < a.$length) { */ case 13:
							if (c === 118) {
								p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
								p.fmt.fmtFlags.sharp = false;
								p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
								p.fmt.fmtFlags.plus = false;
							}
							$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), ((c >> 0))); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							argNum = argNum + (1) >> 0;
							i = i + (1) >> 0;
							/* continue formatLoop; */ $s = 1; continue s;
						/* } */ case 14:
						/* break simpleFormat; */ $s = 4; continue s;
					/* } */ case 12:
				case 5:
				i = i + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			_tuple = p.argNumber(argNum, format, i, a.$length);
			argNum = _tuple[0];
			i = _tuple[1];
			afterIndex = _tuple[2];
			/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 16:
				i = i + (1) >> 0;
				_r = intFromArg(a, argNum); /* */ $s = 19; case 19: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				p.fmt.wid = _tuple$1[0];
				p.fmt.fmtFlags.widPresent = _tuple$1[1];
				argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADWIDTH)");
				}
				if (p.fmt.wid < 0) {
					p.fmt.wid = -p.fmt.wid;
					p.fmt.fmtFlags.minus = true;
					p.fmt.fmtFlags.zero = false;
				}
				afterIndex = false;
				$s = 18; continue;
			/* } else { */ case 17:
				_tuple$2 = parsenum(format, i, end);
				p.fmt.wid = _tuple$2[0];
				p.fmt.fmtFlags.widPresent = _tuple$2[1];
				i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			/* } */ case 18:
			/* */ if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) { */ case 20:
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$3[0];
				i = _tuple$3[1];
				afterIndex = _tuple$3[2];
				/* */ if (i < end && (format.charCodeAt(i) === 42)) { $s = 22; continue; }
				/* */ $s = 23; continue;
				/* if (i < end && (format.charCodeAt(i) === 42)) { */ case 22:
					i = i + (1) >> 0;
					_r$1 = intFromArg(a, argNum); /* */ $s = 25; case 25: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$4 = _r$1;
					p.fmt.prec = _tuple$4[0];
					p.fmt.fmtFlags.precPresent = _tuple$4[1];
					argNum = _tuple$4[2];
					if (p.fmt.prec < 0) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = false;
					}
					if (!p.fmt.fmtFlags.precPresent) {
						(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(BADPREC)");
					}
					afterIndex = false;
					$s = 24; continue;
				/* } else { */ case 23:
					_tuple$5 = parsenum(format, i, end);
					p.fmt.prec = _tuple$5[0];
					p.fmt.fmtFlags.precPresent = _tuple$5[1];
					i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				/* } */ case 24:
			/* } */ case 21:
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length);
				argNum = _tuple$6[0];
				i = _tuple$6[1];
				afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(NOVERB)");
				/* break; */ $s = 2; continue;
			}
			_tuple$7 = utf8.DecodeRuneInString($substring(format, i));
			verb = _tuple$7[0];
			w = _tuple$7[1];
			i = i + (w) >> 0;
				/* */ if ((verb === 37)) { $s = 27; continue; }
				/* */ if (!p.goodArgNum) { $s = 28; continue; }
				/* */ if (argNum >= a.$length) { $s = 29; continue; }
				/* */ if ((verb === 118)) { $s = 30; continue; }
				/* */ $s = 31; continue;
				/* if ((verb === 37)) { */ case 27:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(37);
					$s = 32; continue;
				/* } else if (!p.goodArgNum) { */ case 28:
					p.badArgNum(verb);
					$s = 32; continue;
				/* } else if (argNum >= a.$length) { */ case 29:
					p.missingArg(verb);
					$s = 32; continue;
				/* } else if ((verb === 118)) { */ case 30:
					p.fmt.fmtFlags.sharpV = p.fmt.fmtFlags.sharp;
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.plusV = p.fmt.fmtFlags.plus;
					p.fmt.fmtFlags.plus = false;
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
					$s = 32; continue;
				/* } else { */ case 31:
					$r = p.printArg(((argNum < 0 || argNum >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + argNum]), verb); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					argNum = argNum + (1) >> 0;
				/* } */ case 32:
			case 26:
		/* } */ $s = 1; continue; case 2:
		/* */ if (!p.reordered && argNum < a.$length) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (!p.reordered && argNum < a.$length) { */ case 35:
			p.fmt.clearflags();
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("%!(EXTRA ");
			_ref = $subslice(a, argNum);
			_i = 0;
			/* while (true) { */ case 37:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 38; continue; }
				i$1 = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (i$1 > 0) {
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(", ");
				}
				/* */ if ($interfaceIsEqual(arg, $ifaceNil)) { $s = 39; continue; }
				/* */ $s = 40; continue;
				/* if ($interfaceIsEqual(arg, $ifaceNil)) { */ case 39:
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString("<nil>");
					$s = 41; continue;
				/* } else { */ case 40:
					_r$2 = reflect.TypeOf(arg).String(); /* */ $s = 42; case 42: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					$r = (p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteString(_r$2); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(61);
					$r = p.printArg(arg, 118); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 41:
				_i++;
			/* } */ $s = 37; continue; case 38:
			(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(41);
		/* } */ case 36:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintf }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.a = a; $f.afterIndex = afterIndex; $f.arg = arg; $f.argNum = argNum; $f.c = c; $f.end = end; $f.format = format; $f.i = i; $f.i$1 = i$1; $f.lasti = lasti; $f.p = p; $f.verb = verb; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a) {
		var _i, _r, _ref, _v, a, arg, argNum, isString, p, prevString, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _v = $f._v; a = $f.a; arg = $f.arg; argNum = $f.argNum; isString = $f.isString; p = $f.p; prevString = $f.prevString; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		prevString = false;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(!($interfaceIsEqual(arg, $ifaceNil)))) { _v = false; $s = 3; continue s; }
			_r = reflect.TypeOf(arg).Kind(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r === 24; case 3:
			isString = _v;
			if (argNum > 0 && !isString && !prevString) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			prevString = isString;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrint }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._v = _v; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.isString = isString; $f.p = p; $f.prevString = prevString; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrint = function(a) { return this.$val.doPrint(a); };
	pp.ptr.prototype.doPrintln = function(a) {
		var _i, _ref, a, arg, argNum, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; arg = $f.arg; argNum = $f.argNum; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_ref = a;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			argNum = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (argNum > 0) {
				(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(32);
			}
			$r = p.printArg(arg, 118); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		(p.$ptr_buf || (p.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p))).WriteByte(10);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pp.ptr.prototype.doPrintln }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.arg = arg; $f.argNum = argNum; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	pp.prototype.doPrintln = function(a) { return this.$val.doPrintln(a); };
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, buf, err, n, s;
		n = 0;
		err = $ifaceNil;
		s = this;
		_tmp = 0;
		_tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune");
		n = _tmp;
		err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _r, _tuple, err, r, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		s = this;
		if (s.atEOF || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			$s = -1; return [r, size, err];
		}
		_r = s.rs.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		size = _tuple[1];
		err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			if (s.ssave.nlIsEnd && (r === 10)) {
				s.atEOF = true;
			}
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.ReadRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok, s, wid;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0;
			_tmp$1 = false;
			wid = _tmp;
			ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid;
		_tmp$3 = true;
		wid = _tmp$2;
		ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _r, _tuple, err, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		s = this;
		_r = s.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				$s = -1; return r;
			}
			s.error(err);
		}
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.getRune }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.rs.UnreadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.atEOF = false;
		s.count = s.count - (1) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.UnreadRune }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var err, s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var _r, err, f, s, skipSpace, tok, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; f = $f.f; s = $f.s; skipSpace = $f.skipSpace; tok = $f.tok; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		tok = sliceType$2.nil;
		err[0] = $ifaceNil;
		s = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true);
				se = $clone(_tuple[0], scanError);
				ok = _tuple[1];
				if (ok) {
					err[0] = se.err;
				} else {
					$panic(e);
				}
			}
		}; })(err), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		_r = s.token(skipSpace, f); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		tok = _r;
		$s = -1; return [tok, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [tok, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: ss.ptr.prototype.Token }; } $f._r = _r; $f.err = err; $f.f = f; $f.s = s; $f.skipSpace = skipSpace; $f.tok = tok; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, r, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = ((r << 16 >>> 16));
		_ref = space;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), arrayType$1);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		var r;
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.skipSpace(false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.SkipSpace }; } $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.ptr.prototype.free = function(old) {
		var old, s;
		s = this;
		if (old.validSave) {
			ssave.copy(s.ssave, old);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rs = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var _r, _r$1, _r$2, _v, r, s, stopAtNewline, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _v = $f._v; r = $f.r; s = $f.s; stopAtNewline = $f.stopAtNewline; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* while (true) { */ case 1:
			_r = s.getRune(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				$s = -1; return;
			}
			if (!(r === 13)) { _v = false; $s = 6; continue s; }
			_r$1 = s.peek("\n"); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_v = _r$1; case 6:
			/* */ if (_v) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_v) { */ case 4:
				/* continue; */ $s = 1; continue;
			/* } */ case 5:
			/* */ if (r === 10) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (r === 10) { */ case 8:
				if (stopAtNewline) {
					/* break; */ $s = 2; continue;
				}
				if (s.ssave.nlIsSpace) {
					/* continue; */ $s = 1; continue;
				}
				s.errorString("unexpected newline");
				$s = -1; return;
			/* } */ case 9:
			/* */ if (!isSpace(r)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (!isSpace(r)) { */ case 10:
				_r$2 = s.UnreadRune(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 2; continue;
			/* } */ case 11:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.skipSpace }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._v = _v; $f.r = r; $f.s = s; $f.stopAtNewline = stopAtNewline; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var _r, _r$1, _r$2, f, r, s, skipSpace, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; f = $f.f; r = $f.r; s = $f.s; skipSpace = $f.skipSpace; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		/* */ if (skipSpace) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (skipSpace) { */ case 1:
			$r = s.skipSpace(false); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		/* while (true) { */ case 4:
			_r = s.getRune(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === -1) {
				/* break; */ $s = 5; continue;
			}
			_r$1 = f(r); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				_r$2 = s.UnreadRune(); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				/* break; */ $s = 5; continue;
			/* } */ case 8:
			(s.$ptr_buf || (s.$ptr_buf = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s))).WriteRune(r);
		/* } */ $s = 4; continue; case 5:
		$s = -1; return (x = s.buf, $subslice(new sliceType$2(x.$array), x.$offset, x.$offset + x.$length));
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.token }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.f = f; $f.r = r; $f.s = s; $f.skipSpace = skipSpace; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i, r, s;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.peek = function(ok) {
		var _r, _r$1, ok, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; ok = $f.ok; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.getRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		r = _r;
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = s.UnreadRune(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
		/* } */ case 3:
		$s = -1; return indexRune(ok, r) >= 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ss.ptr.prototype.peek }; } $f._r = _r; $f._r$1 = _r$1; $f.ok = ok; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "init", name: "init", pkg: "fmt", typ: $funcType([ptrType$1], [], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", typ: $funcType([$Int], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", typ: $funcType([sliceType$2], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "fmt_unicode", name: "fmt_unicode", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_integer", name: "fmt_integer", pkg: "fmt", typ: $funcType([$Uint64, $Int, $Bool, $String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", typ: $funcType([$String], [$String], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", typ: $funcType([$String, sliceType$2, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", typ: $funcType([$String, $String], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", typ: $funcType([sliceType$2, $String], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "fmt_c", name: "fmt_c", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", typ: $funcType([$Uint64], [], false)}, {prop: "fmt_float", name: "fmt_float", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32, $Int], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", typ: $funcType([$Uint8], [], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", typ: $funcType([$Int32], [], false)}];
	ptrType$2.methods = [{prop: "free", name: "free", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", typ: $funcType([reflect.Value], [], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", typ: $funcType([$Bool, $Int32], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", typ: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtInteger", name: "fmtInteger", pkg: "fmt", typ: $funcType([$Uint64, $Bool, $Int32], [], false)}, {prop: "fmtFloat", name: "fmtFloat", pkg: "fmt", typ: $funcType([$Float64, $Int, $Int32], [], false)}, {prop: "fmtComplex", name: "fmtComplex", pkg: "fmt", typ: $funcType([$Complex128, $Int, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", typ: $funcType([$String, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", typ: $funcType([sliceType$2, $Int32, $String], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", typ: $funcType([reflect.Value, $Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", typ: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", typ: $funcType([reflect.Value, $Int32, $Int], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", typ: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badArgNum", name: "badArgNum", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "missingArg", name: "missingArg", pkg: "fmt", typ: $funcType([$Int32], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", typ: $funcType([$String, sliceType], [], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", typ: $funcType([sliceType], [], false)}, {prop: "doPrintln", name: "doPrintln", pkg: "fmt", typ: $funcType([sliceType], [], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", typ: $funcType([], [$Int32], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "error", name: "error", pkg: "fmt", typ: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", typ: $funcType([$String], [], false)}, {prop: "Token", name: "Token", pkg: "", typ: $funcType([$Bool, funcType], [sliceType$2, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", typ: $funcType([], [], false)}, {prop: "free", name: "free", pkg: "fmt", typ: $funcType([ssave], [], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", typ: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", typ: $funcType([$Bool, funcType], [sliceType$2], false)}, {prop: "consume", name: "consume", pkg: "fmt", typ: $funcType([$String, $Bool], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", typ: $funcType([], [], false)}, {prop: "accept", name: "accept", pkg: "fmt", typ: $funcType([$String], [$Bool], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", typ: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", typ: $funcType([$Int32], [$Bool], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", typ: $funcType([$Int32], [$Int, $String], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", typ: $funcType([$String, $Bool], [$String], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", typ: $funcType([$Int], [$Int64], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", typ: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", typ: $funcType([], [$String, $String], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", typ: $funcType([$String, $Int], [$Float64], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", typ: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", typ: $funcType([$Int32], [$String], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", typ: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", typ: $funcType([], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", typ: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "advance", name: "advance", pkg: "fmt", typ: $funcType([$String], [$Int], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", typ: $funcType([$String, sliceType], [$Int, $error], false)}];
	fmtFlags.init("fmt", [{prop: "widPresent", name: "widPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "minus", name: "minus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plus", name: "plus", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharp", name: "sharp", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "space", name: "space", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "zero", name: "zero", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "plusV", name: "plusV", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	fmt.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "fmtFlags", name: "fmtFlags", anonymous: true, exported: false, typ: fmtFlags, tag: ""}, {prop: "wid", name: "wid", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prec", name: "prec", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "intbuf", name: "intbuf", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", typ: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", typ: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType$2], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", typ: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init("fmt", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $emptyInterface, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: reflect.Value, tag: ""}, {prop: "fmt", name: "fmt", anonymous: false, exported: false, typ: fmt, tag: ""}, {prop: "reordered", name: "reordered", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "panicking", name: "panicking", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "erroring", name: "erroring", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	scanError.init("fmt", [{prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	ss.init("fmt", [{prop: "rs", name: "rs", anonymous: false, exported: false, typ: io.RuneScanner, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: buffer, tag: ""}, {prop: "count", name: "count", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "ssave", name: "ssave", anonymous: true, exported: false, typ: ssave, tag: ""}]);
	ssave.init("fmt", [{prop: "validSave", name: "validSave", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "limit", name: "limit", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ppFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new pp.ptr(buffer.nil, $ifaceNil, new reflect.Value.ptr(ptrType.nil, 0, 0), new fmt.ptr(ptrType$1.nil, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false), 0, 0, arrayType.zero()), false, false, false, false);
		}));
		space = new sliceType$1([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			return new ss.ptr($ifaceNil, buffer.nil, 0, false, new ssave.ptr(false, false, false, 0, 0, 0));
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, $init, reflect, lessSwap, funcType, funcType$1, insertionSort, siftDown, heapSort, medianOfThree, doPivot, quickSort, Sort, maxDepth, Slice, insertionSort_func, siftDown_func, heapSort_func, medianOfThree_func, doPivot_func, quickSort_func;
	reflect = $packages["reflect"];
	lessSwap = $pkg.lessSwap = $newType(0, $kindStruct, "sort.lessSwap", true, "sort", false, function(Less_, Swap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Less = $throwNilPointerError;
			this.Swap = $throwNilPointerError;
			return;
		}
		this.Less = Less_;
		this.Swap = Swap_;
	});
	funcType = $funcType([$Int, $Int], [$Bool], false);
	funcType$1 = $funcType([$Int, $Int], [], false);
	insertionSort = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown(data, i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown(data, lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree(data, lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree(data, lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort(data, a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot(data, a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort(data, a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort(data, mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort(data, a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sort = function(data) {
		var _r, data, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		$r = quickSort(data, 0, n, maxDepth(n)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sort }; } $f._r = _r; $f.data = data; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Sort = Sort;
	maxDepth = function(n) {
		var depth, i, n;
		depth = 0;
		i = n;
		while (true) {
			if (!(i > 0)) { break; }
			depth = depth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		return $imul(depth, 2);
	};
	Slice = function(slice, less) {
		var _r, _r$1, length, less, rv, slice, swap, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; length = $f.length; less = $f.less; rv = $f.rv; slice = $f.slice; swap = $f.swap; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = reflect.ValueOf(slice); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rv = _r;
		_r$1 = reflect.Swapper(slice); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		swap = _r$1;
		length = $clone(rv, reflect.Value).Len();
		$r = quickSort_func(new lessSwap.ptr(less, swap), 0, length, maxDepth(length)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Slice }; } $f._r = _r; $f._r$1 = _r$1; $f.length = length; $f.less = less; $f.rv = rv; $f.slice = slice; $f.swap = swap; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Slice = Slice;
	insertionSort_func = function(data, a, b) {
		var _r, _v, a, b, data, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _v = $f._v; a = $f.a; b = $f.b; data = $f.data; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = a + 1 >> 0;
		/* while (true) { */ case 1:
			/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 2; continue; }
			j = i;
			/* while (true) { */ case 3:
				if (!(j > a)) { _v = false; $s = 5; continue s; }
				_r = data.Less(j, j - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_v = _r; case 5:
				/* if (!(_v)) { break; } */ if(!(_v)) { $s = 4; continue; }
				$r = data.Swap(j, j - 1 >> 0); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j - (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: insertionSort_func }; } $f._r = _r; $f._v = _v; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	siftDown_func = function(data, lo, hi, first) {
		var _r, _r$1, _v, child, data, first, hi, lo, root, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; child = $f.child; data = $f.data; first = $f.first; hi = $f.hi; lo = $f.lo; root = $f.root; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		root = lo;
		/* while (true) { */ case 1:
			child = ($imul(2, root)) + 1 >> 0;
			if (child >= hi) {
				/* break; */ $s = 2; continue;
			}
			if (!((child + 1 >> 0) < hi)) { _v = false; $s = 5; continue s; }
			_r = data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				child = child + (1) >> 0;
			/* } */ case 4:
			_r$1 = data.Less(first + root >> 0, first + child >> 0); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				$s = -1; return;
			/* } */ case 8:
			$r = data.Swap(first + root >> 0, first + child >> 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			root = child;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: siftDown_func }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.child = child; $f.data = data; $f.first = first; $f.hi = hi; $f.lo = lo; $f.root = root; $f.$s = $s; $f.$r = $r; return $f;
	};
	heapSort_func = function(data, a, b) {
		var _q, a, b, data, first, hi, i, i$1, lo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; a = $f.a; b = $f.b; data = $f.data; first = $f.first; hi = $f.hi; i = $f.i; i$1 = $f.i$1; lo = $f.lo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		/* while (true) { */ case 1:
			/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 2; continue; }
			$r = siftDown_func($clone(data, lessSwap), i, hi, first); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		i$1 = hi - 1 >> 0;
		/* while (true) { */ case 4:
			/* if (!(i$1 >= 0)) { break; } */ if(!(i$1 >= 0)) { $s = 5; continue; }
			$r = data.Swap(first, first + i$1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = siftDown_func($clone(data, lessSwap), lo, i$1, first); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i$1 = i$1 - (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: heapSort_func }; } $f._q = _q; $f.a = a; $f.b = b; $f.data = data; $f.first = first; $f.hi = hi; $f.i = i; $f.i$1 = i$1; $f.lo = lo; $f.$s = $s; $f.$r = $r; return $f;
	};
	medianOfThree_func = function(data, m1, m0, m2) {
		var _r, _r$1, _r$2, data, m0, m1, m2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; data = $f.data; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = data.Less(m1, m0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_r) { */ case 1:
			$r = data.Swap(m1, m0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = data.Less(m2, m1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (_r$1) { */ case 5:
			$r = data.Swap(m2, m1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = data.Less(m1, m0); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (_r$2) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_r$2) { */ case 9:
				$r = data.Swap(m1, m0); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		/* } */ case 6:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: medianOfThree_func }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.data = data; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.$s = $s; $f.$r = $r; return $f;
	};
	doPivot_func = function(data, lo, hi) {
		var _q, _q$1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _tmp, _tmp$1, _tmp$2, _tmp$3, _v, _v$1, _v$2, _v$3, _v$4, a, b, c, data, dups, hi, lo, m, midhi, midlo, pivot, protect, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; _v$4 = $f._v$4; a = $f.a; b = $f.b; c = $f.c; data = $f.data; dups = $f.dups; hi = $f.hi; lo = $f.lo; m = $f.m; midhi = $f.midhi; midlo = $f.midlo; pivot = $f.pivot; protect = $f.protect; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		midlo = 0;
		midhi = 0;
		m = ((((((lo + hi >> 0) >>> 0)) >>> 1 >>> 0) >> 0));
		/* */ if ((hi - lo >> 0) > 40) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((hi - lo >> 0) > 40) { */ case 1:
			s = (_q = ((hi - lo >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			$r = medianOfThree_func($clone(data, lessSwap), lo, lo + s >> 0, lo + ($imul(2, s)) >> 0); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree_func($clone(data, lessSwap), m, m - s >> 0, m + s >> 0); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = medianOfThree_func($clone(data, lessSwap), hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ($imul(2, s)) >> 0); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = medianOfThree_func($clone(data, lessSwap), lo, m, hi - 1 >> 0); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = lo;
		_tmp = lo + 1 >> 0;
		_tmp$1 = hi - 1 >> 0;
		a = _tmp;
		c = _tmp$1;
		/* while (true) { */ case 7:
			if (!(a < c)) { _v = false; $s = 9; continue s; }
			_r = data.Less(a, pivot); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 9:
			/* if (!(_v)) { break; } */ if(!(_v)) { $s = 8; continue; }
			a = a + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		b = a;
		/* while (true) { */ case 11:
			/* while (true) { */ case 13:
				if (!(b < c)) { _v$1 = false; $s = 15; continue s; }
				_r$1 = data.Less(pivot, b); /* */ $s = 16; case 16: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_v$1 = !_r$1; case 15:
				/* if (!(_v$1)) { break; } */ if(!(_v$1)) { $s = 14; continue; }
				b = b + (1) >> 0;
			/* } */ $s = 13; continue; case 14:
			/* while (true) { */ case 17:
				if (!(b < c)) { _v$2 = false; $s = 19; continue s; }
				_r$2 = data.Less(pivot, c - 1 >> 0); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_v$2 = _r$2; case 19:
				/* if (!(_v$2)) { break; } */ if(!(_v$2)) { $s = 18; continue; }
				c = c - (1) >> 0;
			/* } */ $s = 17; continue; case 18:
			if (b >= c) {
				/* break; */ $s = 12; continue;
			}
			$r = data.Swap(b, c - 1 >> 0); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		/* } */ $s = 11; continue; case 12:
		protect = (hi - c >> 0) < 5;
		/* */ if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { $s = 22; continue; }
		/* */ $s = 23; continue;
		/* if (!protect && (hi - c >> 0) < (_q$1 = ((hi - lo >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) { */ case 22:
			dups = 0;
			_r$3 = data.Less(pivot, hi - 1 >> 0); /* */ $s = 26; case 26: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (!_r$3) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (!_r$3) { */ case 24:
				$r = data.Swap(c, hi - 1 >> 0); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				c = c + (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 25:
			_r$4 = data.Less(b - 1 >> 0, pivot); /* */ $s = 30; case 30: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (!_r$4) { $s = 28; continue; }
			/* */ $s = 29; continue;
			/* if (!_r$4) { */ case 28:
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 29:
			_r$5 = data.Less(m, pivot); /* */ $s = 33; case 33: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if (!_r$5) { $s = 31; continue; }
			/* */ $s = 32; continue;
			/* if (!_r$5) { */ case 31:
				$r = data.Swap(m, b - 1 >> 0); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = b - (1) >> 0;
				dups = dups + (1) >> 0;
			/* } */ case 32:
			protect = dups > 1;
		/* } */ case 23:
		/* */ if (protect) { $s = 35; continue; }
		/* */ $s = 36; continue;
		/* if (protect) { */ case 35:
			/* while (true) { */ case 37:
				/* while (true) { */ case 39:
					if (!(a < b)) { _v$3 = false; $s = 41; continue s; }
					_r$6 = data.Less(b - 1 >> 0, pivot); /* */ $s = 42; case 42: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_v$3 = !_r$6; case 41:
					/* if (!(_v$3)) { break; } */ if(!(_v$3)) { $s = 40; continue; }
					b = b - (1) >> 0;
				/* } */ $s = 39; continue; case 40:
				/* while (true) { */ case 43:
					if (!(a < b)) { _v$4 = false; $s = 45; continue s; }
					_r$7 = data.Less(a, pivot); /* */ $s = 46; case 46: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_v$4 = _r$7; case 45:
					/* if (!(_v$4)) { break; } */ if(!(_v$4)) { $s = 44; continue; }
					a = a + (1) >> 0;
				/* } */ $s = 43; continue; case 44:
				if (a >= b) {
					/* break; */ $s = 38; continue;
				}
				$r = data.Swap(a, b - 1 >> 0); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = a + (1) >> 0;
				b = b - (1) >> 0;
			/* } */ $s = 37; continue; case 38:
		/* } */ case 36:
		$r = data.Swap(pivot, b - 1 >> 0); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$2 = b - 1 >> 0;
		_tmp$3 = c;
		midlo = _tmp$2;
		midhi = _tmp$3;
		$s = -1; return [midlo, midhi];
		/* */ } return; } if ($f === undefined) { $f = { $blk: doPivot_func }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f._v$4 = _v$4; $f.a = a; $f.b = b; $f.c = c; $f.data = data; $f.dups = dups; $f.hi = hi; $f.lo = lo; $f.m = m; $f.midhi = midhi; $f.midlo = midlo; $f.pivot = pivot; $f.protect = protect; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	quickSort_func = function(data, a, b, maxDepth$1) {
		var _r, _r$1, _tuple, a, b, data, i, maxDepth$1, mhi, mlo, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; b = $f.b; data = $f.data; i = $f.i; maxDepth$1 = $f.maxDepth$1; mhi = $f.mhi; mlo = $f.mlo; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			/* if (!((b - a >> 0) > 12)) { break; } */ if(!((b - a >> 0) > 12)) { $s = 2; continue; }
			/* */ if (maxDepth$1 === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (maxDepth$1 === 0) { */ case 3:
				$r = heapSort_func($clone(data, lessSwap), a, b); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 4:
			maxDepth$1 = maxDepth$1 - (1) >> 0;
			_r = doPivot_func($clone(data, lessSwap), a, b); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			mlo = _tuple[0];
			mhi = _tuple[1];
			/* */ if ((mlo - a >> 0) < (b - mhi >> 0)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((mlo - a >> 0) < (b - mhi >> 0)) { */ case 7:
				$r = quickSort_func($clone(data, lessSwap), a, mlo, maxDepth$1); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				a = mhi;
				$s = 9; continue;
			/* } else { */ case 8:
				$r = quickSort_func($clone(data, lessSwap), mhi, b, maxDepth$1); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				b = mlo;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		/* */ if ((b - a >> 0) > 1) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((b - a >> 0) > 1) { */ case 12:
			i = a + 6 >> 0;
			/* while (true) { */ case 14:
				/* if (!(i < b)) { break; } */ if(!(i < b)) { $s = 15; continue; }
				_r$1 = data.Less(i, i - 6 >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				/* */ if (_r$1) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_r$1) { */ case 16:
					$r = data.Swap(i, i - 6 >> 0); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 17:
				i = i + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			$r = insertionSort_func($clone(data, lessSwap), a, b); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 13:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: quickSort_func }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.data = data; $f.i = i; $f.maxDepth$1 = maxDepth$1; $f.mhi = mhi; $f.mlo = mlo; $f.$s = $s; $f.$r = $r; return $f;
	};
	lessSwap.init("", [{prop: "Less", name: "Less", anonymous: false, exported: true, typ: funcType, tag: ""}, {prop: "Swap", name: "Swap", anonymous: false, exported: true, typ: funcType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = reflect.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, $init, errors, js, io, unicode, utf8, Replacer, replacer, trieNode, genericReplacer, appendSliceWriter, stringWriterIface, stringWriter, singleStringReplacer, byteReplacer, byteStringReplacer, stringFinder, arrayType, ptrType, sliceType, arrayType$1, ptrType$1, ptrType$2, sliceType$1, ptrType$3, ptrType$4, arrayType$2, sliceType$2, sliceType$3, ptrType$7, ptrType$8, ptrType$9, IndexByte, Index, Count, NewReplacer, makeGenericReplacer, getStringWriter, makeSingleStringReplacer, makeStringFinder, longestCommonSuffix, max, explode, Contains, ContainsRune, IndexRune, genSplit, Split, Join, HasPrefix, Map, ToUpper, ToLower, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Replacer = $pkg.Replacer = $newType(0, $kindStruct, "strings.Replacer", true, "strings", true, function(r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			return;
		}
		this.r = r_;
	});
	replacer = $pkg.replacer = $newType(8, $kindInterface, "strings.replacer", true, "strings", false, null);
	trieNode = $pkg.trieNode = $newType(0, $kindStruct, "strings.trieNode", true, "strings", false, function(value_, priority_, prefix_, next_, table_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.value = "";
			this.priority = 0;
			this.prefix = "";
			this.next = ptrType$2.nil;
			this.table = sliceType$1.nil;
			return;
		}
		this.value = value_;
		this.priority = priority_;
		this.prefix = prefix_;
		this.next = next_;
		this.table = table_;
	});
	genericReplacer = $pkg.genericReplacer = $newType(0, $kindStruct, "strings.genericReplacer", true, "strings", false, function(root_, tableSize_, mapping_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.root = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			this.tableSize = 0;
			this.mapping = arrayType.zero();
			return;
		}
		this.root = root_;
		this.tableSize = tableSize_;
		this.mapping = mapping_;
	});
	appendSliceWriter = $pkg.appendSliceWriter = $newType(12, $kindSlice, "strings.appendSliceWriter", true, "strings", false, null);
	stringWriterIface = $pkg.stringWriterIface = $newType(8, $kindInterface, "strings.stringWriterIface", true, "strings", false, null);
	stringWriter = $pkg.stringWriter = $newType(0, $kindStruct, "strings.stringWriter", true, "strings", false, function(w_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.w = $ifaceNil;
			return;
		}
		this.w = w_;
	});
	singleStringReplacer = $pkg.singleStringReplacer = $newType(0, $kindStruct, "strings.singleStringReplacer", true, "strings", false, function(finder_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.finder = ptrType$4.nil;
			this.value = "";
			return;
		}
		this.finder = finder_;
		this.value = value_;
	});
	byteReplacer = $pkg.byteReplacer = $newType(256, $kindArray, "strings.byteReplacer", true, "strings", false, null);
	byteStringReplacer = $pkg.byteStringReplacer = $newType(3072, $kindArray, "strings.byteStringReplacer", true, "strings", false, null);
	stringFinder = $pkg.stringFinder = $newType(0, $kindStruct, "strings.stringFinder", true, "strings", false, function(pattern_, badCharSkip_, goodSuffixSkip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pattern = "";
			this.badCharSkip = arrayType$2.zero();
			this.goodSuffixSkip = sliceType$2.nil;
			return;
		}
		this.pattern = pattern_;
		this.badCharSkip = badCharSkip_;
		this.goodSuffixSkip = goodSuffixSkip_;
	});
	arrayType = $arrayType($Uint8, 256);
	ptrType = $ptrType(byteReplacer);
	sliceType = $sliceType($Uint8);
	arrayType$1 = $arrayType(sliceType, 256);
	ptrType$1 = $ptrType(byteStringReplacer);
	ptrType$2 = $ptrType(trieNode);
	sliceType$1 = $sliceType(ptrType$2);
	ptrType$3 = $ptrType(appendSliceWriter);
	ptrType$4 = $ptrType(stringFinder);
	arrayType$2 = $arrayType($Int, 256);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType($String);
	ptrType$7 = $ptrType(Replacer);
	ptrType$8 = $ptrType(genericReplacer);
	ptrType$9 = $ptrType(singleStringReplacer);
	IndexByte = function(s, c) {
		var c, s;
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	$pkg.IndexByte = IndexByte;
	Index = function(s, sep) {
		var s, sep;
		return $parseInt(s.indexOf(sep)) >> 0;
	};
	$pkg.Index = Index;
	Count = function(s, sep) {
		var n, pos, s, sep;
		n = 0;
		if ((sep.length === 0)) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length > s.length) {
			return 0;
		} else if ((sep.length === s.length)) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		while (true) {
			pos = Index(s, sep);
			if (pos === -1) {
				break;
			}
			n = n + (1) >> 0;
			s = $substring(s, (pos + sep.length >> 0));
		}
		return n;
	};
	$pkg.Count = Count;
	NewReplacer = function(oldnew) {
		var _i, _r, _ref, allNewBytes, i, i$1, i$2, i$3, n, n$1, o, o$1, oldnew, r, r$1, x, x$1, x$2;
		if ((_r = oldnew.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			$panic(new $String("strings.NewReplacer: odd argument count"));
		}
		if ((oldnew.$length === 2) && (0 >= oldnew.$length ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + 0]).length > 1) {
			return new Replacer.ptr(makeSingleStringReplacer((0 >= oldnew.$length ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + 0]), (1 >= oldnew.$length ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + 1])));
		}
		allNewBytes = true;
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			if (!((((i < 0 || i >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i]).length === 1))) {
				return new Replacer.ptr(makeGenericReplacer(oldnew));
			}
			if (!(((x = i + 1 >> 0, ((x < 0 || x >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x])).length === 1))) {
				allNewBytes = false;
			}
			i = i + (2) >> 0;
		}
		if (allNewBytes) {
			r = arrayType.zero();
			_ref = r;
			_i = 0;
			while (true) {
				if (!(_i < 256)) { break; }
				i$1 = _i;
				((i$1 < 0 || i$1 >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[i$1] = ((i$1 << 24 >>> 24)));
				_i++;
			}
			i$2 = oldnew.$length - 2 >> 0;
			while (true) {
				if (!(i$2 >= 0)) { break; }
				o = ((i$2 < 0 || i$2 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i$2]).charCodeAt(0);
				n = (x$1 = i$2 + 1 >> 0, ((x$1 < 0 || x$1 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x$1])).charCodeAt(0);
				((o < 0 || o >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[o] = n);
				i$2 = i$2 - (2) >> 0;
			}
			return new Replacer.ptr(new ptrType(r));
		}
		r$1 = arrayType$1.zero();
		i$3 = oldnew.$length - 2 >> 0;
		while (true) {
			if (!(i$3 >= 0)) { break; }
			o$1 = ((i$3 < 0 || i$3 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i$3]).charCodeAt(0);
			n$1 = (x$2 = i$3 + 1 >> 0, ((x$2 < 0 || x$2 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x$2]));
			((o$1 < 0 || o$1 >= r$1.length) ? ($throwRuntimeError("index out of range"), undefined) : r$1[o$1] = (new sliceType($stringToBytes(n$1))));
			i$3 = i$3 - (2) >> 0;
		}
		return new Replacer.ptr(new ptrType$1(r$1));
	};
	$pkg.NewReplacer = NewReplacer;
	Replacer.ptr.prototype.Replace = function(s) {
		var _r, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.r.Replace(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.Replace }; } $f._r = _r; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	Replacer.ptr.prototype.WriteString = function(w, s) {
		var _r, _tuple, err, n, r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; r = $f.r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_r = r.r.WriteString(w, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Replacer.ptr.prototype.WriteString }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.r = r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Replacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	trieNode.ptr.prototype.add = function(key, val, priority, r) {
		var key, keyNode, m, n, next, prefixNode, priority, r, t, val, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		if (key === "") {
			if (t.priority === 0) {
				t.value = val;
				t.priority = priority;
			}
			return;
		}
		if (!(t.prefix === "")) {
			n = 0;
			while (true) {
				if (!(n < t.prefix.length && n < key.length)) { break; }
				if (!((t.prefix.charCodeAt(n) === key.charCodeAt(n)))) {
					break;
				}
				n = n + (1) >> 0;
			}
			if (n === t.prefix.length) {
				t.next.add($substring(key, n), val, priority, r);
			} else if (n === 0) {
				prefixNode = ptrType$2.nil;
				if (t.prefix.length === 1) {
					prefixNode = t.next;
				} else {
					prefixNode = new trieNode.ptr("", 0, $substring(t.prefix, 1), t.next, sliceType$1.nil);
				}
				keyNode = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
				t.table = $makeSlice(sliceType$1, r.tableSize);
				(x = t.table, x$1 = (x$2 = r.mapping, x$3 = t.prefix.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3])), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = prefixNode));
				(x$4 = t.table, x$5 = (x$6 = r.mapping, x$7 = key.charCodeAt(0), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])), ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = keyNode));
				t.prefix = "";
				t.next = ptrType$2.nil;
				keyNode.add($substring(key, 1), val, priority, r);
			} else {
				next = new trieNode.ptr("", 0, $substring(t.prefix, n), t.next, sliceType$1.nil);
				t.prefix = $substring(t.prefix, 0, n);
				t.next = next;
				next.add($substring(key, n), val, priority, r);
			}
		} else if (!(t.table === sliceType$1.nil)) {
			m = (x$8 = r.mapping, x$9 = key.charCodeAt(0), ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9]));
			if ((x$10 = t.table, ((m < 0 || m >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + m])) === ptrType$2.nil) {
				(x$11 = t.table, ((m < 0 || m >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + m] = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil)));
			}
			(x$12 = t.table, ((m < 0 || m >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + m])).add($substring(key, 1), val, priority, r);
		} else {
			t.prefix = key;
			t.next = new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil);
			t.next.add("", val, priority, r);
		}
	};
	trieNode.prototype.add = function(key, val, priority, r) { return this.$val.add(key, val, priority, r); };
	genericReplacer.ptr.prototype.lookup = function(s, ignoreRoot) {
		var bestPriority, found, ignoreRoot, index, keylen, n, node, r, s, val, x, x$1, x$2;
		val = "";
		keylen = 0;
		found = false;
		r = this;
		bestPriority = 0;
		node = r.root;
		n = 0;
		while (true) {
			if (!(!(node === ptrType$2.nil))) { break; }
			if (node.priority > bestPriority && !(ignoreRoot && node === r.root)) {
				bestPriority = node.priority;
				val = node.value;
				keylen = n;
				found = true;
			}
			if (s === "") {
				break;
			}
			if (!(node.table === sliceType$1.nil)) {
				index = (x = r.mapping, x$1 = s.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
				if (((index >> 0)) === r.tableSize) {
					break;
				}
				node = (x$2 = node.table, ((index < 0 || index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + index]));
				s = $substring(s, 1);
				n = n + (1) >> 0;
			} else if (!(node.prefix === "") && HasPrefix(s, node.prefix)) {
				n = n + (node.prefix.length) >> 0;
				s = $substring(s, node.prefix.length);
				node = node.next;
			} else {
				break;
			}
		}
		return [val, keylen, found];
	};
	genericReplacer.prototype.lookup = function(s, ignoreRoot) { return this.$val.lookup(s, ignoreRoot); };
	makeGenericReplacer = function(oldnew) {
		var _i, _i$1, _ref, _ref$1, b, b$1, i, i$1, i$2, index, j, key, oldnew, r, x, x$1, x$2, x$3, x$4;
		r = new genericReplacer.ptr(new trieNode.ptr("", 0, "", ptrType$2.nil, sliceType$1.nil), 0, arrayType.zero());
		i = 0;
		while (true) {
			if (!(i < oldnew.$length)) { break; }
			key = ((i < 0 || i >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i]);
			j = 0;
			while (true) {
				if (!(j < key.length)) { break; }
				(x = r.mapping, x$1 = key.charCodeAt(j), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = 1));
				j = j + (1) >> 0;
			}
			i = i + (2) >> 0;
		}
		_ref = r.mapping;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			b = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			r.tableSize = r.tableSize + (((b >> 0))) >> 0;
			_i++;
		}
		index = 0;
		_ref$1 = r.mapping;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			b$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1[_i$1]);
			if (b$1 === 0) {
				(x$2 = r.mapping, ((i$1 < 0 || i$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i$1] = ((r.tableSize << 24 >>> 24))));
			} else {
				(x$3 = r.mapping, ((i$1 < 0 || i$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i$1] = index));
				index = index + (1) << 24 >>> 24;
			}
			_i$1++;
		}
		r.root.table = $makeSlice(sliceType$1, r.tableSize);
		i$2 = 0;
		while (true) {
			if (!(i$2 < oldnew.$length)) { break; }
			r.root.add(((i$2 < 0 || i$2 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + i$2]), (x$4 = i$2 + 1 >> 0, ((x$4 < 0 || x$4 >= oldnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : oldnew.$array[oldnew.$offset + x$4])), oldnew.$length - i$2 >> 0, r);
			i$2 = i$2 + (2) >> 0;
		}
		return r;
	};
	$ptrType(appendSliceWriter).prototype.Write = function(p) {
		var p, w;
		w = this;
		w.$set($appendSlice(w.$get(), p));
		return [p.$length, $ifaceNil];
	};
	$ptrType(appendSliceWriter).prototype.WriteString = function(s) {
		var s, w;
		w = this;
		w.$set($appendSlice(w.$get(), s));
		return [s.length, $ifaceNil];
	};
	stringWriter.ptr.prototype.WriteString = function(s) {
		var _r, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = this;
		_r = w.w.Write((new sliceType($stringToBytes(s)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stringWriter.ptr.prototype.WriteString }; } $f._r = _r; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	getStringWriter = function(w) {
		var _tuple, ok, sw, w, x;
		_tuple = $assertType(w, stringWriterIface, true);
		sw = _tuple[0];
		ok = _tuple[1];
		if (!ok) {
			sw = (x = new stringWriter.ptr(w), new x.constructor.elem(x));
		}
		return sw;
	};
	genericReplacer.ptr.prototype.Replace = function(s) {
		var _r, buf, r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; buf = $f.buf; r = $f.r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		r = this;
		buf[0] = $makeSlice(appendSliceWriter, 0, s.length);
		_r = r.WriteString((buf.$ptr || (buf.$ptr = new ptrType$3(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, buf))), s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return ($bytesToString(buf[0]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.Replace }; } $f._r = _r; $f.buf = buf; $f.r = r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	genericReplacer.ptr.prototype.WriteString = function(w, s) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, err, i, index, keylen, last, match, n, prevMatchEmpty, r, s, sw, val, w, wn, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; i = $f.i; index = $f.index; keylen = $f.keylen; last = $f.last; match = $f.match; n = $f.n; prevMatchEmpty = $f.prevMatchEmpty; r = $f.r; s = $f.s; sw = $f.sw; val = $f.val; w = $f.w; wn = $f.wn; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		last = _tmp;
		wn = _tmp$1;
		prevMatchEmpty = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= s.length)) { break; } */ if(!(i <= s.length)) { $s = 2; continue; }
			/* */ if (!((i === s.length)) && (r.root.priority === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i === s.length)) && (r.root.priority === 0)) { */ case 3:
				index = (((x = r.mapping, x$1 = s.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) >> 0));
				if ((index === r.tableSize) || (x$2 = r.root.table, ((index < 0 || index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + index])) === ptrType$2.nil) {
					i = i + (1) >> 0;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_tuple = r.lookup($substring(s, i), prevMatchEmpty);
			val = _tuple[0];
			keylen = _tuple[1];
			match = _tuple[2];
			prevMatchEmpty = match && (keylen === 0);
			/* */ if (match) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (match) { */ case 5:
				_r = sw.WriteString($substring(s, last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				wn = _tuple$1[0];
				err = _tuple$1[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, err];
				}
				_r$1 = sw.WriteString(val); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$2 = _r$1;
				wn = _tuple$2[0];
				err = _tuple$2[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [n, err];
				}
				i = i + (keylen) >> 0;
				last = i;
				/* continue; */ $s = 1; continue;
			/* } */ case 6:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			_r$2 = sw.WriteString($substring(s, last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			wn = _tuple$3[0];
			err = _tuple$3[1];
			n = n + (wn) >> 0;
		/* } */ case 10:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: genericReplacer.ptr.prototype.WriteString }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.i = i; $f.index = index; $f.keylen = keylen; $f.last = last; $f.match = match; $f.n = n; $f.prevMatchEmpty = prevMatchEmpty; $f.r = r; $f.s = s; $f.sw = sw; $f.val = val; $f.w = w; $f.wn = wn; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	genericReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	makeSingleStringReplacer = function(pattern, value) {
		var pattern, value;
		return new singleStringReplacer.ptr(makeStringFinder(pattern), value);
	};
	singleStringReplacer.ptr.prototype.Replace = function(s) {
		var _tmp, _tmp$1, buf, i, match, matched, r, s;
		r = this;
		buf = sliceType.nil;
		_tmp = 0;
		_tmp$1 = false;
		i = _tmp;
		matched = _tmp$1;
		while (true) {
			match = r.finder.next($substring(s, i));
			if (match === -1) {
				break;
			}
			matched = true;
			buf = $appendSlice(buf, $substring(s, i, (i + match >> 0)));
			buf = $appendSlice(buf, r.value);
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		}
		if (!matched) {
			return s;
		}
		buf = $appendSlice(buf, $substring(s, i));
		return ($bytesToString(buf));
	};
	singleStringReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	singleStringReplacer.ptr.prototype.WriteString = function(w, s) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, err, i, match, n, r, s, sw, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; i = $f.i; match = $f.match; n = $f.n; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		wn = _tmp$1;
		/* while (true) { */ case 1:
			match = r.finder.next($substring(s, i));
			if (match === -1) {
				/* break; */ $s = 2; continue;
			}
			_r = sw.WriteString($substring(s, i, (i + match >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
			}
			_r$1 = sw.WriteString(r.value); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			wn = _tuple$1[0];
			err = _tuple$1[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [n, err];
			}
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		/* } */ $s = 1; continue; case 2:
		_r$2 = sw.WriteString($substring(s, i)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$2 = _r$2;
		wn = _tuple$2[0];
		err = _tuple$2[1];
		n = n + (wn) >> 0;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: singleStringReplacer.ptr.prototype.WriteString }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.i = i; $f.match = match; $f.n = n; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	singleStringReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	byteReplacer.prototype.Replace = function(s) {
		var b, buf, i, r, s;
		r = this.$val;
		buf = sliceType.nil;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!(((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === b))) {
				if (buf === sliceType.nil) {
					buf = (new sliceType($stringToBytes(s)));
				}
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])));
			}
			i = i + (1) >> 0;
		}
		if (buf === sliceType.nil) {
			return s;
		}
		return ($bytesToString(buf));
	};
	$ptrType(byteReplacer).prototype.Replace = function(s) { return (new byteReplacer(this.$get())).Replace(s); };
	byteReplacer.prototype.WriteString = function(w, s) {
		var _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, buf, bufsize, err, err$1, i, n, ncopy, r, s, w, wn, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; b = $f.b; buf = $f.buf; bufsize = $f.bufsize; err = $f.err; err$1 = $f.err$1; i = $f.i; n = $f.n; ncopy = $f.ncopy; r = $f.r; s = $f.s; w = $f.w; wn = $f.wn; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		bufsize = 32768;
		if (s.length < bufsize) {
			bufsize = s.length;
		}
		buf = $makeSlice(sliceType, bufsize);
		/* while (true) { */ case 1:
			/* if (!(s.length > 0)) { break; } */ if(!(s.length > 0)) { $s = 2; continue; }
			ncopy = $copyString(buf, s);
			s = $substring(s, ncopy);
			_ref = $subslice(buf, 0, ncopy);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((i < 0 || i >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + i] = (r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])));
				_i++;
			}
			_r = w.Write($subslice(buf, 0, ncopy)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			wn = _tuple[0];
			err$1 = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = n;
				_tmp$1 = err$1;
				n = _tmp;
				err = _tmp$1;
				$s = -1; return [n, err];
			}
		/* } */ $s = 1; continue; case 2:
		_tmp$2 = n;
		_tmp$3 = $ifaceNil;
		n = _tmp$2;
		err = _tmp$3;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteReplacer.prototype.WriteString }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.bufsize = bufsize; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.n = n; $f.ncopy = ncopy; $f.r = r; $f.s = s; $f.w = w; $f.wn = wn; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteReplacer).prototype.WriteString = function(w, s) { return (new byteReplacer(this.$get())).WriteString(w, s); };
	byteStringReplacer.prototype.Replace = function(s) {
		var anyChanges, b, b$1, bi, buf, i, i$1, n, newSize, r, s;
		r = this.$val;
		newSize = s.length;
		anyChanges = false;
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			b = s.charCodeAt(i);
			if (!((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === sliceType.nil)) {
				anyChanges = true;
				newSize = newSize + (((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])).$length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		if (!anyChanges) {
			return s;
		}
		buf = $makeSlice(sliceType, newSize);
		bi = buf;
		i$1 = 0;
		while (true) {
			if (!(i$1 < s.length)) { break; }
			b$1 = s.charCodeAt(i$1);
			if (!((r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b$1])) === sliceType.nil)) {
				n = $copySlice(bi, (r.nilCheck, ((b$1 < 0 || b$1 >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b$1])));
				bi = $subslice(bi, n);
			} else {
				(0 >= bi.$length ? ($throwRuntimeError("index out of range"), undefined) : bi.$array[bi.$offset + 0] = b$1);
				bi = $subslice(bi, 1);
			}
			i$1 = i$1 + (1) >> 0;
		}
		return ($bytesToString(buf));
	};
	$ptrType(byteStringReplacer).prototype.Replace = function(s) { return (new byteStringReplacer(this.$get())).Replace(s); };
	byteStringReplacer.prototype.WriteString = function(w, s) {
		var _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, b, err, err$1, err$2, i, last, n, nw, nw$1, nw$2, r, s, sw, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; last = $f.last; n = $f.n; nw = $f.nw; nw$1 = $f.nw$1; nw$2 = $f.nw$2; r = $f.r; s = $f.s; sw = $f.sw; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this.$val;
		sw = getStringWriter(w);
		last = 0;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < s.length)) { break; } */ if(!(i < s.length)) { $s = 2; continue; }
			b = s.charCodeAt(i);
			/* */ if ((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === sliceType.nil) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b])) === sliceType.nil) { */ case 3:
				i = i + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			/* */ if (!((last === i))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!((last === i))) { */ case 5:
				_r = sw.WriteString($substring(s, last, i)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				nw = _tuple[0];
				err$1 = _tuple[1];
				n = n + (nw) >> 0;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = n;
					_tmp$1 = err$1;
					n = _tmp;
					err = _tmp$1;
					$s = -1; return [n, err];
				}
			/* } */ case 6:
			last = i + 1 >> 0;
			_r$1 = w.Write((r.nilCheck, ((b < 0 || b >= r.length) ? ($throwRuntimeError("index out of range"), undefined) : r[b]))); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			nw$1 = _tuple$1[0];
			err$2 = _tuple$1[1];
			n = n + (nw$1) >> 0;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$2 = n;
				_tmp$3 = err$2;
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		/* */ if (!((last === s.length))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((last === s.length))) { */ case 9:
			nw$2 = 0;
			_r$2 = sw.WriteString($substring(s, last)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			nw$2 = _tuple$2[0];
			err = _tuple$2[1];
			n = n + (nw$2) >> 0;
		/* } */ case 10:
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: byteStringReplacer.prototype.WriteString }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.last = last; $f.n = n; $f.nw = nw; $f.nw$1 = nw$1; $f.nw$2 = nw$2; $f.r = r; $f.s = s; $f.sw = sw; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(byteStringReplacer).prototype.WriteString = function(w, s) { return (new byteStringReplacer(this.$get())).WriteString(w, s); };
	makeStringFinder = function(pattern) {
		var _i, _ref, f, i, i$1, i$2, i$3, last, lastPrefix, lenSuffix, pattern, x, x$1, x$2, x$3, x$4, x$5;
		f = new stringFinder.ptr(pattern, arrayType$2.zero(), $makeSlice(sliceType$2, pattern.length));
		last = pattern.length - 1 >> 0;
		_ref = f.badCharSkip;
		_i = 0;
		while (true) {
			if (!(_i < 256)) { break; }
			i = _i;
			(x = f.badCharSkip, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = pattern.length));
			_i++;
		}
		i$1 = 0;
		while (true) {
			if (!(i$1 < last)) { break; }
			(x$1 = f.badCharSkip, x$2 = pattern.charCodeAt(i$1), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2] = (last - i$1 >> 0)));
			i$1 = i$1 + (1) >> 0;
		}
		lastPrefix = last;
		i$2 = last;
		while (true) {
			if (!(i$2 >= 0)) { break; }
			if (HasPrefix(pattern, $substring(pattern, (i$2 + 1 >> 0)))) {
				lastPrefix = i$2 + 1 >> 0;
			}
			(x$3 = f.goodSuffixSkip, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2] = ((lastPrefix + last >> 0) - i$2 >> 0)));
			i$2 = i$2 - (1) >> 0;
		}
		i$3 = 0;
		while (true) {
			if (!(i$3 < last)) { break; }
			lenSuffix = longestCommonSuffix(pattern, $substring(pattern, 1, (i$3 + 1 >> 0)));
			if (!((pattern.charCodeAt((i$3 - lenSuffix >> 0)) === pattern.charCodeAt((last - lenSuffix >> 0))))) {
				(x$4 = f.goodSuffixSkip, x$5 = last - lenSuffix >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = ((lenSuffix + last >> 0) - i$3 >> 0)));
			}
			i$3 = i$3 + (1) >> 0;
		}
		return f;
	};
	longestCommonSuffix = function(a, b) {
		var a, b, i;
		i = 0;
		while (true) {
			if (!(i < a.length && i < b.length)) { break; }
			if (!((a.charCodeAt(((a.length - 1 >> 0) - i >> 0)) === b.charCodeAt(((b.length - 1 >> 0) - i >> 0))))) {
				break;
			}
			i = i + (1) >> 0;
		}
		return i;
	};
	stringFinder.ptr.prototype.next = function(text) {
		var f, i, j, text, x, x$1, x$2;
		f = this;
		i = f.pattern.length - 1 >> 0;
		while (true) {
			if (!(i < text.length)) { break; }
			j = f.pattern.length - 1 >> 0;
			while (true) {
				if (!(j >= 0 && (text.charCodeAt(i) === f.pattern.charCodeAt(j)))) { break; }
				i = i - (1) >> 0;
				j = j - (1) >> 0;
			}
			if (j < 0) {
				return i + 1 >> 0;
			}
			i = i + (max((x = f.badCharSkip, x$1 = text.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])), (x$2 = f.goodSuffixSkip, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j])))) >> 0;
		}
		return -1;
	};
	stringFinder.prototype.next = function(text) { return this.$val.next(text); };
	max = function(a, b) {
		var a, b;
		if (a > b) {
			return a;
		}
		return b;
	};
	explode = function(s, n) {
		var _tuple, a, ch, i, l, n, s, size, x;
		l = utf8.RuneCountInString(s);
		if (n < 0 || n > l) {
			n = l;
		}
		a = $makeSlice(sliceType$3, n);
		i = 0;
		while (true) {
			if (!(i < (n - 1 >> 0))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			ch = _tuple[0];
			size = _tuple[1];
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, size));
			s = $substring(s, size);
			if (ch === 65533) {
				((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = "\xEF\xBF\xBD");
			}
			i = i + (1) >> 0;
		}
		if (n > 0) {
			(x = n - 1 >> 0, ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x] = s));
		}
		return a;
	};
	Contains = function(s, substr) {
		var s, substr;
		return Index(s, substr) >= 0;
	};
	$pkg.Contains = Contains;
	ContainsRune = function(s, r) {
		var r, s;
		return IndexRune(s, r) >= 0;
	};
	$pkg.ContainsRune = ContainsRune;
	IndexRune = function(s, r) {
		var _i, _ref, _rune, i, r, r$1, s;
		if (0 <= r && r < 128) {
			return IndexByte(s, ((r << 24 >>> 24)));
		} else if ((r === 65533)) {
			_ref = s;
			_i = 0;
			while (true) {
				if (!(_i < _ref.length)) { break; }
				_rune = $decodeRune(_ref, _i);
				i = _i;
				r$1 = _rune[0];
				if (r$1 === 65533) {
					return i;
				}
				_i += _rune[1];
			}
			return -1;
		} else if (!utf8.ValidRune(r)) {
			return -1;
		} else {
			return Index(s, ($encodeRune(r)));
		}
	};
	$pkg.IndexRune = IndexRune;
	genSplit = function(s, sep, sepSave, n) {
		var a, i, m, n, s, sep, sepSave;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		a = $makeSlice(sliceType$3, n);
		n = n - (1) >> 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			m = Index(s, sep);
			if (m < 0) {
				break;
			}
			((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = $substring(s, 0, (m + sepSave >> 0)));
			s = $substring(s, (m + sep.length >> 0));
			i = i + (1) >> 0;
		}
		((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i] = s);
		return $subslice(a, 0, (i + 1 >> 0));
	};
	Split = function(s, sep) {
		var s, sep;
		return genSplit(s, sep, 0, -1);
	};
	$pkg.Split = Split;
	Join = function(a, sep) {
		var _1, _i, _ref, a, b, bp, i, n, s, sep;
		_1 = a.$length;
		if (_1 === (0)) {
			return "";
		} else if (_1 === (1)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]);
		} else if (_1 === (2)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
		} else if (_1 === (3)) {
			return (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) + sep + (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) + sep + (2 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 2]);
		}
		n = $imul(sep.length, ((a.$length - 1 >> 0)));
		i = 0;
		while (true) {
			if (!(i < a.$length)) { break; }
			n = n + (((i < 0 || i >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = $makeSlice(sliceType, n);
		bp = $copyString(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return ($bytesToString(b));
	};
	$pkg.Join = Join;
	HasPrefix = function(s, prefix) {
		var prefix, s;
		return s.length >= prefix.length && $substring(s, 0, prefix.length) === prefix;
	};
	$pkg.HasPrefix = HasPrefix;
	Map = function(mapping, s) {
		var _i, _i$1, _r, _r$1, _ref, _ref$1, _rune, _rune$1, _tuple, b, c, c$1, i, mapping, nb, nbytes, r, r$1, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _rune = $f._rune; _rune$1 = $f._rune$1; _tuple = $f._tuple; b = $f.b; c = $f.c; c$1 = $f.c$1; i = $f.i; mapping = $f.mapping; nb = $f.nb; nbytes = $f.nbytes; r = $f.r; r$1 = $f.r$1; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = sliceType.nil;
		nbytes = 0;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			_r = mapping(c); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			r = _r;
			if (r === c) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			b = $makeSlice(sliceType, (s.length + 4 >> 0));
			nbytes = $copyString(b, $substring(s, 0, i));
			if (r >= 0) {
				if (r <= 128) {
					((nbytes < 0 || nbytes >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + nbytes] = ((r << 24 >>> 24)));
					nbytes = nbytes + (1) >> 0;
				} else {
					nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes), r)) >> 0;
				}
			}
			if (c === 65533) {
				_tuple = utf8.DecodeRuneInString($substring(s, i));
				w = _tuple[1];
				i = i + (w) >> 0;
			} else {
				i = i + (utf8.RuneLen(c)) >> 0;
			}
			s = $substring(s, i);
			/* break; */ $s = 2; continue;
		/* } */ $s = 1; continue; case 2:
		if (b === sliceType.nil) {
			$s = -1; return s;
		}
		_ref$1 = s;
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < _ref$1.length)) { break; } */ if(!(_i$1 < _ref$1.length)) { $s = 5; continue; }
			_rune$1 = $decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			_r$1 = mapping(c$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			r$1 = _r$1;
			if ((0 <= r$1 && r$1 <= 128) && nbytes < b.$length) {
				((nbytes < 0 || nbytes >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + nbytes] = ((r$1 << 24 >>> 24)));
				nbytes = nbytes + (1) >> 0;
				_i$1 += _rune$1[1];
				/* continue; */ $s = 4; continue;
			}
			if (r$1 >= 0) {
				if ((nbytes + 4 >> 0) >= b.$length) {
					nb = $makeSlice(sliceType, ($imul(2, b.$length)));
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes), r$1)) >> 0;
			}
			_i$1 += _rune$1[1];
		/* } */ $s = 4; continue; case 5:
		$s = -1; return ($bytesToString($subslice(b, 0, nbytes)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Map }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._rune = _rune; $f._rune$1 = _rune$1; $f._tuple = _tuple; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.mapping = mapping; $f.nb = nb; $f.nbytes = nbytes; $f.r = r; $f.r$1 = r$1; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Map = Map;
	ToUpper = function(s) {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToUpper, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToUpper }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToUpper = ToUpper;
	ToLower = function(s) {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = Map(unicode.ToLower, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ToLower }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ToLower = ToLower;
	Replace = function(s, old, new$1, n) {
		var _tuple, i, j, m, n, new$1, old, s, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = $makeSlice(sliceType, (s.length + ($imul(n, ((new$1.length - old.length >> 0)))) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (true) {
			if (!(i < n)) { break; }
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString($substring(s, start));
					wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index($substring(s, start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), $substring(s, start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), $substring(s, start))) >> 0;
		return ($bytesToString($subslice(t, 0, w)));
	};
	$pkg.Replace = Replace;
	ptrType$7.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$2.methods = [{prop: "add", name: "add", pkg: "strings", typ: $funcType([$String, $String, $Int, ptrType$8], [], false)}];
	ptrType$8.methods = [{prop: "lookup", name: "lookup", pkg: "strings", typ: $funcType([$String, $Bool], [$String, $Int, $Bool], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$3.methods = [{prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	stringWriter.methods = [{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}];
	ptrType$9.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$1.methods = [{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}];
	ptrType$4.methods = [{prop: "next", name: "next", pkg: "strings", typ: $funcType([$String], [$Int], false)}];
	Replacer.init("strings", [{prop: "r", name: "r", anonymous: false, exported: false, typ: replacer, tag: ""}]);
	replacer.init([{prop: "Replace", name: "Replace", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([io.Writer, $String], [$Int, $error], false)}]);
	trieNode.init("strings", [{prop: "value", name: "value", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "priority", name: "priority", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "prefix", name: "prefix", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "next", name: "next", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "table", name: "table", anonymous: false, exported: false, typ: sliceType$1, tag: ""}]);
	genericReplacer.init("strings", [{prop: "root", name: "root", anonymous: false, exported: false, typ: trieNode, tag: ""}, {prop: "tableSize", name: "tableSize", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "mapping", name: "mapping", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	appendSliceWriter.init($Uint8);
	stringWriterIface.init([{prop: "WriteString", name: "WriteString", pkg: "", typ: $funcType([$String], [$Int, $error], false)}]);
	stringWriter.init("strings", [{prop: "w", name: "w", anonymous: false, exported: false, typ: io.Writer, tag: ""}]);
	singleStringReplacer.init("strings", [{prop: "finder", name: "finder", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: $String, tag: ""}]);
	byteReplacer.init($Uint8, 256);
	byteStringReplacer.init(sliceType, 256);
	stringFinder.init("strings", [{prop: "pattern", name: "pattern", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "badCharSkip", name: "badCharSkip", anonymous: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "goodSuffixSkip", name: "goodSuffixSkip", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, $init, IsSurrogate, DecodeRune;
	IsSurrogate = function(r) {
		var r;
		return 55296 <= r && r < 57344;
	};
	$pkg.IsSurrogate = IsSurrogate;
	DecodeRune = function(r1, r2) {
		var r1, r2;
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	$pkg.DecodeRune = DecodeRune;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, $init, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, atomic, unicode, utf16, utf8, Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, unquotedValue, Marshaler, field, byIndex, SyntaxError, scanner, tagOptions, sliceType, structType, sliceType$1, ptrType, ptrType$1, ptrType$2, sliceType$2, structType$1, ptrType$4, ptrType$5, mapType, ptrType$6, sliceType$3, mapType$1, ptrType$11, ptrType$13, ptrType$14, funcType, ptrType$26, funcType$1, errPhase, nullLiteral, textUnmarshalerType, numberType, marshalerType, textMarshalerType, fieldCache, _r, _r$1, _r$2, Unmarshal, isValidNumber, getu4, unquote, unquoteBytes, isValidTag, fillField, typeFields, isExported, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, checkValid, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, parseTag;
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "json.Unmarshaler", true, "encoding/json", true, null);
	UnmarshalTypeError = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, "json.UnmarshalTypeError", true, "encoding/json", true, function(Value_, Type_, Offset_, Struct_, Field_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Value = "";
			this.Type = $ifaceNil;
			this.Offset = new $Int64(0, 0);
			this.Struct = "";
			this.Field = "";
			return;
		}
		this.Value = Value_;
		this.Type = Type_;
		this.Offset = Offset_;
		this.Struct = Struct_;
		this.Field = Field_;
	});
	InvalidUnmarshalError = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, "json.InvalidUnmarshalError", true, "encoding/json", true, function(Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = $ifaceNil;
			return;
		}
		this.Type = Type_;
	});
	Number = $pkg.Number = $newType(8, $kindString, "json.Number", true, "encoding/json", true, null);
	decodeState = $pkg.decodeState = $newType(0, $kindStruct, "json.decodeState", true, "encoding/json", false, function(data_, off_, scan_, nextscan_, errorContext_, savedError_, useNumber_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.data = sliceType$1.nil;
			this.off = 0;
			this.scan = new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.nextscan = new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0));
			this.errorContext = new structType$1.ptr("", "");
			this.savedError = $ifaceNil;
			this.useNumber = false;
			return;
		}
		this.data = data_;
		this.off = off_;
		this.scan = scan_;
		this.nextscan = nextscan_;
		this.errorContext = errorContext_;
		this.savedError = savedError_;
		this.useNumber = useNumber_;
	});
	unquotedValue = $pkg.unquotedValue = $newType(0, $kindStruct, "json.unquotedValue", true, "encoding/json", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", true, "encoding/json", true, null);
	field = $pkg.field = $newType(0, $kindStruct, "json.field", true, "encoding/json", false, function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.nameBytes = sliceType$1.nil;
			this.equalFold = $throwNilPointerError;
			this.tag = false;
			this.index = sliceType$2.nil;
			this.typ = $ifaceNil;
			this.omitEmpty = false;
			this.quoted = false;
			return;
		}
		this.name = name_;
		this.nameBytes = nameBytes_;
		this.equalFold = equalFold_;
		this.tag = tag_;
		this.index = index_;
		this.typ = typ_;
		this.omitEmpty = omitEmpty_;
		this.quoted = quoted_;
	});
	byIndex = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", true, "encoding/json", false, null);
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", true, "encoding/json", true, function(msg_, Offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.msg = "";
			this.Offset = new $Int64(0, 0);
			return;
		}
		this.msg = msg_;
		this.Offset = Offset_;
	});
	scanner = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", true, "encoding/json", false, function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.step = $throwNilPointerError;
			this.endTop = false;
			this.parseState = sliceType$2.nil;
			this.err = $ifaceNil;
			this.redo = false;
			this.redoCode = 0;
			this.redoState = $throwNilPointerError;
			this.bytes = new $Int64(0, 0);
			return;
		}
		this.step = step_;
		this.endTop = endTop_;
		this.parseState = parseState_;
		this.err = err_;
		this.redo = redo_;
		this.redoCode = redoCode_;
		this.redoState = redoState_;
		this.bytes = bytes_;
	});
	tagOptions = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", true, "encoding/json", false, null);
	sliceType = $sliceType($emptyInterface);
	structType = $structType("encoding/json", [{prop: "value", name: "value", anonymous: false, exported: false, typ: atomic.Value, tag: ""}, {prop: "mu", name: "mu", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}]);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(encoding.TextUnmarshaler);
	ptrType$1 = $ptrType(Marshaler);
	ptrType$2 = $ptrType(encoding.TextMarshaler);
	sliceType$2 = $sliceType($Int);
	structType$1 = $structType("", [{prop: "Struct", name: "Struct", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Field", name: "Field", anonymous: false, exported: true, typ: $String, tag: ""}]);
	ptrType$4 = $ptrType(UnmarshalTypeError);
	ptrType$5 = $ptrType(reflect.rtype);
	mapType = $mapType($String, $emptyInterface);
	ptrType$6 = $ptrType(field);
	sliceType$3 = $sliceType(field);
	mapType$1 = $mapType(reflect.Type, sliceType$3);
	ptrType$11 = $ptrType(SyntaxError);
	ptrType$13 = $ptrType(InvalidUnmarshalError);
	ptrType$14 = $ptrType(decodeState);
	funcType = $funcType([sliceType$1, sliceType$1], [$Bool], false);
	ptrType$26 = $ptrType(scanner);
	funcType$1 = $funcType([ptrType$26, $Uint8], [$Int], false);
	Unmarshal = function(data, v) {
		var _r$3, _r$4, d, data, err, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; d = $f.d; data = $f.data; err = $f.err; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decodeState.ptr(sliceType$1.nil, 0, new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new scanner.ptr($throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, 0, $throwNilPointerError, new $Int64(0, 0)), new structType$1.ptr("", ""), $ifaceNil, false);
		_r$3 = checkValid(data, d.scan); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		err = _r$3;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		d.init(data);
		_r$4 = d.unmarshal(v); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Unmarshal }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.d = d; $f.data = data; $f.err = err; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Unmarshal = Unmarshal;
	UnmarshalTypeError.ptr.prototype.Error = function() {
		var _r$3, _r$4, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (!(e.Struct === "") || !(e.Field === "")) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(e.Struct === "") || !(e.Field === "")) { */ case 1:
			_r$3 = e.Type.String(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return "json: cannot unmarshal " + e.Value + " into Go struct field " + e.Struct + "." + e.Field + " of type " + _r$3;
		/* } */ case 2:
		_r$4 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return "json: cannot unmarshal " + e.Value + " into Go value of type " + _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnmarshalTypeError.ptr.prototype.Error }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnmarshalTypeError.prototype.Error = function() { return this.$val.Error(); };
	InvalidUnmarshalError.ptr.prototype.Error = function() {
		var _r$3, _r$4, _r$5, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		if ($interfaceIsEqual(e.Type, $ifaceNil)) {
			$s = -1; return "json: Unmarshal(nil)";
		}
		_r$3 = e.Type.Kind(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((_r$3 === 22))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((_r$3 === 22))) { */ case 1:
			_r$4 = e.Type.String(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return "json: Unmarshal(non-pointer " + _r$4 + ")";
		/* } */ case 2:
		_r$5 = e.Type.String(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return "json: Unmarshal(nil " + _r$5 + ")";
		/* */ } return; } if ($f === undefined) { $f = { $blk: InvalidUnmarshalError.ptr.prototype.Error }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	InvalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };
	decodeState.ptr.prototype.unmarshal = function(v) {
		var _r$3, d, err, rv, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; d = $f.d; err = $f.err; rv = $f.rv; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		err[0] = $ifaceNil;
		d = this;
		$deferred.push([(function(err) { return function() {
			var _tuple, ok, r;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true);
				ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				err[0] = $assertType(r, $error);
			}
		}; })(err), []]);
		_r$3 = reflect.ValueOf(v); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		rv = _r$3;
		if (!(($clone(rv, reflect.Value).Kind() === 22)) || $clone(rv, reflect.Value).IsNil()) {
			err[0] = new InvalidUnmarshalError.ptr(reflect.TypeOf(v));
			$s = -1; return err[0];
		}
		d.scan.reset();
		$r = d.value($clone(rv, reflect.Value)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		err[0] = d.savedError;
		$s = -1; return err[0];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  err[0]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.unmarshal }; } $f._r$3 = _r$3; $f.d = d; $f.err = err; $f.rv = rv; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decodeState.prototype.unmarshal = function(v) { return this.$val.unmarshal(v); };
	Number.prototype.String = function() {
		var n;
		n = this.$val;
		return (n);
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var n;
		n = this.$val;
		return strconv.ParseFloat((n), 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var n;
		n = this.$val;
		return strconv.ParseInt((n), 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	isValidNumber = function(s) {
		var s;
		if (s === "") {
			return false;
		}
		if (s.charCodeAt(0) === 45) {
			s = $substring(s, 1);
			if (s === "") {
				return false;
			}
		}
		if ((s.charCodeAt(0) === 48)) {
			s = $substring(s, 1);
		} else if (49 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57) {
			s = $substring(s, 1);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		} else {
			return false;
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 46) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			s = $substring(s, 2);
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		}
		if (s.length >= 2 && ((s.charCodeAt(0) === 101) || (s.charCodeAt(0) === 69))) {
			s = $substring(s, 1);
			if ((s.charCodeAt(0) === 43) || (s.charCodeAt(0) === 45)) {
				s = $substring(s, 1);
				if (s === "") {
					return false;
				}
			}
			while (true) {
				if (!(s.length > 0 && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
				s = $substring(s, 1);
			}
		}
		return s === "";
	};
	decodeState.ptr.prototype.init = function(data) {
		var d, data;
		d = this;
		d.data = data;
		d.off = 0;
		d.savedError = $ifaceNil;
		d.errorContext.Struct = "";
		d.errorContext.Field = "";
		return d;
	};
	decodeState.prototype.init = function(data) { return this.$val.init(data); };
	decodeState.ptr.prototype.error = function(err) {
		var d, err;
		d = this;
		$panic(d.addErrorContext(err));
	};
	decodeState.prototype.error = function(err) { return this.$val.error(err); };
	decodeState.ptr.prototype.saveError = function(err) {
		var d, err;
		d = this;
		if ($interfaceIsEqual(d.savedError, $ifaceNil)) {
			d.savedError = d.addErrorContext(err);
		}
	};
	decodeState.prototype.saveError = function(err) { return this.$val.saveError(err); };
	decodeState.ptr.prototype.addErrorContext = function(err) {
		var _ref, d, err, err$1;
		d = this;
		if (!(d.errorContext.Struct === "") || !(d.errorContext.Field === "")) {
			_ref = err;
			if ($assertType(_ref, ptrType$4, true)[1]) {
				err$1 = _ref.$val;
				err$1.Struct = d.errorContext.Struct;
				err$1.Field = d.errorContext.Field;
				return err$1;
			}
		}
		return err;
	};
	decodeState.prototype.addErrorContext = function(err) { return this.$val.addErrorContext(err); };
	decodeState.ptr.prototype.next = function() {
		var _r$3, _r$4, _r$5, _tuple, c, d, err, item, rest, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; item = $f.item; rest = $f.rest; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_r$3 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		item = _tuple[0];
		rest = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			d.error(err);
		}
		d.off = d.data.$length - rest.$length >> 0;
		/* */ if (c === 123) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (c === 123) { */ case 2:
			_r$4 = d.scan.step(d.scan, 125); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			$s = 4; continue;
		/* } else { */ case 3:
			_r$5 = d.scan.step(d.scan, 93); /* */ $s = 6; case 6: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 4:
		$s = -1; return item;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.next }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.rest = rest; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.next = function() { return this.$val.next(); };
	decodeState.ptr.prototype.scanWhile = function(op) {
		var _r$3, _r$4, c, d, newOp, op, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; c = $f.c; d = $f.d; newOp = $f.newOp; op = $f.op; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		newOp = 0;
		/* while (true) { */ case 1:
			/* */ if (d.off >= d.data.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (d.off >= d.data.$length) { */ case 3:
				_r$3 = d.scan.eof(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				newOp = _r$3;
				d.off = d.data.$length + 1 >> 0;
				$s = 5; continue;
			/* } else { */ case 4:
				c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
				d.off = d.off + (1) >> 0;
				_r$4 = d.scan.step(d.scan, c); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				newOp = _r$4;
			/* } */ case 5:
			if (!((newOp === op))) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return newOp;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.scanWhile }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.c = c; $f.d = d; $f.newOp = newOp; $f.op = op; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.scanWhile = function(op) { return this.$val.scanWhile(op); };
	decodeState.ptr.prototype.value = function(v) {
		var _1, _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, n, op, rest, v, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; n = $f.n; op = $f.op; rest = $f.rest; v = $f.v; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (!$clone(v, reflect.Value).IsValid()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!$clone(v, reflect.Value).IsValid()) { */ case 1:
			_r$3 = nextValue($subslice(d.data, d.off), d.nextscan); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			rest = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			d.off = d.data.$length - rest.$length >> 0;
			if (d.scan.redo) {
				d.scan.redo = false;
				d.scan.step = stateBeginValue;
			}
			_r$4 = d.scan.step(d.scan, 34); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$4;
			_r$5 = d.scan.step(d.scan, 34); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			n = d.scan.parseState.$length;
			/* */ if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) === 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) === 0)) { */ case 6:
				_r$6 = d.scan.step(d.scan, 58); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				_r$7 = d.scan.step(d.scan, 34); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7;
				_r$8 = d.scan.step(d.scan, 34); /* */ $s = 10; case 10: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
				_r$9 = d.scan.step(d.scan, 125); /* */ $s = 11; case 11: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$9;
			/* } */ case 7:
			$s = -1; return;
		/* } */ case 2:
			_r$10 = d.scanWhile(9); /* */ $s = 13; case 13: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			op = _r$10;
			_1 = op;
			/* */ if (_1 === (6)) { $s = 14; continue; }
			/* */ if (_1 === (2)) { $s = 15; continue; }
			/* */ if (_1 === (1)) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (_1 === (6)) { */ case 14:
				$r = d.array($clone(v, reflect.Value)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else if (_1 === (2)) { */ case 15:
				$r = d.object($clone(v, reflect.Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else if (_1 === (1)) { */ case 16:
				$r = d.literal($clone(v, reflect.Value)); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 18; continue;
			/* } else { */ case 17:
				d.error(errPhase);
			/* } */ case 18:
		case 12:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.value }; } $f._1 = _1; $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.n = n; $f.op = op; $f.rest = rest; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.value = function(v) { return this.$val.value(v); };
	decodeState.ptr.prototype.valueQuoted = function() {
		var _1, _r$3, _r$4, _ref, d, op, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; d = $f.d; op = $f.op; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_r$3 = d.scanWhile(9); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			_1 = op;
			/* */ if (_1 === (6)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (6)) { */ case 3:
				$r = d.array(new reflect.Value.ptr(ptrType$5.nil, 0, 0)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_1 === (2)) { */ case 4:
				$r = d.object(new reflect.Value.ptr(ptrType$5.nil, 0, 0)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 7; continue;
			/* } else if (_1 === (1)) { */ case 5:
				_r$4 = d.literalInterface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_ref = _r$4;
				/* */ if (_ref === $ifaceNil || $assertType(_ref, $String, true)[1]) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_ref === $ifaceNil || $assertType(_ref, $String, true)[1]) { */ case 11:
					v = _ref;
					$s = -1; return v;
				/* } */ case 12:
				$s = 7; continue;
			/* } else { */ case 6:
				d.error(errPhase);
			/* } */ case 7:
		case 1:
		$s = -1; return (x = new unquotedValue.ptr(), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueQuoted }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.d = d; $f.op = op; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueQuoted = function() { return this.$val.valueQuoted(); };
	decodeState.ptr.prototype.indirect = function(v, decodingNull) {
		var _r$10, _r$11, _r$12, _r$13, _r$14, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _v, _v$1, _v$2, d, decodingNull, e, ok, ok$1, u, u$1, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; d = $f.d; decodingNull = $f.decodingNull; e = $f.e; ok = $f.ok; ok$1 = $f.ok$1; u = $f.u; u$1 = $f.u$1; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!(!(($clone(v, reflect.Value).Kind() === 22)))) { _v = false; $s = 3; continue s; }
		_r$3 = $clone(v, reflect.Value).Type().Name(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = !(_r$3 === ""); case 3:
		/* */ if (_v && $clone(v, reflect.Value).CanAddr()) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (_v && $clone(v, reflect.Value).CanAddr()) { */ case 1:
			v = $clone(v, reflect.Value).Addr();
		/* } */ case 2:
		/* while (true) { */ case 5:
			/* */ if (($clone(v, reflect.Value).Kind() === 20) && !$clone(v, reflect.Value).IsNil()) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (($clone(v, reflect.Value).Kind() === 20) && !$clone(v, reflect.Value).IsNil()) { */ case 7:
				_r$4 = $clone(v, reflect.Value).Elem(); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				e = _r$4;
				if (!(($clone(e, reflect.Value).Kind() === 22) && !$clone(e, reflect.Value).IsNil())) { _v$1 = false; $s = 12; continue s; }
				if (!decodingNull) { _v$2 = true; $s = 13; continue s; }
				_r$5 = $clone(e, reflect.Value).Elem(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = $clone(_r$5, reflect.Value).Kind(); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_v$2 = _r$6 === 22; case 13:
				_v$1 = _v$2; case 12:
				/* */ if (_v$1) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (_v$1) { */ case 10:
					v = e;
					/* continue; */ $s = 5; continue;
				/* } */ case 11:
			/* } */ case 8:
			if (!(($clone(v, reflect.Value).Kind() === 22))) {
				/* break; */ $s = 6; continue;
			}
			_r$7 = $clone(v, reflect.Value).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_r$8 = $clone(_r$7, reflect.Value).Kind(); /* */ $s = 19; case 19: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			/* */ if (!((_r$8 === 22)) && decodingNull && $clone(v, reflect.Value).CanSet()) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!((_r$8 === 22)) && decodingNull && $clone(v, reflect.Value).CanSet()) { */ case 16:
				/* break; */ $s = 6; continue;
			/* } */ case 17:
			/* */ if ($clone(v, reflect.Value).IsNil()) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ($clone(v, reflect.Value).IsNil()) { */ case 20:
				_r$9 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_r$10 = reflect.New(_r$9); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				$r = $clone(v, reflect.Value).Set($clone(_r$10, reflect.Value)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 21:
			_r$11 = $clone(v, reflect.Value).Type().NumMethod(); /* */ $s = 27; case 27: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
			/* */ if (_r$11 > 0) { $s = 25; continue; }
			/* */ $s = 26; continue;
			/* if (_r$11 > 0) { */ case 25:
				_r$12 = $clone(v, reflect.Value).Interface(); /* */ $s = 28; case 28: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_tuple = $assertType(_r$12, Unmarshaler, true);
				u = _tuple[0];
				ok = _tuple[1];
				if (ok) {
					$s = -1; return [u, $ifaceNil, new reflect.Value.ptr(ptrType$5.nil, 0, 0)];
				}
				/* */ if (!decodingNull) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if (!decodingNull) { */ case 29:
					_r$13 = $clone(v, reflect.Value).Interface(); /* */ $s = 31; case 31: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$1 = $assertType(_r$13, encoding.TextUnmarshaler, true);
					u$1 = _tuple$1[0];
					ok$1 = _tuple$1[1];
					if (ok$1) {
						$s = -1; return [$ifaceNil, u$1, new reflect.Value.ptr(ptrType$5.nil, 0, 0)];
					}
				/* } */ case 30:
			/* } */ case 26:
			_r$14 = $clone(v, reflect.Value).Elem(); /* */ $s = 32; case 32: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
			v = _r$14;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return [$ifaceNil, $ifaceNil, v];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.indirect }; } $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.d = d; $f.decodingNull = decodingNull; $f.e = e; $f.ok = ok; $f.ok$1 = ok$1; $f.u = u; $f.u$1 = u$1; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.indirect = function(v, decodingNull) { return this.$val.indirect(v, decodingNull); };
	decodeState.ptr.prototype.array = function(v) {
		var _1, _q, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, d, err, i, newcap, newv, op, pv, u, ut, v, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; newcap = $f.newcap; newv = $f.newv; op = $f.op; pv = $f.pv; u = $f.u; ut = $f.ut; v = $f.v; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$3 = d.indirect($clone(v, reflect.Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$4 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = u.UnmarshalJSON(_r$4); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			$s = -1; return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("array", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
			d.off = d.off - (1) >> 0;
			_r$6 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = -1; return;
		/* } */ case 7:
		v = pv;
			_1 = $clone(v, reflect.Value).Kind();
			/* */ if (_1 === (20)) { $s = 10; continue; }
			/* */ if (_1 === (17)) { $s = 11; continue; }
			/* */ if (_1 === (23)) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_1 === (20)) { */ case 10:
				_r$7 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 17; case 17: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				/* */ if (_r$7 === 0) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (_r$7 === 0) { */ case 15:
					_r$8 = d.arrayInterface(); /* */ $s = 18; case 18: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$9 = reflect.ValueOf(_r$8); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = $clone(v, reflect.Value).Set($clone(_r$9, reflect.Value)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 16:
				d.saveError(new UnmarshalTypeError.ptr("array", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
				d.off = d.off - (1) >> 0;
				_r$10 = d.next(); /* */ $s = 21; case 21: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$10;
				$s = -1; return;
			/* } else if (_1 === (17)) { */ case 11:
				$s = 14; continue;
			/* } else if (_1 === (23)) { */ case 12:
				/* break; */ $s = 9; continue;
				$s = 14; continue;
			/* } else { */ case 13:
				d.saveError(new UnmarshalTypeError.ptr("array", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
				d.off = d.off - (1) >> 0;
				_r$11 = d.next(); /* */ $s = 22; case 22: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_r$11;
				$s = -1; return;
			/* } */ case 14:
		case 9:
		i = 0;
		/* while (true) { */ case 23:
			_r$12 = d.scanWhile(9); /* */ $s = 25; case 25: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
			op = _r$12;
			if (op === 8) {
				/* break; */ $s = 24; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			/* */ if ($clone(v, reflect.Value).Kind() === 23) { $s = 26; continue; }
			/* */ $s = 27; continue;
			/* if ($clone(v, reflect.Value).Kind() === 23) { */ case 26:
				/* */ if (i >= $clone(v, reflect.Value).Cap()) { $s = 28; continue; }
				/* */ $s = 29; continue;
				/* if (i >= $clone(v, reflect.Value).Cap()) { */ case 28:
					newcap = $clone(v, reflect.Value).Cap() + (_q = $clone(v, reflect.Value).Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					if (newcap < 4) {
						newcap = 4;
					}
					_r$13 = reflect.MakeSlice($clone(v, reflect.Value).Type(), $clone(v, reflect.Value).Len(), newcap); /* */ $s = 30; case 30: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					newv = _r$13;
					_r$14 = reflect.Copy($clone(newv, reflect.Value), $clone(v, reflect.Value)); /* */ $s = 31; case 31: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_r$14;
					$r = $clone(v, reflect.Value).Set($clone(newv, reflect.Value)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 29:
				if (i >= $clone(v, reflect.Value).Len()) {
					$clone(v, reflect.Value).SetLen(i + 1 >> 0);
				}
			/* } */ case 27:
			/* */ if (i < $clone(v, reflect.Value).Len()) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (i < $clone(v, reflect.Value).Len()) { */ case 33:
				_r$15 = $clone(v, reflect.Value).Index(i); /* */ $s = 36; case 36: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				$r = d.value($clone(_r$15, reflect.Value)); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 35; continue;
			/* } else { */ case 34:
				$r = d.value(new reflect.Value.ptr(ptrType$5.nil, 0, 0)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 35:
			i = i + (1) >> 0;
			_r$16 = d.scanWhile(9); /* */ $s = 39; case 39: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
			op = _r$16;
			if (op === 8) {
				/* break; */ $s = 24; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 23; continue; case 24:
		/* */ if (i < $clone(v, reflect.Value).Len()) { $s = 40; continue; }
		/* */ $s = 41; continue;
		/* if (i < $clone(v, reflect.Value).Len()) { */ case 40:
			/* */ if ($clone(v, reflect.Value).Kind() === 17) { $s = 42; continue; }
			/* */ $s = 43; continue;
			/* if ($clone(v, reflect.Value).Kind() === 17) { */ case 42:
				_r$17 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 45; case 45: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$18 = reflect.Zero(_r$17); /* */ $s = 46; case 46: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
				z = _r$18;
				/* while (true) { */ case 47:
					/* if (!(i < $clone(v, reflect.Value).Len())) { break; } */ if(!(i < $clone(v, reflect.Value).Len())) { $s = 48; continue; }
					_r$19 = $clone(v, reflect.Value).Index(i); /* */ $s = 49; case 49: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
					$r = $clone(_r$19, reflect.Value).Set($clone(z, reflect.Value)); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (1) >> 0;
				/* } */ $s = 47; continue; case 48:
				$s = 44; continue;
			/* } else { */ case 43:
				$clone(v, reflect.Value).SetLen(i);
			/* } */ case 44:
		/* } */ case 41:
		/* */ if ((i === 0) && ($clone(v, reflect.Value).Kind() === 23)) { $s = 51; continue; }
		/* */ $s = 52; continue;
		/* if ((i === 0) && ($clone(v, reflect.Value).Kind() === 23)) { */ case 51:
			_r$20 = reflect.MakeSlice($clone(v, reflect.Value).Type(), 0, 0); /* */ $s = 53; case 53: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
			$r = $clone(v, reflect.Value).Set($clone(_r$20, reflect.Value)); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 52:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.array }; } $f._1 = _1; $f._q = _q; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.newcap = newcap; $f.newv = newv; $f.op = op; $f.pv = pv; $f.u = u; $f.ut = ut; $f.v = v; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.array = function(v) { return this.$val.array(v); };
	decodeState.ptr.prototype.object = function(v) {
		var _1, _2, _3, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$27, _r$28, _r$29, _r$3, _r$30, _r$31, _r$32, _r$33, _r$34, _r$35, _r$36, _r$37, _r$38, _r$39, _r$4, _r$40, _r$41, _r$42, _r$43, _r$44, _r$45, _r$46, _r$47, _r$48, _r$49, _r$5, _r$50, _r$51, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _ref$2, _tuple, _tuple$1, _tuple$2, _tuple$3, _v, _v$1, _v$2, _v$3, d, destring, elemType, err, err$1, err$2, f, ff, fields, i, i$1, item, key, kt, kv, mapElem, n, n$1, ok, op, pv, qv, qv$1, qv$2, s, s$1, start, subv, t, u, ut, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$27 = $f._r$27; _r$28 = $f._r$28; _r$29 = $f._r$29; _r$3 = $f._r$3; _r$30 = $f._r$30; _r$31 = $f._r$31; _r$32 = $f._r$32; _r$33 = $f._r$33; _r$34 = $f._r$34; _r$35 = $f._r$35; _r$36 = $f._r$36; _r$37 = $f._r$37; _r$38 = $f._r$38; _r$39 = $f._r$39; _r$4 = $f._r$4; _r$40 = $f._r$40; _r$41 = $f._r$41; _r$42 = $f._r$42; _r$43 = $f._r$43; _r$44 = $f._r$44; _r$45 = $f._r$45; _r$46 = $f._r$46; _r$47 = $f._r$47; _r$48 = $f._r$48; _r$49 = $f._r$49; _r$5 = $f._r$5; _r$50 = $f._r$50; _r$51 = $f._r$51; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; _v$3 = $f._v$3; d = $f.d; destring = $f.destring; elemType = $f.elemType; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; ff = $f.ff; fields = $f.fields; i = $f.i; i$1 = $f.i$1; item = $f.item; key = $f.key; kt = $f.kt; kv = $f.kv; mapElem = $f.mapElem; n = $f.n; n$1 = $f.n$1; ok = $f.ok; op = $f.op; pv = $f.pv; qv = $f.qv; qv$1 = $f.qv$1; qv$2 = $f.qv$2; s = $f.s; s$1 = $f.s$1; start = $f.start; subv = $f.subv; t = $f.t; u = $f.u; ut = $f.ut; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r$3 = d.indirect($clone(v, reflect.Value), false); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple = _r$3;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 2:
			d.off = d.off - (1) >> 0;
			_r$4 = d.next(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = u.UnmarshalJSON(_r$4); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			$s = -1; return;
		/* } */ case 3:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 6:
			d.saveError(new UnmarshalTypeError.ptr("object", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
			d.off = d.off - (1) >> 0;
			_r$6 = d.next(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$6;
			$s = -1; return;
		/* } */ case 7:
		v = pv;
		if (!($clone(v, reflect.Value).Kind() === 20)) { _v = false; $s = 11; continue s; }
		_r$7 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 12; case 12: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_v = _r$7 === 0; case 11:
		/* */ if (_v) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v) { */ case 9:
			_r$8 = d.objectInterface(); /* */ $s = 13; case 13: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_r$9 = reflect.ValueOf(new mapType(_r$8)); /* */ $s = 14; case 14: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			$r = $clone(v, reflect.Value).Set($clone(_r$9, reflect.Value)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 10:
			_1 = $clone(v, reflect.Value).Kind();
			/* */ if (_1 === (21)) { $s = 17; continue; }
			/* */ if (_1 === (25)) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (_1 === (21)) { */ case 17:
				t = $clone(v, reflect.Value).Type();
					_r$10 = t.Key(); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_r$11 = _r$10.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_2 = _r$11;
					/* */ if ((_2 === (24)) || (_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) { $s = 24; continue; }
					_r$12 = t.Key(); /* */ $s = 27; case 27: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_r$13 = reflect.PtrTo(_r$12); /* */ $s = 28; case 28: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_r$14 = _r$13.Implements(textUnmarshalerType); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					/* */ if (!_r$14) { $s = 25; continue; }
					/* */ $s = 26; continue;
					/* if ((_2 === (24)) || (_2 === (2)) || (_2 === (3)) || (_2 === (4)) || (_2 === (5)) || (_2 === (6)) || (_2 === (7)) || (_2 === (8)) || (_2 === (9)) || (_2 === (10)) || (_2 === (11)) || (_2 === (12))) { */ case 24:
						$s = 26; continue;
					/* } else if (!_r$14) { */ case 25:
						d.saveError(new UnmarshalTypeError.ptr("object", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
						d.off = d.off - (1) >> 0;
						_r$15 = d.next(); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$15;
						$s = -1; return;
					/* } */ case 26:
				case 21:
				/* */ if ($clone(v, reflect.Value).IsNil()) { $s = 31; continue; }
				/* */ $s = 32; continue;
				/* if ($clone(v, reflect.Value).IsNil()) { */ case 31:
					_r$16 = reflect.MakeMap(t); /* */ $s = 33; case 33: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
					$r = $clone(v, reflect.Value).Set($clone(_r$16, reflect.Value)); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 32:
				$s = 20; continue;
			/* } else if (_1 === (25)) { */ case 18:
				$s = 20; continue;
			/* } else { */ case 19:
				d.saveError(new UnmarshalTypeError.ptr("object", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
				d.off = d.off - (1) >> 0;
				_r$17 = d.next(); /* */ $s = 35; case 35: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
				_r$17;
				$s = -1; return;
			/* } */ case 20:
		case 16:
		mapElem = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
		/* while (true) { */ case 36:
			_r$18 = d.scanWhile(9); /* */ $s = 38; case 38: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
			op = _r$18;
			if (op === 5) {
				/* break; */ $s = 37; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$19 = d.scanWhile(0); /* */ $s = 39; case 39: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
			op = _r$19;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple$1 = unquoteBytes(item);
			key = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				d.error(errPhase);
			}
			subv = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
			destring = false;
			/* */ if ($clone(v, reflect.Value).Kind() === 21) { $s = 40; continue; }
			/* */ $s = 41; continue;
			/* if ($clone(v, reflect.Value).Kind() === 21) { */ case 40:
				_r$20 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 43; case 43: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
				elemType = _r$20;
				/* */ if (!$clone(mapElem, reflect.Value).IsValid()) { $s = 44; continue; }
				/* */ $s = 45; continue;
				/* if (!$clone(mapElem, reflect.Value).IsValid()) { */ case 44:
					_r$21 = reflect.New(elemType); /* */ $s = 47; case 47: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
					_r$22 = $clone(_r$21, reflect.Value).Elem(); /* */ $s = 48; case 48: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
					mapElem = _r$22;
					$s = 46; continue;
				/* } else { */ case 45:
					_r$23 = reflect.Zero(elemType); /* */ $s = 49; case 49: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
					$r = $clone(mapElem, reflect.Value).Set($clone(_r$23, reflect.Value)); /* */ $s = 50; case 50: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 46:
				subv = mapElem;
				$s = 42; continue;
			/* } else { */ case 41:
				f = ptrType$6.nil;
				_r$24 = cachedTypeFields($clone(v, reflect.Value).Type()); /* */ $s = 51; case 51: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
				fields = _r$24;
				_ref = fields;
				_i = 0;
				/* while (true) { */ case 52:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 53; continue; }
					i = _i;
					ff = ((i < 0 || i >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + i]);
					if (bytes.Equal(ff.nameBytes, key)) {
						f = ff;
						/* break; */ $s = 53; continue;
					}
					if (!(f === ptrType$6.nil)) { _v$1 = false; $s = 56; continue s; }
					_r$25 = ff.equalFold(ff.nameBytes, key); /* */ $s = 57; case 57: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
					_v$1 = _r$25; case 56:
					/* */ if (_v$1) { $s = 54; continue; }
					/* */ $s = 55; continue;
					/* if (_v$1) { */ case 54:
						f = ff;
					/* } */ case 55:
					_i++;
				/* } */ $s = 52; continue; case 53:
				/* */ if (!(f === ptrType$6.nil)) { $s = 58; continue; }
				/* */ $s = 59; continue;
				/* if (!(f === ptrType$6.nil)) { */ case 58:
					subv = v;
					destring = f.quoted;
					_ref$1 = f.index;
					_i$1 = 0;
					/* while (true) { */ case 60:
						/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 61; continue; }
						i$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
						/* */ if ($clone(subv, reflect.Value).Kind() === 22) { $s = 62; continue; }
						/* */ $s = 63; continue;
						/* if ($clone(subv, reflect.Value).Kind() === 22) { */ case 62:
							/* */ if ($clone(subv, reflect.Value).IsNil()) { $s = 64; continue; }
							/* */ $s = 65; continue;
							/* if ($clone(subv, reflect.Value).IsNil()) { */ case 64:
								_r$26 = $clone(subv, reflect.Value).Type().Elem(); /* */ $s = 66; case 66: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
								_r$27 = reflect.New(_r$26); /* */ $s = 67; case 67: if($c) { $c = false; _r$27 = _r$27.$blk(); } if (_r$27 && _r$27.$blk !== undefined) { break s; }
								$r = $clone(subv, reflect.Value).Set($clone(_r$27, reflect.Value)); /* */ $s = 68; case 68: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 65:
							_r$28 = $clone(subv, reflect.Value).Elem(); /* */ $s = 69; case 69: if($c) { $c = false; _r$28 = _r$28.$blk(); } if (_r$28 && _r$28.$blk !== undefined) { break s; }
							subv = _r$28;
						/* } */ case 63:
						_r$29 = $clone(subv, reflect.Value).Field(i$1); /* */ $s = 70; case 70: if($c) { $c = false; _r$29 = _r$29.$blk(); } if (_r$29 && _r$29.$blk !== undefined) { break s; }
						subv = _r$29;
						_i$1++;
					/* } */ $s = 60; continue; case 61:
					d.errorContext.Field = f.name;
					_r$30 = $clone(v, reflect.Value).Type().Name(); /* */ $s = 71; case 71: if($c) { $c = false; _r$30 = _r$30.$blk(); } if (_r$30 && _r$30.$blk !== undefined) { break s; }
					d.errorContext.Struct = _r$30;
				/* } */ case 59:
			/* } */ case 42:
			/* */ if (op === 9) { $s = 72; continue; }
			/* */ $s = 73; continue;
			/* if (op === 9) { */ case 72:
				_r$31 = d.scanWhile(9); /* */ $s = 74; case 74: if($c) { $c = false; _r$31 = _r$31.$blk(); } if (_r$31 && _r$31.$blk !== undefined) { break s; }
				op = _r$31;
			/* } */ case 73:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			/* */ if (destring) { $s = 75; continue; }
			/* */ $s = 76; continue;
			/* if (destring) { */ case 75:
				_r$32 = d.valueQuoted(); /* */ $s = 78; case 78: if($c) { $c = false; _r$32 = _r$32.$blk(); } if (_r$32 && _r$32.$blk !== undefined) { break s; }
				_ref$2 = _r$32;
				/* */ if (_ref$2 === $ifaceNil) { $s = 79; continue; }
				/* */ if ($assertType(_ref$2, $String, true)[1]) { $s = 80; continue; }
				/* */ $s = 81; continue;
				/* if (_ref$2 === $ifaceNil) { */ case 79:
					qv = _ref$2;
					$r = d.literalStore(nullLiteral, $clone(subv, reflect.Value), false); /* */ $s = 83; case 83: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 82; continue;
				/* } else if ($assertType(_ref$2, $String, true)[1]) { */ case 80:
					qv$1 = _ref$2.$val;
					$r = d.literalStore((new sliceType$1($stringToBytes(qv$1))), $clone(subv, reflect.Value), true); /* */ $s = 84; case 84: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 82; continue;
				/* } else { */ case 81:
					qv$2 = _ref$2;
					_r$33 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v", new sliceType([$clone(subv, reflect.Value).Type()])); /* */ $s = 85; case 85: if($c) { $c = false; _r$33 = _r$33.$blk(); } if (_r$33 && _r$33.$blk !== undefined) { break s; }
					$r = d.saveError(_r$33); /* */ $s = 86; case 86: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 82:
				$s = 77; continue;
			/* } else { */ case 76:
				$r = d.value($clone(subv, reflect.Value)); /* */ $s = 87; case 87: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 77:
			/* */ if ($clone(v, reflect.Value).Kind() === 21) { $s = 88; continue; }
			/* */ $s = 89; continue;
			/* if ($clone(v, reflect.Value).Kind() === 21) { */ case 88:
				_r$34 = $clone(v, reflect.Value).Type().Key(); /* */ $s = 90; case 90: if($c) { $c = false; _r$34 = _r$34.$blk(); } if (_r$34 && _r$34.$blk !== undefined) { break s; }
				kt = _r$34;
				kv = new reflect.Value.ptr(ptrType$5.nil, 0, 0);
					_r$35 = kt.Kind(); /* */ $s = 96; case 96: if($c) { $c = false; _r$35 = _r$35.$blk(); } if (_r$35 && _r$35.$blk !== undefined) { break s; }
					/* */ if ((_r$35 === 24)) { $s = 92; continue; }
					_r$36 = reflect.PtrTo(kt).Implements(textUnmarshalerType); /* */ $s = 97; case 97: if($c) { $c = false; _r$36 = _r$36.$blk(); } if (_r$36 && _r$36.$blk !== undefined) { break s; }
					/* */ if (_r$36) { $s = 93; continue; }
					/* */ $s = 94; continue;
					/* if ((_r$35 === 24)) { */ case 92:
						_r$37 = reflect.ValueOf(key); /* */ $s = 98; case 98: if($c) { $c = false; _r$37 = _r$37.$blk(); } if (_r$37 && _r$37.$blk !== undefined) { break s; }
						_r$38 = $clone(_r$37, reflect.Value).Convert(kt); /* */ $s = 99; case 99: if($c) { $c = false; _r$38 = _r$38.$blk(); } if (_r$38 && _r$38.$blk !== undefined) { break s; }
						kv = _r$38;
						$s = 95; continue;
					/* } else if (_r$36) { */ case 93:
						_r$39 = $clone(v, reflect.Value).Type().Key(); /* */ $s = 100; case 100: if($c) { $c = false; _r$39 = _r$39.$blk(); } if (_r$39 && _r$39.$blk !== undefined) { break s; }
						_r$40 = reflect.New(_r$39); /* */ $s = 101; case 101: if($c) { $c = false; _r$40 = _r$40.$blk(); } if (_r$40 && _r$40.$blk !== undefined) { break s; }
						kv = _r$40;
						$r = d.literalStore(item, $clone(kv, reflect.Value), true); /* */ $s = 102; case 102: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						_r$41 = $clone(kv, reflect.Value).Elem(); /* */ $s = 103; case 103: if($c) { $c = false; _r$41 = _r$41.$blk(); } if (_r$41 && _r$41.$blk !== undefined) { break s; }
						kv = _r$41;
						$s = 95; continue;
					/* } else { */ case 94:
							_r$42 = kt.Kind(); /* */ $s = 105; case 105: if($c) { $c = false; _r$42 = _r$42.$blk(); } if (_r$42 && _r$42.$blk !== undefined) { break s; }
							_3 = _r$42;
							/* */ if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6))) { $s = 106; continue; }
							/* */ if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) { $s = 107; continue; }
							/* */ $s = 108; continue;
							/* if ((_3 === (2)) || (_3 === (3)) || (_3 === (4)) || (_3 === (5)) || (_3 === (6))) { */ case 106:
								s = ($bytesToString(key));
								_tuple$2 = strconv.ParseInt(s, 10, 64);
								n = _tuple$2[0];
								err$1 = _tuple$2[1];
								if (!($interfaceIsEqual(err$1, $ifaceNil))) { _v$2 = true; $s = 112; continue s; }
								_r$43 = reflect.Zero(kt); /* */ $s = 113; case 113: if($c) { $c = false; _r$43 = _r$43.$blk(); } if (_r$43 && _r$43.$blk !== undefined) { break s; }
								_r$44 = $clone(_r$43, reflect.Value).OverflowInt(n); /* */ $s = 114; case 114: if($c) { $c = false; _r$44 = _r$44.$blk(); } if (_r$44 && _r$44.$blk !== undefined) { break s; }
								_v$2 = _r$44; case 112:
								/* */ if (_v$2) { $s = 110; continue; }
								/* */ $s = 111; continue;
								/* if (_v$2) { */ case 110:
									d.saveError(new UnmarshalTypeError.ptr("number " + s, kt, (new $Int64(0, (start + 1 >> 0))), "", ""));
									$s = -1; return;
								/* } */ case 111:
								_r$45 = reflect.ValueOf(n); /* */ $s = 115; case 115: if($c) { $c = false; _r$45 = _r$45.$blk(); } if (_r$45 && _r$45.$blk !== undefined) { break s; }
								_r$46 = $clone(_r$45, reflect.Value).Convert(kt); /* */ $s = 116; case 116: if($c) { $c = false; _r$46 = _r$46.$blk(); } if (_r$46 && _r$46.$blk !== undefined) { break s; }
								kv = _r$46;
								$s = 109; continue;
							/* } else if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10)) || (_3 === (11)) || (_3 === (12))) { */ case 107:
								s$1 = ($bytesToString(key));
								_tuple$3 = strconv.ParseUint(s$1, 10, 64);
								n$1 = _tuple$3[0];
								err$2 = _tuple$3[1];
								if (!($interfaceIsEqual(err$2, $ifaceNil))) { _v$3 = true; $s = 119; continue s; }
								_r$47 = reflect.Zero(kt); /* */ $s = 120; case 120: if($c) { $c = false; _r$47 = _r$47.$blk(); } if (_r$47 && _r$47.$blk !== undefined) { break s; }
								_r$48 = $clone(_r$47, reflect.Value).OverflowUint(n$1); /* */ $s = 121; case 121: if($c) { $c = false; _r$48 = _r$48.$blk(); } if (_r$48 && _r$48.$blk !== undefined) { break s; }
								_v$3 = _r$48; case 119:
								/* */ if (_v$3) { $s = 117; continue; }
								/* */ $s = 118; continue;
								/* if (_v$3) { */ case 117:
									d.saveError(new UnmarshalTypeError.ptr("number " + s$1, kt, (new $Int64(0, (start + 1 >> 0))), "", ""));
									$s = -1; return;
								/* } */ case 118:
								_r$49 = reflect.ValueOf(n$1); /* */ $s = 122; case 122: if($c) { $c = false; _r$49 = _r$49.$blk(); } if (_r$49 && _r$49.$blk !== undefined) { break s; }
								_r$50 = $clone(_r$49, reflect.Value).Convert(kt); /* */ $s = 123; case 123: if($c) { $c = false; _r$50 = _r$50.$blk(); } if (_r$50 && _r$50.$blk !== undefined) { break s; }
								kv = _r$50;
								$s = 109; continue;
							/* } else { */ case 108:
								$panic(new $String("json: Unexpected key type"));
							/* } */ case 109:
						case 104:
					/* } */ case 95:
				case 91:
				$r = $clone(v, reflect.Value).SetMapIndex($clone(kv, reflect.Value), $clone(subv, reflect.Value)); /* */ $s = 124; case 124: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 89:
			_r$51 = d.scanWhile(9); /* */ $s = 125; case 125: if($c) { $c = false; _r$51 = _r$51.$blk(); } if (_r$51 && _r$51.$blk !== undefined) { break s; }
			op = _r$51;
			if (op === 5) {
				/* break; */ $s = 37; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
			d.errorContext.Struct = "";
			d.errorContext.Field = "";
		/* } */ $s = 36; continue; case 37:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.object }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$27 = _r$27; $f._r$28 = _r$28; $f._r$29 = _r$29; $f._r$3 = _r$3; $f._r$30 = _r$30; $f._r$31 = _r$31; $f._r$32 = _r$32; $f._r$33 = _r$33; $f._r$34 = _r$34; $f._r$35 = _r$35; $f._r$36 = _r$36; $f._r$37 = _r$37; $f._r$38 = _r$38; $f._r$39 = _r$39; $f._r$4 = _r$4; $f._r$40 = _r$40; $f._r$41 = _r$41; $f._r$42 = _r$42; $f._r$43 = _r$43; $f._r$44 = _r$44; $f._r$45 = _r$45; $f._r$46 = _r$46; $f._r$47 = _r$47; $f._r$48 = _r$48; $f._r$49 = _r$49; $f._r$5 = _r$5; $f._r$50 = _r$50; $f._r$51 = _r$51; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f._v$3 = _v$3; $f.d = d; $f.destring = destring; $f.elemType = elemType; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.ff = ff; $f.fields = fields; $f.i = i; $f.i$1 = i$1; $f.item = item; $f.key = key; $f.kt = kt; $f.kv = kv; $f.mapElem = mapElem; $f.n = n; $f.n$1 = n$1; $f.ok = ok; $f.op = op; $f.pv = pv; $f.qv = qv; $f.qv$1 = qv$1; $f.qv$2 = qv$2; $f.s = s; $f.s$1 = s$1; $f.start = start; $f.subv = subv; $f.t = t; $f.u = u; $f.ut = ut; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.object = function(v) { return this.$val.object(v); };
	decodeState.ptr.prototype.literal = function(v) {
		var _r$3, d, op, start, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; d = $f.d; op = $f.op; start = $f.start; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		start = d.off - 1 >> 0;
		_r$3 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		op = _r$3;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		$r = d.literalStore($subslice(d.data, start, d.off), $clone(v, reflect.Value), false); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literal }; } $f._r$3 = _r$3; $f.d = d; $f.op = op; $f.start = start; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literal = function(v) { return this.$val.literal(v); };
	decodeState.ptr.prototype.convertNumber = function(s) {
		var _tuple, d, err, f, s;
		d = this;
		if (d.useNumber) {
			return [new Number((s)), $ifaceNil];
		}
		_tuple = strconv.ParseFloat(s, 64);
		f = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new UnmarshalTypeError.ptr("number " + s, reflect.TypeOf(new $Float64(0)), (new $Int64(0, d.off)), "", "")];
		}
		return [new $Float64(f), $ifaceNil];
	};
	decodeState.prototype.convertNumber = function(s) { return this.$val.convertNumber(s); };
	decodeState.ptr.prototype.literalStore = function(item, v, fromQuoted) {
		var _1, _2, _3, _4, _5, _6, _arg, _arg$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$22, _r$23, _r$24, _r$25, _r$26, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, c, d, err, err$1, err$2, err$3, err$4, err$5, err$6, fromQuoted, isNull, item, n, n$1, n$2, n$3, n$4, ok, ok$1, pv, s, s$1, s$2, u, ut, v, val, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _arg = $f._arg; _arg$1 = $f._arg$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$22 = $f._r$22; _r$23 = $f._r$23; _r$24 = $f._r$24; _r$25 = $f._r$25; _r$26 = $f._r$26; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; b = $f.b; c = $f.c; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; fromQuoted = $f.fromQuoted; isNull = $f.isNull; item = $f.item; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; n$3 = $f.n$3; n$4 = $f.n$4; ok = $f.ok; ok$1 = $f.ok$1; pv = $f.pv; s = $f.s; s$1 = $f.s$1; s$2 = $f.s$2; u = $f.u; ut = $f.ut; v = $f.v; val = $f.val; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (item.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (item.$length === 0) { */ case 1:
			_r$3 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$r = d.saveError(_r$3); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		isNull = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 110;
		_r$4 = d.indirect($clone(v, reflect.Value), isNull); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple = _r$4;
		u = _tuple[0];
		ut = _tuple[1];
		pv = _tuple[2];
		/* */ if (!($interfaceIsEqual(u, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(u, $ifaceNil))) { */ case 6:
			_r$5 = u.UnmarshalJSON(item); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			err = _r$5;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			$s = -1; return;
		/* } */ case 7:
		/* */ if (!($interfaceIsEqual(ut, $ifaceNil))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!($interfaceIsEqual(ut, $ifaceNil))) { */ case 9:
			/* */ if (!(((0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 34))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!(((0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 34))) { */ case 11:
				/* */ if (fromQuoted) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (fromQuoted) { */ case 13:
					_r$6 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 16; case 16: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					$r = d.saveError(_r$6); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 15; continue;
				/* } else { */ case 14:
					val = "";
					_1 = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]);
					if (_1 === (110)) {
						val = "null";
					} else if ((_1 === (116)) || (_1 === (102))) {
						val = "bool";
					} else {
						val = "number";
					}
					d.saveError(new UnmarshalTypeError.ptr(val, $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
				/* } */ case 15:
				$s = -1; return;
			/* } */ case 12:
			_tuple$1 = unquoteBytes(item);
			s = _tuple$1[0];
			ok = _tuple$1[1];
			/* */ if (!ok) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (!ok) { */ case 18:
				/* */ if (fromQuoted) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (fromQuoted) { */ case 20:
					_r$7 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					$r = d.error(_r$7); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 22; continue;
				/* } else { */ case 21:
					d.error(errPhase);
				/* } */ case 22:
			/* } */ case 19:
			_r$8 = ut.UnmarshalText(s); /* */ $s = 25; case 25: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			err$1 = _r$8;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				d.error(err$1);
			}
			$s = -1; return;
		/* } */ case 10:
		v = pv;
			c = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]);
			_2 = c;
			/* */ if (_2 === (110)) { $s = 27; continue; }
			/* */ if ((_2 === (116)) || (_2 === (102))) { $s = 28; continue; }
			/* */ if (_2 === (34)) { $s = 29; continue; }
			/* */ $s = 30; continue;
			/* if (_2 === (110)) { */ case 27:
				/* */ if (fromQuoted && !(($bytesToString(item)) === "null")) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (fromQuoted && !(($bytesToString(item)) === "null")) { */ case 32:
					_r$9 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 34; case 34: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					$r = d.saveError(_r$9); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 26; continue;
				/* } */ case 33:
					_3 = $clone(v, reflect.Value).Kind();
					/* */ if ((_3 === (20)) || (_3 === (22)) || (_3 === (21)) || (_3 === (23))) { $s = 37; continue; }
					/* */ $s = 38; continue;
					/* if ((_3 === (20)) || (_3 === (22)) || (_3 === (21)) || (_3 === (23))) { */ case 37:
						_r$10 = reflect.Zero($clone(v, reflect.Value).Type()); /* */ $s = 39; case 39: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
						$r = $clone(v, reflect.Value).Set($clone(_r$10, reflect.Value)); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 38:
				case 36:
				$s = 31; continue;
			/* } else if ((_2 === (116)) || (_2 === (102))) { */ case 28:
				value = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]) === 116;
				/* */ if (fromQuoted && !(($bytesToString(item)) === "true") && !(($bytesToString(item)) === "false")) { $s = 41; continue; }
				/* */ $s = 42; continue;
				/* if (fromQuoted && !(($bytesToString(item)) === "true") && !(($bytesToString(item)) === "false")) { */ case 41:
					_r$11 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 43; case 43: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					$r = d.saveError(_r$11); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* break; */ $s = 26; continue;
				/* } */ case 42:
					_4 = $clone(v, reflect.Value).Kind();
					/* */ if (_4 === (1)) { $s = 46; continue; }
					/* */ if (_4 === (20)) { $s = 47; continue; }
					/* */ if (fromQuoted) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if (_4 === (1)) { */ case 46:
						$clone(v, reflect.Value).SetBool(value);
						$s = 50; continue;
					/* } else if (_4 === (20)) { */ case 47:
						_r$12 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 54; case 54: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						/* */ if (_r$12 === 0) { $s = 51; continue; }
						/* */ $s = 52; continue;
						/* if (_r$12 === 0) { */ case 51:
							_r$13 = reflect.ValueOf(new $Bool(value)); /* */ $s = 55; case 55: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							$r = $clone(v, reflect.Value).Set($clone(_r$13, reflect.Value)); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 53; continue;
						/* } else { */ case 52:
							d.saveError(new UnmarshalTypeError.ptr("bool", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
						/* } */ case 53:
						$s = 50; continue;
					/* } else if (fromQuoted) { */ case 48:
						_r$14 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 57; case 57: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						$r = d.saveError(_r$14); /* */ $s = 58; case 58: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 50; continue;
					/* } else { */ case 49:
						d.saveError(new UnmarshalTypeError.ptr("bool", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
					/* } */ case 50:
				case 45:
				$s = 31; continue;
			/* } else if (_2 === (34)) { */ case 29:
				_tuple$2 = unquoteBytes(item);
				s$1 = _tuple$2[0];
				ok$1 = _tuple$2[1];
				/* */ if (!ok$1) { $s = 59; continue; }
				/* */ $s = 60; continue;
				/* if (!ok$1) { */ case 59:
					/* */ if (fromQuoted) { $s = 61; continue; }
					/* */ $s = 62; continue;
					/* if (fromQuoted) { */ case 61:
						_r$15 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 64; case 64: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						$r = d.error(_r$15); /* */ $s = 65; case 65: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 63; continue;
					/* } else { */ case 62:
						d.error(errPhase);
					/* } */ case 63:
				/* } */ case 60:
					_5 = $clone(v, reflect.Value).Kind();
					/* */ if (_5 === (23)) { $s = 67; continue; }
					/* */ if (_5 === (24)) { $s = 68; continue; }
					/* */ if (_5 === (20)) { $s = 69; continue; }
					/* */ $s = 70; continue;
					/* if (_5 === (23)) { */ case 67:
						_r$16 = $clone(v, reflect.Value).Type().Elem(); /* */ $s = 74; case 74: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						_r$17 = _r$16.Kind(); /* */ $s = 75; case 75: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
						/* */ if (!((_r$17 === 8))) { $s = 72; continue; }
						/* */ $s = 73; continue;
						/* if (!((_r$17 === 8))) { */ case 72:
							d.saveError(new UnmarshalTypeError.ptr("string", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
							/* break; */ $s = 66; continue;
						/* } */ case 73:
						b = $makeSlice(sliceType$1, base64.StdEncoding.DecodedLen(s$1.$length));
						_tuple$3 = base64.StdEncoding.Decode(b, s$1);
						n = _tuple$3[0];
						err$2 = _tuple$3[1];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							d.saveError(err$2);
							/* break; */ $s = 66; continue;
						}
						$r = $clone(v, reflect.Value).SetBytes($subslice(b, 0, n)); /* */ $s = 76; case 76: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 71; continue;
					/* } else if (_5 === (24)) { */ case 68:
						$clone(v, reflect.Value).SetString(($bytesToString(s$1)));
						$s = 71; continue;
					/* } else if (_5 === (20)) { */ case 69:
						_r$18 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 80; case 80: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
						/* */ if (_r$18 === 0) { $s = 77; continue; }
						/* */ $s = 78; continue;
						/* if (_r$18 === 0) { */ case 77:
							_r$19 = reflect.ValueOf(new $String(($bytesToString(s$1)))); /* */ $s = 81; case 81: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
							$r = $clone(v, reflect.Value).Set($clone(_r$19, reflect.Value)); /* */ $s = 82; case 82: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 79; continue;
						/* } else { */ case 78:
							d.saveError(new UnmarshalTypeError.ptr("string", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
						/* } */ case 79:
						$s = 71; continue;
					/* } else { */ case 70:
						d.saveError(new UnmarshalTypeError.ptr("string", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
					/* } */ case 71:
				case 66:
				$s = 31; continue;
			/* } else { */ case 30:
				/* */ if (!((c === 45)) && (c < 48 || c > 57)) { $s = 83; continue; }
				/* */ $s = 84; continue;
				/* if (!((c === 45)) && (c < 48 || c > 57)) { */ case 83:
					/* */ if (fromQuoted) { $s = 85; continue; }
					/* */ $s = 86; continue;
					/* if (fromQuoted) { */ case 85:
						_r$20 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 88; case 88: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
						$r = d.error(_r$20); /* */ $s = 89; case 89: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 87; continue;
					/* } else { */ case 86:
						d.error(errPhase);
					/* } */ case 87:
				/* } */ case 84:
				s$2 = ($bytesToString(item));
					_6 = $clone(v, reflect.Value).Kind();
					/* */ if (_6 === (20)) { $s = 91; continue; }
					/* */ if ((_6 === (2)) || (_6 === (3)) || (_6 === (4)) || (_6 === (5)) || (_6 === (6))) { $s = 92; continue; }
					/* */ if ((_6 === (7)) || (_6 === (8)) || (_6 === (9)) || (_6 === (10)) || (_6 === (11)) || (_6 === (12))) { $s = 93; continue; }
					/* */ if ((_6 === (13)) || (_6 === (14))) { $s = 94; continue; }
					/* */ $s = 95; continue;
					/* if (_6 === (20)) { */ case 91:
						_tuple$4 = d.convertNumber(s$2);
						n$1 = _tuple$4[0];
						err$3 = _tuple$4[1];
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							d.saveError(err$3);
							/* break; */ $s = 90; continue;
						}
						_r$21 = $clone(v, reflect.Value).NumMethod(); /* */ $s = 99; case 99: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
						/* */ if (!((_r$21 === 0))) { $s = 97; continue; }
						/* */ $s = 98; continue;
						/* if (!((_r$21 === 0))) { */ case 97:
							d.saveError(new UnmarshalTypeError.ptr("number", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
							/* break; */ $s = 90; continue;
						/* } */ case 98:
						_r$22 = reflect.ValueOf(n$1); /* */ $s = 100; case 100: if($c) { $c = false; _r$22 = _r$22.$blk(); } if (_r$22 && _r$22.$blk !== undefined) { break s; }
						$r = $clone(v, reflect.Value).Set($clone(_r$22, reflect.Value)); /* */ $s = 101; case 101: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 96; continue;
					/* } else if ((_6 === (2)) || (_6 === (3)) || (_6 === (4)) || (_6 === (5)) || (_6 === (6))) { */ case 92:
						_tuple$5 = strconv.ParseInt(s$2, 10, 64);
						n$2 = _tuple$5[0];
						err$4 = _tuple$5[1];
						if (!($interfaceIsEqual(err$4, $ifaceNil)) || $clone(v, reflect.Value).OverflowInt(n$2)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
							/* break; */ $s = 90; continue;
						}
						$clone(v, reflect.Value).SetInt(n$2);
						$s = 96; continue;
					/* } else if ((_6 === (7)) || (_6 === (8)) || (_6 === (9)) || (_6 === (10)) || (_6 === (11)) || (_6 === (12))) { */ case 93:
						_tuple$6 = strconv.ParseUint(s$2, 10, 64);
						n$3 = _tuple$6[0];
						err$5 = _tuple$6[1];
						if (!($interfaceIsEqual(err$5, $ifaceNil)) || $clone(v, reflect.Value).OverflowUint(n$3)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
							/* break; */ $s = 90; continue;
						}
						$clone(v, reflect.Value).SetUint(n$3);
						$s = 96; continue;
					/* } else if ((_6 === (13)) || (_6 === (14))) { */ case 94:
						_arg = s$2;
						_r$23 = $clone(v, reflect.Value).Type().Bits(); /* */ $s = 102; case 102: if($c) { $c = false; _r$23 = _r$23.$blk(); } if (_r$23 && _r$23.$blk !== undefined) { break s; }
						_arg$1 = _r$23;
						_r$24 = strconv.ParseFloat(_arg, _arg$1); /* */ $s = 103; case 103: if($c) { $c = false; _r$24 = _r$24.$blk(); } if (_r$24 && _r$24.$blk !== undefined) { break s; }
						_tuple$7 = _r$24;
						n$4 = _tuple$7[0];
						err$6 = _tuple$7[1];
						if (!($interfaceIsEqual(err$6, $ifaceNil)) || $clone(v, reflect.Value).OverflowFloat(n$4)) {
							d.saveError(new UnmarshalTypeError.ptr("number " + s$2, $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
							/* break; */ $s = 90; continue;
						}
						$clone(v, reflect.Value).SetFloat(n$4);
						$s = 96; continue;
					/* } else { */ case 95:
						/* */ if (($clone(v, reflect.Value).Kind() === 24) && $interfaceIsEqual($clone(v, reflect.Value).Type(), numberType)) { $s = 104; continue; }
						/* */ $s = 105; continue;
						/* if (($clone(v, reflect.Value).Kind() === 24) && $interfaceIsEqual($clone(v, reflect.Value).Type(), numberType)) { */ case 104:
							$clone(v, reflect.Value).SetString(s$2);
							/* */ if (!isValidNumber(s$2)) { $s = 106; continue; }
							/* */ $s = 107; continue;
							/* if (!isValidNumber(s$2)) { */ case 106:
								_r$25 = fmt.Errorf("json: invalid number literal, trying to unmarshal %q into Number", new sliceType([item])); /* */ $s = 108; case 108: if($c) { $c = false; _r$25 = _r$25.$blk(); } if (_r$25 && _r$25.$blk !== undefined) { break s; }
								$r = d.error(_r$25); /* */ $s = 109; case 109: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 107:
							/* break; */ $s = 90; continue;
						/* } */ case 105:
						/* */ if (fromQuoted) { $s = 110; continue; }
						/* */ $s = 111; continue;
						/* if (fromQuoted) { */ case 110:
							_r$26 = fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType([item, $clone(v, reflect.Value).Type()])); /* */ $s = 113; case 113: if($c) { $c = false; _r$26 = _r$26.$blk(); } if (_r$26 && _r$26.$blk !== undefined) { break s; }
							$r = d.error(_r$26); /* */ $s = 114; case 114: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = 112; continue;
						/* } else { */ case 111:
							d.error(new UnmarshalTypeError.ptr("number", $clone(v, reflect.Value).Type(), (new $Int64(0, d.off)), "", ""));
						/* } */ case 112:
					/* } */ case 96:
				case 90:
			/* } */ case 31:
		case 26:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalStore }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$22 = _r$22; $f._r$23 = _r$23; $f._r$24 = _r$24; $f._r$25 = _r$25; $f._r$26 = _r$26; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.b = b; $f.c = c; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.fromQuoted = fromQuoted; $f.isNull = isNull; $f.item = item; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.n$3 = n$3; $f.n$4 = n$4; $f.ok = ok; $f.ok$1 = ok$1; $f.pv = pv; $f.s = s; $f.s$1 = s$1; $f.s$2 = s$2; $f.u = u; $f.ut = ut; $f.v = v; $f.val = val; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.$val.literalStore(item, v, fromQuoted); };
	decodeState.ptr.prototype.valueInterface = function() {
		var _1, _r$3, _r$4, _r$5, _r$6, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_r$3 = d.scanWhile(9); /* */ $s = 2; case 2: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_1 = _r$3;
			/* */ if (_1 === (6)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (1)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (6)) { */ case 3:
				_r$4 = d.arrayInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === (2)) { */ case 4:
				_r$5 = d.objectInterface(); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return new mapType(_r$5);
			/* } else if (_1 === (1)) { */ case 5:
				_r$6 = d.literalInterface(); /* */ $s = 10; case 10: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } else { */ case 6:
				d.error(errPhase);
				$panic(new $String("unreachable"));
			/* } */ case 7:
		case 1:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.valueInterface }; } $f._1 = _1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.valueInterface = function() { return this.$val.valueInterface(); };
	decodeState.ptr.prototype.arrayInterface = function() {
		var _r$3, _r$4, _r$5, d, op, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; d = $f.d; op = $f.op; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		v = $makeSlice(sliceType, 0);
		/* while (true) { */ case 1:
			_r$3 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			_r$4 = d.valueInterface(); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			v = $append(v, _r$4);
			_r$5 = d.scanWhile(9); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			op = _r$5;
			if (op === 8) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return v;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.arrayInterface }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.d = d; $f.op = op; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.arrayInterface = function() { return this.$val.arrayInterface(); };
	decodeState.ptr.prototype.objectInterface = function() {
		var _key, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple, d, item, key, m, ok, op, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple = $f._tuple; d = $f.d; item = $f.item; key = $f.key; m = $f.m; ok = $f.ok; op = $f.op; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		m = {};
		/* while (true) { */ case 1:
			_r$3 = d.scanWhile(9); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			op = _r$3;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			_r$4 = d.scanWhile(0); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			op = _r$4;
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple = unquote(item);
			key = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			/* */ if (op === 9) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 9) { */ case 5:
				_r$5 = d.scanWhile(9); /* */ $s = 7; case 7: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				op = _r$5;
			/* } */ case 6:
			if (!((op === 3))) {
				d.error(errPhase);
			}
			_r$6 = d.valueInterface(); /* */ $s = 8; case 8: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: _r$6 };
			_r$7 = d.scanWhile(9); /* */ $s = 9; case 9: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			op = _r$7;
			if (op === 5) {
				/* break; */ $s = 2; continue;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.objectInterface }; } $f._key = _key; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple = _tuple; $f.d = d; $f.item = item; $f.key = key; $f.m = m; $f.ok = ok; $f.op = op; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.objectInterface = function() { return this.$val.objectInterface(); };
	decodeState.ptr.prototype.literalInterface = function() {
		var _1, _r$3, _tuple, _tuple$1, c, d, err, item, n, ok, op, s, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; d = $f.d; err = $f.err; item = $f.item; n = $f.n; ok = $f.ok; op = $f.op; s = $f.s; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		start = d.off - 1 >> 0;
		_r$3 = d.scanWhile(0); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		op = _r$3;
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		item = $subslice(d.data, start, d.off);
		c = (0 >= item.$length ? ($throwRuntimeError("index out of range"), undefined) : item.$array[item.$offset + 0]);
		_1 = c;
		if (_1 === (110)) {
			$s = -1; return $ifaceNil;
		} else if ((_1 === (116)) || (_1 === (102))) {
			$s = -1; return new $Bool((c === 116));
		} else if (_1 === (34)) {
			_tuple = unquote(item);
			s = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			$s = -1; return new $String(s);
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				d.error(errPhase);
			}
			_tuple$1 = d.convertNumber(($bytesToString(item)));
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.saveError(err);
			}
			$s = -1; return n;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decodeState.ptr.prototype.literalInterface }; } $f._1 = _1; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.d = d; $f.err = err; $f.item = item; $f.n = n; $f.ok = ok; $f.op = op; $f.s = s; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	decodeState.prototype.literalInterface = function() { return this.$val.literalInterface(); };
	getu4 = function(s) {
		var _tuple, err, r, s;
		if (s.$length < 6 || !(((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) === 92)) || !(((1 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 1]) === 117))) {
			return -1;
		}
		_tuple = strconv.ParseUint(($bytesToString($subslice(s, 2, 6))), 16, 64);
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return -1;
		}
		return ((r.$low >> 0));
	};
	unquote = function(s) {
		var _tuple, ok, s, t;
		t = "";
		ok = false;
		_tuple = unquoteBytes(s);
		s = _tuple[0];
		ok = _tuple[1];
		t = ($bytesToString(s));
		return [t, ok];
	};
	unquoteBytes = function(s) {
		var _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b, c, c$1, dec, nb, ok, r, rr, rr$1, rr$2, rr1, s, size, size$1, t, w, x;
		t = sliceType$1.nil;
		ok = false;
		if (s.$length < 2 || !(((0 >= s.$length ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + 0]) === 34)) || !(((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + x])) === 34))) {
			return [t, ok];
		}
		s = $subslice(s, 1, (s.$length - 1 >> 0));
		r = 0;
		while (true) {
			if (!(r < s.$length)) { break; }
			c = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]);
			if ((c === 92) || (c === 34) || c < 32) {
				break;
			}
			if (c < 128) {
				r = r + (1) >> 0;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, r));
			rr = _tuple[0];
			size = _tuple[1];
			if ((rr === 65533) && (size === 1)) {
				break;
			}
			r = r + (size) >> 0;
		}
		if (r === s.$length) {
			_tmp = s;
			_tmp$1 = true;
			t = _tmp;
			ok = _tmp$1;
			return [t, ok];
		}
		b = $makeSlice(sliceType$1, (s.$length + 8 >> 0));
		w = $copySlice(b, $subslice(s, 0, r));
		while (true) {
			if (!(r < s.$length)) { break; }
			if (w >= (b.$length - 8 >> 0)) {
				nb = $makeSlice(sliceType$1, ($imul(((b.$length + 4 >> 0)), 2)));
				$copySlice(nb, $subslice(b, 0, w));
				b = nb;
			}
			c$1 = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]);
			if ((c$1 === 92)) {
				r = r + (1) >> 0;
				if (r >= s.$length) {
					return [t, ok];
				}
				switch (0) { default:
					_1 = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]);
					if ((_1 === (34)) || (_1 === (92)) || (_1 === (47)) || (_1 === (39))) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = ((r < 0 || r >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + r]));
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (98)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 8);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (102)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 12);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (110)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 10);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (114)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 13);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (116)) {
						((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = 9);
						r = r + (1) >> 0;
						w = w + (1) >> 0;
					} else if (_1 === (117)) {
						r = r - (1) >> 0;
						rr$1 = getu4($subslice(s, r));
						if (rr$1 < 0) {
							return [t, ok];
						}
						r = r + (6) >> 0;
						if (utf16.IsSurrogate(rr$1)) {
							rr1 = getu4($subslice(s, r));
							dec = utf16.DecodeRune(rr$1, rr1);
							if (!((dec === 65533))) {
								r = r + (6) >> 0;
								w = w + (utf8.EncodeRune($subslice(b, w), dec)) >> 0;
								break;
							}
							rr$1 = 65533;
						}
						w = w + (utf8.EncodeRune($subslice(b, w), rr$1)) >> 0;
					} else {
						return [t, ok];
					}
				}
			} else if (((c$1 === 34)) || (c$1 < 32)) {
				return [t, ok];
			} else if (c$1 < 128) {
				((w < 0 || w >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + w] = c$1);
				r = r + (1) >> 0;
				w = w + (1) >> 0;
			} else {
				_tuple$1 = utf8.DecodeRune($subslice(s, r));
				rr$2 = _tuple$1[0];
				size$1 = _tuple$1[1];
				r = r + (size$1) >> 0;
				w = w + (utf8.EncodeRune($subslice(b, w), rr$2)) >> 0;
			}
		}
		_tmp$2 = $subslice(b, 0, w);
		_tmp$3 = true;
		t = _tmp$2;
		ok = _tmp$3;
		return [t, ok];
	};
	isValidTag = function(s) {
		var _i, _ref, _rune, c, s;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	fillField = function(f) {
		var f;
		f.nameBytes = (new sliceType$1($stringToBytes(f.name)));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byIndex.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]), field);
		_tmp$1 = $clone(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), field);
		field.copy(((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), _tmp);
		field.copy(((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]), _tmp$1);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var _i, _ref, i, j, k, x, x$1, x$2, xik;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]).index;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var _1, _entry, _entry$1, _entry$2, _entry$3, _i, _key, _key$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _v, _v$1, _v$2, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, quoted, sf, t, t$1, tag, tagged, visited, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _v = $f._v; _v$1 = $f._v$1; _v$2 = $f._v$2; advance = $f.advance; count = $f.count; current = $f.current; dominant = $f.dominant; f = $f.f; fi = $f.fi; fields = $f.fields; fj = $f.fj; ft = $f.ft; i = $f.i; i$1 = $f.i$1; index = $f.index; name = $f.name; name$1 = $f.name$1; next = $f.next; nextCount = $f.nextCount; ok = $f.ok; opts = $f.opts; out = $f.out; quoted = $f.quoted; sf = $f.sf; t = $f.t; t$1 = $f.t$1; tag = $f.tag; tagged = $f.tagged; visited = $f.visited; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fields = [fields];
		current = new sliceType$3([]);
		next = new sliceType$3([new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, t, false, false)]);
		count = $makeMap(reflect.Type.keyFor, []);
		nextCount = $makeMap(reflect.Type.keyFor, []);
		visited = $makeMap(reflect.Type.keyFor, []);
		fields[0] = sliceType$3.nil;
		/* while (true) { */ case 1:
			/* if (!(next.$length > 0)) { break; } */ if(!(next.$length > 0)) { $s = 2; continue; }
			_tmp = next;
			_tmp$1 = $subslice(current, 0, 0);
			current = _tmp;
			next = _tmp$1;
			_tmp$2 = nextCount;
			_tmp$3 = $makeMap(reflect.Type.keyFor, []);
			count = _tmp$2;
			nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), field);
				/* */ if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if ((_entry = visited[reflect.Type.keyFor(f.typ)], _entry !== undefined ? _entry.v : false)) { */ case 5:
					_i++;
					/* continue; */ $s = 3; continue;
				/* } */ case 6:
				_key = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: true };
				i = 0;
				/* while (true) { */ case 7:
					_r$3 = f.typ.NumField(); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					/* if (!(i < _r$3)) { break; } */ if(!(i < _r$3)) { $s = 8; continue; }
					_r$4 = f.typ.Field(i); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					sf = $clone(_r$4, reflect.StructField);
					/* */ if (sf.Anonymous) { $s = 11; continue; }
					/* */ if (!(sf.PkgPath === "")) { $s = 12; continue; }
					/* */ $s = 13; continue;
					/* if (sf.Anonymous) { */ case 11:
						t$1 = sf.Type;
						_r$5 = t$1.Kind(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						/* */ if (_r$5 === 22) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (_r$5 === 22) { */ case 14:
							_r$6 = t$1.Elem(); /* */ $s = 17; case 17: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							t$1 = _r$6;
						/* } */ case 15:
						_r$7 = t$1.Name(); /* */ $s = 21; case 21: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						_r$8 = isExported(_r$7); /* */ $s = 22; case 22: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						if (!(!_r$8)) { _v = false; $s = 20; continue s; }
						_r$9 = t$1.Kind(); /* */ $s = 23; case 23: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_v = !((_r$9 === 25)); case 20:
						/* */ if (_v) { $s = 18; continue; }
						/* */ $s = 19; continue;
						/* if (_v) { */ case 18:
							i = i + (1) >> 0;
							/* continue; */ $s = 7; continue;
						/* } */ case 19:
						$s = 13; continue;
					/* } else if (!(sf.PkgPath === "")) { */ case 12:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 13:
					tag = new reflect.StructTag(sf.Tag).Get("json");
					/* */ if (tag === "-") { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (tag === "-") { */ case 24:
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 25:
					_tuple = parseTag(tag);
					name = _tuple[0];
					opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = $makeSlice(sliceType$2, (f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, ((x < 0 || x >= index.$length) ? ($throwRuntimeError("index out of range"), undefined) : index.$array[index.$offset + x] = i));
					ft = sf.Type;
					_r$10 = ft.Name(); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					if (!(_r$10 === "")) { _v$1 = false; $s = 28; continue s; }
					_r$11 = ft.Kind(); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_v$1 = _r$11 === 22; case 28:
					/* */ if (_v$1) { $s = 26; continue; }
					/* */ $s = 27; continue;
					/* if (_v$1) { */ case 26:
						_r$12 = ft.Elem(); /* */ $s = 31; case 31: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						ft = _r$12;
					/* } */ case 27:
					quoted = false;
					/* */ if (new tagOptions(opts).Contains("string")) { $s = 32; continue; }
					/* */ $s = 33; continue;
					/* if (new tagOptions(opts).Contains("string")) { */ case 32:
							_r$13 = ft.Kind(); /* */ $s = 35; case 35: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							_1 = _r$13;
							if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (5)) || (_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10)) || (_1 === (11)) || (_1 === (13)) || (_1 === (14)) || (_1 === (24))) {
								quoted = true;
							}
						case 34:
					/* } */ case 33:
					if (!(name === "") || !sf.Anonymous) { _v$2 = true; $s = 38; continue s; }
					_r$14 = ft.Kind(); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_v$2 = !((_r$14 === 25)); case 38:
					/* */ if (_v$2) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (_v$2) { */ case 36:
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields[0] = $append(fields[0], fillField(new field.ptr(name, sliceType$1.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), quoted)));
						if ((_entry$1 = count[reflect.Type.keyFor(f.typ)], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields[0] = $append(fields[0], (x$1 = fields[0].$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fields[0].$array[fields[0].$offset + x$1])));
						}
						i = i + (1) >> 0;
						/* continue; */ $s = 7; continue;
					/* } */ case 37:
					_key$1 = ft; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: (_entry$2 = nextCount[reflect.Type.keyFor(ft)], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					/* */ if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if ((_entry$3 = nextCount[reflect.Type.keyFor(ft)], _entry$3 !== undefined ? _entry$3.v : 0) === 1) { */ case 40:
						_r$15 = ft.Name(); /* */ $s = 42; case 42: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
						_r$16 = fillField(new field.ptr(_r$15, sliceType$1.nil, $throwNilPointerError, false, index, ft, false, false)); /* */ $s = 43; case 43: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						next = $append(next, _r$16);
					/* } */ case 41:
					i = i + (1) >> 0;
				/* } */ $s = 7; continue; case 8:
				_i++;
			/* } */ $s = 3; continue; case 4:
		/* } */ $s = 1; continue; case 2:
		$r = sort.Slice(fields[0], (function(fields) { return function(i$1, j) {
			var i$1, j, x$2;
			x$2 = fields[0];
			if (!(((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).name === ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).name)) {
				return ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).name < ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).name;
			}
			if (!((((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).index.$length === ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).index.$length))) {
				return ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).index.$length < ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).index.$length;
			}
			if (!(((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).tag === ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]).tag)) {
				return ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1]).tag;
			}
			return ($subslice(new byIndex(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)).Less(i$1, j);
		}; })(fields)); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		out = $subslice(fields[0], 0, 0);
		_tmp$4 = 0;
		_tmp$5 = 0;
		advance = _tmp$4;
		i$1 = _tmp$5;
		/* while (true) { */ case 45:
			/* if (!(i$1 < fields[0].$length)) { break; } */ if(!(i$1 < fields[0].$length)) { $s = 46; continue; }
			fi = $clone(((i$1 < 0 || i$1 >= fields[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fields[0].$array[fields[0].$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while (true) {
				if (!((i$1 + advance >> 0) < fields[0].$length)) { break; }
				fj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : fields[0].$array[fields[0].$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				/* continue; */ $s = 45; continue;
			}
			_tuple$1 = dominantField($subslice(fields[0], i$1, (i$1 + advance >> 0)));
			dominant = $clone(_tuple$1[0], field);
			ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		/* } */ $s = 45; continue; case 46:
		fields[0] = out;
		$r = sort.Sort(($subslice(new byIndex(fields[0].$array), fields[0].$offset, fields[0].$offset + fields[0].$length))); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return fields[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: typeFields }; } $f._1 = _1; $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._v = _v; $f._v$1 = _v$1; $f._v$2 = _v$2; $f.advance = advance; $f.count = count; $f.current = current; $f.dominant = dominant; $f.f = f; $f.fi = fi; $f.fields = fields; $f.fj = fj; $f.ft = ft; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.name = name; $f.name$1 = name$1; $f.next = next; $f.nextCount = nextCount; $f.ok = ok; $f.opts = opts; $f.out = out; $f.quoted = quoted; $f.sf = sf; $f.t = t; $f.t$1 = t$1; $f.tag = tag; $f.tagged = tagged; $f.visited = visited; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	isExported = function(id) {
		var _tuple, id, r;
		_tuple = utf8.DecodeRuneInString(id);
		r = _tuple[0];
		return unicode.IsUpper(r);
	};
	dominantField = function(fields) {
		var _i, _ref, f, fields, i, length, tagged;
		length = (0 >= fields.$length ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$2.nil, $ifaceNil, false, false), false];
		}
		return [(0 >= fields.$length ? ($throwRuntimeError("index out of range"), undefined) : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var _entry, _entry$1, _i, _key, _key$1, _keys, _r$3, _ref, _tuple, _tuple$1, f, k, m, newM, t, v, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _key = $f._key; _key$1 = $f._key$1; _keys = $f._keys; _r$3 = $f._r$3; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; f = $f.f; k = $f.k; m = $f.m; newM = $f.newM; t = $f.t; v = $f.v; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(fieldCache.value.Load(), mapType$1, true);
		m = _tuple[0];
		f = (_entry = m[reflect.Type.keyFor(t)], _entry !== undefined ? _entry.v : sliceType$3.nil);
		if (!(f === sliceType$3.nil)) {
			$s = -1; return f;
		}
		_r$3 = typeFields(t); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		f = _r$3;
		if (f === sliceType$3.nil) {
			f = new sliceType$3([]);
		}
		fieldCache.mu.Lock();
		_tuple$1 = $assertType(fieldCache.value.Load(), mapType$1, true);
		m = _tuple$1[0];
		newM = (x = $keys(m).length + 1 >> 0, ((x < 0 || x > 2147483647) ? $throwRuntimeError("makemap: size out of range") : {}));
		_ref = m;
		_i = 0;
		_keys = $keys(_ref);
		while (true) {
			if (!(_i < _keys.length)) { break; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				continue;
			}
			k = _entry$1.k;
			v = _entry$1.v;
			_key = k; (newM || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key)] = { k: _key, v: v };
			_i++;
		}
		_key$1 = t; (newM || $throwRuntimeError("assignment to entry in nil map"))[reflect.Type.keyFor(_key$1)] = { k: _key$1, v: f };
		fieldCache.value.Store(new mapType$1(newM));
		fieldCache.mu.Unlock();
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cachedTypeFields }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._key = _key; $f._key$1 = _key$1; $f._keys = _keys; $f._r$3 = _r$3; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.f = f; $f.k = k; $f.m = m; $f.newM = newM; $f.t = t; $f.v = v; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	foldFunc = function(s) {
		var _i, _ref, b, nonLetter, s, special, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var _1, _i, _ref, _tuple, s, sb, sbUpper, size, t, tb, tr;
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sb = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = (0 >= t.$length ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t);
			tr = _tuple[0];
			size = _tuple[1];
			_1 = sb;
			if ((_1 === (115)) || (_1 === (83))) {
				if (!((tr === 383))) {
					return false;
				}
			} else if ((_1 === (107)) || (_1 === (75))) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var _i, _ref, i, s, sb, t, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var _i, _ref, b, i, s, t;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? ($throwRuntimeError("index out of range"), undefined) : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	checkValid = function(data, scan) {
		var _i, _r$3, _r$4, _ref, c, data, scan, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; c = $f.c; data = $f.data; scan = $f.scan; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			scan.bytes = (x = scan.bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			_r$3 = scan.step(scan, c); /* */ $s = 5; case 5: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3 === 11) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$3 === 11) { */ case 3:
				$s = -1; return scan.err;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$4 = scan.eof(); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		/* */ if (_r$4 === 11) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (_r$4 === 11) { */ case 6:
			$s = -1; return scan.err;
		/* } */ case 7:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: checkValid }; } $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.c = c; $f.data = data; $f.scan = scan; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	nextValue = function(data, scan) {
		var _1, _i, _r$3, _r$4, _r$5, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, data, err, i, rest, scan, v, value, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; c = $f.c; data = $f.data; err = $f.err; i = $f.i; rest = $f.rest; scan = $f.scan; v = $f.v; value = $f.value; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		value = sliceType$1.nil;
		rest = sliceType$1.nil;
		err = $ifaceNil;
		scan.reset();
		_ref = data;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = scan.step(scan, c); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
			/* */ if (v >= 5) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (v >= 5) { */ case 4:
					_1 = v;
					/* */ if ((_1 === (5)) || (_1 === (8))) { $s = 7; continue; }
					/* */ if (_1 === (11)) { $s = 8; continue; }
					/* */ if (_1 === (10)) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if ((_1 === (5)) || (_1 === (8))) { */ case 7:
						_r$4 = scan.step(scan, 32); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						/* */ if (_r$4 === 10) { $s = 11; continue; }
						/* */ $s = 12; continue;
						/* if (_r$4 === 10) { */ case 11:
							_tmp = $subslice(data, 0, (i + 1 >> 0));
							_tmp$1 = $subslice(data, (i + 1 >> 0));
							_tmp$2 = $ifaceNil;
							value = _tmp;
							rest = _tmp$1;
							err = _tmp$2;
							$s = -1; return [value, rest, err];
						/* } */ case 12:
						$s = 10; continue;
					/* } else if (_1 === (11)) { */ case 8:
						_tmp$3 = sliceType$1.nil;
						_tmp$4 = sliceType$1.nil;
						_tmp$5 = scan.err;
						value = _tmp$3;
						rest = _tmp$4;
						err = _tmp$5;
						$s = -1; return [value, rest, err];
					/* } else if (_1 === (10)) { */ case 9:
						_tmp$6 = $subslice(data, 0, i);
						_tmp$7 = $subslice(data, i);
						_tmp$8 = $ifaceNil;
						value = _tmp$6;
						rest = _tmp$7;
						err = _tmp$8;
						$s = -1; return [value, rest, err];
					/* } */ case 10:
				case 6:
			/* } */ case 5:
			_i++;
		/* } */ $s = 1; continue; case 2:
		_r$5 = scan.eof(); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		/* */ if (_r$5 === 11) { $s = 14; continue; }
		/* */ $s = 15; continue;
		/* if (_r$5 === 11) { */ case 14:
			_tmp$9 = sliceType$1.nil;
			_tmp$10 = sliceType$1.nil;
			_tmp$11 = scan.err;
			value = _tmp$9;
			rest = _tmp$10;
			err = _tmp$11;
			$s = -1; return [value, rest, err];
		/* } */ case 15:
		_tmp$12 = data;
		_tmp$13 = sliceType$1.nil;
		_tmp$14 = $ifaceNil;
		value = _tmp$12;
		rest = _tmp$13;
		err = _tmp$14;
		$s = -1; return [value, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: nextValue }; } $f._1 = _1; $f._i = _i; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.c = c; $f.data = data; $f.err = err; $f.i = i; $f.rest = rest; $f.scan = scan; $f.v = v; $f.value = value; $f.$s = $s; $f.$r = $r; return $f;
	};
	SyntaxError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.ptr.prototype.reset = function() {
		var s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.ptr.prototype.eof = function() {
		var _r$3, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			$s = -1; return 11;
		}
		if (s.endTop) {
			$s = -1; return 10;
		}
		_r$3 = s.step(s, 32); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		if (s.endTop) {
			$s = -1; return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.ptr("unexpected end of JSON input", s.bytes);
		}
		$s = -1; return 11;
		/* */ } return; } if ($f === undefined) { $f = { $blk: scanner.ptr.prototype.eof }; } $f._r$3 = _r$3; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.ptr.prototype.pushParseState = function(p) {
		var p, s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.ptr.prototype.popParseState = function() {
		var n, s;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		var c;
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		var c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var _1, c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		_1 = c;
		if (_1 === (123)) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_1 === (91)) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_1 === (34)) {
			s.step = stateInString;
			return 1;
		} else if (_1 === (45)) {
			s.step = stateNeg;
			return 1;
		} else if (_1 === (48)) {
			s.step = state0;
			return 1;
		} else if (_1 === (116)) {
			s.step = stateT;
			return 1;
		} else if (_1 === (102)) {
			s.step = stateF;
			return 1;
		} else if (_1 === (110)) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var c, n, s, x, x$1;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = 1));
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		var c, s;
		if (c <= 32 && isSpace(c)) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var _1, c, n, ps, s, x, x$1, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace(c)) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_1 = ps;
		if (_1 === (0)) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = 1));
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_1 === (1)) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = 0));
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_1 === (2)) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		var c, s;
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		var c, s;
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var _1, c, s;
		_1 = c;
		if ((_1 === (98)) || (_1 === (102)) || (_1 === (110)) || (_1 === (114)) || (_1 === (116)) || (_1 === (92)) || (_1 === (47)) || (_1 === (34))) {
			s.step = stateInString;
			return 0;
		} else if (_1 === (117)) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		var c, s;
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		var c, s;
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		var c, s;
		if ((c === 43) || (c === 45)) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		var c, s;
		if (48 <= c && c <= 57) {
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		var c, s;
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		var c, s;
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		var c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		var c, s;
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		var c, s;
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		var c, s;
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		var c, s;
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		var c, s;
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		var c, s;
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		var c, s;
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		var c, s;
		return 11;
	};
	scanner.ptr.prototype.error = function(c, context) {
		var c, context, s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var c, s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote(($encodeRune(c)));
		return "'" + $substring(s, 1, (s.length - 1 >> 0)) + "'";
	};
	scanner.ptr.prototype.undo = function(scanCode) {
		var s, scanCode;
		s = this;
		if (s.redo) {
			$panic(new $String("json: invalid use of scanner"));
		}
		s.redoCode = scanCode;
		s.redoState = s.step;
		s.step = stateRedo;
		s.redo = true;
	};
	scanner.prototype.undo = function(scanCode) { return this.$val.undo(scanCode); };
	stateRedo = function(s, c) {
		var c, s;
		s.redo = false;
		s.step = s.redoState;
		return s.redoCode;
	};
	parseTag = function(tag) {
		var idx, tag;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [$substring(tag, 0, idx), ($substring(tag, (idx + 1 >> 0)))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var _tmp, _tmp$1, i, next, o, optionName, s;
		o = this.$val;
		if (o.length === 0) {
			return false;
		}
		s = (o);
		while (true) {
			if (!(!(s === ""))) { break; }
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = $substring(s, 0, i);
				_tmp$1 = $substring(s, (i + 1 >> 0));
				s = _tmp;
				next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Number.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", typ: $funcType([], [$Int64, $error], false)}];
	ptrType$14.methods = [{prop: "unmarshal", name: "unmarshal", pkg: "encoding/json", typ: $funcType([$emptyInterface], [$error], false)}, {prop: "init", name: "init", pkg: "encoding/json", typ: $funcType([sliceType$1], [ptrType$14], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "saveError", name: "saveError", pkg: "encoding/json", typ: $funcType([$error], [], false)}, {prop: "addErrorContext", name: "addErrorContext", pkg: "encoding/json", typ: $funcType([$error], [$error], false)}, {prop: "next", name: "next", pkg: "encoding/json", typ: $funcType([], [sliceType$1], false)}, {prop: "scanWhile", name: "scanWhile", pkg: "encoding/json", typ: $funcType([$Int], [$Int], false)}, {prop: "value", name: "value", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "valueQuoted", name: "valueQuoted", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "indirect", name: "indirect", pkg: "encoding/json", typ: $funcType([reflect.Value, $Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false)}, {prop: "array", name: "array", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "object", name: "object", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "literal", name: "literal", pkg: "encoding/json", typ: $funcType([reflect.Value], [], false)}, {prop: "convertNumber", name: "convertNumber", pkg: "encoding/json", typ: $funcType([$String], [$emptyInterface, $error], false)}, {prop: "literalStore", name: "literalStore", pkg: "encoding/json", typ: $funcType([sliceType$1, reflect.Value, $Bool], [], false)}, {prop: "valueInterface", name: "valueInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}, {prop: "arrayInterface", name: "arrayInterface", pkg: "encoding/json", typ: $funcType([], [sliceType], false)}, {prop: "objectInterface", name: "objectInterface", pkg: "encoding/json", typ: $funcType([], [mapType], false)}, {prop: "literalInterface", name: "literalInterface", pkg: "encoding/json", typ: $funcType([], [$emptyInterface], false)}];
	byIndex.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	ptrType$11.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "reset", name: "reset", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "eof", name: "eof", pkg: "encoding/json", typ: $funcType([], [$Int], false)}, {prop: "pushParseState", name: "pushParseState", pkg: "encoding/json", typ: $funcType([$Int], [], false)}, {prop: "popParseState", name: "popParseState", pkg: "encoding/json", typ: $funcType([], [], false)}, {prop: "error", name: "error", pkg: "encoding/json", typ: $funcType([$Uint8, $String], [$Int], false)}, {prop: "undo", name: "undo", pkg: "encoding/json", typ: $funcType([$Int], [], false)}];
	tagOptions.methods = [{prop: "Contains", name: "Contains", pkg: "", typ: $funcType([$String], [$Bool], false)}];
	Unmarshaler.init([{prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", typ: $funcType([sliceType$1], [$error], false)}]);
	UnmarshalTypeError.init("", [{prop: "Value", name: "Value", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: reflect.Type, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Int64, tag: ""}, {prop: "Struct", name: "Struct", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Field", name: "Field", anonymous: false, exported: true, typ: $String, tag: ""}]);
	InvalidUnmarshalError.init("", [{prop: "Type", name: "Type", anonymous: false, exported: true, typ: reflect.Type, tag: ""}]);
	decodeState.init("encoding/json", [{prop: "data", name: "data", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "off", name: "off", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "scan", name: "scan", anonymous: false, exported: false, typ: scanner, tag: ""}, {prop: "nextscan", name: "nextscan", anonymous: false, exported: false, typ: scanner, tag: ""}, {prop: "errorContext", name: "errorContext", anonymous: false, exported: false, typ: structType$1, tag: ""}, {prop: "savedError", name: "savedError", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "useNumber", name: "useNumber", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	unquotedValue.init("", []);
	Marshaler.init([{prop: "MarshalJSON", name: "MarshalJSON", pkg: "", typ: $funcType([], [sliceType$1, $error], false)}]);
	field.init("encoding/json", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "nameBytes", name: "nameBytes", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "equalFold", name: "equalFold", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "tag", name: "tag", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: reflect.Type, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "quoted", name: "quoted", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	byIndex.init(field);
	SyntaxError.init("encoding/json", [{prop: "msg", name: "msg", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "Offset", name: "Offset", anonymous: false, exported: true, typ: $Int64, tag: ""}]);
	scanner.init("encoding/json", [{prop: "step", name: "step", anonymous: false, exported: false, typ: funcType$1, tag: ""}, {prop: "endTop", name: "endTop", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "parseState", name: "parseState", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "redo", name: "redo", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "redoCode", name: "redoCode", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "redoState", name: "redoState", anonymous: false, exported: false, typ: funcType$1, tag: ""}, {prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: $Int64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = base64.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf16.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		fieldCache = new structType.ptr(new atomic.Value.ptr(new atomic.noCopy.ptr(), $ifaceNil), new nosync.Mutex.ptr(false));
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		nullLiteral = (new sliceType$1($stringToBytes("null")));
		_r = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		textUnmarshalerType = _r;
		numberType = reflect.TypeOf(new Number(""));
		_r$1 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem(); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		marshalerType = _r$1;
		_r$2 = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$2)).Elem(); /* */ $s = 20; case 20: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		textMarshalerType = _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, $init, bytes, errors, io, utf8, Reader, sliceType, ptrType, sliceType$1, errNegativeRead, errNegativeWrite, NewReaderSize, NewReader;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Reader = $pkg.Reader = $newType(0, $kindStruct, "bufio.Reader", true, "bufio", true, function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.buf = sliceType.nil;
			this.rd = $ifaceNil;
			this.r = 0;
			this.w = 0;
			this.err = $ifaceNil;
			this.lastByte = 0;
			this.lastRuneSize = 0;
			return;
		}
		this.buf = buf_;
		this.rd = rd_;
		this.r = r_;
		this.w = w_;
		this.err = err_;
		this.lastByte = lastByte_;
		this.lastRuneSize = lastRuneSize_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Reader);
	sliceType$1 = $sliceType(sliceType);
	NewReaderSize = function(rd, size) {
		var _tuple, b, ok, r, rd, size;
		_tuple = $assertType(rd, ptrType, true);
		b = _tuple[0];
		ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.ptr(sliceType.nil, $ifaceNil, 0, 0, $ifaceNil, 0, 0);
		r.reset($makeSlice(sliceType, size), rd);
		return r;
	};
	$pkg.NewReaderSize = NewReaderSize;
	NewReader = function(rd) {
		var rd;
		return NewReaderSize(rd, 4096);
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var b, r;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.reset = function(buf, r) {
		var b, buf, r;
		b = this;
		Reader.copy(b, new Reader.ptr(buf, r, 0, 0, $ifaceNil, -1, -1));
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.ptr.prototype.fill = function() {
		var _r, _tuple, b, err, i, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; i = $f.i; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		/* while (true) { */ case 1:
			/* if (!(i > 0)) { break; } */ if(!(i > 0)) { $s = 2; continue; }
			_r = b.rd.Read($subslice(b.buf, b.w)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			n = _tuple[0];
			err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				$s = -1; return;
			}
			if (n > 0) {
				$s = -1; return;
			}
			i = i - (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		b.err = io.ErrNoProgress;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.fill }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.i = i; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.ptr.prototype.readErr = function() {
		var b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.ptr.prototype.Peek = function(n) {
		var avail, b, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; avail = $f.avail; b = $f.b; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (n < 0) {
			$s = -1; return [sliceType.nil, $pkg.ErrNegativeCount];
		}
		/* while (true) { */ case 1:
			/* if (!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { break; } */ if(!((b.w - b.r >> 0) < n && (b.w - b.r >> 0) < b.buf.$length && $interfaceIsEqual(b.err, $ifaceNil))) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		if (n > b.buf.$length) {
			$s = -1; return [$subslice(b.buf, b.r, b.w), $pkg.ErrBufferFull];
		}
		err = $ifaceNil;
		avail = b.w - b.r >> 0;
		if (avail < n) {
			n = avail;
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		$s = -1; return [$subslice(b.buf, b.r, (b.r + n >> 0)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Peek }; } $f.avail = avail; $f.b = b; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.ptr.prototype.Discard = function(n) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, b, discarded, err, n, remain, skip, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; b = $f.b; discarded = $f.discarded; err = $f.err; n = $f.n; remain = $f.remain; skip = $f.skip; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		discarded = 0;
		err = $ifaceNil;
		b = this;
		if (n < 0) {
			_tmp = 0;
			_tmp$1 = $pkg.ErrNegativeCount;
			discarded = _tmp;
			err = _tmp$1;
			$s = -1; return [discarded, err];
		}
		if (n === 0) {
			$s = -1; return [discarded, err];
		}
		remain = n;
		/* while (true) { */ case 1:
			skip = b.Buffered();
			/* */ if (skip === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (skip === 0) { */ case 3:
				$r = b.fill(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				skip = b.Buffered();
			/* } */ case 4:
			if (skip > remain) {
				skip = remain;
			}
			b.r = b.r + (skip) >> 0;
			remain = remain - (skip) >> 0;
			if (remain === 0) {
				_tmp$2 = n;
				_tmp$3 = $ifaceNil;
				discarded = _tmp$2;
				err = _tmp$3;
				$s = -1; return [discarded, err];
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$4 = n - remain >> 0;
				_tmp$5 = b.readErr();
				discarded = _tmp$4;
				err = _tmp$5;
				$s = -1; return [discarded, err];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [discarded, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Discard }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.b = b; $f.discarded = discarded; $f.err = err; $f.n = n; $f.remain = remain; $f.skip = skip; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Discard = function(n) { return this.$val.Discard(n); };
	Reader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, b, err, n, p, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; err = $f.err; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0;
			_tmp$1 = b.readErr();
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		/* */ if (b.r === b.w) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.r === b.w) { */ case 1:
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0;
				_tmp$3 = b.readErr();
				n = _tmp$2;
				err = _tmp$3;
				$s = -1; return [n, err];
			}
			/* */ if (p.$length >= b.buf.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (p.$length >= b.buf.$length) { */ case 3:
				_r = b.rd.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = (((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) >> 0));
					b.lastRuneSize = -1;
				}
				_tmp$4 = n;
				_tmp$5 = b.readErr();
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			/* } */ case 4:
			b.r = 0;
			b.w = 0;
			_r$1 = b.rd.Read(b.buf); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			n = _tuple$1[0];
			b.err = _tuple$1[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			if (n === 0) {
				_tmp$6 = 0;
				_tmp$7 = b.readErr();
				n = _tmp$6;
				err = _tmp$7;
				$s = -1; return [n, err];
			}
			b.w = b.w + (n) >> 0;
		/* } */ case 2:
		n = $copySlice(p, $subslice(b.buf, b.r, b.w));
		b.r = b.r + (n) >> 0;
		b.lastByte = (((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >> 0));
		b.lastRuneSize = -1;
		_tmp$8 = n;
		_tmp$9 = $ifaceNil;
		n = _tmp$8;
		err = _tmp$9;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.err = err; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.ReadByte = function() {
		var b, c, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; c = $f.c; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		b.lastRuneSize = -1;
		/* while (true) { */ case 1:
			/* if (!(b.r === b.w)) { break; } */ if(!(b.r === b.w)) { $s = 2; continue; }
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.readErr()];
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = ((c >> 0));
		$s = -1; return [c, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadByte }; } $f.b = b; $f.c = c; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.ptr.prototype.UnreadByte = function() {
		var b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = ((b.lastByte << 24 >>> 24))));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, err, r, size, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; size = $f.size; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		size = 0;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			/* if (!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { break; } */ if(!((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length)) { $s = 2; continue; }
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = b.readErr();
			r = _tmp;
			size = _tmp$1;
			err = _tmp$2;
			$s = -1; return [r, size, err];
		}
		_tmp$3 = (((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
		_tmp$4 = 1;
		r = _tmp$3;
		size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w));
			r = _tuple[0];
			size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = (((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) >> 0));
		b.lastRuneSize = size;
		_tmp$5 = r;
		_tmp$6 = size;
		_tmp$7 = $ifaceNil;
		r = _tmp$5;
		size = _tmp$6;
		err = _tmp$7;
		$s = -1; return [r, size, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadRune }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.size = size; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.ptr.prototype.ReadSlice = function(delim) {
		var b, delim, err, i, i$1, line, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; delim = $f.delim; err = $f.err; i = $f.i; i$1 = $f.i$1; line = $f.line; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		err = $ifaceNil;
		b = this;
		/* while (true) { */ case 1:
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				/* break; */ $s = 2; continue;
			}
			if (b.Buffered() >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				/* break; */ $s = 2; continue;
			}
			$r = b.fill(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = ((((i$1 < 0 || i$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + i$1]) >> 0));
			b.lastRuneSize = -1;
		}
		$s = -1; return [line, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadSlice }; } $f.b = b; $f.delim = delim; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.line = line; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.ptr.prototype.ReadLine = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tuple, b, drop, err, isPrefix, line, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; b = $f.b; drop = $f.drop; err = $f.err; isPrefix = $f.isPrefix; line = $f.line; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		line = sliceType.nil;
		isPrefix = false;
		err = $ifaceNil;
		b = this;
		_r = b.ReadSlice(10); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		line = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line;
			_tmp$1 = true;
			_tmp$2 = $ifaceNil;
			line = _tmp;
			isPrefix = _tmp$1;
			err = _tmp$2;
			$s = -1; return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = sliceType.nil;
			}
			$s = -1; return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? ($throwRuntimeError("index out of range"), undefined) : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		$s = -1; return [line, isPrefix, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadLine }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f.b = b; $f.drop = drop; $f.err = err; $f.isPrefix = isPrefix; $f.line = line; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.ptr.prototype.ReadBytes = function(delim) {
		var _i, _i$1, _r, _ref, _ref$1, _tuple, b, buf, buf$1, delim, e, err, frag, full, i, i$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; b = $f.b; buf = $f.buf; buf$1 = $f.buf$1; delim = $f.delim; e = $f.e; err = $f.err; frag = $f.frag; full = $f.full; i = $f.i; i$1 = $f.i$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		frag = sliceType.nil;
		full = sliceType$1.nil;
		err = $ifaceNil;
		/* while (true) { */ case 1:
			e = $ifaceNil;
			_r = b.ReadSlice(delim); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			frag = _tuple[0];
			e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				/* break; */ $s = 2; continue;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				/* break; */ $s = 2; continue;
			}
			buf = $makeSlice(sliceType, frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		/* } */ $s = 1; continue; case 2:
		n = 0;
		_ref = full;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = $makeSlice(sliceType, n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? ($throwRuntimeError("index out of range"), undefined) : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		$s = -1; return [buf$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadBytes }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.b = b; $f.buf = buf; $f.buf$1 = buf$1; $f.delim = delim; $f.e = e; $f.err = err; $f.frag = frag; $f.full = full; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.ptr.prototype.ReadString = function(delim) {
		var _r, _tuple, b, bytes$1, delim, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; bytes$1 = $f.bytes$1; delim = $f.delim; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = b.ReadBytes(delim); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [($bytesToString(bytes$1)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.ReadString }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bytes$1 = bytes$1; $f.delim = delim; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.ptr.prototype.WriteTo = function(w) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, err, err$1, err$2, err$3, m, m$1, m$2, n, ok, ok$1, r, w, w$1, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; m = $f.m; m$1 = $f.m$1; m$2 = $f.m$2; n = $f.n; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; w = $f.w; w$1 = $f.w$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		err = $ifaceNil;
		b = this;
		_r = b.writeBuf(w); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true);
		r = _tuple$1[0];
		ok = _tuple$1[1];
		/* */ if (ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (ok) { */ case 2:
			_r$1 = r.WriteTo(w); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			m = _tuple$2[0];
			err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n;
			_tmp$1 = err$1;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		/* } */ case 3:
		_tuple$3 = $assertType(w, io.ReaderFrom, true);
		w$1 = _tuple$3[0];
		ok$1 = _tuple$3[1];
		/* */ if (ok$1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (ok$1) { */ case 5:
			_r$2 = w$1.ReadFrom(b.rd); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$4 = _r$2;
			m$1 = _tuple$4[0];
			err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n;
			_tmp$3 = err$2;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		/* } */ case 6:
		/* */ if ((b.w - b.r >> 0) < b.buf.$length) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ((b.w - b.r >> 0) < b.buf.$length) { */ case 8:
			$r = b.fill(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 9:
		/* while (true) { */ case 11:
			/* if (!(b.r < b.w)) { break; } */ if(!(b.r < b.w)) { $s = 12; continue; }
			_r$3 = b.writeBuf(w); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$5 = _r$3;
			m$2 = _tuple$5[0];
			err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n;
				_tmp$5 = err$3;
				n = _tmp$4;
				err = _tmp$5;
				$s = -1; return [n, err];
			}
			$r = b.fill(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 11; continue; case 12:
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n;
		_tmp$7 = b.readErr();
		n = _tmp$6;
		err = _tmp$7;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.WriteTo }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.m = m; $f.m$1 = m$1; $f.m$2 = m$2; $f.n = n; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.w = w; $f.w$1 = w$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.ptr.prototype.writeBuf = function(w) {
		var _r, _tuple, b, err, n, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; n = $f.n; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		_r = w.Write($subslice(b.buf, b.r, b.w)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (n < 0) {
			$panic(errNegativeWrite);
		}
		b.r = b.r + (n) >> 0;
		$s = -1; return [(new $Int64(0, n)), err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.writeBuf }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.n = n; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [], false)}, {prop: "reset", name: "reset", pkg: "bufio", typ: $funcType([sliceType, io.Reader], [], false)}, {prop: "fill", name: "fill", pkg: "bufio", typ: $funcType([], [], false)}, {prop: "readErr", name: "readErr", pkg: "bufio", typ: $funcType([], [$error], false)}, {prop: "Peek", name: "Peek", pkg: "", typ: $funcType([$Int], [sliceType, $error], false)}, {prop: "Discard", name: "Discard", pkg: "", typ: $funcType([$Int], [$Int, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", typ: $funcType([], [$error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", typ: $funcType([], [$Int32, $Int, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Buffered", name: "Buffered", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "ReadSlice", name: "ReadSlice", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadLine", name: "ReadLine", pkg: "", typ: $funcType([], [sliceType, $Bool, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", typ: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", typ: $funcType([$Uint8], [$String, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", typ: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "writeBuf", name: "writeBuf", pkg: "bufio", typ: $funcType([io.Writer], [$Int64, $error], false)}];
	Reader.init("bufio", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "rd", name: "rd", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "lastByte", name: "lastByte", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "lastRuneSize", name: "lastRuneSize", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		errNegativeWrite = errors.New("bufio: writer returned negative count from Write");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
		$pkg.ErrFinalToken = errors.New("final token");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, $init, errors, os, runtime, sort, strings, utf8, lazybuf, sliceType$1, ptrType$1, Clean, FromSlash, Join, Rel, Dir, VolumeName, volumeNameLen, join, sameWord;
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", true, "path/filepath", false, function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.path = "";
			this.buf = sliceType$1.nil;
			this.w = 0;
			this.volAndPath = "";
			this.volLen = 0;
			return;
		}
		this.path = path_;
		this.buf = buf_;
		this.w = w_;
		this.volAndPath = volAndPath_;
		this.volLen = volLen_;
	});
	sliceType$1 = $sliceType($Uint8);
	ptrType$1 = $ptrType(lazybuf);
	lazybuf.ptr.prototype.index = function(i) {
		var b, i, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, c, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = $makeSlice(sliceType$1, b.path.length);
			$copyString(b.buf, $substring(b.path, 0, b.w));
		}
		(x = b.buf, x$1 = b.w, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return $substring(b.volAndPath, 0, (b.volLen + b.w >> 0));
		}
		return $substring(b.volAndPath, 0, b.volLen) + ($bytesToString($subslice(b.buf, 0, b.w)));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, path, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = $substring(path, volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0;
		_tmp$1 = 0;
		r = _tmp;
		dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1;
			_tmp$3 = 1;
			r = _tmp$2;
			dotdot = _tmp$3;
		}
		while (true) {
			if (!(r < n)) { break; }
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (true) {
						if (!(out.w > dotdot && !os.IsPathSeparator(out.index(out.w)))) { break; }
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (true) {
					if (!(r < n && !os.IsPathSeparator(path.charCodeAt(r)))) { break; }
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	$pkg.Clean = Clean;
	FromSlash = function(path) {
		var path;
		if (true) {
			return path;
		}
		return strings.Replace(path, "/", "/", -1);
	};
	$pkg.FromSlash = FromSlash;
	Join = function(elem) {
		var elem;
		return join(elem);
	};
	$pkg.Join = Join;
	Rel = function(basepath, targpath) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b0, base, baseSlashed, baseVol, basepath, bi, bl, buf, i, n, seps, size, t0, targ, targSlashed, targVol, targpath, ti, tl;
		baseVol = VolumeName(basepath);
		targVol = VolumeName(targpath);
		base = Clean(basepath);
		targ = Clean(targpath);
		if (sameWord(targ, base)) {
			return [".", $ifaceNil];
		}
		base = $substring(base, baseVol.length);
		targ = $substring(targ, targVol.length);
		if (base === ".") {
			base = "";
		}
		baseSlashed = base.length > 0 && (base.charCodeAt(0) === 47);
		targSlashed = targ.length > 0 && (targ.charCodeAt(0) === 47);
		if (!(baseSlashed === targSlashed) || !sameWord(baseVol, targVol)) {
			return ["", errors.New("Rel: can't make " + targpath + " relative to " + basepath)];
		}
		bl = base.length;
		tl = targ.length;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		b0 = _tmp;
		bi = _tmp$1;
		t0 = _tmp$2;
		ti = _tmp$3;
		while (true) {
			while (true) {
				if (!(bi < bl && !((base.charCodeAt(bi) === 47)))) { break; }
				bi = bi + (1) >> 0;
			}
			while (true) {
				if (!(ti < tl && !((targ.charCodeAt(ti) === 47)))) { break; }
				ti = ti + (1) >> 0;
			}
			if (!sameWord($substring(targ, t0, ti), $substring(base, b0, bi))) {
				break;
			}
			if (bi < bl) {
				bi = bi + (1) >> 0;
			}
			if (ti < tl) {
				ti = ti + (1) >> 0;
			}
			b0 = bi;
			t0 = ti;
		}
		if ($substring(base, b0, bi) === "..") {
			return ["", errors.New("Rel: can't make " + targpath + " relative to " + basepath)];
		}
		if (!((b0 === bl))) {
			seps = strings.Count($substring(base, b0, bl), "/");
			size = 2 + ($imul(seps, 3)) >> 0;
			if (!((tl === t0))) {
				size = size + (((1 + tl >> 0) - t0 >> 0)) >> 0;
			}
			buf = $makeSlice(sliceType$1, size);
			n = $copyString(buf, "..");
			i = 0;
			while (true) {
				if (!(i < seps)) { break; }
				((n < 0 || n >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + n] = 47);
				$copyString($subslice(buf, (n + 1 >> 0)), "..");
				n = n + (3) >> 0;
				i = i + (1) >> 0;
			}
			if (!((t0 === tl))) {
				((n < 0 || n >= buf.$length) ? ($throwRuntimeError("index out of range"), undefined) : buf.$array[buf.$offset + n] = 47);
				$copyString($subslice(buf, (n + 1 >> 0)), $substring(targ, t0));
			}
			return [($bytesToString(buf)), $ifaceNil];
		}
		return [$substring(targ, t0), $ifaceNil];
	};
	$pkg.Rel = Rel;
	Dir = function(path) {
		var dir, i, path, vol;
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (true) {
			if (!(i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i)))) { break; }
			i = i - (1) >> 0;
		}
		dir = Clean($substring(path, vol.length, (i + 1 >> 0)));
		if (dir === "." && vol.length > 2) {
			return vol;
		}
		return vol + dir;
	};
	$pkg.Dir = Dir;
	VolumeName = function(path) {
		var path;
		return $substring(path, 0, volumeNameLen(path));
	};
	$pkg.VolumeName = VolumeName;
	volumeNameLen = function(path) {
		var path;
		return 0;
	};
	join = function(elem) {
		var _i, _ref, e, elem, i;
		_ref = elem;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	sameWord = function(a, b) {
		var a, b;
		return a === b;
	};
	ptrType$1.methods = [{prop: "index", name: "index", pkg: "path/filepath", typ: $funcType([$Int], [$Uint8], false)}, {prop: "append", name: "append", pkg: "path/filepath", typ: $funcType([$Uint8], [], false)}, {prop: "string", name: "string", pkg: "path/filepath", typ: $funcType([], [$String], false)}];
	lazybuf.init("path/filepath", [{prop: "path", name: "path", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "w", name: "w", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "volLen", name: "volLen", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, $init, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, blackHolePool;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($Uint8);
	ptrType = $ptrType(sliceType$1);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var b, b$24ptr;
			b = $makeSlice(sliceType$1, 8192);
			return (b$24ptr || (b$24ptr = new ptrType(function() { return b; }, function($v) { b = $subslice(new sliceType$1($v.$array), $v.$offset, $v.$offset + $v.$length); })));
		}));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/BurntSushi/toml"] = (function() {
	var $pkg = {}, $init, bufio, encoding, errors, fmt, io, ioutil, math, reflect, sort, strconv, strings, sync, time, unicode, utf8, sliceType$1, errArrayMixedElementTypes, errArrayNilElement, errNonString, errAnonNonStruct, errArrayNoTable, errNoKey, errAnything, quotedReplacer;
	bufio = $packages["bufio"];
	encoding = $packages["encoding"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	time = $packages["time"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	sliceType$1 = $sliceType($String);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = encoding.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errArrayMixedElementTypes = errors.New("toml: cannot encode array with mixed element types");
		errArrayNilElement = errors.New("toml: cannot encode array with nil element");
		errNonString = errors.New("toml: cannot encode a map with non-string key type");
		errAnonNonStruct = errors.New("toml: cannot encode an anonymous field that is not a struct");
		errArrayNoTable = errors.New("toml: TOML array element cannot contain a table");
		errNoKey = errors.New("toml: top-level values must be Go maps or structs");
		errAnything = errors.New("");
		quotedReplacer = strings.NewReplacer(new sliceType$1(["\t", "\\t", "\n", "\\n", "\r", "\\r", "\"", "\\\"", "\\", "\\\\"]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/dlog"] = (function() {
	var $pkg = {}, $init, bytes, fmt, runtime, strconv, strings, LogLevel, sliceType, sliceType$1, byt, debugFilter, debugLevel, dLog, FileWrite, CreateLogFile, SetDebugFilter, SetDebugLevel, Error, Warn, Info, Verb, SetStringDebugLevel;
	bytes = $packages["bytes"];
	fmt = $packages["fmt"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	LogLevel = $pkg.LogLevel = $newType(4, $kindInt, "dlog.LogLevel", true, "github.com/oakmound/oak/dlog", true, null);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	dLog = function(console, override, in$1) {
		var _i, _r, _r$1, _r$2, _ref, _tuple, console, elem, f, in$1, line, ok, override, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tuple = $f._tuple; console = $f.console; elem = $f.elem; f = $f.f; in$1 = $f.in$1; line = $f.line; ok = $f.ok; override = $f.override; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = runtime.Caller(2);
		f = _tuple[1];
		line = _tuple[2];
		ok = _tuple[3];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			byt.WriteRune(91);
			byt.WriteString(f);
			byt.WriteRune(58);
			byt.WriteString(strconv.Itoa(line));
			byt.WriteString("]  ");
			_ref = in$1;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				elem = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r = fmt.Sprintf("%v ", new sliceType$1([elem])); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = byt.WriteString(_r); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_i++;
			/* } */ $s = 3; continue; case 4:
			byt.WriteRune(10);
			/* */ if (console) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (console) { */ case 7:
				_r$2 = fmt.Print(new sliceType$1([new $String(byt.String())])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
			/* } */ case 8:
			byt.Reset();
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: dLog }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tuple = _tuple; $f.console = console; $f.elem = elem; $f.f = f; $f.in$1 = in$1; $f.line = line; $f.ok = ok; $f.override = override; $f.$s = $s; $f.$r = $r; return $f;
	};
	FileWrite = function(in$1) {
		var in$1;
	};
	$pkg.FileWrite = FileWrite;
	CreateLogFile = function() {
	};
	$pkg.CreateLogFile = CreateLogFile;
	SetDebugFilter = function(filter) {
		var filter;
		debugFilter = filter;
	};
	$pkg.SetDebugFilter = SetDebugFilter;
	SetDebugLevel = function(dL) {
		var dL, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dL = $f.dL; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (dL < 0 || dL > 4) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (dL < 0 || dL > 4) { */ case 1:
			$r = Warn(new sliceType$1([new $String("Unknown debug level: "), new LogLevel(dL)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			debugLevel = 0;
			$s = 3; continue;
		/* } else { */ case 2:
			debugLevel = dL;
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetDebugLevel }; } $f.dL = dL; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetDebugLevel = SetDebugLevel;
	Error = function(in$1) {
		var in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (debugLevel > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (debugLevel > 0) { */ case 1:
			$r = dLog(true, true, new sliceType$1([in$1])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Error }; } $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Error = Error;
	Warn = function(in$1) {
		var in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (debugLevel > 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (debugLevel > 1) { */ case 1:
			$r = dLog(true, true, new sliceType$1([in$1])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Warn }; } $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Warn = Warn;
	Info = function(in$1) {
		var in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (debugLevel > 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (debugLevel > 2) { */ case 1:
			$r = dLog(true, false, new sliceType$1([in$1])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Info }; } $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Info = Info;
	Verb = function(in$1) {
		var in$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; in$1 = $f.in$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (debugLevel > 3) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (debugLevel > 3) { */ case 1:
			$r = dLog(true, false, new sliceType$1([in$1])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Verb }; } $f.in$1 = in$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Verb = Verb;
	SetStringDebugLevel = function(debugL) {
		var _1, _r, dLevel, debugL, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; dLevel = $f.dLevel; debugL = $f.debugL; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dLevel = 0;
			_1 = debugL;
			/* */ if (_1 === ("INFO")) { $s = 2; continue; }
			/* */ if (_1 === ("VERBOSE")) { $s = 3; continue; }
			/* */ if (_1 === ("ERROR")) { $s = 4; continue; }
			/* */ if (_1 === ("WARN")) { $s = 5; continue; }
			/* */ if (_1 === ("NONE")) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === ("INFO")) { */ case 2:
				dLevel = 3;
				$s = 8; continue;
			/* } else if (_1 === ("VERBOSE")) { */ case 3:
				dLevel = 4;
				$s = 8; continue;
			/* } else if (_1 === ("ERROR")) { */ case 4:
				dLevel = 1;
				$s = 8; continue;
			/* } else if (_1 === ("WARN")) { */ case 5:
				dLevel = 2;
				$s = 8; continue;
			/* } else if (_1 === ("NONE")) { */ case 6:
				dLevel = 0;
				$s = 8; continue;
			/* } else { */ case 7:
				dLevel = 1;
				_r = fmt.Println(new sliceType$1([new $String("Setting dlog level to \""), new $String(debugL), new $String("\" failed, it is now set to ERROR")])); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r;
			/* } */ case 8:
		case 1:
		$r = SetDebugLevel(dLevel); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetStringDebugLevel }; } $f._1 = _1; $f._r = _r; $f.dLevel = dLevel; $f.debugL = debugL; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetStringDebugLevel = SetStringDebugLevel;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		byt = bytes.NewBuffer($makeSlice(sliceType, 0));
		debugFilter = "";
		debugLevel = 1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, $init, nosync, math, Source, Source64, Rand, lockedSource, rngSource, arrayType, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, sliceType$1, ptrType$5, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, read, Seed, Float64, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", true, "math/rand", true, null);
	Source64 = $pkg.Source64 = $newType(8, $kindInterface, "rand.Source64", true, "math/rand", true, null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", true, "math/rand", true, function(src_, s64_, readVal_, readPos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.src = $ifaceNil;
			this.s64 = $ifaceNil;
			this.readVal = new $Int64(0, 0);
			this.readPos = 0;
			return;
		}
		this.src = src_;
		this.s64 = s64_;
		this.readVal = readVal_;
		this.readPos = readPos_;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", true, "math/rand", false, function(lk_, src_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lk = new nosync.Mutex.ptr(false);
			this.src = $ifaceNil;
			return;
		}
		this.lk = lk_;
		this.src = src_;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", true, "math/rand", false, function(tap_, feed_, vec_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tap = 0;
			this.feed = 0;
			this.vec = arrayType.zero();
			return;
		}
		this.tap = tap_;
		this.feed = feed_;
		this.vec = vec_;
	});
	arrayType = $arrayType($Int64, 607);
	ptrType = $ptrType(lockedSource);
	ptrType$1 = $ptrType($Int8);
	sliceType = $sliceType($Int);
	ptrType$2 = $ptrType($Int64);
	ptrType$3 = $ptrType(Rand);
	sliceType$1 = $sliceType($Uint8);
	ptrType$5 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, i, j, r, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			i = (j & 255) >>> 0;
			x = (j) * (((i < 0 || i >= we.length) ? ($throwRuntimeError("index out of range"), undefined) : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? ($throwRuntimeError("index out of range"), undefined) : ke[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				_r$1 = r.Float64(); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = math.Log(_r$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return 7.69711747013105 - _r$2;
			/* } */ case 5:
			_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($fround(((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]) + $fround(($fround(_r$3)) * ($fround((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[x$1])) - ((i < 0 || i >= fe.length) ? ($throwRuntimeError("index out of range"), undefined) : fe[i]))))) < ($fround(math.Exp(-x)))) { */ case 8:
				$s = -1; return x;
			/* } */ case 9:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.ExpFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		var i;
		if (i < 0) {
			return ((-i >>> 0));
		}
		return ((i >>> 0));
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, i, j, r, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; i = $f.i; j = $f.j; r = $f.r; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* while (true) { */ case 1:
			_r = r.Uint32(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = ((_r >> 0));
			i = j & 127;
			x = (j) * (((i < 0 || i >= wn.length) ? ($throwRuntimeError("index out of range"), undefined) : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? ($throwRuntimeError("index out of range"), undefined) : kn[i])) {
				$s = -1; return x;
			}
			/* */ if (i === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (i === 0) { */ case 4:
				/* while (true) { */ case 6:
					_r$1 = r.Float64(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$2 = math.Log(_r$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					x = -_r$2 * 0.29047645161474317;
					_r$3 = r.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = math.Log(_r$3); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					y = -_r$4;
					if (y + y >= x * x) {
						/* break; */ $s = 7; continue;
					}
				/* } */ $s = 6; continue; case 7:
				if (j > 0) {
					$s = -1; return 3.442619855899 + x;
				}
				$s = -1; return -3.442619855899 - x;
			/* } */ case 5:
			_r$5 = r.Float64(); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			/* */ if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($fround(((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]) + $fround(($fround(_r$5)) * ($fround((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[x$1])) - ((i < 0 || i >= fn.length) ? ($throwRuntimeError("index out of range"), undefined) : fn[i]))))) < ($fround(math.Exp(-0.5 * x * x)))) { */ case 12:
				$s = -1; return x;
			/* } */ case 13:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.NormFloat64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.i = i; $f.j = j; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = function(seed) {
		var rng, seed;
		rng = new rngSource.ptr(0, 0, arrayType.zero());
		rng.Seed(seed);
		return rng;
	};
	$pkg.NewSource = NewSource;
	New = function(src) {
		var _tuple, s64, src;
		_tuple = $assertType(src, Source64, true);
		s64 = _tuple[0];
		return new Rand.ptr(src, s64, new $Int64(0, 0), 0);
	};
	$pkg.New = New;
	Rand.ptr.prototype.Seed = function(seed) {
		var _tuple, lk, ok, r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; lk = $f.lk; ok = $f.ok; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			$r = lk.seedPos(seed, (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = r.src.Seed(seed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.readPos = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Seed }; } $f._tuple = _tuple; $f.lk = lk; $f.ok = ok; $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (($shiftRightInt64(_r, 31).$low >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint32 }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Uint64 = function() {
		var _r, _r$1, _r$2, r, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* */ if (!($interfaceIsEqual(r.s64, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r.s64, $ifaceNil))) { */ case 1:
			_r = r.s64.Uint64(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = r.Int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return (x = $shiftRightUint64(((x$1 = _r$1, new $Uint64(x$1.$high, x$1.$low))), 31), x$2 = $shiftLeft64(((x$3 = _r$2, new $Uint64(x$3.$high, x$3.$low))), 32), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Uint64 }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Rand.ptr.prototype.Int31 = function() {
		var _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (((x = $shiftRightInt64(_r, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31 }; } $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var _r, r, u, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; u = $f.u; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		u = ((_r.$low >>> 0));
		$s = -1; return ((((u << 1 >>> 0) >>> 1 >>> 0) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int }; } $f._r = _r; $f.r = r; $f.u = u; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var _r, _r$1, _r$2, max, n, r, v, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; max = $f.max; n = $f.n; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		/* */ if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) { */ case 1:
			_r = r.Int63(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return (x$2 = _r, x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		/* } */ case 2:
		max = ((x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), (new $Uint64(n.$high, n.$low)), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low)));
		_r$1 = r.Int63(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		v = _r$1;
		/* while (true) { */ case 5:
			/* if (!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { break; } */ if(!((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low)))) { $s = 6; continue; }
			_r$2 = r.Int63(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			v = _r$2;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return $div64(v, n, true);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int63n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var _r, _r$1, _r$2, _r$3, _r$4, max, n, r, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; max = $f.max; n = $f.n; r = $f.r; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		/* */ if ((n & ((n - 1 >> 0))) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((n & ((n - 1 >> 0))) === 0) { */ case 1:
			_r = r.Int31(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r & ((n - 1 >> 0));
		/* } */ case 2:
		max = (((2147483647 - (_r$1 = 2147483648 % ((n >>> 0)), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0));
		_r$2 = r.Int31(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		v = _r$2;
		/* while (true) { */ case 5:
			/* if (!(v > max)) { break; } */ if(!(v > max)) { $s = 6; continue; }
			_r$3 = r.Int31(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			v = _r$3;
		/* } */ $s = 5; continue; case 6:
		$s = -1; return (_r$4 = v % n, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Int31n }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f.max = max; $f.n = n; $f.r = r; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var _r, _r$1, n, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; n = $f.n; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		/* */ if (n <= 2147483647) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n <= 2147483647) { */ case 1:
			_r = r.Int31n(((n >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return ((_r >> 0));
		/* } */ case 2:
		_r$1 = r.Int63n((new $Int64(0, n))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return (((x = _r$1, x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Intn }; } $f._r = _r; $f._r$1 = _r$1; $f.n = n; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Int63(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($flatten64(_r)) / 9.223372036854776e+18;
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float64 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var _r, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		/* again: */ case 1:
		_r = r.Float64(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		f = ($fround(_r));
		/* */ if (f === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (f === 1) { */ case 3:
			/* goto again */ $s = 1; continue;
		/* } */ case 4:
		$s = -1; return f;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Float32 }; } $f._r = _r; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var _r, i, j, m, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; j = $f.j; m = $f.m; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		m = $makeSlice(sliceType, n);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 2; continue; }
			_r = r.Intn(i + 1 >> 0); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			j = _r;
			((i < 0 || i >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j]));
			((j < 0 || j >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + j] = i);
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Perm }; } $f._r = _r; $f.i = i; $f.j = j; $f.m = m; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Rand.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, err, lk, n, ok, p, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; lk = $f.lk; n = $f.n; ok = $f.ok; p = $f.p; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		_tuple = $assertType(r.src, ptrType, true);
		lk = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = lk.read(p, (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			n = _tuple$1[0];
			err = _tuple$1[1];
			$s = -1; return [n, err];
		/* } */ case 2:
		_r$1 = read(p, $methodVal(r, "Int63"), (r.$ptr_readVal || (r.$ptr_readVal = new ptrType$2(function() { return this.$target.readVal; }, function($v) { this.$target.readVal = $v; }, r))), (r.$ptr_readPos || (r.$ptr_readPos = new ptrType$1(function() { return this.$target.readPos; }, function($v) { this.$target.readPos = $v; }, r)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		n = _tuple$2[0];
		err = _tuple$2[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rand.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.lk = lk; $f.n = n; $f.ok = ok; $f.p = p; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rand.prototype.Read = function(p) { return this.$val.Read(p); };
	read = function(p, int63, readVal, readPos) {
		var _r, err, int63, n, p, pos, readPos, readVal, val, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; int63 = $f.int63; n = $f.n; p = $f.p; pos = $f.pos; readPos = $f.readPos; readVal = $f.readVal; val = $f.val; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		pos = readPos.$get();
		val = readVal.$get();
		n = 0;
		/* while (true) { */ case 1:
			/* if (!(n < p.$length)) { break; } */ if(!(n < p.$length)) { $s = 2; continue; }
			/* */ if (pos === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (pos === 0) { */ case 3:
				_r = int63(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				val = _r;
				pos = 7;
			/* } */ case 4:
			((n < 0 || n >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + n] = ((val.$low << 24 >>> 24)));
			val = $shiftRightInt64(val, (8));
			pos = pos - (1) << 24 >> 24;
			n = n + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		readPos.$set(pos);
		readVal.$set(val);
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: read }; } $f._r = _r; $f.err = err; $f.int63 = int63; $f.n = n; $f.p = p; $f.pos = pos; $f.readPos = readPos; $f.readVal = readVal; $f.val = val; $f.$s = $s; $f.$r = $r; return $f;
	};
	Seed = function(seed) {
		var seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = globalRand.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Seed }; } $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Seed = Seed;
	Float64 = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = globalRand.Float64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Float64 }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Float64 = Float64;
	lockedSource.ptr.prototype.Int63 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Int64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Int63(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Int63 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Uint64 = function() {
		var _r, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = new $Uint64(0, 0);
		r = this;
		r.lk.Lock();
		_r = r.src.Uint64(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		r.lk.Unlock();
		$s = -1; return n;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Uint64 }; } $f._r = _r; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var r, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.Seed }; } $f.r = r; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	lockedSource.ptr.prototype.seedPos = function(seed, readPos) {
		var r, readPos, seed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; r = $f.r; readPos = $f.readPos; seed = $f.seed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.lk.Lock();
		$r = r.src.Seed(seed); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		readPos.$set(0);
		r.lk.Unlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.seedPos }; } $f.r = r; $f.readPos = readPos; $f.seed = seed; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.seedPos = function(seed, readPos) { return this.$val.seedPos(seed, readPos); };
	lockedSource.ptr.prototype.read = function(p, readVal, readPos) {
		var _r, _tuple, err, n, p, r, readPos, readVal, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; n = $f.n; p = $f.p; r = $f.r; readPos = $f.readPos; readVal = $f.readVal; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		r = this;
		r.lk.Lock();
		_r = read(p, $methodVal(r.src, "Int63"), readVal, readPos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		r.lk.Unlock();
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: lockedSource.ptr.prototype.read }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.n = n; $f.p = p; $f.r = r; $f.readPos = readPos; $f.readVal = readVal; $f.$s = $s; $f.$r = $r; return $f;
	};
	lockedSource.prototype.read = function(p, readVal, readPos) { return this.$val.read(p, readVal, readPos); };
	seedrand = function(x) {
		var _q, _r, hi, lo, x;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ($imul(48271, lo)) - ($imul(3399, hi)) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var i, rng, seed, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = (((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0));
		i = -20;
		while (true) {
			if (!(i < 607)) { break; }
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64((new $Int64(0, x$1)), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64((new $Int64(0, x$1)), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = (new $Int64(0, x$1)), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? ($throwRuntimeError("index out of range"), undefined) : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i] = u));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var rng, x, x$1;
		rng = this;
		return ((x = (x$1 = rng.Uint64(), new $Uint64(x$1.$high & 2147483647, (x$1.$low & 4294967295) >>> 0)), new $Int64(x.$high, x.$low)));
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	rngSource.ptr.prototype.Uint64 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$6 = (x = (x$1 = rng.vec, x$2 = rng.feed, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), x$3 = (x$4 = rng.vec, x$5 = rng.tap, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])), new $Int64(x.$high + x$3.$high, x.$low + x$3.$low));
		(x$7 = rng.vec, x$8 = rng.feed, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = x$6));
		return (new $Uint64(x$6.$high, x$6.$low));
	};
	rngSource.prototype.Uint64 = function() { return this.$val.Uint64(); };
	ptrType$3.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Int31", name: "Int31", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Int", name: "Int", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Int63n", name: "Int63n", pkg: "", typ: $funcType([$Int64], [$Int64], false)}, {prop: "Int31n", name: "Int31n", pkg: "", typ: $funcType([$Int32], [$Int32], false)}, {prop: "Intn", name: "Intn", pkg: "", typ: $funcType([$Int], [$Int], false)}, {prop: "Float64", name: "Float64", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Perm", name: "Perm", pkg: "", typ: $funcType([$Int], [sliceType], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "seedPos", name: "seedPos", pkg: "math/rand", typ: $funcType([$Int64, ptrType$1], [], false)}, {prop: "read", name: "read", pkg: "math/rand", typ: $funcType([sliceType$1, ptrType$2, ptrType$1], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}]);
	Source64.init([{prop: "Int63", name: "Int63", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", typ: $funcType([$Int64], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([], [$Uint64], false)}]);
	Rand.init("math/rand", [{prop: "src", name: "src", anonymous: false, exported: false, typ: Source, tag: ""}, {prop: "s64", name: "s64", anonymous: false, exported: false, typ: Source64, tag: ""}, {prop: "readVal", name: "readVal", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "readPos", name: "readPos", anonymous: false, exported: false, typ: $Int8, tag: ""}]);
	lockedSource.init("math/rand", [{prop: "lk", name: "lk", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "src", name: "src", anonymous: false, exported: false, typ: Source64, tag: ""}]);
	rngSource.init("math/rand", [{prop: "tap", name: "tap", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "feed", name: "feed", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "vec", name: "vec", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = nosync.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(-973649357, 3952672746), new $Int64(-1065661887, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(-1477934308, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(-1654874170, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(-1374618802, 3467012610), new $Int64(-140526423, 2344407434), new $Int64(-1745367887, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(-968700782, 520164395), new $Int64(-1591572833, 1341358184), new $Int64(-1515085039, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(-2087444114, 998951326), new $Int64(-612324923, 1364957564), new $Int64(63173359, 4090230633), new $Int64(-1498029007, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(-1109106023, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(-1111517500, 3922894967), new $Int64(-1336974714, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(-1094251604, 433121399), new $Int64(2451824, 4162580594), new $Int64(-137262572, 4132415622), new $Int64(-1536231048, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(-624604839, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(-283806096, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(-2067810156, 3430061722), new $Int64(-1484435135, 3820169661), new $Int64(-1665985194, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(-852109057, 2472200560), new $Int64(-560457548, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(-174986835, 95608918), new $Int64(392686347, 3690479145), new $Int64(-1205570926, 1397922290), new $Int64(-1159314025, 1516129515), new $Int64(-320178155, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(-1953469798, 1336785672), new $Int64(-45086614, 4131677129), new $Int64(-1392278100, 4246329084), new $Int64(-1142500187, 3788585631), new $Int64(-66478285, 3080389532), new $Int64(-646438364, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(-519177718, 2276716302), new $Int64(-368453140, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(-1512910664, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(-934256930, 4159821533), new $Int64(-76621938, 1894661), new $Int64(-674493898, 1156868282), new $Int64(348271067, 776219088), new $Int64(-501428838, 2425634259), new $Int64(1716021749, 680510161), new $Int64(-574263456, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(-325695512, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(-2139648704, 1232604732), new $Int64(-1838070714, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(-1626402839, 3589632480), new $Int64(1198416575, 864579159), new $Int64(-1938748161, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(-1744284772, 100794388), new $Int64(-1191421458, 2991674471), new $Int64(-208666741, 2224662036), new $Int64(-173659161, 977097250), new $Int64(1351320195, 726419512), new $Int64(-183459897, 1747974366), new $Int64(-753095183, 1556430604), new $Int64(-1049492215, 1080776742), new $Int64(-385846958, 280794874), new $Int64(117767733, 919835643), new $Int64(-967009426, 3434019658), new $Int64(-1951414480, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(-1267681408, 2724693469), new $Int64(547796833, 598827710), new $Int64(-1846559452, 3452273442), new $Int64(-75778224, 649274915), new $Int64(-801301329, 2585724112), new $Int64(-1510934263, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(-52910178, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(-124804942, 681540375), new $Int64(1375448925, 537050586), new $Int64(-1964768344, 315246468), new $Int64(226402871, 849323088), new $Int64(-885062465, 45543944), new $Int64(-946445250, 2319052083), new $Int64(-40708194, 3613090841), new $Int64(560472520, 2992171180), new $Int64(-381863169, 2068244785), new $Int64(917538188, 4239862634), new $Int64(-1369555809, 3892253031), new $Int64(720683925, 958186149), new $Int64(-423297785, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(-1879761037, 2764496274), new $Int64(-1806480530, 4196182374), new $Int64(-1066765755, 550964545), new $Int64(818747069, 420611474), new $Int64(-1924830376, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(-1367475956, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(-1727621530, 281976339), new $Int64(574970164, 3619802330), new $Int64(-431930823, 3084554784), new $Int64(-1264611183, 4129772886), new $Int64(-2104399043, 1680378557), new $Int64(-1621962591, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(-1935828963, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(-834863562, 3958162143), new $Int64(-1226511573, 2773705983), new $Int64(1876039582, 225908689), new $Int64(-1183735113, 908216283), new $Int64(-605696219, 3574646075), new $Int64(-1827723091, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(-601399488, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(-1239009361, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(-553246738, 807894872), new $Int64(-1781325307, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(-1476242608, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(-1159399429, 1906263026), new $Int64(475781207, 3904421704), new $Int64(-623537128, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(-1742751146, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(-230443691, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(-156574141, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(-889746188, 209092916), new $Int64(-247669406, 1242699167), new $Int64(-713830396, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(-1197583895, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(-1946242443, 1766109365), new $Int64(700596547, 3257093788), new $Int64(-184714929, 2365720207), new $Int64(93384808, 3742754173), new $Int64(-458385235, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(-834260953, 3573511231), new $Int64(-754572527, 1760299077), new $Int64(-1375627191, 2260779833), new $Int64(-866019274, 1452805722), new $Int64(-1229671918, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(-1974867432, 500935732), new $Int64(1403501753, 676580929), new $Int64(-1565912283, 1184984890), new $Int64(-691968413, 1271474274), new $Int64(-1828754738, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(-2053227187, 1488599718), new $Int64(-1180531831, 3408913763), new $Int64(-2086531912, 2501050084), new $Int64(-875130448, 1639124157), new $Int64(-2009482504, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(-165243708, 3414355209), new $Int64(-792329287, 2275136352), new $Int64(-2057774345, 2151835223), new $Int64(-931144933, 1654534827), new $Int64(-679921451, 377892833), new $Int64(-482716010, 660204544), new $Int64(85706799, 390828249), new $Int64(-1422172693, 3402783878), new $Int64(-1468634160, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(-68150572, 2452299106), new $Int64(-896164822, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(-1194967131, 182675323), new $Int64(-1598554764, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(-851859191, 3622207527), new $Int64(338126939, 432729309), new $Int64(-1667470126, 2391914317), new $Int64(-1849558151, 235747924), new $Int64(2120733629, 3088823825), new $Int64(-745079795, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(-740826490, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(-665153481, 1583624461), new $Int64(-885822954, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(-2070568842, 2207265429), new $Int64(-1886797613, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(-356250305, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(-1945755145, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(-952181250, 286492130), new $Int64(2045622690, 2795735007), new $Int64(-715730566, 3703961339), new $Int64(-148436487, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(-1665420098, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(-750579440, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(-748019856, 3573129983), new $Int64(-890581831, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(-1954407413, 268782709), new $Int64(-1002123503, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(-911618704, 2205342611), new $Int64(-672703993, 1411666394), new $Int64(-1528454899, 677744900), new $Int64(-1876628533, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(-1117516959, 1082141470), new $Int64(-1770111792, 4046134367), new $Int64(51415528, 2142943655), new $Int64(-249824333, 3124627521), new $Int64(998228909, 219992939), new $Int64(-1078790951, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(-525858006, 1647770243), new $Int64(-2035959705, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(-2047330906, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(-1992983070, 2011457303), new $Int64(-1351022674, 3057425772), new $Int64(667839456, 81484597), new $Int64(-1681980888, 3646681560), new $Int64(-1372462725, 635548515), new $Int64(602489502, 2508044581), new $Int64(-1794220117, 1014917157), new $Int64(719992433, 3214891315), new $Int64(-1294799037, 959582252), new $Int64(226415134, 3347040449), new $Int64(-362868096, 4102971975), new $Int64(397887437, 4078022210), new $Int64(-536803826, 2851767182), new $Int64(-1398321012, 1540160644), new $Int64(-1549098876, 1057290595), new $Int64(-112592988, 3907769253), new $Int64(579300318, 4248952684), new $Int64(-1054576049, 132554364), new $Int64(-1085862414, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(-1082993397, 2230939180), new $Int64(-1804568072, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(-729261111, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(-1113097690, 3188942166), new $Int64(-74480109, 350070824), new $Int64(144881592, 61758415), new $Int64(-741824226, 3492950336), new $Int64(-2030042720, 3093818430), new $Int64(-453590535, 2962480613), new $Int64(-1912050708, 3154871160), new $Int64(-1636478569, 3228564679), new $Int64(610731502, 888276216), new $Int64(-946702974, 3574998604), new $Int64(-1277068380, 1967526716), new $Int64(-1556147941, 1554691298), new $Int64(-1573024234, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(-1867600880, 3764362170), new $Int64(-1655392592, 266611402), new $Int64(-393255880, 2047856075), new $Int64(-1000726433, 21444105), new $Int64(-949424754, 3065563181), new $Int64(-232418803, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(-485587503, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(-595148528, 2036813414), new $Int64(-1994877121, 3105536507), new $Int64(13954645, 3396176938), new $Int64(-721402003, 1377154485), new $Int64(-61839181, 3807014186), new $Int64(543009040, 3710110597), new $Int64(-1751425519, 916420443), new $Int64(734556788, 2103831255), new $Int64(-1766161494, 717331943), new $Int64(-1574598896, 3550505941), new $Int64(45939673, 378749927), new $Int64(-1997615719, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(-1040454942, 1407468696), new $Int64(-1678191250, 970098704), new $Int64(-285057486, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(-1305165746, 3916463034), new $Int64(-388598655, 3474113316), new $Int64(1036101639, 316544223), new $Int64(-1773744891, 1650844677), new $Int64(-907191419, 4267565603), new $Int64(-1070275024, 2501167616), new $Int64(-1520651863, 3929401789), new $Int64(-2091360852, 337170252), new $Int64(-960502090, 2061966842), new $Int64(-304190848, 2508461464), new $Int64(-1941471116, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(-1002297449, 2887126398), new $Int64(-1447111334, 296561685), new $Int64(700300844, 3729960077), new $Int64(-1572311344, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(-1105595719, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(-1649093095, 2145871984), new $Int64(-1582765715, 3565480803), new $Int64(-1568653827, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(-96556264, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(-1843479747, 2087477361), new $Int64(-1766167800, 2407950639), new $Int64(-1296225558, 3942568569), new $Int64(-1223900450, 4088074412), new $Int64(723260036, 2964773675), new $Int64(-673921829, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(-1604570740, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(-1031359300, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(-853573201, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(-795586925, 2500816079), new $Int64(-490248444, 514015239), new $Int64(1377565129, 543520454), new $Int64(-2039776725, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(-1502927041, 3166972343), new $Int64(372256200, 1517638666), new $Int64(-935275664, 173466846), new $Int64(-695774461, 4241513471), new $Int64(-1413550842, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(-910901561, 1539634186), new $Int64(-595957298, 178241987), new $Int64(-113277636, 182168164), new $Int64(-1102530459, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(-2114679722, 1732699140), new $Int64(-421057745, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(-1509359403, 2228431183), new $Int64(-810313977, 3554678728), new $Int64(-750989047, 173470263), new $Int64(-85886265, 3848297795), new $Int64(-926936977, 246236185), new $Int64(-1984190461, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(-598851901, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(-1906483789, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(-671844857, 3375313137), new $Int64(-1643868040, 881302957), new $Int64(-1508784745, 2514186393), new $Int64(-1703622845, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(-1938982667, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(-89426259, 2884561259), new $Int64(-805741095, 2456511185), new $Int64(983726246, 561175414), new $Int64(-1719489563, 432588903), new $Int64(885133709, 4059399550), new $Int64(-93096266, 1075014784), new $Int64(-1733832628, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(-1158354011, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(-1737578993, 3870530098), new $Int64(-484494257, 1717789158), new $Int64(-232997156, 1153452491), new $Int64(-990424416, 3948827651), new $Int64(-1357145630, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(-1385277313, 1202710438), new $Int64(-564909037, 2072216740), new $Int64(705690639, 2066751068), new $Int64(-2113583312, 173902580), new $Int64(-741983806, 142459001), new $Int64(172391592, 1889151926), new $Int64(-498943125, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(-2078821353, 2953948865), new $Int64(-320938673, 4041040923), new $Int64(-1942517976, 592046130), new $Int64(-705643640, 384297211), new $Int64(-2051649464, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(-1703423246, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(-343047503, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(-298327194, 2675874918), new $Int64(-1831355577, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(-864267462, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(-2091334213, 306752547), new $Int64(-1426688067, 2162363077), new $Int64(-57052633, 2767224719), new $Int64(-1471624099, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(-1744131281, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(-1793706473, 1240875658), new $Int64(-914893422, 2577342868), new $Int64(-1001298215, 4136853496), new $Int64(-1477114974, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(-176562048, 371758825), new $Int64(-441063112, 1528834084), new $Int64(-71688630, 1504757260), new $Int64(-1461820072, 699052551), new $Int64(-505543539, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(false), $assertType(NewSource(new $Int64(0, 1)), Source64)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/alg"] = (function() {
	var $pkg = {}, $init, errors, dlog, math, rand, RoundF64;
	errors = $packages["errors"];
	dlog = $packages["github.com/oakmound/oak/dlog"];
	math = $packages["math"];
	rand = $packages["math/rand"];
	RoundF64 = function(a) {
		var a;
		if (a < 0) {
			return ((math.Ceil(a - 0.5) >> 0));
		}
		return ((math.Floor(a + 0.5) >> 0));
	};
	$pkg.RoundF64 = RoundF64;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/audio"] = (function() {
	var $pkg = {}, $init, errors, loadedWavs, BatchLoad;
	errors = $packages["errors"];
	BatchLoad = function(baseFolder) {
		var baseFolder;
		return errors.New("Audio not supported on JS");
	};
	$pkg.BatchLoad = BatchLoad;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		loadedWavs = {};
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/200sc/rtreego"] = (function() {
	var $pkg = {}, $init, fmt, math, sort, strings, DistError, Point, Rect, Rtree, node, entry, Spatial, entrySlice, arrayType, sliceType, sliceType$1, arrayType$1, ptrType, ptrType$1, sliceType$2, ptrType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType$3, NewRect, intersect, initBoundingBox, boundingBox, boundingBoxN, NewTree, assign, assignGroup, pickNext, sortEntries, pruneEntries, insertNearest;
	fmt = $packages["fmt"];
	math = $packages["math"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	DistError = $pkg.DistError = $newType(8, $kindFloat64, "rtreego.DistError", true, "github.com/200sc/rtreego", true, null);
	Point = $pkg.Point = $newType(24, $kindArray, "rtreego.Point", true, "github.com/200sc/rtreego", true, null);
	Rect = $pkg.Rect = $newType(0, $kindStruct, "rtreego.Rect", true, "github.com/200sc/rtreego", true, function(p_, q_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = arrayType$1.zero();
			this.q = arrayType$1.zero();
			return;
		}
		this.p = p_;
		this.q = q_;
	});
	Rtree = $pkg.Rtree = $newType(0, $kindStruct, "rtreego.Rtree", true, "github.com/200sc/rtreego", true, function(MinChildren_, MaxChildren_, root_, size_, height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.MinChildren = 0;
			this.MaxChildren = 0;
			this.root = ptrType$1.nil;
			this.size = 0;
			this.height = 0;
			return;
		}
		this.MinChildren = MinChildren_;
		this.MaxChildren = MaxChildren_;
		this.root = root_;
		this.size = size_;
		this.height = height_;
	});
	node = $pkg.node = $newType(0, $kindStruct, "rtreego.node", true, "github.com/200sc/rtreego", false, function(parent_, leaf_, entries_, level_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.parent = ptrType$1.nil;
			this.leaf = false;
			this.entries = sliceType$2.nil;
			this.level = 0;
			return;
		}
		this.parent = parent_;
		this.leaf = leaf_;
		this.entries = entries_;
		this.level = level_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "rtreego.entry", true, "github.com/200sc/rtreego", false, function(bb_, child_, obj_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bb = ptrType.nil;
			this.child = ptrType$1.nil;
			this.obj = $ifaceNil;
			return;
		}
		this.bb = bb_;
		this.child = child_;
		this.obj = obj_;
	});
	Spatial = $pkg.Spatial = $newType(8, $kindInterface, "rtreego.Spatial", true, "github.com/200sc/rtreego", true, null);
	entrySlice = $pkg.entrySlice = $newType(0, $kindStruct, "rtreego.entrySlice", true, "github.com/200sc/rtreego", false, function(entries_, dists_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.entries = sliceType$2.nil;
			this.dists = sliceType$6.nil;
			return;
		}
		this.entries = entries_;
		this.dists = dists_;
	});
	arrayType = $arrayType($String, 3);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($String);
	arrayType$1 = $arrayType($Float64, 3);
	ptrType = $ptrType(Rect);
	ptrType$1 = $ptrType(node);
	sliceType$2 = $sliceType(entry);
	ptrType$2 = $ptrType(entry);
	sliceType$3 = $sliceType(ptrType);
	sliceType$4 = $sliceType(ptrType$1);
	sliceType$5 = $sliceType(Spatial);
	sliceType$6 = $sliceType($Float64);
	ptrType$3 = $ptrType(Rtree);
	DistError.prototype.Error = function() {
		var err;
		err = this.$val;
		return "rtreego: improper distance";
	};
	$ptrType(DistError).prototype.Error = function() { return new DistError(this.$get()).Error(); };
	Point.prototype.minDist = function(r) {
		var _i, _ref, d, d$1, i, p, pi, r, sum, x, x$1, x$2, x$3;
		p = this.$val;
		sum = 0;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			pi = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			if (pi < (x = r.p, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))) {
				d = pi - (x$2 = r.p, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]));
				sum = sum + (d * d);
			} else if (pi > (x$1 = r.q, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))) {
				d$1 = pi - (x$3 = r.q, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i]));
				sum = sum + (d$1 * d$1);
			} else {
				sum = sum + (0);
			}
			_i++;
		}
		return sum;
	};
	$ptrType(Point).prototype.minDist = function(r) { return new Point(this.$get()).minDist(r); };
	Point.prototype.minMaxDist = function(r) {
		var S, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, d, d$1, d1, d2, i, k, min, p, r, rM, rm, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; S = $f.S; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; d = $f.d; d$1 = $f.d$1; d1 = $f.d1; d2 = $f.d2; i = $f.i; k = $f.k; min = $f.min; p = $f.p; r = $f.r; rM = $f.rM; rm = $f.rm; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = [p];
		r = [r];
		p[0] = this.$val;
		rm = (function(p, r) { return function(k) {
			var k, x, x$1, x$2, x$3;
			if (((k < 0 || k >= p[0].length) ? ($throwRuntimeError("index out of range"), undefined) : p[0][k]) <= ((x = r[0].p, ((k < 0 || k >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[k])) + (x$1 = r[0].q, ((k < 0 || k >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[k]))) / 2) {
				return (x$2 = r[0].p, ((k < 0 || k >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[k]));
			}
			return (x$3 = r[0].q, ((k < 0 || k >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[k]));
		}; })(p, r);
		rM = (function(p, r) { return function(k) {
			var k, x, x$1, x$2, x$3;
			if (((k < 0 || k >= p[0].length) ? ($throwRuntimeError("index out of range"), undefined) : p[0][k]) >= ((x = r[0].p, ((k < 0 || k >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[k])) + (x$1 = r[0].q, ((k < 0 || k >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[k]))) / 2) {
				return (x$2 = r[0].p, ((k < 0 || k >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[k]));
			}
			return (x$3 = r[0].q, ((k < 0 || k >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[k]));
		}; })(p, r);
		S = 0;
		_ref = p[0];
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 2; continue; }
			i = _i;
			_r = rM(i); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			d = ((i < 0 || i >= p[0].length) ? ($throwRuntimeError("index out of range"), undefined) : p[0][i]) - _r;
			S = S + (d * d);
			_i++;
		/* } */ $s = 1; continue; case 2:
		min = 1.7976931348623157e+308;
		_ref$1 = p[0];
		_i$1 = 0;
		/* while (true) { */ case 4:
			/* if (!(_i$1 < 3)) { break; } */ if(!(_i$1 < 3)) { $s = 5; continue; }
			k = _i$1;
			_r$1 = rM(k); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			d1 = ((k < 0 || k >= p[0].length) ? ($throwRuntimeError("index out of range"), undefined) : p[0][k]) - _r$1;
			_r$2 = rm(k); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			d2 = ((k < 0 || k >= p[0].length) ? ($throwRuntimeError("index out of range"), undefined) : p[0][k]) - _r$2;
			d$1 = S - d1 * d1 + d2 * d2;
			if (d$1 < min) {
				min = d$1;
			}
			_i$1++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return min;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Point.prototype.minMaxDist }; } $f.S = S; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.d = d; $f.d$1 = d$1; $f.d1 = d1; $f.d2 = d2; $f.i = i; $f.k = k; $f.min = min; $f.p = p; $f.r = r; $f.rM = rM; $f.rm = rm; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Point).prototype.minMaxDist = function(r) { return new Point(this.$get()).minMaxDist(r); };
	Rect.ptr.prototype.PointCoord = function(i) {
		var i, r, x;
		r = this;
		return (x = r.p, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
	};
	Rect.prototype.PointCoord = function(i) { return this.$val.PointCoord(i); };
	Rect.ptr.prototype.LengthsCoord = function(i) {
		var i, r, x, x$1;
		r = this;
		return (x = r.q, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) - (x$1 = r.p, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]));
	};
	Rect.prototype.LengthsCoord = function(i) { return this.$val.LengthsCoord(i); };
	Rect.ptr.prototype.Equal = function(other) {
		var _i, _i$1, _ref, _ref$1, e, e$1, i, i$1, other, r, x, x$1;
		r = this;
		_ref = r.p;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			e = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			if (!((e === (x = other.p, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))))) {
				return false;
			}
			_i++;
		}
		_ref$1 = r.q;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 3)) { break; }
			i$1 = _i$1;
			e$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1[_i$1]);
			if (!((e$1 === (x$1 = other.q, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1]))))) {
				return false;
			}
			_i$1++;
		}
		return true;
	};
	Rect.prototype.Equal = function(other) { return this.$val.Equal(other); };
	Rect.ptr.prototype.String = function() {
		var _i, _r, _ref, a, b, i, r, s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; b = $f.b; i = $f.i; r = $f.r; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		s = arrayType.zero();
		_ref = r.p;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 3)) { break; } */ if(!(_i < 3)) { $s = 2; continue; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			b = (x = r.q, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			_r = fmt.Sprintf("[%.2f, %.2f]", new sliceType([new $Float64(a), new $Float64(b)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			((i < 0 || i >= s.length) ? ($throwRuntimeError("index out of range"), undefined) : s[i] = _r);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return strings.Join(new sliceType$1(s), "x");
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rect.ptr.prototype.String }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.b = b; $f.i = i; $f.r = r; $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rect.prototype.String = function() { return this.$val.String(); };
	NewRect = function(p, lengths) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, err, i, l, lengths, p, r, x, x$1, x$2;
		r = new Rect.ptr(arrayType$1.zero(), arrayType$1.zero());
		err = $ifaceNil;
		Point.copy(r.p, p);
		Point.copy(r.q, lengths);
		_ref = r.q;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			l = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			if (l <= 0) {
				_tmp = $clone(r, Rect);
				_tmp$1 = new DistError((l));
				Rect.copy(r, _tmp);
				err = _tmp$1;
				return [r, err];
			}
			(x$2 = r.q, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i] = (x = r.q, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) + ((x$1 = r.p, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])))));
			_i++;
		}
		_tmp$2 = $clone(r, Rect);
		_tmp$3 = $ifaceNil;
		Rect.copy(r, _tmp$2);
		err = _tmp$3;
		return [r, err];
	};
	$pkg.NewRect = NewRect;
	Rect.ptr.prototype.size = function() {
		var _i, _ref, a, b, i, r, size, x;
		r = this;
		size = 1;
		_ref = r.p;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			b = (x = r.q, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			size = size * (b - a);
			_i++;
		}
		return size;
	};
	Rect.prototype.size = function() { return this.$val.size(); };
	Rect.ptr.prototype.containsRect = function(r2) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, a1, a2, b1, b2, i, r1, r2, x, x$1, x$2;
		r1 = this;
		_ref = r1.p;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			a1 = ((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]);
			_tmp = (x = r1.q, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			_tmp$1 = (x$1 = r2.p, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]));
			_tmp$2 = (x$2 = r2.q, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]));
			b1 = _tmp;
			a2 = _tmp$1;
			b2 = _tmp$2;
			if (a1 > a2 || b2 > b1) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Rect.prototype.containsRect = function(r2) { return this.$val.containsRect(r2); };
	Rect.ptr.prototype.enlarge = function(r2) {
		var i, r1, r2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		r1 = this;
		i = 0;
		while (true) {
			if (!(i < 3)) { break; }
			if ((x = r1.p, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) > (x$1 = r2.p, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i]))) {
				(x$3 = r1.p, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i] = (x$2 = r2.p, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]))));
			}
			if ((x$4 = r1.q, ((i < 0 || i >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i])) < (x$5 = r2.q, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i]))) {
				(x$7 = r1.q, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i] = (x$6 = r2.q, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i]))));
			}
			i = i + (1) >> 0;
		}
	};
	Rect.prototype.enlarge = function(r2) { return this.$val.enlarge(r2); };
	intersect = function(r1, r2) {
		var i, r1, r2, x, x$1, x$2, x$3;
		i = 0;
		while (true) {
			if (!(i < 3)) { break; }
			if ((x = r2.q, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) <= (x$1 = r1.p, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) || (x$2 = r1.q, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) <= (x$3 = r2.p, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i]))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	Point.prototype.ToRect = function(tol) {
		var _i, _ref, i, p, r, tol, x, x$1;
		p = this.$val;
		r = new Rect.ptr(arrayType$1.zero(), arrayType$1.zero());
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < 3)) { break; }
			i = _i;
			(x = r.p, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = ((i < 0 || i >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[i]) - tol));
			(x$1 = r.q, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i] = ((i < 0 || i >= p.length) ? ($throwRuntimeError("index out of range"), undefined) : p[i]) + tol));
			_i++;
		}
		return r;
	};
	$ptrType(Point).prototype.ToRect = function(tol) { return new Point(this.$get()).ToRect(tol); };
	initBoundingBox = function(r, r1, r2) {
		var r, r1, r2;
		Rect.copy(r, r1);
		r.enlarge(r2);
	};
	boundingBox = function(r1, r2) {
		var r, r1, r2;
		r = new Rect.ptr(arrayType$1.zero(), arrayType$1.zero());
		initBoundingBox(r, r1, r2);
		return r;
	};
	boundingBoxN = function(rects) {
		var _i, _ref, bb, rect, rects;
		bb = ptrType.nil;
		if (rects.$length === 1) {
			bb = (0 >= rects.$length ? ($throwRuntimeError("index out of range"), undefined) : rects.$array[rects.$offset + 0]);
			return bb;
		}
		bb = boundingBox((0 >= rects.$length ? ($throwRuntimeError("index out of range"), undefined) : rects.$array[rects.$offset + 0]), (1 >= rects.$length ? ($throwRuntimeError("index out of range"), undefined) : rects.$array[rects.$offset + 1]));
		_ref = $subslice(rects, 2);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			rect = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			bb = boundingBox(bb, rect);
			_i++;
		}
		return bb;
	};
	NewTree = function(MinChildren, MaxChildren) {
		var MaxChildren, MinChildren, rt;
		rt = new Rtree.ptr(MinChildren, MaxChildren, ptrType$1.nil, 0, 0);
		rt.height = 1;
		rt.root = new node.ptr(ptrType$1.nil, false, sliceType$2.nil, 0);
		rt.root.entries = $makeSlice(sliceType$2, 0, MaxChildren);
		rt.root.leaf = true;
		rt.root.level = 1;
		return rt;
	};
	$pkg.NewTree = NewTree;
	Rtree.ptr.prototype.Size = function() {
		var tree;
		tree = this;
		return tree.size;
	};
	Rtree.prototype.Size = function() { return this.$val.Size(); };
	Rtree.ptr.prototype.String = function() {
		var tree;
		tree = this;
		return "(*Rtree)";
	};
	Rtree.prototype.String = function() { return this.$val.String(); };
	Rtree.ptr.prototype.Depth = function() {
		var tree;
		tree = this;
		return tree.height;
	};
	Rtree.prototype.Depth = function() { return this.$val.Depth(); };
	node.ptr.prototype.String = function() {
		var _r, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = this;
		_r = fmt.Sprintf("node{leaf: %v, entries: %v}", new sliceType([new $Bool(n.leaf), n.entries])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: node.ptr.prototype.String }; } $f._r = _r; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	node.prototype.String = function() { return this.$val.String(); };
	entry.ptr.prototype.String = function() {
		var _r, _r$1, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (!(e.child === ptrType$1.nil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(e.child === ptrType$1.nil)) { */ case 1:
			_r = fmt.Sprintf("entry{bb: %v, child: %v}", new sliceType([e.bb, e.child])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("entry{bb: %v, obj: %v}", new sliceType([e.bb, e.obj])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: entry.ptr.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	entry.prototype.String = function() { return this.$val.String(); };
	Rtree.ptr.prototype.Insert = function(obj) {
		var _r, e, obj, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; obj = $f.obj; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		_r = obj.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		e = new entry.ptr(_r, ptrType$1.nil, obj);
		tree.insert($clone(e, entry), 1);
		tree.size = tree.size + (1) >> 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.Insert }; } $f._r = _r; $f.e = e; $f.obj = obj; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.Insert = function(obj) { return this.$val.Insert(obj); };
	Rtree.ptr.prototype.insert = function(e, level) {
		var _tuple, _tuple$1, e, leaf, level, oldRoot, root, split, splitRoot, tree;
		tree = this;
		leaf = tree.chooseNode(tree.root, $clone(e, entry), level);
		leaf.entries = $append(leaf.entries, e);
		if (!(e.child === ptrType$1.nil)) {
			e.child.parent = leaf;
		}
		split = ptrType$1.nil;
		if (leaf.entries.$length > tree.MaxChildren) {
			_tuple = leaf.split(tree.MinChildren);
			leaf = _tuple[0];
			split = _tuple[1];
		}
		_tuple$1 = tree.adjustTree(leaf, split);
		root = _tuple$1[0];
		splitRoot = _tuple$1[1];
		if (!(splitRoot === ptrType$1.nil)) {
			oldRoot = root;
			tree.height = tree.height + (1) >> 0;
			tree.root = new node.ptr(ptrType$1.nil, false, new sliceType$2([new entry.ptr(oldRoot.computeBoundingBox(), oldRoot, $ifaceNil), new entry.ptr(splitRoot.computeBoundingBox(), splitRoot, $ifaceNil)]), tree.height);
			oldRoot.parent = tree.root;
			splitRoot.parent = tree.root;
		}
	};
	Rtree.prototype.insert = function(e, level) { return this.$val.insert(e, level); };
	Rtree.ptr.prototype.chooseNode = function(n, e, level) {
		var _i, _ref, bb, chosen, d, diff, e, en, level, n, tree;
		tree = this;
		if (n.leaf || (n.level === level)) {
			return n;
		}
		diff = 1.7976931348623157e+308;
		chosen = new entry.ptr(ptrType.nil, ptrType$1.nil, $ifaceNil);
		bb = new Rect.ptr(arrayType$1.zero(), arrayType$1.zero());
		_ref = n.entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			en = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			initBoundingBox(bb, en.bb, e.bb);
			d = bb.size() - en.bb.size();
			if (d < diff || ((d === diff) && en.bb.size() < chosen.bb.size())) {
				diff = d;
				entry.copy(chosen, en);
			}
			_i++;
		}
		return tree.chooseNode(chosen.child, $clone(e, entry), level);
	};
	Rtree.prototype.chooseNode = function(n, e, level) { return this.$val.chooseNode(n, e, level); };
	Rtree.ptr.prototype.adjustTree = function(n, nn) {
		var _tuple, en, enn, n, nn, tree;
		tree = this;
		if (n === tree.root) {
			return [n, nn];
		}
		en = n.getEntry();
		en.bb = n.computeBoundingBox();
		if (nn === ptrType$1.nil) {
			return tree.adjustTree(n.parent, ptrType$1.nil);
		}
		enn = new entry.ptr(nn.computeBoundingBox(), nn, $ifaceNil);
		n.parent.entries = $append(n.parent.entries, enn);
		if (n.parent.entries.$length > tree.MaxChildren) {
			_tuple = n.parent.split(tree.MinChildren);
			return tree.adjustTree(_tuple[0], _tuple[1]);
		}
		return tree.adjustTree(n.parent, ptrType$1.nil);
	};
	Rtree.prototype.adjustTree = function(n, nn) { return this.$val.adjustTree(n, nn); };
	node.ptr.prototype.getEntry = function() {
		var _i, _ref, e, i, n, x, x$1;
		n = this;
		e = ptrType$2.nil;
		_ref = n.parent.entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if ((x = n.parent.entries, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).child === n) {
				e = (x$1 = n.parent.entries, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]));
				break;
			}
			_i++;
		}
		return e;
	};
	node.prototype.getEntry = function() { return this.$val.getEntry(); };
	node.ptr.prototype.computeBoundingBox = function() {
		var _i, _ref, bb, childBoxes, e, i, n;
		bb = ptrType.nil;
		n = this;
		childBoxes = $makeSlice(sliceType$3, n.entries.$length);
		_ref = n.entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			((i < 0 || i >= childBoxes.$length) ? ($throwRuntimeError("index out of range"), undefined) : childBoxes.$array[childBoxes.$offset + i] = e.bb);
			_i++;
		}
		bb = boundingBoxN(childBoxes);
		return bb;
	};
	node.prototype.computeBoundingBox = function() { return this.$val.computeBoundingBox(); };
	node.ptr.prototype.split = function(minGroupSize) {
		var _tmp, _tmp$1, _tuple, e, l, left, leftSeed, minGroupSize, n, next, r, remaining, right, rightSeed, x, x$1;
		left = ptrType$1.nil;
		right = ptrType$1.nil;
		n = this;
		_tuple = n.pickSeeds();
		l = _tuple[0];
		r = _tuple[1];
		_tmp = $clone((x = n.entries, ((l < 0 || l >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + l])), entry);
		_tmp$1 = $clone((x$1 = n.entries, ((r < 0 || r >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + r])), entry);
		leftSeed = $clone(_tmp, entry);
		rightSeed = $clone(_tmp$1, entry);
		remaining = $appendSlice($subslice(n.entries, 0, l), $subslice(n.entries, (l + 1 >> 0), r));
		remaining = $appendSlice(remaining, $subslice(n.entries, (r + 1 >> 0)));
		left = n;
		left.entries = new sliceType$2([$clone(leftSeed, entry)]);
		right = new node.ptr(n.parent, n.leaf, new sliceType$2([$clone(rightSeed, entry)]), n.level);
		if (!(rightSeed.child === ptrType$1.nil)) {
			rightSeed.child.parent = right;
		}
		if (!(leftSeed.child === ptrType$1.nil)) {
			leftSeed.child.parent = left;
		}
		while (true) {
			if (!(remaining.$length > 0)) { break; }
			next = pickNext(left, right, remaining);
			e = $clone(((next < 0 || next >= remaining.$length) ? ($throwRuntimeError("index out of range"), undefined) : remaining.$array[remaining.$offset + next]), entry);
			if ((remaining.$length + left.entries.$length >> 0) <= minGroupSize) {
				assign($clone(e, entry), left);
			} else if ((remaining.$length + right.entries.$length >> 0) <= minGroupSize) {
				assign($clone(e, entry), right);
			} else {
				assignGroup($clone(e, entry), left, right);
			}
			remaining = $appendSlice($subslice(remaining, 0, next), $subslice(remaining, (next + 1 >> 0)));
		}
		return [left, right];
	};
	node.prototype.split = function(minGroupSize) { return this.$val.split(minGroupSize); };
	assign = function(e, group) {
		var e, group;
		if (!(e.child === ptrType$1.nil)) {
			e.child.parent = group;
		}
		group.entries = $append(group.entries, e);
	};
	assignGroup = function(e, left, right) {
		var diff, diff$1, diff$2, e, left, leftBB, leftDiff, leftEnlarged, right, rightBB, rightDiff, rightEnlarged;
		leftBB = left.computeBoundingBox();
		rightBB = right.computeBoundingBox();
		leftEnlarged = boundingBox(leftBB, e.bb);
		rightEnlarged = boundingBox(rightBB, e.bb);
		leftDiff = leftEnlarged.size() - leftBB.size();
		rightDiff = rightEnlarged.size() - rightBB.size();
		diff = leftDiff - rightDiff;
		if (diff < 0) {
			assign($clone(e, entry), left);
			return;
		} else if (diff > 0) {
			assign($clone(e, entry), right);
			return;
		}
		diff$1 = leftBB.size() - rightBB.size();
		if (diff$1 < 0) {
			assign($clone(e, entry), left);
			return;
		} else if (diff$1 > 0) {
			assign($clone(e, entry), right);
			return;
		}
		diff$2 = left.entries.$length - right.entries.$length >> 0;
		if (diff$2 <= 0) {
			assign($clone(e, entry), left);
			return;
		}
		assign($clone(e, entry), right);
	};
	node.ptr.prototype.pickSeeds = function() {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, d, e1, e2, i, j, left, maxWastedSpace, n, right;
		n = this;
		_tmp = 0;
		_tmp$1 = 1;
		left = _tmp;
		right = _tmp$1;
		maxWastedSpace = -1;
		_ref = n.entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			_ref$1 = $subslice(n.entries, (i + 1 >> 0));
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				j = _i$1;
				e2 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), entry);
				d = boundingBox(e1.bb, e2.bb).size() - e1.bb.size() - e2.bb.size();
				if (d > maxWastedSpace) {
					maxWastedSpace = d;
					_tmp$2 = i;
					_tmp$3 = (j + i >> 0) + 1 >> 0;
					left = _tmp$2;
					right = _tmp$3;
				}
				_i$1++;
			}
			_i++;
		}
		return [left, right];
	};
	node.prototype.pickSeeds = function() { return this.$val.pickSeeds(); };
	pickNext = function(left, right, entries) {
		var _i, _ref, d, d1, d2, e, entries, i, left, leftBB, maxDiff, next, right, rightBB;
		next = 0;
		maxDiff = -1;
		leftBB = left.computeBoundingBox();
		rightBB = right.computeBoundingBox();
		_ref = entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			d1 = boundingBox(leftBB, e.bb).size() - leftBB.size();
			d2 = boundingBox(rightBB, e.bb).size() - rightBB.size();
			d = math.Abs(d1 - d2);
			if (d > maxDiff) {
				maxDiff = d;
				next = i;
			}
			_i++;
		}
		return next;
	};
	Rtree.ptr.prototype.Delete = function(obj) {
		var _i, _r, _ref, e, i, ind, n, obj, tree, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; e = $f.e; i = $f.i; ind = $f.ind; n = $f.n; obj = $f.obj; tree = $f.tree; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		_r = tree.findLeaf(tree.root, obj); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r;
		if (n === ptrType$1.nil) {
			$s = -1; return false;
		}
		ind = -1;
		_ref = n.entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			if ($interfaceIsEqual(e.obj, obj)) {
				ind = i;
			}
			_i++;
		}
		if (ind < 0) {
			$s = -1; return false;
		}
		n.entries = $appendSlice($subslice(n.entries, 0, ind), $subslice(n.entries, (ind + 1 >> 0)));
		$r = tree.condenseTree(n); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		tree.size = tree.size - (1) >> 0;
		if (!tree.root.leaf && (tree.root.entries.$length === 1)) {
			tree.root = (x = tree.root.entries, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).child;
		}
		tree.height = tree.root.level;
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.Delete }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.e = e; $f.i = i; $f.ind = ind; $f.n = n; $f.obj = obj; $f.tree = tree; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.Delete = function(obj) { return this.$val.Delete(obj); };
	Rtree.ptr.prototype.findLeaf = function(n, obj) {
		var _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, e, leaf, leafEntry, n, obj, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; e = $f.e; leaf = $f.leaf; leafEntry = $f.leafEntry; n = $f.n; obj = $f.obj; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		if (n.leaf) {
			$s = -1; return n;
		}
		_ref = n.entries;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			_r = obj.Bounds(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = e.bb.containsRect(_r); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_r$1) { */ case 3:
				_r$2 = tree.findLeaf(e.child, obj); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				leaf = _r$2;
				if (leaf === ptrType$1.nil) {
					_i++;
					/* continue; */ $s = 1; continue;
				}
				_ref$1 = leaf.entries;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					leafEntry = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), entry);
					if ($interfaceIsEqual(leafEntry.obj, obj)) {
						$s = -1; return leaf;
					}
					_i$1++;
				}
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ptrType$1.nil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.findLeaf }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f.e = e; $f.leaf = leaf; $f.leafEntry = leafEntry; $f.n = n; $f.obj = obj; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.findLeaf = function(n, obj) { return this.$val.findLeaf(n, obj); };
	Rtree.ptr.prototype.condenseTree = function(n) {
		var _i, _i$1, _r, _ref, _ref$1, deleted, e, e$1, entries, n, n$1, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; deleted = $f.deleted; e = $f.e; e$1 = $f.e$1; entries = $f.entries; n = $f.n; n$1 = $f.n$1; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		deleted = new sliceType$4([]);
		/* while (true) { */ case 1:
			/* if (!(!(n === tree.root))) { break; } */ if(!(!(n === tree.root))) { $s = 2; continue; }
			/* */ if (n.entries.$length < tree.MinChildren) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (n.entries.$length < tree.MinChildren) { */ case 3:
				entries = new sliceType$2([]);
				_ref = n.parent.entries;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
					if (!(e.child === n)) {
						entries = $append(entries, e);
					}
					_i++;
				}
				/* */ if (n.parent.entries.$length === entries.$length) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (n.parent.entries.$length === entries.$length) { */ case 6:
					_r = fmt.Errorf("Failed to remove entry from parent", new sliceType([])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					$panic(_r);
				/* } */ case 7:
				n.parent.entries = entries;
				if (n.entries.$length > 0) {
					deleted = $append(deleted, n);
				}
				$s = 5; continue;
			/* } else { */ case 4:
				n.getEntry().bb = n.computeBoundingBox();
			/* } */ case 5:
			n = n.parent;
		/* } */ $s = 1; continue; case 2:
		_ref$1 = deleted;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			n$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			e$1 = new entry.ptr(n$1.computeBoundingBox(), n$1, $ifaceNil);
			tree.insert($clone(e$1, entry), n$1.level + 1 >> 0);
			_i$1++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.condenseTree }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.deleted = deleted; $f.e = e; $f.e$1 = e$1; $f.entries = entries; $f.n = n; $f.n$1 = n$1; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.condenseTree = function(n) { return this.$val.condenseTree(n); };
	Rtree.ptr.prototype.SearchIntersect = function(bb) {
		var bb, tree;
		tree = this;
		return tree.searchIntersect(tree.root, bb, new sliceType$5([]));
	};
	Rtree.prototype.SearchIntersect = function(bb) { return this.$val.SearchIntersect(bb); };
	Rtree.ptr.prototype.searchIntersect = function(n, bb, results) {
		var _i, _ref, bb, e, n, results, tree;
		tree = this;
		_ref = n.entries;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			if (intersect(e.bb, bb)) {
				if (n.leaf) {
					results = $append(results, e.obj);
				} else {
					results = tree.searchIntersect(e.child, bb, results);
				}
			}
			_i++;
		}
		return results;
	};
	Rtree.prototype.searchIntersect = function(n, bb, results) { return this.$val.searchIntersect(n, bb, results); };
	Rtree.ptr.prototype.NearestNeighbor = function(p) {
		var _r, _tuple, obj, p, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; obj = $f.obj; p = $f.p; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		_r = tree.nearestNeighbor($clone(p, Point), tree.root, 1.7976931348623157e+308, $ifaceNil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		obj = _tuple[0];
		$s = -1; return obj;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.NearestNeighbor }; } $f._r = _r; $f._tuple = _tuple; $f.obj = obj; $f.p = p; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.NearestNeighbor = function(p) { return this.$val.NearestNeighbor(p); };
	entrySlice.ptr.prototype.Len = function() {
		var s;
		s = this;
		return s.entries.$length;
	};
	entrySlice.prototype.Len = function() { return this.$val.Len(); };
	entrySlice.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		s = this;
		_tmp = $clone((x = s.entries, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j])), entry);
		_tmp$1 = $clone((x$1 = s.entries, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])), entry);
		entry.copy((x$2 = s.entries, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])), _tmp);
		entry.copy((x$3 = s.entries, ((j < 0 || j >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + j])), _tmp$1);
		_tmp$2 = (x$4 = s.dists, ((j < 0 || j >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + j]));
		_tmp$3 = (x$5 = s.dists, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
		(x$6 = s.dists, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i] = _tmp$2));
		(x$7 = s.dists, ((j < 0 || j >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + j] = _tmp$3));
	};
	entrySlice.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	entrySlice.ptr.prototype.Less = function(i, j) {
		var i, j, s, x, x$1;
		s = this;
		return (x = s.dists, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])) < (x$1 = s.dists, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
	};
	entrySlice.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	sortEntries = function(p, entries) {
		var dists, entries, i, p, sorted, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dists = $f.dists; entries = $f.entries; i = $f.i; p = $f.p; sorted = $f.sorted; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sorted = $makeSlice(sliceType$2, entries.$length);
		dists = $makeSlice(sliceType$6, entries.$length);
		i = 0;
		while (true) {
			if (!(i < entries.$length)) { break; }
			entry.copy(((i < 0 || i >= sorted.$length) ? ($throwRuntimeError("index out of range"), undefined) : sorted.$array[sorted.$offset + i]), ((i < 0 || i >= entries.$length) ? ($throwRuntimeError("index out of range"), undefined) : entries.$array[entries.$offset + i]));
			((i < 0 || i >= dists.$length) ? ($throwRuntimeError("index out of range"), undefined) : dists.$array[dists.$offset + i] = new Point($clone(p, Point)).minDist(((i < 0 || i >= entries.$length) ? ($throwRuntimeError("index out of range"), undefined) : entries.$array[entries.$offset + i]).bb));
			i = i + (1) >> 0;
		}
		$r = sort.Sort((x = new entrySlice.ptr(sorted, dists), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [sorted, dists];
		/* */ } return; } if ($f === undefined) { $f = { $blk: sortEntries }; } $f.dists = dists; $f.entries = entries; $f.i = i; $f.p = p; $f.sorted = sorted; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pruneEntries = function(p, entries, minDists) {
		var _i, _i$1, _r, _ref, _ref$1, entries, i, i$1, minDists, minMaxDist, minMinMaxDist, p, pruned, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; entries = $f.entries; i = $f.i; i$1 = $f.i$1; minDists = $f.minDists; minMaxDist = $f.minMaxDist; minMinMaxDist = $f.minMinMaxDist; p = $f.p; pruned = $f.pruned; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		minMinMaxDist = 1.7976931348623157e+308;
		_ref = entries;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			_r = new Point($clone(p, Point)).minMaxDist(((i < 0 || i >= entries.$length) ? ($throwRuntimeError("index out of range"), undefined) : entries.$array[entries.$offset + i]).bb); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			minMaxDist = _r;
			if (minMaxDist < minMinMaxDist) {
				minMinMaxDist = minMaxDist;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		pruned = new sliceType$2([]);
		_ref$1 = entries;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			if (((i$1 < 0 || i$1 >= minDists.$length) ? ($throwRuntimeError("index out of range"), undefined) : minDists.$array[minDists.$offset + i$1]) <= minMinMaxDist) {
				pruned = $append(pruned, ((i$1 < 0 || i$1 >= entries.$length) ? ($throwRuntimeError("index out of range"), undefined) : entries.$array[entries.$offset + i$1]));
			}
			_i$1++;
		}
		$s = -1; return pruned;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pruneEntries }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.entries = entries; $f.i = i; $f.i$1 = i$1; $f.minDists = minDists; $f.minMaxDist = minMaxDist; $f.minMinMaxDist = minMinMaxDist; $f.p = p; $f.pruned = pruned; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.ptr.prototype.nearestNeighbor = function(p, n, d, nearest) {
		var _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _tuple, _tuple$1, branches, d, dist, dist$1, dists, e, e$1, n, nearest, p, subNearest, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; branches = $f.branches; d = $f.d; dist = $f.dist; dist$1 = $f.dist$1; dists = $f.dists; e = $f.e; e$1 = $f.e$1; n = $f.n; nearest = $f.nearest; p = $f.p; subNearest = $f.subNearest; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		/* */ if (n.leaf) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n.leaf) { */ case 1:
			_ref = n.entries;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
				dist = math.Sqrt(new Point($clone(p, Point)).minDist(e.bb));
				if (dist < d) {
					d = dist;
					nearest = e.obj;
				}
				_i++;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_r = sortEntries($clone(p, Point), n.entries); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			branches = _tuple[0];
			dists = _tuple[1];
			_r$1 = pruneEntries($clone(p, Point), branches, dists); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			branches = _r$1;
			_ref$1 = branches;
			_i$1 = 0;
			/* while (true) { */ case 6:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 7; continue; }
				e$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), entry);
				_r$2 = tree.nearestNeighbor($clone(p, Point), e$1.child, d, nearest); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				subNearest = _tuple$1[0];
				dist$1 = _tuple$1[1];
				if (dist$1 < d) {
					d = dist$1;
					nearest = subNearest;
				}
				_i$1++;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 3:
		$s = -1; return [nearest, d];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.nearestNeighbor }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.branches = branches; $f.d = d; $f.dist = dist; $f.dist$1 = dist$1; $f.dists = dists; $f.e = e; $f.e$1 = e$1; $f.n = n; $f.nearest = nearest; $f.p = p; $f.subNearest = subNearest; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.nearestNeighbor = function(p, n, d, nearest) { return this.$val.nearestNeighbor(p, n, d, nearest); };
	Rtree.ptr.prototype.NearestNeighbors = function(k, p) {
		var _r, _tuple, dists, i, k, objs, p, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; dists = $f.dists; i = $f.i; k = $f.k; objs = $f.objs; p = $f.p; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		dists = $makeSlice(sliceType$6, k);
		objs = $makeSlice(sliceType$5, k);
		i = 0;
		while (true) {
			if (!(i < k)) { break; }
			((i < 0 || i >= dists.$length) ? ($throwRuntimeError("index out of range"), undefined) : dists.$array[dists.$offset + i] = 1.7976931348623157e+308);
			((i < 0 || i >= objs.$length) ? ($throwRuntimeError("index out of range"), undefined) : objs.$array[objs.$offset + i] = $ifaceNil);
			i = i + (1) >> 0;
		}
		_r = tree.nearestNeighbors(k, $clone(p, Point), tree.root, dists, objs); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		objs = _tuple[0];
		$s = -1; return objs;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.NearestNeighbors }; } $f._r = _r; $f._tuple = _tuple; $f.dists = dists; $f.i = i; $f.k = k; $f.objs = objs; $f.p = p; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.NearestNeighbors = function(k, p) { return this.$val.NearestNeighbors(k, p); };
	insertNearest = function(k, dists, nearest, dist, obj) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dist, dists, i, k, left, leftObjs, nearest, obj, right, rightObjs, updatedDists, updatedNearest;
		i = 0;
		while (true) {
			if (!(i < k && dist >= ((i < 0 || i >= dists.$length) ? ($throwRuntimeError("index out of range"), undefined) : dists.$array[dists.$offset + i]))) { break; }
			i = i + (1) >> 0;
		}
		if (i >= k) {
			return [dists, nearest];
		}
		_tmp = $subslice(dists, 0, i);
		_tmp$1 = $subslice(dists, i, (k - 1 >> 0));
		left = _tmp;
		right = _tmp$1;
		updatedDists = $makeSlice(sliceType$6, k);
		$copySlice(updatedDists, left);
		((i < 0 || i >= updatedDists.$length) ? ($throwRuntimeError("index out of range"), undefined) : updatedDists.$array[updatedDists.$offset + i] = dist);
		$copySlice($subslice(updatedDists, (i + 1 >> 0)), right);
		_tmp$2 = $subslice(nearest, 0, i);
		_tmp$3 = $subslice(nearest, i, (k - 1 >> 0));
		leftObjs = _tmp$2;
		rightObjs = _tmp$3;
		updatedNearest = $makeSlice(sliceType$5, k);
		$copySlice(updatedNearest, leftObjs);
		((i < 0 || i >= updatedNearest.$length) ? ($throwRuntimeError("index out of range"), undefined) : updatedNearest.$array[updatedNearest.$offset + i] = obj);
		$copySlice($subslice(updatedNearest, (i + 1 >> 0)), rightObjs);
		return [updatedDists, updatedNearest];
	};
	Rtree.ptr.prototype.nearestNeighbors = function(k, p, n, dists, nearest) {
		var _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, branchDists, branches, dist, dists, e, e$1, k, n, nearest, p, tree, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; branchDists = $f.branchDists; branches = $f.branches; dist = $f.dist; dists = $f.dists; e = $f.e; e$1 = $f.e$1; k = $f.k; n = $f.n; nearest = $f.nearest; p = $f.p; tree = $f.tree; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		tree = this;
		/* */ if (n.leaf) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n.leaf) { */ case 1:
			_ref = n.entries;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				e = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
				dist = math.Sqrt(new Point($clone(p, Point)).minDist(e.bb));
				_tuple = insertNearest(k, dists, nearest, dist, e.obj);
				dists = _tuple[0];
				nearest = _tuple[1];
				_i++;
			}
			$s = 3; continue;
		/* } else { */ case 2:
			_r = sortEntries($clone(p, Point), n.entries); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			branches = _tuple$1[0];
			branchDists = _tuple$1[1];
			_r$1 = pruneEntries($clone(p, Point), branches, branchDists); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			branches = _r$1;
			_ref$1 = branches;
			_i$1 = 0;
			/* while (true) { */ case 6:
				/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 7; continue; }
				e$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), entry);
				_r$2 = tree.nearestNeighbors(k, $clone(p, Point), e$1.child, dists, nearest); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				nearest = _tuple$2[0];
				dists = _tuple$2[1];
				_i$1++;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 3:
		$s = -1; return [nearest, dists];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rtree.ptr.prototype.nearestNeighbors }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.branchDists = branchDists; $f.branches = branches; $f.dist = dist; $f.dists = dists; $f.e = e; $f.e$1 = e$1; $f.k = k; $f.n = n; $f.nearest = nearest; $f.p = p; $f.tree = tree; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rtree.prototype.nearestNeighbors = function(k, p, n, dists, nearest) { return this.$val.nearestNeighbors(k, p, n, dists, nearest); };
	DistError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	Point.methods = [{prop: "dist", name: "dist", pkg: "github.com/200sc/rtreego", typ: $funcType([Point], [$Float64], false)}, {prop: "minDist", name: "minDist", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType], [$Float64], false)}, {prop: "minMaxDist", name: "minMaxDist", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType], [$Float64], false)}, {prop: "ToRect", name: "ToRect", pkg: "", typ: $funcType([$Float64], [ptrType], false)}];
	ptrType.methods = [{prop: "PointCoord", name: "PointCoord", pkg: "", typ: $funcType([$Int], [$Float64], false)}, {prop: "LengthsCoord", name: "LengthsCoord", pkg: "", typ: $funcType([$Int], [$Float64], false)}, {prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "size", name: "size", pkg: "github.com/200sc/rtreego", typ: $funcType([], [$Float64], false)}, {prop: "margin", name: "margin", pkg: "github.com/200sc/rtreego", typ: $funcType([], [$Float64], false)}, {prop: "containsPoint", name: "containsPoint", pkg: "github.com/200sc/rtreego", typ: $funcType([Point], [$Bool], false)}, {prop: "containsRect", name: "containsRect", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType], [$Bool], false)}, {prop: "enlarge", name: "enlarge", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType], [], false)}];
	ptrType$3.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Depth", name: "Depth", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Insert", name: "Insert", pkg: "", typ: $funcType([Spatial], [], false)}, {prop: "insert", name: "insert", pkg: "github.com/200sc/rtreego", typ: $funcType([entry, $Int], [], false)}, {prop: "chooseNode", name: "chooseNode", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType$1, entry, $Int], [ptrType$1], false)}, {prop: "adjustTree", name: "adjustTree", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType$1, ptrType$1], [ptrType$1, ptrType$1], false)}, {prop: "Delete", name: "Delete", pkg: "", typ: $funcType([Spatial], [$Bool], false)}, {prop: "findLeaf", name: "findLeaf", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType$1, Spatial], [ptrType$1], false)}, {prop: "condenseTree", name: "condenseTree", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType$1], [], false)}, {prop: "SearchIntersect", name: "SearchIntersect", pkg: "", typ: $funcType([ptrType], [sliceType$5], false)}, {prop: "searchIntersect", name: "searchIntersect", pkg: "github.com/200sc/rtreego", typ: $funcType([ptrType$1, ptrType, sliceType$5], [sliceType$5], false)}, {prop: "NearestNeighbor", name: "NearestNeighbor", pkg: "", typ: $funcType([Point], [Spatial], false)}, {prop: "nearestNeighbor", name: "nearestNeighbor", pkg: "github.com/200sc/rtreego", typ: $funcType([Point, ptrType$1, $Float64, Spatial], [Spatial, $Float64], false)}, {prop: "NearestNeighbors", name: "NearestNeighbors", pkg: "", typ: $funcType([$Int, Point], [sliceType$5], false)}, {prop: "nearestNeighbors", name: "nearestNeighbors", pkg: "github.com/200sc/rtreego", typ: $funcType([$Int, Point, ptrType$1, sliceType$6, sliceType$5], [sliceType$5, sliceType$6], false)}];
	ptrType$1.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "getEntry", name: "getEntry", pkg: "github.com/200sc/rtreego", typ: $funcType([], [ptrType$2], false)}, {prop: "computeBoundingBox", name: "computeBoundingBox", pkg: "github.com/200sc/rtreego", typ: $funcType([], [ptrType], false)}, {prop: "split", name: "split", pkg: "github.com/200sc/rtreego", typ: $funcType([$Int], [ptrType$1, ptrType$1], false)}, {prop: "pickSeeds", name: "pickSeeds", pkg: "github.com/200sc/rtreego", typ: $funcType([], [$Int, $Int], false)}];
	entry.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	entrySlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}];
	Point.init($Float64, 3);
	Rect.init("github.com/200sc/rtreego", [{prop: "p", name: "p", anonymous: false, exported: false, typ: Point, tag: ""}, {prop: "q", name: "q", anonymous: false, exported: false, typ: Point, tag: ""}]);
	Rtree.init("github.com/200sc/rtreego", [{prop: "MinChildren", name: "MinChildren", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "MaxChildren", name: "MaxChildren", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "root", name: "root", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	node.init("github.com/200sc/rtreego", [{prop: "parent", name: "parent", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "leaf", name: "leaf", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "entries", name: "entries", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "level", name: "level", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	entry.init("github.com/200sc/rtreego", [{prop: "bb", name: "bb", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "child", name: "child", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "obj", name: "obj", anonymous: false, exported: false, typ: Spatial, tag: ""}]);
	Spatial.init([{prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [ptrType], false)}]);
	entrySlice.init("github.com/200sc/rtreego", [{prop: "entries", name: "entries", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "dists", name: "dists", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/timing"] = (function() {
	var $pkg = {}, $init, dlog, math, time, DynamicTicker, ptrType, ptrType$1, sliceType, ptrType$2, chanType, chanType$1, chanType$2, nanoPerSecond, DoAfter, NewDynamicTicker, FPSToDuration;
	dlog = $packages["github.com/oakmound/oak/dlog"];
	math = $packages["math"];
	time = $packages["time"];
	DynamicTicker = $pkg.DynamicTicker = $newType(0, $kindStruct, "timing.DynamicTicker", true, "github.com/oakmound/oak/timing", true, function(ticker_, C_, resetCh_, forceTick_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ticker = ptrType.nil;
			this.C = $chanNil;
			this.resetCh = $chanNil;
			this.forceTick = $chanNil;
			return;
		}
		this.ticker = ticker_;
		this.C = C_;
		this.resetCh = resetCh_;
		this.forceTick = forceTick_;
	});
	ptrType = $ptrType(time.Ticker);
	ptrType$1 = $ptrType(time.Location);
	sliceType = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(DynamicTicker);
	chanType = $chanType(time.Time, false, false);
	chanType$1 = $chanType(ptrType, false, false);
	chanType$2 = $chanType($Bool, false, false);
	DoAfter = function(d, f) {
		var _r, _selection, d, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _selection = $f._selection; d = $f.d; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $select([[time.After(d)], [$pkg.ClearDelayCh]]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_selection = _r;
		/* */ if (_selection[0] === 0) { $s = 2; continue; }
		/* */ if (_selection[0] === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (_selection[0] === 0) { */ case 2:
			$r = f(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else if (_selection[0] === 1) { */ case 3:
		/* } */ case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DoAfter }; } $f._r = _r; $f._selection = _selection; $f.d = d; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DoAfter = DoAfter;
	NewDynamicTicker = function() {
		var dt;
		dt = new DynamicTicker.ptr(time.NewTicker(new time.Duration(838190, 1362165760)), new $Chan(time.Time, 0), new $Chan(ptrType, 0), new $Chan($Bool, 0));
		$go((function $b(dt$1) {
			var _r, _r$1, _r$2, _selection, _selection$1, _selection$2, dt$1, r, r$1, r$2, ticker, ticker$1, ticker$2, v, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _selection = $f._selection; _selection$1 = $f._selection$1; _selection$2 = $f._selection$2; dt$1 = $f.dt$1; r = $f.r; r$1 = $f.r$1; r$2 = $f.r$2; ticker = $f.ticker; ticker$1 = $f.ticker$1; ticker$2 = $f.ticker$2; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* while (true) { */ case 1:
				_r = $select([[dt$1.ticker.C], [dt$1.resetCh], [dt$1.forceTick]]); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_selection = _r;
				/* */ if (_selection[0] === 0) { $s = 4; continue; }
				/* */ if (_selection[0] === 1) { $s = 5; continue; }
				/* */ if (_selection[0] === 2) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_selection[0] === 0) { */ case 4:
					v = $clone(_selection[1][0], time.Time);
					/* while (true) { */ case 8:
						_r$1 = $select([[dt$1.forceTick], [dt$1.resetCh], [dt$1.C, $clone(v, time.Time)]]); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_selection$1 = _r$1;
						if (_selection$1[0] === 0) {
							r = _selection$1[1][0];
							if (!r) {
								dt$1.close();
								$s = -1; return;
							}
							/* continue; */ $s = 8; continue;
						} else if (_selection$1[0] === 1) {
							ticker = _selection$1[1][0];
							dt$1.ticker.Stop();
							dt$1.ticker = ticker;
							/* break tickLoop; */ $s = 9; continue s;
						} else if (_selection$1[0] === 2) {
							/* break tickLoop; */ $s = 9; continue s;
						}
					/* } */ $s = 8; continue; case 9:
					$s = 7; continue;
				/* } else if (_selection[0] === 1) { */ case 5:
					ticker$1 = _selection[1][0];
					dt$1.ticker.Stop();
					dt$1.ticker = ticker$1;
					$s = 7; continue;
				/* } else if (_selection[0] === 2) { */ case 6:
					r$1 = _selection[1][0];
					if (!r$1) {
						dt$1.close();
						$s = -1; return;
					}
					/* while (true) { */ case 11:
						_r$2 = $select([[dt$1.forceTick], [dt$1.resetCh], [dt$1.C, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$1.nil)]]); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_selection$2 = _r$2;
						if (_selection$2[0] === 0) {
							r$2 = _selection$2[1][0];
							if (!r$2) {
								dt$1.close();
								$s = -1; return;
							}
							/* continue; */ $s = 11; continue;
						} else if (_selection$2[0] === 1) {
							ticker$2 = _selection$2[1][0];
							dt$1.ticker.Stop();
							dt$1.ticker = ticker$2;
							/* break forceLoop; */ $s = 12; continue s;
						} else if (_selection$2[0] === 2) {
							/* break forceLoop; */ $s = 12; continue s;
						}
					/* } */ $s = 11; continue; case 12:
				/* } */ case 7:
			/* } */ $s = 1; continue; case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._selection = _selection; $f._selection$1 = _selection$1; $f._selection$2 = _selection$2; $f.dt$1 = dt$1; $f.r = r; $f.r$1 = r$1; $f.r$2 = r$2; $f.ticker = ticker; $f.ticker$1 = ticker$1; $f.ticker$2 = ticker$2; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
		}), [dt]);
		return dt;
	};
	$pkg.NewDynamicTicker = NewDynamicTicker;
	DynamicTicker.ptr.prototype.SetTick = function(d) {
		var d, dt, tck, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; dt = $f.dt; tck = $f.tck; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dt = this;
		tck = time.NewTicker(d);
		$r = $send(dt.resetCh, tck); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DynamicTicker.ptr.prototype.SetTick }; } $f.d = d; $f.dt = dt; $f.tck = tck; $f.$s = $s; $f.$r = $r; return $f;
	};
	DynamicTicker.prototype.SetTick = function(d) { return this.$val.SetTick(d); };
	DynamicTicker.ptr.prototype.close = function() {
		var dt;
		dt = this;
		$close(dt.C);
		$close(dt.resetCh);
		$close(dt.forceTick);
	};
	DynamicTicker.prototype.close = function() { return this.$val.close(); };
	DynamicTicker.ptr.prototype.Step = function() {
		var _selection, dt, $r;
		/* */ var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _selection = $f._selection; dt = $f.dt; $r = $f.$r; }
		dt = this;
		_selection = $select([[dt.forceTick, true], []]);
		if (_selection[0] === 0) {
		} else if (_selection[0] === 1) {
		}
		/* */ if ($f === undefined) { $f = { $blk: DynamicTicker.ptr.prototype.Step }; } $f._selection = _selection; $f.dt = dt; $f.$r = $r; return $f;
	};
	DynamicTicker.prototype.Step = function() { return this.$val.Step(); };
	DynamicTicker.ptr.prototype.Stop = function() {
		var _r, dt, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dt = $f.dt; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		dt = this;
		$deferred.push([(function $b() {
			var x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			x = $recover();
			/* */ if (!($interfaceIsEqual(x, $ifaceNil))) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (!($interfaceIsEqual(x, $ifaceNil))) { */ case 1:
				$r = dlog.Error(new sliceType([new $String("Dynamic Ticker stopped twice")])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}), []]);
		dt.ticker.Stop();
		$r = $send(dt.forceTick, false); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = $recv(dt.forceTick); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		$s = -1; return;
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: DynamicTicker.ptr.prototype.Stop }; } $f._r = _r; $f.dt = dt; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	DynamicTicker.prototype.Stop = function() { return this.$val.Stop(); };
	FPSToDuration = function(FrameRate) {
		var FrameRate, x;
		return $div64(new time.Duration(0, 1000000000), ((x = (new $Int64(0, FrameRate)), new time.Duration(x.$high, x.$low))), false);
	};
	$pkg.FPSToDuration = FPSToDuration;
	ptrType$2.methods = [{prop: "SetTick", name: "SetTick", pkg: "", typ: $funcType([time.Duration], [], false)}, {prop: "close", name: "close", pkg: "github.com/oakmound/oak/timing", typ: $funcType([], [], false)}, {prop: "Step", name: "Step", pkg: "", typ: $funcType([], [], false)}, {prop: "Stop", name: "Stop", pkg: "", typ: $funcType([], [], false)}];
	DynamicTicker.init("github.com/oakmound/oak/timing", [{prop: "ticker", name: "ticker", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "C", name: "C", anonymous: false, exported: true, typ: chanType, tag: ""}, {prop: "resetCh", name: "resetCh", anonymous: false, exported: false, typ: chanType$1, tag: ""}, {prop: "forceTick", name: "forceTick", anonymous: false, exported: false, typ: chanType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = dlog.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ClearDelayCh = new $Chan($Bool, 0);
		nanoPerSecond = math.Pow(10, 9);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/event"] = (function() {
	var $pkg = {}, $init, dlog, timing, reflect, runtime, strconv, sync, time, Mapping, Bindable, bindableList, bindableStore, Bus, Event, BindingOption, UnbindOption, binding, CID, UnbindAllOption, Entity, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, sliceType$7, ptrType, ptrType$1, ptrType$2, arrayType, mapType, mapType$1, arrayType$1, chanType, ptrType$3, thisBus, mutex, pendingMutex, binds, partUnbinds, fullUnbinds, unbinds, unbindAllAndRebinds, highestID, callers, idMutex, GetBus, ResetBus, NextID, GetEntity, HasEntity, DestroyEntity, ResetEntities, ResolvePending, resolveUnbindAllAndRebinds, resolveUnbinds, resolveFullUnbinds, resolvePartialUnbinds, resolveBindings, ebtrigger, triggerDefault, handleBindable, UnbindAll, UnbindAllAndRebind;
	dlog = $packages["github.com/oakmound/oak/dlog"];
	timing = $packages["github.com/oakmound/oak/timing"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
	Mapping = $pkg.Mapping = $newType(0, $kindStruct, "event.Mapping", true, "github.com/oakmound/oak/event", true, function(eventNames_, binds_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.eventNames = sliceType$7.nil;
			this.binds = sliceType$4.nil;
			return;
		}
		this.eventNames = eventNames_;
		this.binds = binds_;
	});
	Bindable = $pkg.Bindable = $newType(4, $kindFunc, "event.Bindable", true, "github.com/oakmound/oak/event", true, null);
	bindableList = $pkg.bindableList = $newType(0, $kindStruct, "event.bindableList", true, "github.com/oakmound/oak/event", false, function(sl_, nextEmpty_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sl = sliceType$4.nil;
			this.nextEmpty = 0;
			return;
		}
		this.sl = sl_;
		this.nextEmpty = nextEmpty_;
	});
	bindableStore = $pkg.bindableStore = $newType(0, $kindStruct, "event.bindableStore", true, "github.com/oakmound/oak/event", false, function(lowPriority_, defaultPriority_, highPriority_, lowIndex_, highIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.lowPriority = arrayType.zero();
			this.defaultPriority = ptrType$2.nil;
			this.highPriority = arrayType.zero();
			this.lowIndex = 0;
			this.highIndex = 0;
			return;
		}
		this.lowPriority = lowPriority_;
		this.defaultPriority = defaultPriority_;
		this.highPriority = highPriority_;
		this.lowIndex = lowIndex_;
		this.highIndex = highIndex_;
	});
	Bus = $pkg.Bus = $newType(0, $kindStruct, "event.Bus", true, "github.com/oakmound/oak/event", true, function(bindingMap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bindingMap = false;
			return;
		}
		this.bindingMap = bindingMap_;
	});
	Event = $pkg.Event = $newType(0, $kindStruct, "event.Event", true, "github.com/oakmound/oak/event", true, function(Name_, CallerID_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Name = "";
			this.CallerID = 0;
			return;
		}
		this.Name = Name_;
		this.CallerID = CallerID_;
	});
	BindingOption = $pkg.BindingOption = $newType(0, $kindStruct, "event.BindingOption", true, "github.com/oakmound/oak/event", true, function(Event_, Priority_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Event = new Event.ptr("", 0);
			this.Priority = 0;
			return;
		}
		this.Event = Event_;
		this.Priority = Priority_;
	});
	UnbindOption = $pkg.UnbindOption = $newType(0, $kindStruct, "event.UnbindOption", true, "github.com/oakmound/oak/event", true, function(BindingOption_, Fn_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BindingOption = new BindingOption.ptr(new Event.ptr("", 0), 0);
			this.Fn = $throwNilPointerError;
			return;
		}
		this.BindingOption = BindingOption_;
		this.Fn = Fn_;
	});
	binding = $pkg.binding = $newType(0, $kindStruct, "event.binding", true, "github.com/oakmound/oak/event", false, function(BindingOption_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BindingOption = new BindingOption.ptr(new Event.ptr("", 0), 0);
			this.index = 0;
			return;
		}
		this.BindingOption = BindingOption_;
		this.index = index_;
	});
	CID = $pkg.CID = $newType(4, $kindInt, "event.CID", true, "github.com/oakmound/oak/event", true, null);
	UnbindAllOption = $pkg.UnbindAllOption = $newType(0, $kindStruct, "event.UnbindAllOption", true, "github.com/oakmound/oak/event", true, function(ub_, bs_, bnds_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ub = new BindingOption.ptr(new Event.ptr("", 0), 0);
			this.bs = sliceType$1.nil;
			this.bnds = sliceType$4.nil;
			return;
		}
		this.ub = ub_;
		this.bs = bs_;
		this.bnds = bnds_;
	});
	Entity = $pkg.Entity = $newType(8, $kindInterface, "event.Entity", true, "github.com/oakmound/oak/event", true, null);
	sliceType = $sliceType(UnbindOption);
	sliceType$1 = $sliceType(BindingOption);
	sliceType$2 = $sliceType(binding);
	sliceType$3 = $sliceType(UnbindAllOption);
	sliceType$4 = $sliceType(Bindable);
	sliceType$5 = $sliceType(Entity);
	sliceType$6 = $sliceType($emptyInterface);
	sliceType$7 = $sliceType($String);
	ptrType = $ptrType(CID);
	ptrType$1 = $ptrType(bindableStore);
	ptrType$2 = $ptrType(bindableList);
	arrayType = $arrayType(ptrType$2, 32);
	mapType = $mapType($Int, ptrType$1);
	mapType$1 = $mapType($String, mapType);
	arrayType$1 = $arrayType($Uint8, 12);
	chanType = $chanType($Bool, false, false);
	ptrType$3 = $ptrType(Bus);
	Bus.ptr.prototype.BindPriority = function(fn, opt) {
		var eb, fn, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; eb = $f.eb; fn = $f.fn; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		eb = this;
		$r = pendingMutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		binds = $append(binds, new UnbindOption.ptr($clone(opt, BindingOption), fn));
		$r = pendingMutex.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bus.ptr.prototype.BindPriority }; } $f.eb = eb; $f.fn = fn; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bus.prototype.BindPriority = function(fn, opt) { return this.$val.BindPriority(fn, opt); };
	Bus.ptr.prototype.Bind = function(fn, name, callerID) {
		var bOpt, callerID, eb, fn, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bOpt = $f.bOpt; callerID = $f.callerID; eb = $f.eb; fn = $f.fn; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		eb = this;
		bOpt = new BindingOption.ptr(new Event.ptr("", 0), 0);
		Event.copy(bOpt.Event, new Event.ptr(name, callerID));
		$r = dlog.Verb(new sliceType$6([new $String("Binding "), new $Int(callerID), new $String(" with name "), new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = eb.BindPriority(fn, $clone(bOpt, BindingOption)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bus.ptr.prototype.Bind }; } $f.bOpt = bOpt; $f.callerID = callerID; $f.eb = eb; $f.fn = fn; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bus.prototype.Bind = function(fn, name, callerID) { return this.$val.Bind(fn, name, callerID); };
	CID.prototype.Bind = function(fn, name) {
		var cid, fn, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cid = $f.cid; fn = $f.fn; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cid = this.$val;
		$r = thisBus.Bind(fn, name, ((cid >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CID.prototype.Bind }; } $f.cid = cid; $f.fn = fn; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CID).prototype.Bind = function(fn, name) { return new CID(this.$get()).Bind(fn, name); };
	CID.prototype.BindPriority = function(fn, name, priority) {
		var cid, fn, name, priority, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cid = $f.cid; fn = $f.fn; name = $f.name; priority = $f.priority; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cid = this.$val;
		$r = thisBus.BindPriority(fn, new BindingOption.ptr(new Event.ptr(name, ((cid >> 0))), priority)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CID.prototype.BindPriority }; } $f.cid = cid; $f.fn = fn; $f.name = name; $f.priority = priority; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CID).prototype.BindPriority = function(fn, name, priority) { return new CID(this.$get()).BindPriority(fn, name, priority); };
	CID.prototype.RebindMapping = function(mapping) {
		var c, c$24ptr, mapping, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; c$24ptr = $f.c$24ptr; mapping = $f.mapping; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this.$val;
		$r = (c$24ptr || (c$24ptr = new ptrType(function() { return c; }, function($v) { c = $v; }))).UnbindAllAndRebind(mapping.binds, mapping.eventNames); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CID.prototype.RebindMapping }; } $f.c = c; $f.c$24ptr = c$24ptr; $f.mapping = mapping; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CID).prototype.RebindMapping = function(mapping) { return new CID(this.$get()).RebindMapping(mapping); };
	CID.prototype.String = function() {
		var cid;
		cid = this.$val;
		return strconv.Itoa(((cid >> 0)));
	};
	$ptrType(CID).prototype.String = function() { return new CID(this.$get()).String(); };
	CID.prototype.E = function() {
		var cid;
		cid = this.$val;
		return GetEntity(((cid >> 0)));
	};
	$ptrType(CID).prototype.E = function() { return new CID(this.$get()).E(); };
	GetBus = function() {
		return thisBus;
	};
	$pkg.GetBus = GetBus;
	ResetBus = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pendingMutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		thisBus = new Bus.ptr({});
		binds = new sliceType([]);
		partUnbinds = new sliceType$1([]);
		fullUnbinds = new sliceType([]);
		unbinds = new sliceType$2([]);
		unbindAllAndRebinds = new sliceType$3([]);
		$r = pendingMutex.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResetBus }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResetBus = ResetBus;
	bindableList.ptr.prototype.storeBindable = function(fn) {
		var bl, fn, i, x, x$1, x$2;
		bl = this;
		i = bl.nextEmpty;
		if (bl.sl.$length === i) {
			bl.sl = $append(bl.sl, fn);
		} else {
			(x = bl.sl, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = fn));
		}
		while (true) {
			if (!(!((bl.sl.$length === bl.nextEmpty)) && !((x$1 = bl.sl, x$2 = bl.nextEmpty, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === $throwNilPointerError))) { break; }
			bl.nextEmpty = bl.nextEmpty + (1) >> 0;
		}
		return i;
	};
	bindableList.prototype.storeBindable = function(fn) { return this.$val.storeBindable(fn); };
	bindableList.ptr.prototype.removeBindable = function(fn) {
		var _r, _r$1, bl, fn, i, v, v2, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; bl = $f.bl; fn = $f.fn; i = $f.i; v = $f.v; v2 = $f.v2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bl = this;
		i = 0;
		_r = reflect.ValueOf(new Bindable(fn)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v = _r;
		/* while (true) { */ case 2:
			_r$1 = reflect.ValueOf(new Bindable((x = bl.sl, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])))); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			v2 = _r$1;
			if ($equal(v2, v, reflect.Value)) {
				bl.removeIndex(i);
				$s = -1; return;
			}
			i = i + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: bindableList.ptr.prototype.removeBindable }; } $f._r = _r; $f._r$1 = _r$1; $f.bl = bl; $f.fn = fn; $f.i = i; $f.v = v; $f.v2 = v2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	bindableList.prototype.removeBindable = function(fn) { return this.$val.removeBindable(fn); };
	bindableList.ptr.prototype.removeBinding = function(b) {
		var b, bl;
		bl = this;
		bl.removeIndex(b.index);
	};
	bindableList.prototype.removeBinding = function(b) { return this.$val.removeBinding(b); };
	bindableList.ptr.prototype.removeIndex = function(i) {
		var bl, i, x;
		bl = this;
		if (bl.sl.$length <= i) {
			return;
		}
		(x = bl.sl, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = $throwNilPointerError));
		if (i < bl.nextEmpty) {
			bl.nextEmpty = i;
		}
	};
	bindableList.prototype.removeIndex = function(i) { return this.$val.removeIndex(i); };
	Bus.ptr.prototype.getBindableList = function(opt) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _entry$7, _key, _key$1, eb, m, m$1, opt, prio, store, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		eb = this;
		m = (_entry = eb.bindingMap[$String.keyFor(opt.Event.Name)], _entry !== undefined ? _entry.v : false);
		if (m === false) {
			_key = opt.Event.Name; (eb.bindingMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: {} };
		}
		m$1 = (_entry$1 = (_entry$2 = eb.bindingMap[$String.keyFor(opt.Event.Name)], _entry$2 !== undefined ? _entry$2.v : false)[$Int.keyFor(opt.Event.CallerID)], _entry$1 !== undefined ? _entry$1.v : ptrType$1.nil);
		if (m$1 === ptrType$1.nil) {
			_key$1 = opt.Event.CallerID; ((_entry$3 = eb.bindingMap[$String.keyFor(opt.Event.Name)], _entry$3 !== undefined ? _entry$3.v : false) || $throwRuntimeError("assignment to entry in nil map"))[$Int.keyFor(_key$1)] = { k: _key$1, v: new bindableStore.ptr(arrayType.zero(), ptrType$2.nil, arrayType.zero(), 0, 0) };
			(_entry$4 = (_entry$5 = eb.bindingMap[$String.keyFor(opt.Event.Name)], _entry$5 !== undefined ? _entry$5.v : false)[$Int.keyFor(opt.Event.CallerID)], _entry$4 !== undefined ? _entry$4.v : ptrType$1.nil).defaultPriority = new bindableList.ptr(sliceType$4.nil, 0);
		}
		store = (_entry$6 = (_entry$7 = eb.bindingMap[$String.keyFor(opt.Event.Name)], _entry$7 !== undefined ? _entry$7.v : false)[$Int.keyFor(opt.Event.CallerID)], _entry$6 !== undefined ? _entry$6.v : ptrType$1.nil);
		prio = ptrType$2.nil;
		if (opt.Priority === 0) {
			prio = store.defaultPriority;
		} else if (opt.Priority > 0) {
			if ((x = store.highPriority, x$1 = opt.Priority - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) === ptrType$2.nil) {
				(x$2 = store.highPriority, x$3 = opt.Priority - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = (new bindableList.ptr(sliceType$4.nil, 0))));
			}
			if (store.highIndex < opt.Priority) {
				store.highIndex = opt.Priority;
			}
			prio = (x$4 = store.highPriority, x$5 = opt.Priority - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5]));
		} else {
			if ((x$6 = store.lowPriority, x$7 = (($imul(opt.Priority, -1))) - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])) === ptrType$2.nil) {
				(x$8 = store.lowPriority, x$9 = (($imul(opt.Priority, -1))) - 1 >> 0, ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9] = (new bindableList.ptr(sliceType$4.nil, 0))));
			}
			if ((($imul(store.lowIndex, -1))) > opt.Priority) {
				store.lowIndex = ($imul(-1, opt.Priority));
			}
			prio = (x$10 = store.lowPriority, x$11 = (($imul(opt.Priority, -1))) - 1 >> 0, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11]));
		}
		return prio;
	};
	Bus.prototype.getBindableList = function(opt) { return this.$val.getBindableList(opt); };
	CID.prototype.Parse = function(e) {
		var _r, cid, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; cid = $f.cid; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cid = this.$val;
		/* */ if (cid === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (cid === 0) { */ case 1:
			_r = e.Init(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		$s = -1; return cid;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CID.prototype.Parse }; } $f._r = _r; $f.cid = cid; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CID).prototype.Parse = function(e) { return new CID(this.$get()).Parse(e); };
	NextID = function(e) {
		var e, id, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; id = $f.id; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = idMutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		highestID = highestID + (1) >> 0;
		callers = $append(callers, e);
		id = highestID;
		$r = idMutex.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return id;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NextID }; } $f.e = e; $f.id = id; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NextID = NextID;
	GetEntity = function(i) {
		var i, x;
		if (HasEntity(i)) {
			return (x = i - 1 >> 0, ((x < 0 || x >= callers.$length) ? ($throwRuntimeError("index out of range"), undefined) : callers.$array[callers.$offset + x]));
		}
		return $ifaceNil;
	};
	$pkg.GetEntity = GetEntity;
	HasEntity = function(i) {
		var i;
		return callers.$length >= i && !((i === 0));
	};
	$pkg.HasEntity = HasEntity;
	DestroyEntity = function(i) {
		var i, x;
		(x = i - 1 >> 0, ((x < 0 || x >= callers.$length) ? ($throwRuntimeError("index out of range"), undefined) : callers.$array[callers.$offset + x] = $ifaceNil));
	};
	$pkg.DestroyEntity = DestroyEntity;
	ResetEntities = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = idMutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		highestID = 0;
		callers = new sliceType$5([]);
		$r = idMutex.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResetEntities }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResetEntities = ResetEntities;
	ResolvePending = function() {
		var schedCt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; schedCt = $f.schedCt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		schedCt = 0;
		/* while (true) { */ case 1:
			/* */ if (unbindAllAndRebinds.$length > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (unbindAllAndRebinds.$length > 0) { */ case 3:
				$r = resolveUnbindAllAndRebinds(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
			/* */ if (unbinds.$length > 0) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (unbinds.$length > 0) { */ case 6:
				$r = resolveUnbinds(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 7:
			/* */ if (fullUnbinds.$length > 0) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (fullUnbinds.$length > 0) { */ case 9:
				$r = resolveFullUnbinds(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			/* */ if (partUnbinds.$length > 0) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (partUnbinds.$length > 0) { */ case 12:
				$r = resolvePartialUnbinds(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			/* */ if (binds.$length > 0) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (binds.$length > 0) { */ case 15:
				$r = resolveBindings(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
			schedCt = schedCt + (1) >> 0;
			/* */ if (schedCt > 1000) { $s = 18; continue; }
			/* */ $s = 19; continue;
			/* if (schedCt > 1000) { */ case 18:
				schedCt = 0;
				$r = runtime.Gosched(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 19:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResolvePending }; } $f.schedCt = schedCt; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResolvePending = ResolvePending;
	resolveUnbindAllAndRebinds = function() {
		var _entry, _entry$1, _i, _i$1, _i$2, _i$3, _keys, _ref, _ref$1, _ref$2, _ref$3, fn, i, k, k$1, k$2, list, namekeys, opt, orderedBindOptions, orderedBindables, ubaarb, unbind, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; fn = $f.fn; i = $f.i; k = $f.k; k$1 = $f.k$1; k$2 = $f.k$2; list = $f.list; namekeys = $f.namekeys; opt = $f.opt; orderedBindOptions = $f.orderedBindOptions; orderedBindables = $f.orderedBindables; ubaarb = $f.ubaarb; unbind = $f.unbind; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pendingMutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = unbindAllAndRebinds;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			ubaarb = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), UnbindAllOption);
			unbind = $clone(ubaarb.ub, BindingOption);
			orderedBindables = ubaarb.bnds;
			orderedBindOptions = ubaarb.bs;
			namekeys = sliceType$7.nil;
			if (!(unbind.Event.Name === "")) {
				namekeys = $append(namekeys, unbind.Event.Name);
			} else {
				_ref$1 = thisBus.bindingMap;
				_i$1 = 0;
				_keys = $keys(_ref$1);
				while (true) {
					if (!(_i$1 < _keys.length)) { break; }
					_entry = _ref$1[_keys[_i$1]];
					if (_entry === undefined) {
						_i$1++;
						continue;
					}
					k = _entry.k;
					namekeys = $append(namekeys, k);
					_i$1++;
				}
			}
			if (!((unbind.Event.CallerID === 0))) {
				_ref$2 = namekeys;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					k$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					delete (_entry$1 = thisBus.bindingMap[$String.keyFor(k$1)], _entry$1 !== undefined ? _entry$1.v : false)[$Int.keyFor(unbind.Event.CallerID)];
					_i$2++;
				}
			} else {
				_ref$3 = namekeys;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					k$2 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
					delete thisBus.bindingMap[$String.keyFor(k$2)];
					_i$3++;
				}
			}
			$r = dlog.Verb(new sliceType$6([new mapType$1(thisBus.bindingMap)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = 0;
			while (true) {
				if (!(i < orderedBindables.$length)) { break; }
				fn = ((i < 0 || i >= orderedBindables.$length) ? ($throwRuntimeError("index out of range"), undefined) : orderedBindables.$array[orderedBindables.$offset + i]);
				opt = $clone(((i < 0 || i >= orderedBindOptions.$length) ? ($throwRuntimeError("index out of range"), undefined) : orderedBindOptions.$array[orderedBindOptions.$offset + i]), BindingOption);
				list = thisBus.getBindableList($clone(opt, BindingOption));
				list.storeBindable(fn);
				i = i + (1) >> 0;
			}
			_i++;
		/* } */ $s = 3; continue; case 4:
		unbindAllAndRebinds = new sliceType$3([]);
		$r = pendingMutex.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mutex.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolveUnbindAllAndRebinds }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.fn = fn; $f.i = i; $f.k = k; $f.k$1 = k$1; $f.k$2 = k$2; $f.list = list; $f.namekeys = namekeys; $f.opt = opt; $f.orderedBindOptions = orderedBindOptions; $f.orderedBindables = orderedBindables; $f.ubaarb = ubaarb; $f.unbind = unbind; $f.$s = $s; $f.$r = $r; return $f;
	};
	resolveUnbinds = function() {
		var _i, _ref, b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pendingMutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = unbinds;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), binding);
			thisBus.getBindableList($clone(b.BindingOption, BindingOption)).removeBinding($clone(b, binding));
			_i++;
		}
		unbinds = new sliceType$2([]);
		$r = pendingMutex.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolveUnbinds }; } $f._i = _i; $f._ref = _ref; $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	resolveFullUnbinds = function() {
		var _i, _ref, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pendingMutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = fullUnbinds;
		_i = 0;
		/* while (true) { */ case 3:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
			opt = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), UnbindOption);
			$r = thisBus.getBindableList($clone(opt.BindingOption, BindingOption)).removeBindable(opt.Fn); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 3; continue; case 4:
		fullUnbinds = new sliceType([]);
		$r = pendingMutex.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mutex.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolveFullUnbinds }; } $f._i = _i; $f._ref = _ref; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	resolvePartialUnbinds = function() {
		var _entry, _entry$1, _i, _i$1, _i$2, _i$3, _keys, _ref, _ref$1, _ref$2, _ref$3, k, k$1, k$2, namekeys, opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _keys = $f._keys; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; k = $f.k; k$1 = $f.k$1; k$2 = $f.k$2; namekeys = $f.namekeys; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pendingMutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = partUnbinds;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			opt = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), BindingOption);
			namekeys = sliceType$7.nil;
			if (!(opt.Event.Name === "")) {
				namekeys = $append(namekeys, opt.Event.Name);
			} else {
				_ref$1 = thisBus.bindingMap;
				_i$1 = 0;
				_keys = $keys(_ref$1);
				while (true) {
					if (!(_i$1 < _keys.length)) { break; }
					_entry = _ref$1[_keys[_i$1]];
					if (_entry === undefined) {
						_i$1++;
						continue;
					}
					k = _entry.k;
					namekeys = $append(namekeys, k);
					_i$1++;
				}
			}
			if (!((opt.Event.CallerID === 0))) {
				_ref$2 = namekeys;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					k$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					delete (_entry$1 = thisBus.bindingMap[$String.keyFor(k$1)], _entry$1 !== undefined ? _entry$1.v : false)[$Int.keyFor(opt.Event.CallerID)];
					_i$2++;
				}
			} else {
				_ref$3 = namekeys;
				_i$3 = 0;
				while (true) {
					if (!(_i$3 < _ref$3.$length)) { break; }
					k$2 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
					delete thisBus.bindingMap[$String.keyFor(k$2)];
					_i$3++;
				}
			}
			_i++;
		}
		partUnbinds = new sliceType$1([]);
		$r = pendingMutex.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.Verb(new sliceType$6([new mapType$1(thisBus.bindingMap)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolvePartialUnbinds }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._keys = _keys; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f.k = k; $f.k$1 = k$1; $f.k$2 = k$2; $f.namekeys = namekeys; $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	resolveBindings = function() {
		var _i, _ref, bindSet, list, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; bindSet = $f.bindSet; list = $f.list; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = pendingMutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = binds;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			bindSet = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), UnbindOption);
			list = thisBus.getBindableList($clone(bindSet.BindingOption, BindingOption));
			list.storeBindable(bindSet.Fn);
			_i++;
		}
		binds = new sliceType([]);
		$r = pendingMutex.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mutex.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resolveBindings }; } $f._i = _i; $f._ref = _ref; $f.bindSet = bindSet; $f.list = list; $f.$s = $s; $f.$r = $r; return $f;
	};
	CID.prototype.Trigger = function(eventName, data) {
		var data, eventName, id;
		id = this.$val;
		$go((function $b(eventName$1, data$1) {
			var _entry, _entry$1, _tuple, _tuple$1, bs, data$1, eb, eventName$1, i, i$1, idMap, iid, ok, ok$1, x, x$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bs = $f.bs; data$1 = $f.data$1; eb = $f.eb; eventName$1 = $f.eventName$1; i = $f.i; i$1 = $f.i$1; idMap = $f.idMap; iid = $f.iid; ok = $f.ok; ok$1 = $f.ok$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			eb = GetBus();
			$r = mutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			iid = ((id >> 0));
			_tuple = (_entry = eb.bindingMap[$String.keyFor(eventName$1)], _entry !== undefined ? [_entry.v, true] : [false, false]);
			idMap = _tuple[0];
			ok = _tuple[1];
			/* */ if (ok) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (ok) { */ case 2:
				_tuple$1 = (_entry$1 = idMap[$Int.keyFor(iid)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$1.nil, false]);
				bs = _tuple$1[0];
				ok$1 = _tuple$1[1];
				/* */ if (ok$1) { $s = 4; continue; }
				/* */ $s = 5; continue;
				/* if (ok$1) { */ case 4:
					i = bs.highIndex - 1 >> 0;
					/* while (true) { */ case 6:
						/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 7; continue; }
						$r = triggerDefault(((x = bs.highPriority, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))).sl, iid, eventName$1, data$1); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i = i - (1) >> 0;
					/* } */ $s = 6; continue; case 7:
					$r = triggerDefault((bs.defaultPriority).sl, iid, eventName$1, data$1); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i$1 = 0;
					/* while (true) { */ case 10:
						/* if (!(i$1 < bs.lowIndex)) { break; } */ if(!(i$1 < bs.lowIndex)) { $s = 11; continue; }
						$r = triggerDefault(((x$1 = bs.lowPriority, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1]))).sl, iid, eventName$1, data$1); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						i$1 = i$1 + (1) >> 0;
					/* } */ $s = 10; continue; case 11:
				/* } */ case 5:
			/* } */ case 3:
			$r = mutex.RUnlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bs = bs; $f.data$1 = data$1; $f.eb = eb; $f.eventName$1 = eventName$1; $f.i = i; $f.i$1 = i$1; $f.idMap = idMap; $f.iid = iid; $f.ok = ok; $f.ok$1 = ok$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
		}), [eventName, data]);
	};
	$ptrType(CID).prototype.Trigger = function(eventName, data) { return new CID(this.$get()).Trigger(eventName, data); };
	CID.prototype.TriggerAfter = function(d, eventName, data) {
		var d, data, eventName, id;
		id = this.$val;
		$go((function $b() {
			var $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = timing.DoAfter(d, (function() {
				new CID(id).Trigger(eventName, data);
			})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
		}), []);
	};
	$ptrType(CID).prototype.TriggerAfter = function(d, eventName, data) { return new CID(this.$get()).TriggerAfter(d, eventName, data); };
	Bus.ptr.prototype.TriggerBack = function(eventName, data) {
		var ch, data, eb, eventName;
		eb = this;
		ch = new $Chan($Bool, 0);
		$go((function $b(ch$1, eb$1, eventName$1, data$1) {
			var ch$1, data$1, eb$1, eventName$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ch$1 = $f.ch$1; data$1 = $f.data$1; eb$1 = $f.eb$1; eventName$1 = $f.eventName$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = ebtrigger(eb$1, eventName$1, data$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $send(ch$1, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.ch$1 = ch$1; $f.data$1 = data$1; $f.eb$1 = eb$1; $f.eventName$1 = eventName$1; $f.$s = $s; $f.$r = $r; return $f;
		}), [ch, eb, eventName, data]);
		return ch;
	};
	Bus.prototype.TriggerBack = function(eventName, data) { return this.$val.TriggerBack(eventName, data); };
	Bus.ptr.prototype.Trigger = function(eventName, data) {
		var data, eb, eventName;
		eb = this;
		$go((function $b(eb$1, eventName$1, data$1) {
			var data$1, eb$1, eventName$1, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; data$1 = $f.data$1; eb$1 = $f.eb$1; eventName$1 = $f.eventName$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = ebtrigger(eb$1, eventName$1, data$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.data$1 = data$1; $f.eb$1 = eb$1; $f.eventName$1 = eventName$1; $f.$s = $s; $f.$r = $r; return $f;
		}), [eb, eventName, data]);
	};
	Bus.prototype.Trigger = function(eventName, data) { return this.$val.Trigger(eventName, data); };
	ebtrigger = function(eb, eventName, data) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _i, _i$1, _i$2, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, bs, bs$1, bs$2, data, eb, eventName, i, i$1, id, id$1, id$2, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _entry$4 = $f._entry$4; _entry$5 = $f._entry$5; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _keys = $f._keys; _keys$1 = $f._keys$1; _keys$2 = $f._keys$2; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; bs = $f.bs; bs$1 = $f.bs$1; bs$2 = $f.bs$2; data = $f.data; eb = $f.eb; eventName = $f.eventName; i = $f.i; i$1 = $f.i$1; id = $f.id; id$1 = $f.id$1; id$2 = $f.id$2; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = mutex.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = (_entry = (eb).bindingMap[$String.keyFor(eventName)], _entry !== undefined ? _entry.v : false);
		_i = 0;
		_keys = $keys(_ref);
		/* while (true) { */ case 2:
			/* if (!(_i < _keys.length)) { break; } */ if(!(_i < _keys.length)) { $s = 3; continue; }
			_entry$1 = _ref[_keys[_i]];
			if (_entry$1 === undefined) {
				_i++;
				/* continue; */ $s = 2; continue;
			}
			id = _entry$1.k;
			bs = _entry$1.v;
			i = bs.highIndex - 1 >> 0;
			/* while (true) { */ case 4:
				/* if (!(i >= 0)) { break; } */ if(!(i >= 0)) { $s = 5; continue; }
				$r = triggerDefault(((x = bs.highPriority, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]))).sl, id, eventName, data); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i - (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		_ref$1 = (_entry$2 = (eb).bindingMap[$String.keyFor(eventName)], _entry$2 !== undefined ? _entry$2.v : false);
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		/* while (true) { */ case 7:
			/* if (!(_i$1 < _keys$1.length)) { break; } */ if(!(_i$1 < _keys$1.length)) { $s = 8; continue; }
			_entry$3 = _ref$1[_keys$1[_i$1]];
			if (_entry$3 === undefined) {
				_i$1++;
				/* continue; */ $s = 7; continue;
			}
			id$1 = _entry$3.k;
			bs$1 = _entry$3.v;
			/* */ if (!(bs$1 === ptrType$1.nil) && !(bs$1.defaultPriority === ptrType$2.nil)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (!(bs$1 === ptrType$1.nil) && !(bs$1.defaultPriority === ptrType$2.nil)) { */ case 9:
				$r = triggerDefault((bs$1.defaultPriority).sl, id$1, eventName, data); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
			_i$1++;
		/* } */ $s = 7; continue; case 8:
		_ref$2 = (_entry$4 = (eb).bindingMap[$String.keyFor(eventName)], _entry$4 !== undefined ? _entry$4.v : false);
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		/* while (true) { */ case 12:
			/* if (!(_i$2 < _keys$2.length)) { break; } */ if(!(_i$2 < _keys$2.length)) { $s = 13; continue; }
			_entry$5 = _ref$2[_keys$2[_i$2]];
			if (_entry$5 === undefined) {
				_i$2++;
				/* continue; */ $s = 12; continue;
			}
			id$2 = _entry$5.k;
			bs$2 = _entry$5.v;
			i$1 = 0;
			/* while (true) { */ case 14:
				/* if (!(i$1 < bs$2.lowIndex)) { break; } */ if(!(i$1 < bs$2.lowIndex)) { $s = 15; continue; }
				$r = triggerDefault(((x$1 = bs$2.lowPriority, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1]))).sl, id$2, eventName, data); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i$1 = i$1 + (1) >> 0;
			/* } */ $s = 14; continue; case 15:
			_i$2++;
		/* } */ $s = 12; continue; case 13:
		$r = mutex.RUnlock(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ebtrigger }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._entry$4 = _entry$4; $f._entry$5 = _entry$5; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._keys = _keys; $f._keys$1 = _keys$1; $f._keys$2 = _keys$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f.bs = bs; $f.bs$1 = bs$1; $f.bs$2 = bs$2; $f.data = data; $f.eb = eb; $f.eventName = eventName; $f.i = i; $f.i$1 = i$1; $f.id = id; $f.id$1 = id$1; $f.id$2 = id$2; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	triggerDefault = function(sl, id, eventName, data) {
		var _i, _ref, bnd, data, eventName, i, id, prog, sl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; bnd = $f.bnd; data = $f.data; eventName = $f.eventName; i = $f.i; id = $f.id; prog = $f.prog; sl = $f.sl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prog = new sync.WaitGroup.ptr(0, $chanNil, arrayType$1.zero(), 0);
		prog.Add(sl.$length);
		_ref = sl;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			bnd = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$go((function $b(bnd$1, id$1, eventName$1, data$1, prog$1, index) {
				var bnd$1, data$1, eventName$1, id$1, index, prog$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bnd$1 = $f.bnd$1; data$1 = $f.data$1; eventName$1 = $f.eventName$1; id$1 = $f.id$1; index = $f.index; prog$1 = $f.prog$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = handleBindable(bnd$1, id$1, data$1, index, eventName$1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				prog$1.Done();
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.bnd$1 = bnd$1; $f.data$1 = data$1; $f.eventName$1 = eventName$1; $f.id$1 = id$1; $f.index = index; $f.prog$1 = prog$1; $f.$s = $s; $f.$r = $r; return $f;
			}), [bnd, id, eventName, data, prog, i]);
			_i++;
		/* } */ $s = 1; continue; case 2:
		$r = prog.Wait(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: triggerDefault }; } $f._i = _i; $f._ref = _ref; $f.bnd = bnd; $f.data = data; $f.eventName = eventName; $f.i = i; $f.id = id; $f.prog = prog; $f.sl = sl; $f.$s = $s; $f.$r = $r; return $f;
	};
	handleBindable = function(bnd, id, data, index, eventName) {
		var _1, _r, bnd, data, eventName, id, index, response, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; bnd = $f.bnd; data = $f.data; eventName = $f.eventName; id = $f.id; index = $f.index; response = $f.response; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!(bnd === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(bnd === $throwNilPointerError)) { */ case 1:
			/* */ if ((id === 0) || !($interfaceIsEqual(GetEntity(id), $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((id === 0) || !($interfaceIsEqual(GetEntity(id), $ifaceNil))) { */ case 3:
				_r = bnd(id, data); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				response = _r;
					_1 = response;
					/* */ if (_1 === (2)) { $s = 7; continue; }
					/* */ if (_1 === (3)) { $s = 8; continue; }
					/* */ $s = 9; continue;
					/* if (_1 === (2)) { */ case 7:
						$r = UnbindAll(new BindingOption.ptr(new Event.ptr(eventName, id), 0)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 9; continue;
					/* } else if (_1 === (3)) { */ case 8:
						$r = new binding.ptr(new BindingOption.ptr(new Event.ptr(eventName, id), 0), index).unbind(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 9:
				case 6:
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: handleBindable }; } $f._1 = _1; $f._r = _r; $f.bnd = bnd; $f.data = data; $f.eventName = eventName; $f.id = id; $f.index = index; $f.response = response; $f.$s = $s; $f.$r = $r; return $f;
	};
	binding.ptr.prototype.unbind = function() {
		var b, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		$r = thisBus.unbind($clone(b, binding)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: binding.ptr.prototype.unbind }; } $f.b = b; $f.$s = $s; $f.$r = $r; return $f;
	};
	binding.prototype.unbind = function() { return this.$val.unbind(); };
	Bus.ptr.prototype.unbind = function(b) {
		var b, eb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; eb = $f.eb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		eb = this;
		$r = pendingMutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		unbinds = $append(unbinds, b);
		$r = pendingMutex.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Bus.ptr.prototype.unbind }; } $f.b = b; $f.eb = eb; $f.$s = $s; $f.$r = $r; return $f;
	};
	Bus.prototype.unbind = function(b) { return this.$val.unbind(b); };
	$ptrType(CID).prototype.UnbindAll = function() {
		var bo, cid, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; bo = $f.bo; cid = $f.cid; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cid = this;
		bo = new BindingOption.ptr(new Event.ptr("", ((cid.$get() >> 0))), 0);
		$r = UnbindAll($clone(bo, BindingOption)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(CID).prototype.UnbindAll }; } $f.bo = bo; $f.cid = cid; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnbindAll = function(opt) {
		var opt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; opt = $f.opt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = pendingMutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		partUnbinds = $append(partUnbinds, opt);
		$r = pendingMutex.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnbindAll }; } $f.opt = opt; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UnbindAll = UnbindAll;
	$ptrType(CID).prototype.UnbindAllAndRebind = function(binds$1, events) {
		var binds$1, bo, cid, events, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; binds$1 = $f.binds$1; bo = $f.bo; cid = $f.cid; events = $f.events; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cid = this;
		bo = new BindingOption.ptr(new Event.ptr("", ((cid.$get() >> 0))), 0);
		$r = UnbindAllAndRebind($clone(bo, BindingOption), binds$1, ((cid.$get() >> 0)), events); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(CID).prototype.UnbindAllAndRebind }; } $f.binds$1 = binds$1; $f.bo = bo; $f.cid = cid; $f.events = events; $f.$s = $s; $f.$r = $r; return $f;
	};
	UnbindAllAndRebind = function(bo, binds$1, cid, events) {
		var _i, _ref, binds$1, bo, cid, events, k, opts, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; binds$1 = $f.binds$1; bo = $f.bo; cid = $f.cid; events = $f.events; k = $f.k; opts = $f.opts; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		opts = $makeSlice(sliceType$1, events.$length);
		_ref = events;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			k = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			Event.copy(((k < 0 || k >= opts.$length) ? ($throwRuntimeError("index out of range"), undefined) : opts.$array[opts.$offset + k]).Event, new Event.ptr(v, cid));
			_i++;
		}
		$r = pendingMutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		unbindAllAndRebinds = $append(unbindAllAndRebinds, new UnbindAllOption.ptr($clone(bo, BindingOption), opts, binds$1));
		$r = pendingMutex.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UnbindAllAndRebind }; } $f._i = _i; $f._ref = _ref; $f.binds$1 = binds$1; $f.bo = bo; $f.cid = cid; $f.events = events; $f.k = k; $f.opts = opts; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UnbindAllAndRebind = UnbindAllAndRebind;
	ptrType$2.methods = [{prop: "storeBindable", name: "storeBindable", pkg: "github.com/oakmound/oak/event", typ: $funcType([Bindable], [$Int], false)}, {prop: "removeBindable", name: "removeBindable", pkg: "github.com/oakmound/oak/event", typ: $funcType([Bindable], [], false)}, {prop: "removeBinding", name: "removeBinding", pkg: "github.com/oakmound/oak/event", typ: $funcType([binding], [], false)}, {prop: "removeIndex", name: "removeIndex", pkg: "github.com/oakmound/oak/event", typ: $funcType([$Int], [], false)}];
	ptrType$3.methods = [{prop: "BindPriority", name: "BindPriority", pkg: "", typ: $funcType([Bindable, BindingOption], [], false)}, {prop: "Bind", name: "Bind", pkg: "", typ: $funcType([Bindable, $String, $Int], [], false)}, {prop: "getBindableList", name: "getBindableList", pkg: "github.com/oakmound/oak/event", typ: $funcType([BindingOption], [ptrType$2], false)}, {prop: "TriggerBack", name: "TriggerBack", pkg: "", typ: $funcType([$String, $emptyInterface], [chanType], false)}, {prop: "Trigger", name: "Trigger", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "unbind", name: "unbind", pkg: "github.com/oakmound/oak/event", typ: $funcType([binding], [], false)}];
	binding.methods = [{prop: "unbind", name: "unbind", pkg: "github.com/oakmound/oak/event", typ: $funcType([], [], false)}];
	CID.methods = [{prop: "Bind", name: "Bind", pkg: "", typ: $funcType([Bindable, $String], [], false)}, {prop: "BindPriority", name: "BindPriority", pkg: "", typ: $funcType([Bindable, $String, $Int], [], false)}, {prop: "RebindMapping", name: "RebindMapping", pkg: "", typ: $funcType([Mapping], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "E", name: "E", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Parse", name: "Parse", pkg: "", typ: $funcType([Entity], [CID], false)}, {prop: "Trigger", name: "Trigger", pkg: "", typ: $funcType([$String, $emptyInterface], [], false)}, {prop: "TriggerAfter", name: "TriggerAfter", pkg: "", typ: $funcType([time.Duration, $String, $emptyInterface], [], false)}];
	ptrType.methods = [{prop: "UnbindAll", name: "UnbindAll", pkg: "", typ: $funcType([], [], false)}, {prop: "UnbindAllAndRebind", name: "UnbindAllAndRebind", pkg: "", typ: $funcType([sliceType$4, sliceType$7], [], false)}];
	Mapping.init("github.com/oakmound/oak/event", [{prop: "eventNames", name: "eventNames", anonymous: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "binds", name: "binds", anonymous: false, exported: false, typ: sliceType$4, tag: ""}]);
	Bindable.init([$Int, $emptyInterface], [$Int], false);
	bindableList.init("github.com/oakmound/oak/event", [{prop: "sl", name: "sl", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "nextEmpty", name: "nextEmpty", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	bindableStore.init("github.com/oakmound/oak/event", [{prop: "lowPriority", name: "lowPriority", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "defaultPriority", name: "defaultPriority", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "highPriority", name: "highPriority", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "lowIndex", name: "lowIndex", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "highIndex", name: "highIndex", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Bus.init("github.com/oakmound/oak/event", [{prop: "bindingMap", name: "bindingMap", anonymous: false, exported: false, typ: mapType$1, tag: ""}]);
	Event.init("", [{prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "CallerID", name: "CallerID", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	BindingOption.init("", [{prop: "Event", name: "Event", anonymous: true, exported: true, typ: Event, tag: ""}, {prop: "Priority", name: "Priority", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	UnbindOption.init("", [{prop: "BindingOption", name: "BindingOption", anonymous: true, exported: true, typ: BindingOption, tag: ""}, {prop: "Fn", name: "Fn", anonymous: false, exported: true, typ: Bindable, tag: ""}]);
	binding.init("github.com/oakmound/oak/event", [{prop: "BindingOption", name: "BindingOption", anonymous: true, exported: true, typ: BindingOption, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	UnbindAllOption.init("github.com/oakmound/oak/event", [{prop: "ub", name: "ub", anonymous: false, exported: false, typ: BindingOption, tag: ""}, {prop: "bs", name: "bs", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "bnds", name: "bnds", anonymous: false, exported: false, typ: sliceType$4, tag: ""}]);
	Entity.init([{prop: "Init", name: "Init", pkg: "", typ: $funcType([], [CID], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = dlog.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = timing.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		highestID = 0;
		thisBus = new Bus.ptr({});
		mutex = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		pendingMutex = new sync.Mutex.ptr(0, 0);
		binds = new sliceType([]);
		partUnbinds = new sliceType$1([]);
		fullUnbinds = new sliceType([]);
		unbinds = new sliceType$2([]);
		unbindAllAndRebinds = new sliceType$3([]);
		callers = $makeSlice(sliceType$5, 0);
		idMutex = new sync.Mutex.ptr(0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/physics"] = (function() {
	var $pkg = {}, $init, errors, dlog, math, Attachable, ForceVector, Vector, ptrType, sliceType$1, sliceType$2, NewVector;
	errors = $packages["errors"];
	dlog = $packages["github.com/oakmound/oak/dlog"];
	math = $packages["math"];
	Attachable = $pkg.Attachable = $newType(8, $kindInterface, "physics.Attachable", true, "github.com/oakmound/oak/physics", true, null);
	ForceVector = $pkg.ForceVector = $newType(0, $kindStruct, "physics.ForceVector", true, "github.com/oakmound/oak/physics", true, function(Vector_, Force_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Vector = new Vector.ptr(ptrType.nil, ptrType.nil, 0, 0);
			this.Force = ptrType.nil;
			return;
		}
		this.Vector = Vector_;
		this.Force = Force_;
	});
	Vector = $pkg.Vector = $newType(0, $kindStruct, "physics.Vector", true, "github.com/oakmound/oak/physics", true, function(x_, y_, offX_, offY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.x = ptrType.nil;
			this.y = ptrType.nil;
			this.offX = 0;
			this.offY = 0;
			return;
		}
		this.x = x_;
		this.y = y_;
		this.offX = offX_;
		this.offY = offY_;
	});
	ptrType = $ptrType($Float64);
	sliceType$1 = $sliceType($Float64);
	sliceType$2 = $sliceType(Vector);
	Vector.ptr.prototype.Vec = function() {
		var v;
		v = this;
		return v;
	};
	Vector.prototype.Vec = function() { return this.$val.Vec(); };
	Vector.ptr.prototype.Attach = function(a, offsets) {
		var _r, a, offsets, v, v2, v3, xOff, yOff, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; offsets = $f.offsets; v = $f.v; v2 = $f.v2; v3 = $f.v3; xOff = $f.xOff; yOff = $f.yOff; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		xOff = 0;
		yOff = 0;
		if (offsets.$length > 0) {
			xOff = (0 >= offsets.$length ? ($throwRuntimeError("index out of range"), undefined) : offsets.$array[offsets.$offset + 0]);
		}
		if (offsets.$length > 1) {
			yOff = (1 >= offsets.$length ? ($throwRuntimeError("index out of range"), undefined) : offsets.$array[offsets.$offset + 1]);
		}
		_r = a.Vec(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v2 = $clone(_r, Vector);
		v3 = new Vector.ptr(v2.x, v2.y, xOff, yOff);
		$s = -1; return v3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vector.ptr.prototype.Attach }; } $f._r = _r; $f.a = a; $f.offsets = offsets; $f.v = v; $f.v2 = v2; $f.v3 = v3; $f.xOff = xOff; $f.yOff = yOff; $f.$s = $s; $f.$r = $r; return $f;
	};
	Vector.prototype.Attach = function(a, offsets) { return this.$val.Attach(a, offsets); };
	Vector.ptr.prototype.AttachX = function(a, offX) {
		var _r, a, offX, v, v2, v3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; offX = $f.offX; v = $f.v; v2 = $f.v2; v3 = $f.v3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = a.Vec(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v2 = $clone(_r, Vector);
		v3 = new Vector.ptr(v2.x, v.y, offX, 0);
		$s = -1; return v3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vector.ptr.prototype.AttachX }; } $f._r = _r; $f.a = a; $f.offX = offX; $f.v = v; $f.v2 = v2; $f.v3 = v3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Vector.prototype.AttachX = function(a, offX) { return this.$val.AttachX(a, offX); };
	Vector.ptr.prototype.AttachY = function(a, offY) {
		var _r, a, offY, v, v2, v3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; offY = $f.offY; v = $f.v; v2 = $f.v2; v3 = $f.v3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = this;
		_r = a.Vec(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		v2 = $clone(_r, Vector);
		v3 = new Vector.ptr(v.x, v2.y, 0, offY);
		$s = -1; return v3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Vector.ptr.prototype.AttachY }; } $f._r = _r; $f.a = a; $f.offY = offY; $f.v = v; $f.v2 = v2; $f.v3 = v3; $f.$s = $s; $f.$r = $r; return $f;
	};
	Vector.prototype.AttachY = function(a, offY) { return this.$val.AttachY(a, offY); };
	Vector.ptr.prototype.Detach = function() {
		var v;
		v = this;
		return NewVector($clone(v, Vector).X(), $clone(v, Vector).Y());
	};
	Vector.prototype.Detach = function() { return this.$val.Detach(); };
	ForceVector.ptr.prototype.GetForce = function() {
		var f;
		f = this;
		return f;
	};
	ForceVector.prototype.GetForce = function() { return this.$val.GetForce(); };
	Vector.ptr.prototype.GetForce = function() {
		var v;
		v = this;
		return new ForceVector.ptr($clone(v, Vector), $newDataPointer(0, ptrType));
	};
	Vector.prototype.GetForce = function() { return this.$val.GetForce(); };
	NewVector = function(x, y) {
		var x, x2, y, y2;
		x2 = $newDataPointer(0, ptrType);
		y2 = $newDataPointer(0, ptrType);
		x2.$set(x);
		y2.$set(y);
		return new Vector.ptr(x2, y2, 0, 0);
	};
	$pkg.NewVector = NewVector;
	Vector.ptr.prototype.Copy = function() {
		var v;
		v = this;
		if (v.x === ptrType.nil || v.y === ptrType.nil) {
			return NewVector(0, 0);
		}
		return NewVector(v.x.$get(), v.y.$get());
	};
	Vector.prototype.Copy = function() { return this.$val.Copy(); };
	Vector.ptr.prototype.Magnitude = function() {
		var v;
		v = this;
		return math.Sqrt((v.x.$get() * v.x.$get()) + (v.y.$get() * v.y.$get()));
	};
	Vector.prototype.Magnitude = function() { return this.$val.Magnitude(); };
	Vector.ptr.prototype.Normalize = function() {
		var mgn, v;
		v = this;
		Vector.copy(v, $clone(v, Vector).round());
		mgn = $clone(v, Vector).Magnitude();
		if (mgn === 0) {
			return v;
		}
		v.x.$set(v.x.$get() / (mgn));
		v.y.$set(v.y.$get() / (mgn));
		return v;
	};
	Vector.prototype.Normalize = function() { return this.$val.Normalize(); };
	Vector.ptr.prototype.Zero = function() {
		var v;
		v = this;
		return $clone(v, Vector).SetPos(0, 0);
	};
	Vector.prototype.Zero = function() { return this.$val.Zero(); };
	Vector.ptr.prototype.Add = function(vs) {
		var _i, _ref, v, v2, vs;
		v = this;
		_ref = vs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v2 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Vector);
			v.x.$set(v.x.$get() + (v2.x.$get()));
			v.y.$set(v.y.$get() + (v2.y.$get()));
			_i++;
		}
		return $clone(v, Vector).round();
	};
	Vector.prototype.Add = function(vs) { return this.$val.Add(vs); };
	Vector.ptr.prototype.Sub = function(vs) {
		var _i, _ref, v, v2, vs;
		v = this;
		_ref = vs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v2 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Vector);
			v.x.$set(v.x.$get() - (v2.x.$get()));
			v.y.$set(v.y.$get() - (v2.y.$get()));
			_i++;
		}
		return $clone(v, Vector).round();
	};
	Vector.prototype.Sub = function(vs) { return this.$val.Sub(vs); };
	Vector.ptr.prototype.Scale = function(fs) {
		var _i, _ref, f, f2, fs, v;
		v = this;
		f2 = 1;
		_ref = fs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			f2 = f2 * (f);
			_i++;
		}
		v.x.$set(v.x.$get() * (f2));
		v.y.$set(v.y.$get() * (f2));
		return $clone(v, Vector).round();
	};
	Vector.prototype.Scale = function(fs) { return this.$val.Scale(fs); };
	Vector.ptr.prototype.Rotate = function(fs) {
		var _i, _ref, angle, f, fs, mgn, v;
		v = this;
		angle = 0;
		_ref = fs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			angle = angle + (f);
			_i++;
		}
		mgn = $clone(v, Vector).Magnitude();
		angle = math.Atan2(v.y.$get(), v.x.$get()) + (angle * 3.141592653589793 / 180);
		return $clone(v, Vector).SetPos(math.Cos(angle) * mgn, math.Sin(angle) * mgn);
	};
	Vector.prototype.Rotate = function(fs) { return this.$val.Rotate(fs); };
	Vector.ptr.prototype.Angle = function() {
		var v;
		v = this;
		return math.Atan2(v.y.$get(), v.x.$get()) * 180 / 3.141592653589793;
	};
	Vector.prototype.Angle = function() { return this.$val.Angle(); };
	Vector.ptr.prototype.Dot = function(v2) {
		var v, v2, x, y;
		v = this;
		x = v.x.$get() * v2.x.$get();
		y = v.y.$get() * v2.y.$get();
		return x + y;
	};
	Vector.prototype.Dot = function(v2) { return this.$val.Dot(v2); };
	Vector.ptr.prototype.Distance = function(v2) {
		var v, v2, v3, v4;
		v = this;
		v3 = $clone($clone(v, Vector).Copy(), Vector);
		v4 = $clone($clone(v2, Vector).Copy(), Vector);
		return $clone($clone(v3, Vector).Add(new sliceType$2([$clone($clone(v4, Vector).Scale(new sliceType$1([-1])), Vector)])), Vector).Magnitude();
	};
	Vector.prototype.Distance = function(v2) { return this.$val.Distance(v2); };
	Vector.ptr.prototype.round = function() {
		var v;
		v = this;
		if (math.Abs(v.x.$get()) < 0.001) {
			v.x.$set(0);
		}
		if (math.Abs(v.y.$get()) < 0.001) {
			v.y.$set(0);
		}
		return v;
	};
	Vector.prototype.round = function() { return this.$val.round(); };
	Vector.ptr.prototype.ShiftX = function(x) {
		var v, x;
		v = this;
		v.x.$set(v.x.$get() + (x));
		return v;
	};
	Vector.prototype.ShiftX = function(x) { return this.$val.ShiftX(x); };
	Vector.ptr.prototype.ShiftY = function(y) {
		var v, y;
		v = this;
		v.y.$set(v.y.$get() + (y));
		return v;
	};
	Vector.prototype.ShiftY = function(y) { return this.$val.ShiftY(y); };
	Vector.ptr.prototype.X = function() {
		var v;
		v = this;
		return v.x.$get() + v.offX;
	};
	Vector.prototype.X = function() { return this.$val.X(); };
	Vector.ptr.prototype.GetX = function() {
		var v;
		v = this;
		return $clone(v, Vector).X();
	};
	Vector.prototype.GetX = function() { return this.$val.GetX(); };
	Vector.ptr.prototype.Y = function() {
		var v;
		v = this;
		return v.y.$get() + v.offY;
	};
	Vector.prototype.Y = function() { return this.$val.Y(); };
	Vector.ptr.prototype.GetY = function() {
		var v;
		v = this;
		return $clone(v, Vector).Y();
	};
	Vector.prototype.GetY = function() { return this.$val.GetY(); };
	Vector.ptr.prototype.SetX = function(x) {
		var v, x;
		v = this;
		v.x.$set(x);
		return $clone(v, Vector).round();
	};
	Vector.prototype.SetX = function(x) { return this.$val.SetX(x); };
	Vector.ptr.prototype.SetY = function(y) {
		var v, y;
		v = this;
		v.y.$set(y);
		return $clone(v, Vector).round();
	};
	Vector.prototype.SetY = function(y) { return this.$val.SetY(y); };
	Vector.ptr.prototype.Xp = function() {
		var v;
		v = this;
		return v.x;
	};
	Vector.prototype.Xp = function() { return this.$val.Xp(); };
	Vector.ptr.prototype.Yp = function() {
		var v;
		v = this;
		return v.y;
	};
	Vector.prototype.Yp = function() { return this.$val.Yp(); };
	Vector.ptr.prototype.SetPos = function(x, y) {
		var v, x, y;
		v = this;
		v.x.$set(x);
		v.y.$set(y);
		return v;
	};
	Vector.prototype.SetPos = function(x, y) { return this.$val.SetPos(x, y); };
	Vector.ptr.prototype.GetPos = function() {
		var v;
		v = this;
		return [v.x.$get(), v.y.$get()];
	};
	Vector.prototype.GetPos = function() { return this.$val.GetPos(); };
	ForceVector.methods = [{prop: "GetForce", name: "GetForce", pkg: "", typ: $funcType([], [ForceVector], false)}];
	Vector.methods = [{prop: "Vec", name: "Vec", pkg: "", typ: $funcType([], [Vector], false)}, {prop: "Attach", name: "Attach", pkg: "", typ: $funcType([Attachable, sliceType$1], [Vector], true)}, {prop: "AttachX", name: "AttachX", pkg: "", typ: $funcType([Attachable, $Float64], [Vector], false)}, {prop: "AttachY", name: "AttachY", pkg: "", typ: $funcType([Attachable, $Float64], [Vector], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([], [Vector], false)}, {prop: "GetForce", name: "GetForce", pkg: "", typ: $funcType([], [ForceVector], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Vector], false)}, {prop: "Magnitude", name: "Magnitude", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Normalize", name: "Normalize", pkg: "", typ: $funcType([], [Vector], false)}, {prop: "Zero", name: "Zero", pkg: "", typ: $funcType([], [Vector], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([sliceType$2], [Vector], true)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([sliceType$2], [Vector], true)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([sliceType$1], [Vector], true)}, {prop: "Rotate", name: "Rotate", pkg: "", typ: $funcType([sliceType$1], [Vector], true)}, {prop: "Angle", name: "Angle", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Dot", name: "Dot", pkg: "", typ: $funcType([Vector], [$Float64], false)}, {prop: "Distance", name: "Distance", pkg: "", typ: $funcType([Vector], [$Float64], false)}, {prop: "round", name: "round", pkg: "github.com/oakmound/oak/physics", typ: $funcType([], [Vector], false)}, {prop: "ShiftX", name: "ShiftX", pkg: "", typ: $funcType([$Float64], [Vector], false)}, {prop: "ShiftY", name: "ShiftY", pkg: "", typ: $funcType([$Float64], [Vector], false)}, {prop: "X", name: "X", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetX", name: "GetX", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Y", name: "Y", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetY", name: "GetY", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetX", name: "SetX", pkg: "", typ: $funcType([$Float64], [Vector], false)}, {prop: "SetY", name: "SetY", pkg: "", typ: $funcType([$Float64], [Vector], false)}, {prop: "Xp", name: "Xp", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "Yp", name: "Yp", pkg: "", typ: $funcType([], [ptrType], false)}, {prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([$Float64, $Float64], [Vector], false)}, {prop: "GetPos", name: "GetPos", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}];
	Attachable.init([{prop: "Attach", name: "Attach", pkg: "", typ: $funcType([Attachable, sliceType$1], [Vector], true)}, {prop: "AttachX", name: "AttachX", pkg: "", typ: $funcType([Attachable, $Float64], [Vector], false)}, {prop: "AttachY", name: "AttachY", pkg: "", typ: $funcType([Attachable, $Float64], [Vector], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([], [Vector], false)}, {prop: "Vec", name: "Vec", pkg: "", typ: $funcType([], [Vector], false)}]);
	ForceVector.init("", [{prop: "Vector", name: "Vector", anonymous: true, exported: true, typ: Vector, tag: ""}, {prop: "Force", name: "Force", anonymous: false, exported: true, typ: ptrType, tag: ""}]);
	Vector.init("github.com/oakmound/oak/physics", [{prop: "x", name: "x", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "offX", name: "offX", anonymous: false, exported: false, typ: $Float64, tag: ""}, {prop: "offY", name: "offY", anonymous: false, exported: false, typ: $Float64, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/collision"] = (function() {
	var $pkg = {}, $init, errors, fmt, rtreego, dlog, event, physics, math, strconv, sync, Filter, Label, Point, Space, Tree, ptrType, ptrType$1, sliceType, sliceType$1, sliceType$2, ptrType$3, arrayType, arrayType$1, sliceType$3, ptrType$4, ptrType$5, sliceType$4, sliceType$5, sliceType$6, init, Clear, Add, Remove, UpdateSpace, HitLabel, RayCast, RayCastSingle, RayCastSingleLabels, NilPoint, NewPoint, NewUnassignedSpace, NewSpace, NewLabeledSpace, NewFullSpace, NewRect, NewTree;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	rtreego = $packages["github.com/200sc/rtreego"];
	dlog = $packages["github.com/oakmound/oak/dlog"];
	event = $packages["github.com/oakmound/oak/event"];
	physics = $packages["github.com/oakmound/oak/physics"];
	math = $packages["math"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	Filter = $pkg.Filter = $newType(4, $kindFunc, "collision.Filter", true, "github.com/oakmound/oak/collision", true, null);
	Label = $pkg.Label = $newType(4, $kindInt, "collision.Label", true, "github.com/oakmound/oak/collision", true, null);
	Point = $pkg.Point = $newType(0, $kindStruct, "collision.Point", true, "github.com/oakmound/oak/collision", true, function(Vector_, Zone_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Vector = new physics.Vector.ptr(ptrType$3.nil, ptrType$3.nil, 0, 0);
			this.Zone = ptrType$1.nil;
			return;
		}
		this.Vector = Vector_;
		this.Zone = Zone_;
	});
	Space = $pkg.Space = $newType(0, $kindStruct, "collision.Space", true, "github.com/oakmound/oak/collision", true, function(Location_, Label_, CID_, Type_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Location = ptrType$4.nil;
			this.Label = 0;
			this.CID = 0;
			this.Type = 0;
			return;
		}
		this.Location = Location_;
		this.Label = Label_;
		this.CID = CID_;
		this.Type = Type_;
	});
	Tree = $pkg.Tree = $newType(0, $kindStruct, "collision.Tree", true, "github.com/oakmound/oak/collision", true, function(Rtree_, Mutex_, minChildren_, maxChildren_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Rtree = ptrType$5.nil;
			this.Mutex = new sync.Mutex.ptr(0, 0);
			this.minChildren = 0;
			this.maxChildren = 0;
			return;
		}
		this.Rtree = Rtree_;
		this.Mutex = Mutex_;
		this.minChildren = minChildren_;
		this.maxChildren = maxChildren_;
	});
	ptrType = $ptrType(Tree);
	ptrType$1 = $ptrType(Space);
	sliceType = $sliceType(ptrType$1);
	sliceType$1 = $sliceType($Int);
	sliceType$2 = $sliceType(Point);
	ptrType$3 = $ptrType($Float64);
	arrayType = $arrayType($Float64, 4);
	arrayType$1 = $arrayType(arrayType, 4);
	sliceType$3 = $sliceType($emptyInterface);
	ptrType$4 = $ptrType(rtreego.Rect);
	ptrType$5 = $ptrType(rtreego.Rtree);
	sliceType$4 = $sliceType(event.CID);
	sliceType$5 = $sliceType(Label);
	sliceType$6 = $sliceType(Filter);
	init = function() {
		var _tuple;
		_tuple = NewTree(new sliceType$1([]));
		$pkg.DefTree = _tuple[0];
	};
	Clear = function() {
		$pkg.DefTree.Clear();
	};
	$pkg.Clear = Clear;
	Add = function(sps) {
		var sps, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; sps = $f.sps; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = $pkg.DefTree.Add(sps); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Add }; } $f.sps = sps; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Add = Add;
	Remove = function(sps) {
		var _r, sps, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; sps = $f.sps; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.DefTree.Remove(sps); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Remove }; } $f._r = _r; $f.sps = sps; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Remove = Remove;
	UpdateSpace = function(x, y, w, h, s) {
		var _r, h, s, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; h = $f.h; s = $f.s; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.DefTree.UpdateSpace(x, y, w, h, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: UpdateSpace }; } $f._r = _r; $f.h = h; $f.s = s; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.UpdateSpace = UpdateSpace;
	HitLabel = function(sp, labels) {
		var labels, sp;
		return $pkg.DefTree.HitLabel(sp, labels);
	};
	$pkg.HitLabel = HitLabel;
	Space.ptr.prototype.Update = function(x, y, w, h) {
		var _r, h, s, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; h = $f.h; s = $f.s; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $pkg.DefTree.UpdateSpace(x, y, w, h, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Space.ptr.prototype.Update }; } $f._r = _r; $f.h = h; $f.s = s; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Space.prototype.Update = function(x, y, w, h) { return this.$val.Update(x, y, w, h); };
	Space.ptr.prototype.SetDim = function(w, h) {
		var _r, h, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; h = $f.h; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = s.Update(s.GetX(), s.GetY(), w, h); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Space.ptr.prototype.SetDim }; } $f._r = _r; $f.h = h; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Space.prototype.SetDim = function(w, h) { return this.$val.SetDim(w, h); };
	Space.ptr.prototype.UpdateLabel = function(classtype) {
		var _r, classtype, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; classtype = $f.classtype; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = $pkg.DefTree.Remove(new sliceType([s])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		s.Label = classtype;
		$r = $pkg.DefTree.Add(new sliceType([s])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Space.ptr.prototype.UpdateLabel }; } $f._r = _r; $f.classtype = classtype; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Space.prototype.UpdateLabel = function(classtype) { return this.$val.UpdateLabel(classtype); };
	RayCast = function(x, y, degrees, length) {
		var _r, degrees, length, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; degrees = $f.degrees; length = $f.length; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.DefTree.RayCast(x, y, degrees, length); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RayCast }; } $f._r = _r; $f.degrees = degrees; $f.length = length; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RayCast = RayCast;
	RayCastSingle = function(x, y, degrees, length, invalidIDS) {
		var _r, degrees, invalidIDS, length, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; degrees = $f.degrees; invalidIDS = $f.invalidIDS; length = $f.length; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.DefTree.RayCastSingle(x, y, degrees, length, invalidIDS); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RayCastSingle }; } $f._r = _r; $f.degrees = degrees; $f.invalidIDS = invalidIDS; $f.length = length; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RayCastSingle = RayCastSingle;
	RayCastSingleLabels = function(x, y, degrees, length, labels) {
		var _r, degrees, labels, length, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; degrees = $f.degrees; labels = $f.labels; length = $f.length; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $pkg.DefTree.RayCastSingleLabels(x, y, degrees, length, labels); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RayCastSingleLabels }; } $f._r = _r; $f.degrees = degrees; $f.labels = labels; $f.length = length; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.RayCastSingleLabels = RayCastSingleLabels;
	NilPoint = function() {
		return new Point.ptr($clone(physics.NewVector(0, 0), physics.Vector), ptrType$1.nil);
	};
	$pkg.NilPoint = NilPoint;
	NewPoint = function(s, x, y) {
		var s, x, y;
		return new Point.ptr($clone(physics.NewVector(x, y), physics.Vector), s);
	};
	$pkg.NewPoint = NewPoint;
	Point.ptr.prototype.IsNil = function() {
		var cp;
		cp = this;
		return cp.Zone === ptrType$1.nil;
	};
	Point.prototype.IsNil = function() { return this.$val.IsNil(); };
	Tree.ptr.prototype.RayCast = function(x, y, degrees, length) {
		var _entry, _key, _r, _tuple, c, degrees, i, k, length, loc, next, nx, ok, resultHash, results, s, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _tuple = $f._tuple; c = $f.c; degrees = $f.degrees; i = $f.i; k = $f.k; length = $f.length; loc = $f.loc; next = $f.next; nx = $f.nx; ok = $f.ok; resultHash = $f.resultHash; results = $f.results; s = $f.s; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		results = new sliceType$2([]);
		resultHash = {};
		s = math.Sin(degrees * 3.141592653589793 / 180);
		c = math.Cos(degrees * 3.141592653589793 / 180);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 2; continue; }
			_r = NewRect(x, y, 0.1, 0.1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			loc = _r;
			next = t.Rtree.SearchIntersect(loc);
			k = 0;
			while (true) {
				if (!(k < next.$length)) { break; }
				nx = $assertType(((k < 0 || k >= next.$length) ? ($throwRuntimeError("index out of range"), undefined) : next.$array[next.$offset + k]), ptrType$1);
				_tuple = (_entry = resultHash[ptrType$1.keyFor(nx)], _entry !== undefined ? [_entry.v, true] : [false, false]);
				ok = _tuple[1];
				if (!ok) {
					_key = nx; (resultHash || $throwRuntimeError("assignment to entry in nil map"))[ptrType$1.keyFor(_key)] = { k: _key, v: true };
					results = $append(results, NewPoint(nx, x, y));
				}
				k = k + (1) >> 0;
			}
			x = x + (c);
			y = y + (s);
			i = i + (1);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return results;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.RayCast }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.degrees = degrees; $f.i = i; $f.k = k; $f.length = length; $f.loc = loc; $f.next = next; $f.nx = nx; $f.ok = ok; $f.resultHash = resultHash; $f.results = results; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.RayCast = function(x, y, degrees, length) { return this.$val.RayCast(x, y, degrees, length); };
	Tree.ptr.prototype.RayCastSingle = function(x, y, degrees, length, invalidIDS) {
		var _r, c, degrees, e, i, invalidIDS, k, length, loc, next, nx, s, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; degrees = $f.degrees; e = $f.e; i = $f.i; invalidIDS = $f.invalidIDS; k = $f.k; length = $f.length; loc = $f.loc; next = $f.next; nx = $f.nx; s = $f.s; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		s = math.Sin(degrees * 3.141592653589793 / 180);
		c = math.Cos(degrees * 3.141592653589793 / 180);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 2; continue; }
			_r = NewRect(x, y, 0.1, 0.1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			loc = _r;
			next = t.Rtree.SearchIntersect(loc);
			k = 0;
			output:
			while (true) {
				if (!(k < next.$length)) { break; }
				nx = $assertType(((k < 0 || k >= next.$length) ? ($throwRuntimeError("index out of range"), undefined) : next.$array[next.$offset + k]), ptrType$1);
				e = 0;
				while (true) {
					if (!(e < invalidIDS.$length)) { break; }
					if (nx.CID === ((e < 0 || e >= invalidIDS.$length) ? ($throwRuntimeError("index out of range"), undefined) : invalidIDS.$array[invalidIDS.$offset + e])) {
						k = k + (1) >> 0;
						continue output;
					}
					e = e + (1) >> 0;
				}
				$s = -1; return NewPoint(nx, x, y);
			}
			x = x + (c);
			y = y + (s);
			i = i + (1);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return NilPoint();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.RayCastSingle }; } $f._r = _r; $f.c = c; $f.degrees = degrees; $f.e = e; $f.i = i; $f.invalidIDS = invalidIDS; $f.k = k; $f.length = length; $f.loc = loc; $f.next = next; $f.nx = nx; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.RayCastSingle = function(x, y, degrees, length, invalidIDS) { return this.$val.RayCastSingle(x, y, degrees, length, invalidIDS); };
	Tree.ptr.prototype.RayCastSingleLabels = function(x, y, degrees, length, labels) {
		var _i, _r, _ref, c, degrees, i, k, label, labels, length, loc, next, nx, s, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; degrees = $f.degrees; i = $f.i; k = $f.k; label = $f.label; labels = $f.labels; length = $f.length; loc = $f.loc; next = $f.next; nx = $f.nx; s = $f.s; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		s = math.Sin(degrees * 3.141592653589793 / 180);
		c = math.Cos(degrees * 3.141592653589793 / 180);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 2; continue; }
			_r = NewRect(x, y, 0.1, 0.1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			loc = _r;
			next = t.Rtree.SearchIntersect(loc);
			k = 0;
			while (true) {
				if (!(k < next.$length)) { break; }
				nx = $assertType(((k < 0 || k >= next.$length) ? ($throwRuntimeError("index out of range"), undefined) : next.$array[next.$offset + k]), ptrType$1);
				_ref = labels;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					label = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (nx.Label === label) {
						$s = -1; return NewPoint(nx, x, y);
					}
					_i++;
				}
				k = k + (1) >> 0;
			}
			x = x + (c);
			y = y + (s);
			i = i + (1);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return NilPoint();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.RayCastSingleLabels }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.degrees = degrees; $f.i = i; $f.k = k; $f.label = label; $f.labels = labels; $f.length = length; $f.loc = loc; $f.next = next; $f.nx = nx; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.RayCastSingleLabels = function(x, y, degrees, length, labels) { return this.$val.RayCastSingleLabels(x, y, degrees, length, labels); };
	Tree.ptr.prototype.RayCastSingleIgnoreLabels = function(x, y, degrees, length, labels) {
		var _i, _r, _ref, c, degrees, i, k, label, labels, length, loc, next, nx, s, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; degrees = $f.degrees; i = $f.i; k = $f.k; label = $f.label; labels = $f.labels; length = $f.length; loc = $f.loc; next = $f.next; nx = $f.nx; s = $f.s; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		s = math.Sin(degrees * 3.141592653589793 / 180);
		c = math.Cos(degrees * 3.141592653589793 / 180);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 2; continue; }
			_r = NewRect(x, y, 0.1, 0.1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			loc = _r;
			next = t.Rtree.SearchIntersect(loc);
			k = 0;
			output:
			while (true) {
				if (!(k < next.$length)) { break; }
				nx = $assertType(((k < 0 || k >= next.$length) ? ($throwRuntimeError("index out of range"), undefined) : next.$array[next.$offset + k]), ptrType$1);
				_ref = labels;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					label = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (nx.Label === label) {
						k = k + (1) >> 0;
						continue output;
					}
					_i++;
				}
				$s = -1; return NewPoint(nx, x, y);
			}
			x = x + (c);
			y = y + (s);
			i = i + (1);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return NilPoint();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.RayCastSingleIgnoreLabels }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.degrees = degrees; $f.i = i; $f.k = k; $f.label = label; $f.labels = labels; $f.length = length; $f.loc = loc; $f.next = next; $f.nx = nx; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.RayCastSingleIgnoreLabels = function(x, y, degrees, length, labels) { return this.$val.RayCastSingleIgnoreLabels(x, y, degrees, length, labels); };
	Tree.ptr.prototype.RayCastSingleIgnore = function(x, y, degrees, length, invalidIDS, labels) {
		var _i, _r, _ref, c, degrees, e, i, invalidIDS, k, label, labels, length, loc, next, nx, s, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; c = $f.c; degrees = $f.degrees; e = $f.e; i = $f.i; invalidIDS = $f.invalidIDS; k = $f.k; label = $f.label; labels = $f.labels; length = $f.length; loc = $f.loc; next = $f.next; nx = $f.nx; s = $f.s; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		s = math.Sin(degrees * 3.141592653589793 / 180);
		c = math.Cos(degrees * 3.141592653589793 / 180);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < length)) { break; } */ if(!(i < length)) { $s = 2; continue; }
			_r = NewRect(x, y, 0.1, 0.1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			loc = _r;
			next = t.Rtree.SearchIntersect(loc);
			k = 0;
			output:
			while (true) {
				if (!(k < next.$length)) { break; }
				nx = $assertType(((k < 0 || k >= next.$length) ? ($throwRuntimeError("index out of range"), undefined) : next.$array[next.$offset + k]), ptrType$1);
				_ref = labels;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					label = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (nx.Label === label) {
						k = k + (1) >> 0;
						continue output;
					}
					_i++;
				}
				e = 0;
				while (true) {
					if (!(e < invalidIDS.$length)) { break; }
					if (nx.CID === ((e < 0 || e >= invalidIDS.$length) ? ($throwRuntimeError("index out of range"), undefined) : invalidIDS.$array[invalidIDS.$offset + e])) {
						k = k + (1) >> 0;
						continue output;
					}
					e = e + (1) >> 0;
				}
				$s = -1; return NewPoint(nx, x, y);
			}
			x = x + (c);
			y = y + (s);
			i = i + (1);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return NilPoint();
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.RayCastSingleIgnore }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.c = c; $f.degrees = degrees; $f.e = e; $f.i = i; $f.invalidIDS = invalidIDS; $f.k = k; $f.label = label; $f.labels = labels; $f.length = length; $f.loc = loc; $f.next = next; $f.nx = nx; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.RayCastSingleIgnore = function(x, y, degrees, length, invalidIDS, labels) { return this.$val.RayCastSingleIgnore(x, y, degrees, length, invalidIDS, labels); };
	Tree.ptr.prototype.ConeCast = function(x, y, angle, angleWidth, rays, length) {
		var _r, a, angle, angleWidth, cps, da, length, points, rays, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; angle = $f.angle; angleWidth = $f.angleWidth; cps = $f.cps; da = $f.da; length = $f.length; points = $f.points; rays = $f.rays; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		points = sliceType$2.nil;
		t = this;
		da = angleWidth / rays;
		a = angle;
		/* while (true) { */ case 1:
			/* if (!(a < angle + angleWidth)) { break; } */ if(!(a < angle + angleWidth)) { $s = 2; continue; }
			_r = RayCast(x, y, a, length); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			cps = _r;
			if (cps.$length > 0) {
				points = $appendSlice(points, cps);
			}
			a = a + (da);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return points;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ConeCast }; } $f._r = _r; $f.a = a; $f.angle = angle; $f.angleWidth = angleWidth; $f.cps = cps; $f.da = da; $f.length = length; $f.points = points; $f.rays = rays; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ConeCast = function(x, y, angle, angleWidth, rays, length) { return this.$val.ConeCast(x, y, angle, angleWidth, rays, length); };
	Tree.ptr.prototype.ConeCastSingle = function(x, y, angle, angleWidth, rays, length, invalidIDS) {
		var _r, a, angle, angleWidth, cp, da, invalidIDS, length, points, rays, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; angle = $f.angle; angleWidth = $f.angleWidth; cp = $f.cp; da = $f.da; invalidIDS = $f.invalidIDS; length = $f.length; points = $f.points; rays = $f.rays; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		points = sliceType$2.nil;
		t = this;
		da = angleWidth / rays;
		a = angle;
		/* while (true) { */ case 1:
			/* if (!(a < angle + angleWidth)) { break; } */ if(!(a < angle + angleWidth)) { $s = 2; continue; }
			_r = RayCastSingle(x, y, a, length, invalidIDS); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			cp = $clone(_r, Point);
			if (!(cp.Zone === ptrType$1.nil)) {
				points = $append(points, cp);
			}
			a = a + (da);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return points;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ConeCastSingle }; } $f._r = _r; $f.a = a; $f.angle = angle; $f.angleWidth = angleWidth; $f.cp = cp; $f.da = da; $f.invalidIDS = invalidIDS; $f.length = length; $f.points = points; $f.rays = rays; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ConeCastSingle = function(x, y, angle, angleWidth, rays, length, invalidIDS) { return this.$val.ConeCastSingle(x, y, angle, angleWidth, rays, length, invalidIDS); };
	Tree.ptr.prototype.ConeCastSingleLabels = function(x, y, angle, angleWidth, rays, length, labels) {
		var _r, a, angle, angleWidth, cp, da, labels, length, points, rays, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; angle = $f.angle; angleWidth = $f.angleWidth; cp = $f.cp; da = $f.da; labels = $f.labels; length = $f.length; points = $f.points; rays = $f.rays; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		points = sliceType$2.nil;
		t = this;
		da = angleWidth / rays;
		a = angle;
		/* while (true) { */ case 1:
			/* if (!(a < angle + angleWidth)) { break; } */ if(!(a < angle + angleWidth)) { $s = 2; continue; }
			_r = RayCastSingleLabels(x, y, a, length, labels); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			cp = $clone(_r, Point);
			if (!(cp.Zone === ptrType$1.nil)) {
				points = $append(points, cp);
			}
			a = a + (da);
		/* } */ $s = 1; continue; case 2:
		$s = -1; return points;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ConeCastSingleLabels }; } $f._r = _r; $f.a = a; $f.angle = angle; $f.angleWidth = angleWidth; $f.cp = cp; $f.da = da; $f.labels = labels; $f.length = length; $f.points = points; $f.rays = rays; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ConeCastSingleLabels = function(x, y, angle, angleWidth, rays, length, labels) { return this.$val.ConeCastSingleLabels(x, y, angle, angleWidth, rays, length, labels); };
	Space.ptr.prototype.Bounds = function() {
		var s;
		s = this;
		return s.Location;
	};
	Space.prototype.Bounds = function() { return this.$val.Bounds(); };
	Space.ptr.prototype.GetX = function() {
		var s;
		s = this;
		return s.Location.PointCoord(0);
	};
	Space.prototype.GetX = function() { return this.$val.GetX(); };
	Space.ptr.prototype.GetY = function() {
		var s;
		s = this;
		return s.Location.PointCoord(1);
	};
	Space.prototype.GetY = function() { return this.$val.GetY(); };
	Space.ptr.prototype.GetW = function() {
		var s;
		s = this;
		return s.Location.LengthsCoord(0);
	};
	Space.prototype.GetW = function() { return this.$val.GetW(); };
	Space.ptr.prototype.GetH = function() {
		var s;
		s = this;
		return s.Location.LengthsCoord(1);
	};
	Space.prototype.GetH = function() { return this.$val.GetH(); };
	Space.ptr.prototype.GetCenter = function() {
		var s;
		s = this;
		return [s.GetX() + s.GetW() / 2, s.GetY() + s.GetH() / 2];
	};
	Space.prototype.GetCenter = function() { return this.$val.GetCenter(); };
	Space.ptr.prototype.GetPos = function() {
		var s;
		s = this;
		return [s.Location.PointCoord(1), s.Location.PointCoord(0)];
	};
	Space.prototype.GetPos = function() { return this.$val.GetPos(); };
	Space.ptr.prototype.Above = function(other) {
		var other, s;
		s = this;
		return other.GetY() - s.GetY();
	};
	Space.prototype.Above = function(other) { return this.$val.Above(other); };
	Space.ptr.prototype.Below = function(other) {
		var other, s;
		s = this;
		return s.GetY() - other.GetY();
	};
	Space.prototype.Below = function(other) { return this.$val.Below(other); };
	Space.ptr.prototype.Contains = function(other) {
		var other, s;
		s = this;
		if (s.GetX() > other.GetX() || s.GetX() + s.GetW() < other.GetX() + other.GetW() || s.GetY() > other.GetY() || s.GetY() + s.GetH() < other.GetY() + other.GetH()) {
			return false;
		}
		return true;
	};
	Space.prototype.Contains = function(other) { return this.$val.Contains(other); };
	Space.ptr.prototype.LeftOf = function(other) {
		var other, s;
		s = this;
		return other.GetX() - s.GetX();
	};
	Space.prototype.LeftOf = function(other) { return this.$val.LeftOf(other); };
	Space.ptr.prototype.RightOf = function(other) {
		var other, s;
		s = this;
		return s.GetX() - other.GetX();
	};
	Space.prototype.RightOf = function(other) { return this.$val.RightOf(other); };
	Space.ptr.prototype.Overlap = function(other) {
		var other, s, x2, x2$1, xOver, y2, y2$1, yOver;
		xOver = 0;
		yOver = 0;
		s = this;
		if (s.GetX() > other.GetX()) {
			x2 = other.GetX() + other.GetW();
			if (s.GetX() < x2) {
				xOver = s.GetX() - x2;
			}
		} else {
			x2$1 = s.GetX() + s.GetW();
			if (other.GetX() < x2$1) {
				xOver = x2$1 - other.GetX();
			}
		}
		if (s.GetY() > other.GetY()) {
			y2 = other.GetY() + other.GetH();
			if (s.GetY() < y2) {
				yOver = s.GetY() - y2;
			}
		} else {
			y2$1 = s.GetY() + s.GetH();
			if (other.GetY() < y2$1) {
				yOver = y2$1 - other.GetY();
			}
		}
		return [xOver, yOver];
	};
	Space.prototype.Overlap = function(other) { return this.$val.Overlap(other); };
	Space.ptr.prototype.OverlapVector = function(other) {
		var _tuple, other, s, xover, yover;
		s = this;
		_tuple = s.Overlap(other);
		xover = _tuple[0];
		yover = _tuple[1];
		return physics.NewVector(-xover, -yover);
	};
	Space.prototype.OverlapVector = function(other) { return this.$val.OverlapVector(other); };
	Space.ptr.prototype.SubtractRect = function(x2, y2, w2, h2) {
		var _i, _r, _ref, h1, h2, r, rects, s, spaces, w1, w2, x1, x2, y1, y2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; h1 = $f.h1; h2 = $f.h2; r = $f.r; rects = $f.rects; s = $f.s; spaces = $f.spaces; w1 = $f.w1; w2 = $f.w2; x1 = $f.x1; x2 = $f.x2; y1 = $f.y1; y2 = $f.y2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		x1 = s.GetX();
		y1 = s.GetY();
		w1 = s.GetW();
		h1 = s.GetH();
		rects = arrayType$1.zero();
		rects[0][0] = x1;
		rects[0][1] = y1;
		rects[0][2] = x2;
		rects[0][3] = h1;
		rects[1][0] = x1;
		rects[1][1] = y1;
		rects[1][2] = w1;
		rects[1][3] = y2;
		rects[2][0] = x1 + x2 + w2;
		rects[2][1] = y1;
		rects[2][2] = w1 - (x2 + w2);
		rects[2][3] = h1;
		rects[3][0] = x1;
		rects[3][1] = y1 + y2 + h2;
		rects[3][2] = w1;
		rects[3][3] = h1 - (y2 + h2);
		spaces = sliceType.nil;
		_ref = rects;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < 4)) { break; } */ if(!(_i < 4)) { $s = 2; continue; }
			r = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), arrayType);
			/* */ if (r[2] > 0 && r[3] > 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (r[2] > 0 && r[3] > 0) { */ case 3:
				_r = NewFullSpace(r[0], r[1], r[2], r[3], s.Label, s.CID); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				spaces = $append(spaces, _r);
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return spaces;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Space.ptr.prototype.SubtractRect }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.h1 = h1; $f.h2 = h2; $f.r = r; $f.rects = rects; $f.s = s; $f.spaces = spaces; $f.w1 = w1; $f.w2 = w2; $f.x1 = x1; $f.x2 = x2; $f.y1 = y1; $f.y2 = y2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Space.prototype.SubtractRect = function(x2, y2, w2, h2) { return this.$val.SubtractRect(x2, y2, w2, h2); };
	Space.ptr.prototype.String = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = fmt.Sprintf("%p", new sliceType$3([s])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return strconv.FormatFloat(s.GetX(), 102, 2, 32) + "," + strconv.FormatFloat(s.GetY(), 102, 2, 32) + "," + strconv.FormatFloat(s.GetW(), 102, 2, 32) + "," + strconv.FormatFloat(s.GetH(), 102, 2, 32) + "::" + strconv.Itoa(((s.CID >> 0))) + "::" + _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Space.ptr.prototype.String }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Space.prototype.String = function() { return this.$val.String(); };
	NewUnassignedSpace = function(x, y, w, h) {
		var _r, h, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; h = $f.h; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewLabeledSpace(x, y, w, h, -1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewUnassignedSpace }; } $f._r = _r; $f.h = h; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewUnassignedSpace = NewUnassignedSpace;
	NewSpace = function(x, y, w, h, cID) {
		var _r, cID, h, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; cID = $f.cID; h = $f.h; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewFullSpace(x, y, w, h, -1, cID); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewSpace }; } $f._r = _r; $f.cID = cID; $f.h = h; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewSpace = NewSpace;
	NewLabeledSpace = function(x, y, w, h, l) {
		var _r, h, l, rect, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; h = $f.h; l = $f.l; rect = $f.rect; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewRect(x, y, w, h); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rect = _r;
		$s = -1; return new Space.ptr(rect, l, 0, 0);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewLabeledSpace }; } $f._r = _r; $f.h = h; $f.l = l; $f.rect = rect; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewLabeledSpace = NewLabeledSpace;
	NewFullSpace = function(x, y, w, h, l, cID) {
		var _r, cID, h, l, rect, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; cID = $f.cID; h = $f.h; l = $f.l; rect = $f.rect; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewRect(x, y, w, h); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		rect = _r;
		$s = -1; return new Space.ptr(rect, l, cID, 1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewFullSpace }; } $f._r = _r; $f.cID = cID; $f.h = h; $f.l = l; $f.rect = rect; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewFullSpace = NewFullSpace;
	NewRect = function(x, y, w, h) {
		var _tuple, _tuple$1, err, h, rect, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; err = $f.err; h = $f.h; rect = $f.rect; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rect = [rect];
		_tuple = rtreego.NewRect($toNativeArray($kindFloat64, [x, y, 0]), $toNativeArray($kindFloat64, [w, h, 1]));
		rect[0] = $clone(_tuple[0], rtreego.Rect);
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 1:
			if (w === 0) {
				w = 1;
			} else if (w < 0) {
				x = x + (w);
				w = w * (-1);
			}
			if (h === 0) {
				h = 1;
			} else if (h < 0) {
				y = y + (h);
				h = h * (-1);
			}
			$r = dlog.Warn(new sliceType$3([new $String("Corrected Rectangle Dimensions to"), new $Float64(w), new $Float64(h)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = rtreego.NewRect($toNativeArray($kindFloat64, [x, y, 0]), $toNativeArray($kindFloat64, [w, h, 1]));
			rtreego.Rect.copy(rect[0], _tuple$1[0]);
		/* } */ case 2:
		$s = -1; return rect[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewRect }; } $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.err = err; $f.h = h; $f.rect = rect; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewRect = NewRect;
	NewTree = function(children) {
		var children, maxChildren, minChildren;
		minChildren = $pkg.DefaultMinChildren;
		maxChildren = $pkg.DefaultMaxChildren;
		if (children.$length > 0) {
			minChildren = (0 >= children.$length ? ($throwRuntimeError("index out of range"), undefined) : children.$array[children.$offset + 0]);
			if (children.$length > 1) {
				maxChildren = (1 >= children.$length ? ($throwRuntimeError("index out of range"), undefined) : children.$array[children.$offset + 1]);
			}
		}
		if (minChildren > maxChildren) {
			return [ptrType.nil, errors.New("MaxChildren must exceed MinChildren")];
		}
		return [new Tree.ptr(rtreego.NewTree(minChildren, maxChildren), new sync.Mutex.ptr(0, 0), minChildren, maxChildren), $ifaceNil];
	};
	$pkg.NewTree = NewTree;
	Tree.ptr.prototype.Clear = function() {
		var t;
		t = this;
		t.Rtree = rtreego.NewTree(t.minChildren, t.maxChildren);
	};
	Tree.prototype.Clear = function() { return this.$val.Clear(); };
	Tree.ptr.prototype.Add = function(sps) {
		var _i, _ref, sp, sps, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; sp = $f.sp; sps = $f.sps; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		$r = t.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = sps;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			sp = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!(sp === ptrType$1.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(sp === ptrType$1.nil)) { */ case 4:
				$r = t.Rtree.Insert(sp); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$r = t.Mutex.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Add }; } $f._i = _i; $f._ref = _ref; $f.sp = sp; $f.sps = sps; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Add = function(sps) { return this.$val.Add(sps); };
	Tree.ptr.prototype.Remove = function(sps) {
		var _i, _r, _ref, removed, sp, sps, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; removed = $f.removed; sp = $f.sp; sps = $f.sps; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		removed = 0;
		$r = t.Mutex.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = sps;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			sp = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!(sp === ptrType$1.nil)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!(sp === ptrType$1.nil)) { */ case 4:
				_r = t.Rtree.Delete(sp); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				/* */ if (_r) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_r) { */ case 6:
					removed = removed + (1) >> 0;
				/* } */ case 7:
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		$r = t.Mutex.Unlock(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return removed;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Remove }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.removed = removed; $f.sp = sp; $f.sps = sps; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Remove = function(sps) { return this.$val.Remove(sps); };
	Tree.ptr.prototype.UpdateSpace = function(x, y, w, h, s) {
		var _r, _r$1, h, loc, s, t, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; h = $f.h; loc = $f.loc; s = $f.s; t = $f.t; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (s === ptrType$1.nil) {
			$s = -1; return errors.New("Input space was nil");
		}
		_r = NewRect(x, y, w, h); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		loc = _r;
		$r = t.Mutex.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = t.Rtree.Delete(s); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		s.Location = loc;
		$r = t.Rtree.Insert(s); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = t.Mutex.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.UpdateSpace }; } $f._r = _r; $f._r$1 = _r$1; $f.h = h; $f.loc = loc; $f.s = s; $f.t = t; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.UpdateSpace = function(x, y, w, h, s) { return this.$val.UpdateSpace(x, y, w, h, s); };
	Tree.ptr.prototype.ShiftSpace = function(x, y, s) {
		var _r, s, t, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; t = $f.t; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		if (s === ptrType$1.nil) {
			$s = -1; return errors.New("Input space was nil");
		}
		x = x + s.GetX();
		y = y + s.GetY();
		_r = t.UpdateSpace(x, y, s.GetW(), s.GetH(), s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.ShiftSpace }; } $f._r = _r; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.ShiftSpace = function(x, y, s) { return this.$val.ShiftSpace(x, y, s); };
	Tree.ptr.prototype.Hits = function(sp) {
		var _i, _ref, _tmp, _tmp$1, hitSelf, i, i$1, out, results, sp, t, v, x, x$1;
		t = this;
		results = t.Rtree.SearchIntersect(sp.Bounds());
		hitSelf = -1;
		i = 0;
		while (true) {
			if (!(i < results.$length)) { break; }
			if ($interfaceIsEqual(((i < 0 || i >= results.$length) ? ($throwRuntimeError("index out of range"), undefined) : results.$array[results.$offset + i]), $ifaceNil)) {
				results = $appendSlice($subslice(results, 0, i), $subslice(results, (i + 1 >> 0)));
			} else {
				i = i + (1) >> 0;
			}
		}
		out = $makeSlice(sliceType, results.$length);
		_ref = results;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if ($assertType(v, ptrType$1) === sp) {
				hitSelf = i$1;
			}
			((i$1 < 0 || i$1 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i$1] = $assertType(v, ptrType$1));
			_i++;
		}
		if (!((hitSelf === -1))) {
			_tmp = (x = out.$length - 1 >> 0, ((x < 0 || x >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + x]));
			_tmp$1 = ((hitSelf < 0 || hitSelf >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + hitSelf]);
			((hitSelf < 0 || hitSelf >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + hitSelf] = _tmp);
			(x$1 = out.$length - 1 >> 0, ((x$1 < 0 || x$1 >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + x$1] = _tmp$1));
			return $subslice(out, 0, (out.$length - 1 >> 0));
		}
		return out;
	};
	Tree.prototype.Hits = function(sp) { return this.$val.Hits(sp); };
	Tree.ptr.prototype.HitLabel = function(sp, labels) {
		var _i, _i$1, _ref, _ref$1, label, labels, results, sp, t, v;
		t = this;
		results = t.Rtree.SearchIntersect(sp.Bounds());
		_ref = results;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_ref$1 = labels;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				label = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!($assertType(v, ptrType$1) === sp) && ($assertType(v, ptrType$1).Label === label)) {
					return $assertType(v, ptrType$1);
				}
				_i$1++;
			}
			_i++;
		}
		return ptrType$1.nil;
	};
	Tree.prototype.HitLabel = function(sp, labels) { return this.$val.HitLabel(sp, labels); };
	Tree.ptr.prototype.Hit = function(sp, fs) {
		var _i, _i$1, _r, _ref, _ref$1, f, fs, i, iresults, results, sp, t, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; f = $f.f; fs = $f.fs; i = $f.i; iresults = $f.iresults; results = $f.results; sp = $f.sp; t = $f.t; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		iresults = t.Rtree.SearchIntersect(sp.Bounds());
		results = $makeSlice(sliceType, iresults.$length);
		_ref = iresults;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= results.$length) ? ($throwRuntimeError("index out of range"), undefined) : results.$array[results.$offset + i] = $assertType(v, ptrType$1));
			_i++;
		}
		_ref$1 = fs;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			f = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (results.$length === 0) {
				$s = -1; return results;
			}
			_r = f(results); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			results = _r;
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return results;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Tree.ptr.prototype.Hit }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f.f = f; $f.fs = fs; $f.i = i; $f.iresults = iresults; $f.results = results; $f.sp = sp; $f.t = t; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Tree.prototype.Hit = function(sp, fs) { return this.$val.Hit(sp, fs); };
	Point.methods = [{prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "Update", name: "Update", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [$error], false)}, {prop: "SetDim", name: "SetDim", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "UpdateLabel", name: "UpdateLabel", pkg: "", typ: $funcType([Label], [], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "GetX", name: "GetX", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetY", name: "GetY", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetW", name: "GetW", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetH", name: "GetH", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetCenter", name: "GetCenter", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "GetPos", name: "GetPos", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "Above", name: "Above", pkg: "", typ: $funcType([ptrType$1], [$Float64], false)}, {prop: "Below", name: "Below", pkg: "", typ: $funcType([ptrType$1], [$Float64], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([ptrType$1], [$Bool], false)}, {prop: "LeftOf", name: "LeftOf", pkg: "", typ: $funcType([ptrType$1], [$Float64], false)}, {prop: "RightOf", name: "RightOf", pkg: "", typ: $funcType([ptrType$1], [$Float64], false)}, {prop: "Overlap", name: "Overlap", pkg: "", typ: $funcType([ptrType$1], [$Float64, $Float64], false)}, {prop: "OverlapVector", name: "OverlapVector", pkg: "", typ: $funcType([ptrType$1], [physics.Vector], false)}, {prop: "SubtractRect", name: "SubtractRect", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [sliceType], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "RayCast", name: "RayCast", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64], [sliceType$2], false)}, {prop: "RayCastSingle", name: "RayCastSingle", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, sliceType$4], [Point], false)}, {prop: "RayCastSingleLabels", name: "RayCastSingleLabels", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, sliceType$5], [Point], true)}, {prop: "RayCastSingleIgnoreLabels", name: "RayCastSingleIgnoreLabels", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, sliceType$5], [Point], true)}, {prop: "RayCastSingleIgnore", name: "RayCastSingleIgnore", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, sliceType$4, sliceType$5], [Point], true)}, {prop: "ConeCast", name: "ConeCast", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64], [sliceType$2], false)}, {prop: "ConeCastSingle", name: "ConeCastSingle", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, sliceType$4], [sliceType$2], false)}, {prop: "ConeCastSingleLabels", name: "ConeCastSingleLabels", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, $Float64, $Float64, sliceType$5], [sliceType$2], true)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([sliceType], [], true)}, {prop: "Remove", name: "Remove", pkg: "", typ: $funcType([sliceType], [$Int], true)}, {prop: "UpdateSpace", name: "UpdateSpace", pkg: "", typ: $funcType([$Float64, $Float64, $Float64, $Float64, ptrType$1], [$error], false)}, {prop: "ShiftSpace", name: "ShiftSpace", pkg: "", typ: $funcType([$Float64, $Float64, ptrType$1], [$error], false)}, {prop: "Hits", name: "Hits", pkg: "", typ: $funcType([ptrType$1], [sliceType], false)}, {prop: "HitLabel", name: "HitLabel", pkg: "", typ: $funcType([ptrType$1, sliceType$5], [ptrType$1], true)}, {prop: "Hit", name: "Hit", pkg: "", typ: $funcType([ptrType$1, sliceType$6], [sliceType], true)}];
	Filter.init([sliceType], [sliceType], false);
	Point.init("", [{prop: "Vector", name: "Vector", anonymous: true, exported: true, typ: physics.Vector, tag: ""}, {prop: "Zone", name: "Zone", anonymous: false, exported: true, typ: ptrType$1, tag: ""}]);
	Space.init("", [{prop: "Location", name: "Location", anonymous: false, exported: true, typ: ptrType$4, tag: ""}, {prop: "Label", name: "Label", anonymous: false, exported: true, typ: Label, tag: ""}, {prop: "CID", name: "CID", anonymous: false, exported: true, typ: event.CID, tag: ""}, {prop: "Type", name: "Type", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Tree.init("github.com/oakmound/oak/collision", [{prop: "Rtree", name: "Rtree", anonymous: true, exported: true, typ: ptrType$5, tag: ""}, {prop: "Mutex", name: "Mutex", anonymous: true, exported: true, typ: sync.Mutex, tag: ""}, {prop: "minChildren", name: "minChildren", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxChildren", name: "maxChildren", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rtreego.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = physics.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.DefTree = ptrType.nil;
		$pkg.DefaultMaxChildren = 40;
		$pkg.DefaultMinChildren = 20;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/fileutil"] = (function() {
	var $pkg = {}, $init, bytes, errors, fmt, js, dlog, io, os, filepath, strings, time, dummyfileinfo, nopCloser, fileInfo, file, ptrType, sliceType, sliceType$1, structType, funcType, sliceType$2, sliceType$3, ptrType$1, ptrType$2, wd, _tuple, Open, OpenOS, Getwd, ReadDir, ReadDirOS, ReadFile, readAll;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	dlog = $packages["github.com/oakmound/oak/dlog"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	strings = $packages["strings"];
	time = $packages["time"];
	dummyfileinfo = $pkg.dummyfileinfo = $newType(0, $kindStruct, "fileutil.dummyfileinfo", true, "github.com/oakmound/oak/fileutil", false, function(file_, isdir_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.file = "";
			this.isdir = false;
			return;
		}
		this.file = file_;
		this.isdir = isdir_;
	});
	nopCloser = $pkg.nopCloser = $newType(0, $kindStruct, "fileutil.nopCloser", true, "github.com/oakmound/oak/fileutil", false, function(Reader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Reader = $ifaceNil;
			return;
		}
		this.Reader = Reader_;
	});
	fileInfo = $pkg.fileInfo = $newType(0, $kindStruct, "fileutil.fileInfo", true, "github.com/oakmound/oak/fileutil", false, function(size_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.size = new $Int64(0, 0);
			return;
		}
		this.size = size_;
	});
	file = $pkg.file = $newType(0, $kindStruct, "fileutil.file", true, "github.com/oakmound/oak/fileutil", false, function(Reader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Reader = ptrType$1.nil;
			return;
		}
		this.Reader = Reader_;
	});
	ptrType = $ptrType(time.Location);
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	structType = $structType("", []);
	funcType = $funcType([], [], false);
	sliceType$2 = $sliceType(os.FileInfo);
	sliceType$3 = $sliceType($String);
	ptrType$1 = $ptrType(bytes.Reader);
	ptrType$2 = $ptrType(file);
	dummyfileinfo.ptr.prototype.Name = function() {
		var dfi;
		dfi = this;
		return dfi.file;
	};
	dummyfileinfo.prototype.Name = function() { return this.$val.Name(); };
	dummyfileinfo.ptr.prototype.Size = function() {
		return new $Int64(0, 0);
	};
	dummyfileinfo.prototype.Size = function() { return this.$val.Size(); };
	dummyfileinfo.ptr.prototype.Mode = function() {
		return 268435456;
	};
	dummyfileinfo.prototype.Mode = function() { return this.$val.Mode(); };
	dummyfileinfo.ptr.prototype.ModTime = function() {
		return new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
	};
	dummyfileinfo.prototype.ModTime = function() { return this.$val.ModTime(); };
	dummyfileinfo.ptr.prototype.IsDir = function() {
		var dfi;
		dfi = this;
		return dfi.isdir;
	};
	dummyfileinfo.prototype.IsDir = function() { return this.$val.IsDir(); };
	dummyfileinfo.ptr.prototype.Sys = function() {
		return $ifaceNil;
	};
	dummyfileinfo.prototype.Sys = function() { return this.$val.Sys(); };
	nopCloser.ptr.prototype.Close = function() {
		return $ifaceNil;
	};
	nopCloser.prototype.Close = function() { return this.$val.Close(); };
	Open = function(file$1) {
		var _r, _r$1, _returncast, _tuple$1, _tuple$2, data, err, file$1, rel, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _returncast = $f._returncast; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; data = $f.data; err = $f.err; file$1 = $f.file$1; rel = $f.rel; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		rel = "";
		data = sliceType.nil;
		/* */ if (!($pkg.BindataFn === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($pkg.BindataFn === $throwNilPointerError)) { */ case 1:
			_tuple$1 = filepath.Rel(wd, file$1);
			rel = _tuple$1[0];
			err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 3:
				$r = dlog.Warn(new sliceType$1([err])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				rel = file$1;
			/* } */ case 4:
			_r = $pkg.BindataFn(rel); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			data = _tuple$2[0];
			err = _tuple$2[1];
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 7:
				$r = dlog.Verb(new sliceType$1([new $String("Found file in binary,"), new $String(rel)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [(x = new nopCloser.ptr(bytes.NewReader(data)), new x.constructor.elem(x)), err];
			/* } */ case 8:
			$r = dlog.Warn(new sliceType$1([new $String("File not found in binary"), new $String(rel)])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = OpenOS(file$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_returncast = _r$1;
		$s = -1; return [_returncast[0], _returncast[1]];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Open }; } $f._r = _r; $f._r$1 = _r$1; $f._returncast = _returncast; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.data = data; $f.err = err; $f.file$1 = file$1; $f.rel = rel; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Open = Open;
	fileInfo.ptr.prototype.Name = function() {
		var fi;
		fi = this;
		return "js_dummy";
	};
	fileInfo.prototype.Name = function() { return this.$val.Name(); };
	fileInfo.ptr.prototype.Size = function() {
		var fi;
		fi = this;
		return fi.size;
	};
	fileInfo.prototype.Size = function() { return this.$val.Size(); };
	fileInfo.ptr.prototype.Mode = function() {
		var fi;
		fi = this;
		return 0;
	};
	fileInfo.prototype.Mode = function() { return this.$val.Mode(); };
	fileInfo.ptr.prototype.ModTime = function() {
		var fi;
		fi = this;
		return new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
	};
	fileInfo.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileInfo.ptr.prototype.IsDir = function() {
		var fi;
		fi = this;
		return false;
	};
	fileInfo.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileInfo.ptr.prototype.Sys = function() {
		var fi;
		fi = this;
		return $ifaceNil;
	};
	fileInfo.prototype.Sys = function() { return this.$val.Sys(); };
	file.ptr.prototype.Close = function() {
		var f;
		f = this;
		return $ifaceNil;
	};
	file.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.Stat = function() {
		var f, fi;
		f = this;
		fi = new fileInfo.ptr(f.Reader.Size());
		return [new fi.constructor.elem(fi), $ifaceNil];
	};
	file.prototype.Stat = function() { return this.$val.Stat(); };
	OpenOS = function(path) {
		var _r, ch, content, data, err, f, path, req, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; ch = $f.ch; content = $f.content; data = $f.data; err = $f.err; f = $f.f; path = $f.path; req = $f.req; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ch = [ch];
		content = [content];
		err = [err];
		req = [req];
		err[0] = $ifaceNil;
		content[0] = null;
		ch[0] = new $Chan(structType, 0);
		req[0] = new ($global.XMLHttpRequest)();
		req[0].open($externalize("GET", $String), $externalize(path, $String), $externalize(true, $Bool));
		req[0].responseType = $externalize("arraybuffer", $String);
		req[0].addEventListener($externalize("load", $String), $externalize((function(ch, content, err, req) { return function $b() {
			var _arg, _r, _r$1, status, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; status = $f.status; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			$deferred.push([function(_arg) { $close(_arg); }, [ch[0]]]);
			status = $parseInt(req[0].status) >> 0;
			if (200 <= status && status < 400) {
				content[0] = req[0].response;
				$s = -1; return;
			}
			_r = fmt.Sprintf("http error: %d", new sliceType$1([new $Int(status)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err[0] = _r$1;
			$s = -1; return;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.status = status; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		}; })(ch, content, err, req), funcType));
		req[0].addEventListener($externalize("error", $String), $externalize((function(ch, content, err, req) { return function $b() {
			var _arg, _r, _r$1, $s, $deferred, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _r = $f._r; _r$1 = $f._r$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
			$deferred.push([function(_arg) { $close(_arg); }, [ch[0]]]);
			_r = fmt.Sprintf("XMLHttpRequest error: %s", new sliceType$1([new $String($internalize(req[0].statusText, $String))])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = errors.New(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err[0] = _r$1;
			$s = -1; return;
			/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._r = _r; $f._r$1 = _r$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
		}; })(ch, content, err, req), funcType));
		req[0].send();
		_r = $recv(ch[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		if (!($interfaceIsEqual(err[0], $ifaceNil))) {
			$s = -1; return [$ifaceNil, err[0]];
		}
		data = $assertType($internalize(new ($global.Uint8Array)(content[0]), $emptyInterface), sliceType);
		f = new file.ptr(bytes.NewReader(data));
		$s = -1; return [f, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: OpenOS }; } $f._r = _r; $f.ch = ch; $f.content = content; $f.data = data; $f.err = err; $f.f = f; $f.path = path; $f.req = req; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.OpenOS = OpenOS;
	Getwd = function() {
		var loc, win;
		win = $global.window;
		loc = $internalize(win.location.pathname, $String);
		return [filepath.Dir(loc), $ifaceNil];
	};
	$pkg.Getwd = Getwd;
	ReadDir = function(file$1) {
		var _i, _r, _ref, _tuple$1, _tuple$2, err, file$1, fis, i, rel, s, strs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; err = $f.err; file$1 = $f.file$1; fis = $f.fis; i = $f.i; rel = $f.rel; s = $f.s; strs = $f.strs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fis = sliceType$2.nil;
		err = $ifaceNil;
		rel = "";
		strs = sliceType$3.nil;
		/* */ if (!($pkg.BindataDir === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($pkg.BindataDir === $throwNilPointerError)) { */ case 1:
			$r = dlog.Verb(new sliceType$1([new $String("Bindata not nil, reading directory"), new $String(file$1)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_tuple$1 = filepath.Rel(wd, file$1);
			rel = _tuple$1[0];
			err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				$r = dlog.Warn(new sliceType$1([err])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				rel = file$1;
			/* } */ case 5:
			_r = $pkg.BindataDir(rel); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$2 = _r;
			strs = _tuple$2[0];
			err = _tuple$2[1];
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 8:
				fis = $makeSlice(sliceType$2, strs.$length);
				_ref = strs;
				_i = 0;
				/* while (true) { */ case 10:
					/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 11; continue; }
					i = _i;
					s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					((i < 0 || i >= fis.$length) ? ($throwRuntimeError("index out of range"), undefined) : fis.$array[fis.$offset + i] = (x = new dummyfileinfo.ptr(s, !strings.ContainsRune(s, 46)), new x.constructor.elem(x)));
					$r = dlog.Verb(new sliceType$1([new $String("Creating dummy file into for"), new $String(s), ((i < 0 || i >= fis.$length) ? ($throwRuntimeError("index out of range"), undefined) : fis.$array[fis.$offset + i])])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_i++;
				/* } */ $s = 10; continue; case 11:
				$s = -1; return [fis, $ifaceNil];
			/* } */ case 9:
			$r = dlog.Warn(new sliceType$1([err])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return ReadDirOS(file$1);
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadDir }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.err = err; $f.file$1 = file$1; $f.fis = fis; $f.i = i; $f.rel = rel; $f.s = s; $f.strs = strs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadDir = ReadDir;
	ReadDirOS = function(param) {
		var param;
		return [new sliceType$2([]), errors.New("ReadDir unsupported on JS without Bindata")];
	};
	$pkg.ReadDirOS = ReadDirOS;
	ReadFile = function(file$1) {
		var _r, _r$1, _r$2, _r$3, _r$4, _tuple$1, _tuple$2, _tuple$3, err, err$1, err$2, f, fi, file$1, n, rel, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; f = $f.f; fi = $f.fi; file$1 = $f.file$1; n = $f.n; rel = $f.rel; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!($pkg.BindataFn === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($pkg.BindataFn === $throwNilPointerError)) { */ case 1:
			_tuple$1 = filepath.Rel(wd, file$1);
			rel = _tuple$1[0];
			err = _tuple$1[1];
			/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 3:
				_r = $pkg.BindataFn(rel); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 4:
			$r = dlog.Warn(new sliceType$1([new $String("Error in rel"), err])); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r$1 = OpenOS(file$1); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$2 = _r$1;
		f = _tuple$2[0];
		err$1 = _tuple$2[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err$1];
		}
		n = new $Int64(0, 0);
		_r$2 = f.Stat(); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$3 = _r$2;
		fi = _tuple$3[0];
		err$2 = _tuple$3[1];
		/* */ if ($interfaceIsEqual(err$2, $ifaceNil)) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ($interfaceIsEqual(err$2, $ifaceNil)) { */ case 9:
			_r$3 = fi.Size(); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			size = _r$3;
			if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) {
				n = size;
			}
		/* } */ case 10:
		_r$4 = readAll(f, new $Int64(n.$high + 0, n.$low + 512)); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ReadFile }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.f = f; $f.fi = fi; $f.file$1 = file$1; $f.n = n; $f.rel = rel; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ReadFile = ReadFile;
	readAll = function(r, capacity) {
		var _r, _tmp, _tmp$1, _tuple$1, b, buf, capacity, err, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$1 = $f._tuple$1; b = $f.b; buf = $f.buf; capacity = $f.capacity; err = $f.err; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		b = sliceType.nil;
		err[0] = $ifaceNil;
		buf = bytes.NewBuffer($makeSlice(sliceType, 0, $flatten64(capacity)));
		$deferred.push([(function(err) { return function() {
			var _tuple$1, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple$1 = $assertType(e, $error, true);
			panicErr = _tuple$1[0];
			ok = _tuple$1[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err[0] = panicErr;
			} else {
				$panic(e);
			}
		}; })(err), []]);
		_r = buf.ReadFrom(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		err[0] = _tuple$1[1];
		_tmp = buf.Bytes();
		_tmp$1 = err[0];
		b = _tmp;
		err[0] = _tmp$1;
		$s = -1; return [b, err[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if (!$curGoroutine.asleep) { return  [b, err[0]]; } if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: readAll }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$1 = _tuple$1; $f.b = b; $f.buf = buf; $f.capacity = capacity; $f.err = err; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	dummyfileinfo.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [os.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	nopCloser.methods = [{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	fileInfo.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [os.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	ptrType$2.methods = [{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Stat", name: "Stat", pkg: "", typ: $funcType([], [os.FileInfo, $error], false)}];
	dummyfileinfo.init("github.com/oakmound/oak/fileutil", [{prop: "file", name: "file", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "isdir", name: "isdir", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	nopCloser.init("", [{prop: "Reader", name: "Reader", anonymous: true, exported: true, typ: io.Reader, tag: ""}]);
	fileInfo.init("github.com/oakmound/oak/fileutil", [{prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}]);
	file.init("", [{prop: "Reader", name: "Reader", anonymous: true, exported: true, typ: ptrType$1, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.BindataFn = $throwNilPointerError;
		$pkg.BindataDir = $throwNilPointerError;
		_tuple = Getwd();
		wd = _tuple[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/math/f64"] = (function() {
	var $pkg = {}, $init, Aff3;
	Aff3 = $pkg.Aff3 = $newType(48, $kindArray, "f64.Aff3", true, "golang.org/x/image/math/f64", true, null);
	Aff3.init($Float64, 6);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/color"] = (function() {
	var $pkg = {}, $init, Color, RGBA, RGBA64, NRGBA, NRGBA64, Alpha, Alpha16, Gray, Gray16, Model, modelFunc, Palette, YCbCr, NYCbCrA, CMYK, ptrType, funcType, ModelFunc, rgbaModel, rgba64Model, nrgbaModel, nrgba64Model, alphaModel, alpha16Model, grayModel, gray16Model, sqDiff, RGBToYCbCr, YCbCrToRGB, yCbCrModel, nYCbCrAModel, RGBToCMYK, CMYKToRGB, cmykModel;
	Color = $pkg.Color = $newType(8, $kindInterface, "color.Color", true, "image/color", true, null);
	RGBA = $pkg.RGBA = $newType(0, $kindStruct, "color.RGBA", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	RGBA64 = $pkg.RGBA64 = $newType(0, $kindStruct, "color.RGBA64", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	NRGBA = $pkg.NRGBA = $newType(0, $kindStruct, "color.NRGBA", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	NRGBA64 = $pkg.NRGBA64 = $newType(0, $kindStruct, "color.NRGBA64", true, "image/color", true, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	Alpha = $pkg.Alpha = $newType(0, $kindStruct, "color.Alpha", true, "image/color", true, function(A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.A = 0;
			return;
		}
		this.A = A_;
	});
	Alpha16 = $pkg.Alpha16 = $newType(0, $kindStruct, "color.Alpha16", true, "image/color", true, function(A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.A = 0;
			return;
		}
		this.A = A_;
	});
	Gray = $pkg.Gray = $newType(0, $kindStruct, "color.Gray", true, "image/color", true, function(Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			return;
		}
		this.Y = Y_;
	});
	Gray16 = $pkg.Gray16 = $newType(0, $kindStruct, "color.Gray16", true, "image/color", true, function(Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			return;
		}
		this.Y = Y_;
	});
	Model = $pkg.Model = $newType(8, $kindInterface, "color.Model", true, "image/color", true, null);
	modelFunc = $pkg.modelFunc = $newType(0, $kindStruct, "color.modelFunc", true, "image/color", false, function(f_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = $throwNilPointerError;
			return;
		}
		this.f = f_;
	});
	Palette = $pkg.Palette = $newType(12, $kindSlice, "color.Palette", true, "image/color", true, null);
	YCbCr = $pkg.YCbCr = $newType(0, $kindStruct, "color.YCbCr", true, "image/color", true, function(Y_, Cb_, Cr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			this.Cb = 0;
			this.Cr = 0;
			return;
		}
		this.Y = Y_;
		this.Cb = Cb_;
		this.Cr = Cr_;
	});
	NYCbCrA = $pkg.NYCbCrA = $newType(0, $kindStruct, "color.NYCbCrA", true, "image/color", true, function(YCbCr_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.YCbCr = new YCbCr.ptr(0, 0, 0);
			this.A = 0;
			return;
		}
		this.YCbCr = YCbCr_;
		this.A = A_;
	});
	CMYK = $pkg.CMYK = $newType(0, $kindStruct, "color.CMYK", true, "image/color", true, function(C_, M_, Y_, K_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = 0;
			this.M = 0;
			this.Y = 0;
			this.K = 0;
			return;
		}
		this.C = C_;
		this.M = M_;
		this.Y = Y_;
		this.K = K_;
	});
	ptrType = $ptrType(modelFunc);
	funcType = $funcType([Color], [Color], false);
	RGBA.ptr.prototype.RGBA = function() {
		var a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = (r | ((r << 8 >>> 0))) >>> 0;
		g = ((c.G >>> 0));
		g = (g | ((g << 8 >>> 0))) >>> 0;
		b = ((c.B >>> 0));
		b = (b | ((b << 8 >>> 0))) >>> 0;
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		return [r, g, b, a];
	};
	RGBA.prototype.RGBA = function() { return this.$val.RGBA(); };
	RGBA64.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		_tmp = ((c.R >>> 0));
		_tmp$1 = ((c.G >>> 0));
		_tmp$2 = ((c.B >>> 0));
		_tmp$3 = ((c.A >>> 0));
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	RGBA64.prototype.RGBA = function() { return this.$val.RGBA(); };
	NRGBA.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = (r | ((r << 8 >>> 0))) >>> 0;
		r = $imul(r, (((c.A >>> 0)))) >>> 0;
		r = (_q = r / (255), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = ((c.G >>> 0));
		g = (g | ((g << 8 >>> 0))) >>> 0;
		g = $imul(g, (((c.A >>> 0)))) >>> 0;
		g = (_q$1 = g / (255), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((c.B >>> 0));
		b = (b | ((b << 8 >>> 0))) >>> 0;
		b = $imul(b, (((c.A >>> 0)))) >>> 0;
		b = (_q$2 = b / (255), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		return [r, g, b, a];
	};
	NRGBA.prototype.RGBA = function() { return this.$val.RGBA(); };
	NRGBA64.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		r = ((c.R >>> 0));
		r = $imul(r, (((c.A >>> 0)))) >>> 0;
		r = (_q = r / (65535), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = ((c.G >>> 0));
		g = $imul(g, (((c.A >>> 0)))) >>> 0;
		g = (_q$1 = g / (65535), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((c.B >>> 0));
		b = $imul(b, (((c.A >>> 0)))) >>> 0;
		b = (_q$2 = b / (65535), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		a = ((c.A >>> 0));
		return [r, g, b, a];
	};
	NRGBA64.prototype.RGBA = function() { return this.$val.RGBA(); };
	Alpha.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		a = ((c.A >>> 0));
		a = (a | ((a << 8 >>> 0))) >>> 0;
		_tmp = a;
		_tmp$1 = a;
		_tmp$2 = a;
		_tmp$3 = a;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Alpha.prototype.RGBA = function() { return this.$val.RGBA(); };
	Alpha16.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		a = ((c.A >>> 0));
		_tmp = a;
		_tmp$1 = a;
		_tmp$2 = a;
		_tmp$3 = a;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Alpha16.prototype.RGBA = function() { return this.$val.RGBA(); };
	Gray.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r, y;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		y = ((c.Y >>> 0));
		y = (y | ((y << 8 >>> 0))) >>> 0;
		_tmp = y;
		_tmp$1 = y;
		_tmp$2 = y;
		_tmp$3 = 65535;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Gray.prototype.RGBA = function() { return this.$val.RGBA(); };
	Gray16.ptr.prototype.RGBA = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, g, r, y;
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		y = ((c.Y >>> 0));
		_tmp = y;
		_tmp$1 = y;
		_tmp$2 = y;
		_tmp$3 = 65535;
		r = _tmp;
		g = _tmp$1;
		b = _tmp$2;
		a = _tmp$3;
		return [r, g, b, a];
	};
	Gray16.prototype.RGBA = function() { return this.$val.RGBA(); };
	ModelFunc = function(f) {
		var f;
		return new modelFunc.ptr(f);
	};
	$pkg.ModelFunc = ModelFunc;
	modelFunc.ptr.prototype.Convert = function(c) {
		var _r, c, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = m.f(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: modelFunc.ptr.prototype.Convert }; } $f._r = _r; $f.c = c; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	modelFunc.prototype.Convert = function(c) { return this.$val.Convert(c); };
	rgbaModel = function(c) {
		var _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, RGBA, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		$s = -1; return (x = new RGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: rgbaModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	rgba64Model = function(c) {
		var _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, RGBA64, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		$s = -1; return (x = new RGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), ((a << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: rgba64Model }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	nrgbaModel = function(c) {
		var _q, _q$1, _q$2, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, NRGBA, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		if (a === 65535) {
			$s = -1; return (x = new NRGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), 255), new x.constructor.elem(x));
		}
		if (a === 0) {
			$s = -1; return (x$1 = new NRGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		$s = -1; return (x$2 = new NRGBA.ptr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)), (((a >>> 8 >>> 0) << 24 >>> 24))), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nrgbaModel }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	nrgba64Model = function(c) {
		var _q, _q$1, _q$2, _r, _tuple, _tuple$1, a, b, c, g, ok, r, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, NRGBA64, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		a = _tuple$1[3];
		if (a === 65535) {
			$s = -1; return (x = new NRGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), 65535), new x.constructor.elem(x));
		}
		if (a === 0) {
			$s = -1; return (x$1 = new NRGBA64.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1));
		}
		r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		$s = -1; return (x$2 = new NRGBA64.ptr(((r << 16 >>> 16)), ((g << 16 >>> 16)), ((b << 16 >>> 16)), ((a << 16 >>> 16))), new x$2.constructor.elem(x$2));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nrgba64Model }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	alphaModel = function(c) {
		var _r, _tuple, _tuple$1, a, c, ok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; c = $f.c; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Alpha, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		a = _tuple$1[3];
		$s = -1; return (x = new Alpha.ptr((((a >>> 8 >>> 0) << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: alphaModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.c = c; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	alpha16Model = function(c) {
		var _r, _tuple, _tuple$1, a, c, ok, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; c = $f.c; ok = $f.ok; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Alpha16, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		a = _tuple$1[3];
		$s = -1; return (x = new Alpha16.ptr(((a << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: alpha16Model }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.c = c; $f.ok = ok; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	grayModel = function(c) {
		var _r, _tuple, _tuple$1, b, c, g, ok, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Gray, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		y = ((((($imul(19595, r) >>> 0) + ($imul(38470, g) >>> 0) >>> 0) + ($imul(7471, b) >>> 0) >>> 0) + 32768 >>> 0)) >>> 24 >>> 0;
		$s = -1; return (x = new Gray.ptr(((y << 24 >>> 24))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: grayModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	gray16Model = function(c) {
		var _r, _tuple, _tuple$1, b, c, g, ok, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, Gray16, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		y = ((((($imul(19595, r) >>> 0) + ($imul(38470, g) >>> 0) >>> 0) + ($imul(7471, b) >>> 0) >>> 0) + 32768 >>> 0)) >>> 16 >>> 0;
		$s = -1; return (x = new Gray16.ptr(((y << 16 >>> 16))), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: gray16Model }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Palette.prototype.Convert = function(c) {
		var _r, c, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (p.$length === 0) {
			$s = -1; return $ifaceNil;
		}
		_r = p.Index(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return (x = _r, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Palette.prototype.Convert }; } $f._r = _r; $f.c = c; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Palette).prototype.Convert = function(c) { return this.$get().Convert(c); };
	Palette.prototype.Index = function(c) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, bestSum, c, ca, cb, cg, cr, i, p, ret, sum, v, va, vb, vg, vr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; bestSum = $f.bestSum; c = $f.c; ca = $f.ca; cb = $f.cb; cg = $f.cg; cr = $f.cr; i = $f.i; p = $f.p; ret = $f.ret; sum = $f.sum; v = $f.v; va = $f.va; vb = $f.vb; vg = $f.vg; vr = $f.vr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cr = _tuple[0];
		cg = _tuple[1];
		cb = _tuple[2];
		ca = _tuple[3];
		_tmp = 0;
		_tmp$1 = 4294967295;
		ret = _tmp;
		bestSum = _tmp$1;
		_ref = p;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$1 = v.RGBA(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			vr = _tuple$1[0];
			vg = _tuple$1[1];
			vb = _tuple$1[2];
			va = _tuple$1[3];
			sum = ((sqDiff(cr, vr) + sqDiff(cg, vg) >>> 0) + sqDiff(cb, vb) >>> 0) + sqDiff(ca, va) >>> 0;
			if (sum < bestSum) {
				if (sum === 0) {
					$s = -1; return i;
				}
				_tmp$2 = i;
				_tmp$3 = sum;
				ret = _tmp$2;
				bestSum = _tmp$3;
			}
			_i++;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Palette.prototype.Index }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.bestSum = bestSum; $f.c = c; $f.ca = ca; $f.cb = cb; $f.cg = cg; $f.cr = cr; $f.i = i; $f.p = p; $f.ret = ret; $f.sum = sum; $f.v = v; $f.va = va; $f.vb = vb; $f.vg = vg; $f.vr = vr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Palette).prototype.Index = function(c) { return this.$get().Index(c); };
	sqDiff = function(x, y) {
		var d, x, y;
		d = 0;
		if (x > y) {
			d = x - y >>> 0;
		} else {
			d = y - x >>> 0;
		}
		return (($imul(d, d) >>> 0)) >>> 2 >>> 0;
	};
	RGBToYCbCr = function(r, g, b) {
		var b, b1, cb, cr, g, g1, r, r1, yy;
		r1 = ((r >> 0));
		g1 = ((g >> 0));
		b1 = ((b >> 0));
		yy = ((((($imul(19595, r1)) + ($imul(38470, g1)) >> 0) + ($imul(7471, b1)) >> 0) + 32768 >> 0)) >> 16 >> 0;
		cb = ((($imul(-11056, r1)) - ($imul(21712, g1)) >> 0) + ($imul(32768, b1)) >> 0) + 8421376 >> 0;
		if (((((cb >>> 0)) & 4278190080) >>> 0) === 0) {
			cb = (cb >> $min((16), 31)) >> 0;
		} else {
			cb = ~((cb >> 31 >> 0)) >> 0;
		}
		cr = ((($imul(32768, r1)) - ($imul(27440, g1)) >> 0) - ($imul(5328, b1)) >> 0) + 8421376 >> 0;
		if (((((cr >>> 0)) & 4278190080) >>> 0) === 0) {
			cr = (cr >> $min((16), 31)) >> 0;
		} else {
			cr = ~((cr >> 31 >> 0)) >> 0;
		}
		return [((yy << 24 >>> 24)), ((cb << 24 >>> 24)), ((cr << 24 >>> 24))];
	};
	$pkg.RGBToYCbCr = RGBToYCbCr;
	YCbCrToRGB = function(y, cb, cr) {
		var b, cb, cb1, cr, cr1, g, r, y, yy1;
		yy1 = $imul(((y >> 0)), 65793);
		cb1 = ((cb >> 0)) - 128 >> 0;
		cr1 = ((cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((16), 31)) >> 0;
		} else {
			r = ~((r >> 31 >> 0)) >> 0;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((16), 31)) >> 0;
		} else {
			g = ~((g >> 31 >> 0)) >> 0;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((16), 31)) >> 0;
		} else {
			b = ~((b >> 31 >> 0)) >> 0;
		}
		return [((r << 24 >>> 24)), ((g << 24 >>> 24)), ((b << 24 >>> 24))];
	};
	$pkg.YCbCrToRGB = YCbCrToRGB;
	YCbCr.ptr.prototype.RGBA = function() {
		var b, c, cb1, cr1, g, r, yy1;
		c = this;
		yy1 = $imul(((c.Y >> 0)), 65793);
		cb1 = ((c.Cb >> 0)) - 128 >> 0;
		cr1 = ((c.Cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((8), 31)) >> 0;
		} else {
			r = (~((r >> 31 >> 0)) >> 0) & 65535;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((8), 31)) >> 0;
		} else {
			g = (~((g >> 31 >> 0)) >> 0) & 65535;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((8), 31)) >> 0;
		} else {
			b = (~((b >> 31 >> 0)) >> 0) & 65535;
		}
		return [((r >>> 0)), ((g >>> 0)), ((b >>> 0)), 65535];
	};
	YCbCr.prototype.RGBA = function() { return this.$val.RGBA(); };
	yCbCrModel = function(c) {
		var _r, _tuple, _tuple$1, _tuple$2, b, c, g, ok, r, u, v, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; c = $f.c; g = $f.g; ok = $f.ok; r = $f.r; u = $f.u; v = $f.v; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, YCbCr, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		_tuple$2 = RGBToYCbCr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		y = _tuple$2[0];
		u = _tuple$2[1];
		v = _tuple$2[2];
		$s = -1; return (x = new YCbCr.ptr(y, u, v), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: yCbCrModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.c = c; $f.g = g; $f.ok = ok; $f.r = r; $f.u = u; $f.v = v; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NYCbCrA.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, a, b, c, cb1, cr1, g, r, yy1;
		c = this;
		yy1 = $imul(((c.YCbCr.Y >> 0)), 65793);
		cb1 = ((c.YCbCr.Cb >> 0)) - 128 >> 0;
		cr1 = ((c.YCbCr.Cr >> 0)) - 128 >> 0;
		r = yy1 + ($imul(91881, cr1)) >> 0;
		if (((((r >>> 0)) & 4278190080) >>> 0) === 0) {
			r = (r >> $min((8), 31)) >> 0;
		} else {
			r = (~((r >> 31 >> 0)) >> 0) & 65535;
		}
		g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
		if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
			g = (g >> $min((8), 31)) >> 0;
		} else {
			g = (~((g >> 31 >> 0)) >> 0) & 65535;
		}
		b = yy1 + ($imul(116130, cb1)) >> 0;
		if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
			b = (b >> $min((8), 31)) >> 0;
		} else {
			b = (~((b >> 31 >> 0)) >> 0) & 65535;
		}
		a = $imul(((c.A >>> 0)), 257) >>> 0;
		return [(_q = ($imul(((r >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(((g >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")), (_q$2 = ($imul(((b >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")), a];
	};
	NYCbCrA.prototype.RGBA = function() { return this.$val.RGBA(); };
	nYCbCrAModel = function(c) {
		var _q, _q$1, _q$2, _r, _ref, _tuple, _tuple$1, a, b, c, c$1, c$2, g, r, u, v, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _r = $f._r; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; b = $f.b; c = $f.c; c$1 = $f.c$1; c$2 = $f.c$2; g = $f.g; r = $f.r; u = $f.u; v = $f.v; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_ref = c;
		if ($assertType(_ref, NYCbCrA, true)[1]) {
			c$1 = $clone(_ref.$val, NYCbCrA);
			$s = -1; return new c$1.constructor.elem(c$1);
		} else if ($assertType(_ref, YCbCr, true)[1]) {
			c$2 = $clone(_ref.$val, YCbCr);
			$s = -1; return (x = new NYCbCrA.ptr($clone(c$2, YCbCr), 255), new x.constructor.elem(x));
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		if (!((a === 0))) {
			r = (_q = (($imul(r, 65535) >>> 0)) / a, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			g = (_q$1 = (($imul(g, 65535) >>> 0)) / a, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			b = (_q$2 = (($imul(b, 65535) >>> 0)) / a, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		_tuple$1 = RGBToYCbCr((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		y = _tuple$1[0];
		u = _tuple$1[1];
		v = _tuple$1[2];
		$s = -1; return (x$1 = new NYCbCrA.ptr(new YCbCr.ptr(y, u, v), (((a >>> 8 >>> 0) << 24 >>> 24))), new x$1.constructor.elem(x$1));
		/* */ } return; } if ($f === undefined) { $f = { $blk: nYCbCrAModel }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._r = _r; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.b = b; $f.c = c; $f.c$1 = c$1; $f.c$2 = c$2; $f.g = g; $f.r = r; $f.u = u; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBToCMYK = function(r, g, b) {
		var _q, _q$1, _q$2, b, bb, c, g, gg, m, r, rr, w, y;
		rr = ((r >>> 0));
		gg = ((g >>> 0));
		bb = ((b >>> 0));
		w = rr;
		if (w < gg) {
			w = gg;
		}
		if (w < bb) {
			w = bb;
		}
		if (w === 0) {
			return [0, 0, 0, 255];
		}
		c = (_q = ($imul(((w - rr >>> 0)), 255) >>> 0) / w, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		m = (_q$1 = ($imul(((w - gg >>> 0)), 255) >>> 0) / w, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		y = (_q$2 = ($imul(((w - bb >>> 0)), 255) >>> 0) / w, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [((c << 24 >>> 24)), ((m << 24 >>> 24)), ((y << 24 >>> 24)), (((255 - w >>> 0) << 24 >>> 24))];
	};
	$pkg.RGBToCMYK = RGBToCMYK;
	CMYKToRGB = function(c, m, y, k) {
		var _q, _q$1, _q$2, b, c, g, k, m, r, w, y;
		w = 65535 - ($imul(((k >>> 0)), 257) >>> 0) >>> 0;
		r = (_q = ($imul(((65535 - ($imul(((c >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = ($imul(((65535 - ($imul(((m >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = ($imul(((65535 - ($imul(((y >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [(((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24))];
	};
	$pkg.CMYKToRGB = CMYKToRGB;
	CMYK.ptr.prototype.RGBA = function() {
		var _q, _q$1, _q$2, b, c, g, r, w;
		c = this;
		w = 65535 - ($imul(((c.K >>> 0)), 257) >>> 0) >>> 0;
		r = (_q = ($imul(((65535 - ($imul(((c.C >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		g = (_q$1 = ($imul(((65535 - ($imul(((c.M >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		b = (_q$2 = ($imul(((65535 - ($imul(((c.Y >>> 0)), 257) >>> 0) >>> 0)), w) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
		return [r, g, b, 65535];
	};
	CMYK.prototype.RGBA = function() { return this.$val.RGBA(); };
	cmykModel = function(c) {
		var _r, _tuple, _tuple$1, _tuple$2, b, c, cc, g, kk, mm, ok, r, x, yy, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; b = $f.b; c = $f.c; cc = $f.cc; g = $f.g; kk = $f.kk; mm = $f.mm; ok = $f.ok; r = $f.r; x = $f.x; yy = $f.yy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple = $assertType(c, CMYK, true);
		ok = _tuple[1];
		if (ok) {
			$s = -1; return c;
		}
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		r = _tuple$1[0];
		g = _tuple$1[1];
		b = _tuple$1[2];
		_tuple$2 = RGBToCMYK((((r >>> 8 >>> 0) << 24 >>> 24)), (((g >>> 8 >>> 0) << 24 >>> 24)), (((b >>> 8 >>> 0) << 24 >>> 24)));
		cc = _tuple$2[0];
		mm = _tuple$2[1];
		yy = _tuple$2[2];
		kk = _tuple$2[3];
		$s = -1; return (x = new CMYK.ptr(cc, mm, yy, kk), new x.constructor.elem(x));
		/* */ } return; } if ($f === undefined) { $f = { $blk: cmykModel }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.b = b; $f.c = c; $f.cc = cc; $f.g = g; $f.kk = kk; $f.mm = mm; $f.ok = ok; $f.r = r; $f.x = x; $f.yy = yy; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	RGBA64.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NRGBA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NRGBA64.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Alpha.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Alpha16.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Gray.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Gray16.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	ptrType.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}];
	Palette.methods = [{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([Color], [$Int], false)}];
	YCbCr.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	NYCbCrA.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	CMYK.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}];
	Color.init([{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}]);
	RGBA.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	RGBA64.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	NRGBA.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	NRGBA64.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Uint16, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Alpha.init("", [{prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	Alpha16.init("", [{prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Gray.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	Gray16.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint16, tag: ""}]);
	Model.init([{prop: "Convert", name: "Convert", pkg: "", typ: $funcType([Color], [Color], false)}]);
	modelFunc.init("image/color", [{prop: "f", name: "f", anonymous: false, exported: false, typ: funcType, tag: ""}]);
	Palette.init(Color);
	YCbCr.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Cb", name: "Cb", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Cr", name: "Cr", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	NYCbCrA.init("", [{prop: "YCbCr", name: "YCbCr", anonymous: true, exported: true, typ: YCbCr, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	CMYK.init("", [{prop: "C", name: "C", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "M", name: "M", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Uint8, tag: ""}, {prop: "K", name: "K", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$pkg.RGBAModel = ModelFunc(rgbaModel);
		$pkg.RGBA64Model = ModelFunc(rgba64Model);
		$pkg.NRGBAModel = ModelFunc(nrgbaModel);
		$pkg.NRGBA64Model = ModelFunc(nrgba64Model);
		$pkg.AlphaModel = ModelFunc(alphaModel);
		$pkg.Alpha16Model = ModelFunc(alpha16Model);
		$pkg.GrayModel = ModelFunc(grayModel);
		$pkg.Gray16Model = ModelFunc(gray16Model);
		$pkg.Black = new Gray16.ptr(0);
		$pkg.White = new Gray16.ptr(65535);
		$pkg.Transparent = new Alpha16.ptr(0);
		$pkg.Opaque = new Alpha16.ptr(65535);
		$pkg.YCbCrModel = ModelFunc(yCbCrModel);
		$pkg.NYCbCrAModel = ModelFunc(nYCbCrAModel);
		$pkg.CMYKModel = ModelFunc(cmykModel);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image"] = (function() {
	var $pkg = {}, $init, bufio, errors, color, io, strconv, format, Point, Rectangle, Config, Image, RGBA, RGBA64, NRGBA, NRGBA64, Alpha, Alpha16, Gray, Gray16, CMYK, Paletted, Uniform, YCbCrSubsampleRatio, YCbCr, sliceType, sliceType$1, arrayType, funcType, funcType$1, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, formats, x, x$1, x$2, x$3, RegisterFormat, Pt, Rect, NewRGBA, NewRGBA64, NewNRGBA, NewNRGBA64, NewAlpha, NewGray, NewGray16, NewCMYK, NewPaletted, NewUniform, yCbCrSize, NewYCbCr;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	format = $pkg.format = $newType(0, $kindStruct, "image.format", true, "image", false, function(name_, magic_, decode_, decodeConfig_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.magic = "";
			this.decode = $throwNilPointerError;
			this.decodeConfig = $throwNilPointerError;
			return;
		}
		this.name = name_;
		this.magic = magic_;
		this.decode = decode_;
		this.decodeConfig = decodeConfig_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "image.Point", true, "image", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle = $pkg.Rectangle = $newType(0, $kindStruct, "image.Rectangle", true, "image", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point.ptr(0, 0);
			this.Max = new Point.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	Config = $pkg.Config = $newType(0, $kindStruct, "image.Config", true, "image", true, function(ColorModel_, Width_, Height_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ColorModel = $ifaceNil;
			this.Width = 0;
			this.Height = 0;
			return;
		}
		this.ColorModel = ColorModel_;
		this.Width = Width_;
		this.Height = Height_;
	});
	Image = $pkg.Image = $newType(8, $kindInterface, "image.Image", true, "image", true, null);
	RGBA = $pkg.RGBA = $newType(0, $kindStruct, "image.RGBA", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	RGBA64 = $pkg.RGBA64 = $newType(0, $kindStruct, "image.RGBA64", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	NRGBA = $pkg.NRGBA = $newType(0, $kindStruct, "image.NRGBA", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	NRGBA64 = $pkg.NRGBA64 = $newType(0, $kindStruct, "image.NRGBA64", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Alpha = $pkg.Alpha = $newType(0, $kindStruct, "image.Alpha", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Alpha16 = $pkg.Alpha16 = $newType(0, $kindStruct, "image.Alpha16", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Gray = $pkg.Gray = $newType(0, $kindStruct, "image.Gray", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Gray16 = $pkg.Gray16 = $newType(0, $kindStruct, "image.Gray16", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	CMYK = $pkg.CMYK = $newType(0, $kindStruct, "image.CMYK", true, "image", true, function(Pix_, Stride_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
	});
	Paletted = $pkg.Paletted = $newType(0, $kindStruct, "image.Paletted", true, "image", true, function(Pix_, Stride_, Rect_, Palette_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Pix = sliceType$1.nil;
			this.Stride = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			this.Palette = color.Palette.nil;
			return;
		}
		this.Pix = Pix_;
		this.Stride = Stride_;
		this.Rect = Rect_;
		this.Palette = Palette_;
	});
	Uniform = $pkg.Uniform = $newType(0, $kindStruct, "image.Uniform", true, "image", true, function(C_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.C = $ifaceNil;
			return;
		}
		this.C = C_;
	});
	YCbCrSubsampleRatio = $pkg.YCbCrSubsampleRatio = $newType(4, $kindInt, "image.YCbCrSubsampleRatio", true, "image", true, null);
	YCbCr = $pkg.YCbCr = $newType(0, $kindStruct, "image.YCbCr", true, "image", true, function(Y_, Cb_, Cr_, YStride_, CStride_, SubsampleRatio_, Rect_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = sliceType$1.nil;
			this.Cb = sliceType$1.nil;
			this.Cr = sliceType$1.nil;
			this.YStride = 0;
			this.CStride = 0;
			this.SubsampleRatio = 0;
			this.Rect = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
			return;
		}
		this.Y = Y_;
		this.Cb = Cb_;
		this.Cr = Cr_;
		this.YStride = YStride_;
		this.CStride = CStride_;
		this.SubsampleRatio = SubsampleRatio_;
		this.Rect = Rect_;
	});
	sliceType = $sliceType(format);
	sliceType$1 = $sliceType($Uint8);
	arrayType = $arrayType($Bool, 256);
	funcType = $funcType([io.Reader], [Image, $error], false);
	funcType$1 = $funcType([io.Reader], [Config, $error], false);
	ptrType = $ptrType(RGBA);
	ptrType$1 = $ptrType(RGBA64);
	ptrType$2 = $ptrType(NRGBA);
	ptrType$3 = $ptrType(NRGBA64);
	ptrType$4 = $ptrType(Alpha);
	ptrType$5 = $ptrType(Alpha16);
	ptrType$6 = $ptrType(Gray);
	ptrType$7 = $ptrType(Gray16);
	ptrType$8 = $ptrType(CMYK);
	ptrType$9 = $ptrType(Paletted);
	ptrType$10 = $ptrType(Uniform);
	ptrType$11 = $ptrType(YCbCr);
	RegisterFormat = function(name, magic, decode, decodeConfig) {
		var decode, decodeConfig, magic, name;
		formats = $append(formats, new format.ptr(name, magic, decode, decodeConfig));
	};
	$pkg.RegisterFormat = RegisterFormat;
	Point.ptr.prototype.String = function() {
		var p;
		p = this;
		return "(" + strconv.Itoa(p.X) + "," + strconv.Itoa(p.Y) + ")";
	};
	Point.prototype.String = function() { return this.$val.String(); };
	Point.ptr.prototype.Add = function(q) {
		var p, q;
		p = this;
		return new Point.ptr(p.X + q.X >> 0, p.Y + q.Y >> 0);
	};
	Point.prototype.Add = function(q) { return this.$val.Add(q); };
	Point.ptr.prototype.Sub = function(q) {
		var p, q;
		p = this;
		return new Point.ptr(p.X - q.X >> 0, p.Y - q.Y >> 0);
	};
	Point.prototype.Sub = function(q) { return this.$val.Sub(q); };
	Point.ptr.prototype.Mul = function(k) {
		var k, p;
		p = this;
		return new Point.ptr($imul(p.X, k), $imul(p.Y, k));
	};
	Point.prototype.Mul = function(k) { return this.$val.Mul(k); };
	Point.ptr.prototype.Div = function(k) {
		var _q, _q$1, k, p;
		p = this;
		return new Point.ptr((_q = p.X / k, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = p.Y / k, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point.prototype.Div = function(k) { return this.$val.Div(k); };
	Point.ptr.prototype.In = function(r) {
		var p, r;
		p = this;
		return r.Min.X <= p.X && p.X < r.Max.X && r.Min.Y <= p.Y && p.Y < r.Max.Y;
	};
	Point.prototype.In = function(r) { return this.$val.In(r); };
	Point.ptr.prototype.Mod = function(r) {
		var _r, _r$1, _tmp, _tmp$1, h, p, r, w;
		p = this;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		Point.copy(p, $clone(p, Point).Sub($clone(r.Min, Point)));
		p.X = (_r = p.X % w, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (p.X < 0) {
			p.X = p.X + (w) >> 0;
		}
		p.Y = (_r$1 = p.Y % h, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (p.Y < 0) {
			p.Y = p.Y + (h) >> 0;
		}
		return $clone(p, Point).Add($clone(r.Min, Point));
	};
	Point.prototype.Mod = function(r) { return this.$val.Mod(r); };
	Point.ptr.prototype.Eq = function(q) {
		var p, q;
		p = this;
		return $equal(p, q, Point);
	};
	Point.prototype.Eq = function(q) { return this.$val.Eq(q); };
	Pt = function(X, Y) {
		var X, Y;
		return new Point.ptr(X, Y);
	};
	$pkg.Pt = Pt;
	Rectangle.ptr.prototype.String = function() {
		var r;
		r = this;
		return $clone(r.Min, Point).String() + "-" + $clone(r.Max, Point).String();
	};
	Rectangle.prototype.String = function() { return this.$val.String(); };
	Rectangle.ptr.prototype.Dx = function() {
		var r;
		r = this;
		return r.Max.X - r.Min.X >> 0;
	};
	Rectangle.prototype.Dx = function() { return this.$val.Dx(); };
	Rectangle.ptr.prototype.Dy = function() {
		var r;
		r = this;
		return r.Max.Y - r.Min.Y >> 0;
	};
	Rectangle.prototype.Dy = function() { return this.$val.Dy(); };
	Rectangle.ptr.prototype.Size = function() {
		var r;
		r = this;
		return new Point.ptr(r.Max.X - r.Min.X >> 0, r.Max.Y - r.Min.Y >> 0);
	};
	Rectangle.prototype.Size = function() { return this.$val.Size(); };
	Rectangle.ptr.prototype.Add = function(p) {
		var p, r;
		r = this;
		return new Rectangle.ptr(new Point.ptr(r.Min.X + p.X >> 0, r.Min.Y + p.Y >> 0), new Point.ptr(r.Max.X + p.X >> 0, r.Max.Y + p.Y >> 0));
	};
	Rectangle.prototype.Add = function(p) { return this.$val.Add(p); };
	Rectangle.ptr.prototype.Sub = function(p) {
		var p, r;
		r = this;
		return new Rectangle.ptr(new Point.ptr(r.Min.X - p.X >> 0, r.Min.Y - p.Y >> 0), new Point.ptr(r.Max.X - p.X >> 0, r.Max.Y - p.Y >> 0));
	};
	Rectangle.prototype.Sub = function(p) { return this.$val.Sub(p); };
	Rectangle.ptr.prototype.Inset = function(n) {
		var _q, _q$1, n, r;
		r = this;
		if ($clone(r, Rectangle).Dx() < ($imul(2, n))) {
			r.Min.X = (_q = ((r.Min.X + r.Max.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			r.Max.X = r.Min.X;
		} else {
			r.Min.X = r.Min.X + (n) >> 0;
			r.Max.X = r.Max.X - (n) >> 0;
		}
		if ($clone(r, Rectangle).Dy() < ($imul(2, n))) {
			r.Min.Y = (_q$1 = ((r.Min.Y + r.Max.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			r.Max.Y = r.Min.Y;
		} else {
			r.Min.Y = r.Min.Y + (n) >> 0;
			r.Max.Y = r.Max.Y - (n) >> 0;
		}
		return r;
	};
	Rectangle.prototype.Inset = function(n) { return this.$val.Inset(n); };
	Rectangle.ptr.prototype.Intersect = function(s) {
		var r, s;
		r = this;
		if (r.Min.X < s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y < s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X > s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y > s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		if ($clone(r, Rectangle).Empty()) {
			return $pkg.ZR;
		}
		return r;
	};
	Rectangle.prototype.Intersect = function(s) { return this.$val.Intersect(s); };
	Rectangle.ptr.prototype.Union = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle).Empty()) {
			return s;
		}
		if ($clone(s, Rectangle).Empty()) {
			return r;
		}
		if (r.Min.X > s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y > s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X < s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y < s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		return r;
	};
	Rectangle.prototype.Union = function(s) { return this.$val.Union(s); };
	Rectangle.ptr.prototype.Empty = function() {
		var r;
		r = this;
		return r.Min.X >= r.Max.X || r.Min.Y >= r.Max.Y;
	};
	Rectangle.prototype.Empty = function() { return this.$val.Empty(); };
	Rectangle.ptr.prototype.Eq = function(s) {
		var r, s;
		r = this;
		return $equal(r, s, Rectangle) || $clone(r, Rectangle).Empty() && $clone(s, Rectangle).Empty();
	};
	Rectangle.prototype.Eq = function(s) { return this.$val.Eq(s); };
	Rectangle.ptr.prototype.Overlaps = function(s) {
		var r, s;
		r = this;
		return !$clone(r, Rectangle).Empty() && !$clone(s, Rectangle).Empty() && r.Min.X < s.Max.X && s.Min.X < r.Max.X && r.Min.Y < s.Max.Y && s.Min.Y < r.Max.Y;
	};
	Rectangle.prototype.Overlaps = function(s) { return this.$val.Overlaps(s); };
	Rectangle.ptr.prototype.In = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle).Empty()) {
			return true;
		}
		return s.Min.X <= r.Min.X && r.Max.X <= s.Max.X && s.Min.Y <= r.Min.Y && r.Max.Y <= s.Max.Y;
	};
	Rectangle.prototype.In = function(s) { return this.$val.In(s); };
	Rectangle.ptr.prototype.Canon = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, r;
		r = this;
		if (r.Max.X < r.Min.X) {
			_tmp = r.Max.X;
			_tmp$1 = r.Min.X;
			r.Min.X = _tmp;
			r.Max.X = _tmp$1;
		}
		if (r.Max.Y < r.Min.Y) {
			_tmp$2 = r.Max.Y;
			_tmp$3 = r.Min.Y;
			r.Min.Y = _tmp$2;
			r.Max.Y = _tmp$3;
		}
		return r;
	};
	Rectangle.prototype.Canon = function() { return this.$val.Canon(); };
	Rectangle.ptr.prototype.At = function(x$4, y) {
		var r, x$4, x$5, x$6, y;
		r = this;
		if ($clone((new Point.ptr(x$4, y)), Point).In($clone(r, Rectangle))) {
			return (x$5 = color.Opaque, new x$5.constructor.elem(x$5));
		}
		return (x$6 = color.Transparent, new x$6.constructor.elem(x$6));
	};
	Rectangle.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Rectangle.ptr.prototype.Bounds = function() {
		var r;
		r = this;
		return r;
	};
	Rectangle.prototype.Bounds = function() { return this.$val.Bounds(); };
	Rectangle.ptr.prototype.ColorModel = function() {
		var r;
		r = this;
		return color.Alpha16Model;
	};
	Rectangle.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Rect = function(x0, y0, x1, y1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, x0, x1, y0, y1;
		if (x0 > x1) {
			_tmp = x1;
			_tmp$1 = x0;
			x0 = _tmp;
			x1 = _tmp$1;
		}
		if (y0 > y1) {
			_tmp$2 = y1;
			_tmp$3 = y0;
			y0 = _tmp$2;
			y1 = _tmp$3;
		}
		return new Rectangle.ptr(new Point.ptr(x0, y0), new Point.ptr(x1, y1));
	};
	$pkg.Rect = Rect;
	RGBA.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.RGBAModel;
	};
	RGBA.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	RGBA.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	RGBA.prototype.Bounds = function() { return this.$val.Bounds(); };
	RGBA.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.RGBAAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	RGBA.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	RGBA.ptr.prototype.RGBAAt = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.RGBA.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.RGBA.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	RGBA.prototype.RGBAAt = function(x$4, y) { return this.$val.RGBAAt(x$4, y); };
	RGBA.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	RGBA.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	RGBA.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.RGBAModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.RGBA), color.RGBA);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RGBA.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	RGBA.ptr.prototype.SetRGBA = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.A));
	};
	RGBA.prototype.SetRGBA = function(x$4, y, c) { return this.$val.SetRGBA(x$4, y, c); };
	RGBA.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new RGBA.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new RGBA.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	RGBA.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	RGBA.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 3;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 4);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (4) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	RGBA.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewRGBA = function(r) {
		var _tmp, _tmp$1, buf, h, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		buf = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new RGBA.ptr(buf, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewRGBA = NewRGBA;
	RGBA64.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.RGBA64Model;
	};
	RGBA64.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	RGBA64.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	RGBA64.prototype.Bounds = function() { return this.$val.Bounds(); };
	RGBA64.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.RGBA64At(x$4, y), new x$5.constructor.elem(x$5));
	};
	RGBA64.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	RGBA64.ptr.prototype.RGBA64At = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.RGBA64.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.RGBA64.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0, (((((x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0, (((((x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0, (((((x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0);
	};
	RGBA64.prototype.RGBA64At = function(x$4, y) { return this.$val.RGBA64At(x$4, y); };
	RGBA64.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 8)) >> 0;
	};
	RGBA64.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	RGBA64.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$20 = $f.x$20; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.RGBA64Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.RGBA64), color.RGBA64);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c1.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c1.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c1.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c1.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RGBA64.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$20 = x$20; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	RGBA64.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	RGBA64.ptr.prototype.SetRGBA64 = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c.A << 24 >>> 24))));
	};
	RGBA64.prototype.SetRGBA64 = function(x$4, y, c) { return this.$val.SetRGBA64(x$4, y, c); };
	RGBA64.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new RGBA64.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new RGBA64.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	RGBA64.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	RGBA64.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 6;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 8);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (8) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	RGBA64.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewRGBA64 = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(8, w)), h)));
		return new RGBA64.ptr(pix, $imul(8, w), $clone(r, Rectangle));
	};
	$pkg.NewRGBA64 = NewRGBA64;
	NRGBA.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.NRGBAModel;
	};
	NRGBA.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	NRGBA.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	NRGBA.prototype.Bounds = function() { return this.$val.Bounds(); };
	NRGBA.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.NRGBAAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	NRGBA.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	NRGBA.ptr.prototype.NRGBAAt = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.NRGBA.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.NRGBA.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	NRGBA.prototype.NRGBAAt = function(x$4, y) { return this.$val.NRGBAAt(x$4, y); };
	NRGBA.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	NRGBA.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	NRGBA.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.NRGBAModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.NRGBA), color.NRGBA);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NRGBA.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NRGBA.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	NRGBA.ptr.prototype.SetNRGBA = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.R));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.G));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.B));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.A));
	};
	NRGBA.prototype.SetNRGBA = function(x$4, y, c) { return this.$val.SetNRGBA(x$4, y, c); };
	NRGBA.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new NRGBA.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new NRGBA.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	NRGBA.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	NRGBA.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 3;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 4);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (4) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	NRGBA.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewNRGBA = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new NRGBA.ptr(pix, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewNRGBA = NewNRGBA;
	NRGBA64.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.NRGBA64Model;
	};
	NRGBA64.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	NRGBA64.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	NRGBA64.prototype.Bounds = function() { return this.$val.Bounds(); };
	NRGBA64.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.NRGBA64At(x$4, y), new x$5.constructor.elem(x$5));
	};
	NRGBA64.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	NRGBA64.ptr.prototype.NRGBA64At = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.NRGBA64.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.NRGBA64.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0, (((((x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0, (((((x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0, (((((x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0);
	};
	NRGBA64.prototype.NRGBA64At = function(x$4, y) { return this.$val.NRGBA64At(x$4, y); };
	NRGBA64.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 8)) >> 0;
	};
	NRGBA64.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	NRGBA64.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$20 = $f.x$20; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.NRGBA64Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.NRGBA64), color.NRGBA64);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c1.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c1.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c1.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c1.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NRGBA64.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$20 = x$20; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	NRGBA64.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	NRGBA64.ptr.prototype.SetNRGBA64 = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.R >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.R << 24 >>> 24))));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((c.G >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((c.G << 24 >>> 24))));
		(x$13 = p.Pix, x$14 = i + 4 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((c.B >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$15 = p.Pix, x$16 = i + 5 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((c.B << 24 >>> 24))));
		(x$17 = p.Pix, x$18 = i + 6 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$19 = p.Pix, x$20 = i + 7 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((c.A << 24 >>> 24))));
	};
	NRGBA64.prototype.SetNRGBA64 = function(x$4, y, c) { return this.$val.SetNRGBA64(x$4, y, c); };
	NRGBA64.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new NRGBA64.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new NRGBA64.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	NRGBA64.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	NRGBA64.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 6;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 8);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (8) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	NRGBA64.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewNRGBA64 = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(8, w)), h)));
		return new NRGBA64.ptr(pix, $imul(8, w), $clone(r, Rectangle));
	};
	$pkg.NewNRGBA64 = NewNRGBA64;
	Alpha.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.AlphaModel;
	};
	Alpha.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Alpha.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Alpha.prototype.Bounds = function() { return this.$val.Bounds(); };
	Alpha.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.AlphaAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	Alpha.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Alpha.ptr.prototype.AlphaAt = function(x$4, y) {
		var i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Alpha.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Alpha.ptr((x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])));
	};
	Alpha.prototype.AlphaAt = function(x$4, y) { return this.$val.AlphaAt(x$4, y); };
	Alpha.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Alpha.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Alpha.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.AlphaModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = $assertType(_r, color.Alpha).A));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Alpha.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Alpha.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Alpha.ptr.prototype.SetAlpha = function(x$4, y, c) {
		var c, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = c.A));
	};
	Alpha.prototype.SetAlpha = function(x$4, y, c) { return this.$val.SetAlpha(x$4, y, c); };
	Alpha.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Alpha.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Alpha.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Alpha.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Alpha.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 0;
		_tmp$1 = $clone(p.Rect, Rectangle).Dx();
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])) === 255))) {
					return false;
				}
				i = i + (1) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	Alpha.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewAlpha = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Alpha.ptr(pix, $imul(1, w), $clone(r, Rectangle));
	};
	$pkg.NewAlpha = NewAlpha;
	Alpha16.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.Alpha16Model;
	};
	Alpha16.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Alpha16.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Alpha16.prototype.Bounds = function() { return this.$val.Bounds(); };
	Alpha16.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.Alpha16At(x$4, y), new x$5.constructor.elem(x$5));
	};
	Alpha16.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Alpha16.ptr.prototype.Alpha16At = function(x$4, y) {
		var i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Alpha16.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Alpha16.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0);
	};
	Alpha16.prototype.Alpha16At = function(x$4, y) { return this.$val.Alpha16At(x$4, y); };
	Alpha16.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 2)) >> 0;
	};
	Alpha16.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Alpha16.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$4, x$5, x$6, x$7, x$8, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.Alpha16Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.Alpha16), color.Alpha16);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.A << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Alpha16.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Alpha16.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Alpha16.ptr.prototype.SetAlpha16 = function(x$4, y, c) {
		var c, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.A >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.A << 24 >>> 24))));
	};
	Alpha16.prototype.SetAlpha16 = function(x$4, y, c) { return this.$val.SetAlpha16(x$4, y, c); };
	Alpha16.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Alpha16.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Alpha16.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Alpha16.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Alpha16.ptr.prototype.Opaque = function() {
		var _tmp, _tmp$1, i, i0, i1, p, x$4, x$5, x$6, x$7, y;
		p = this;
		if ($clone(p.Rect, Rectangle).Empty()) {
			return true;
		}
		_tmp = 0;
		_tmp$1 = $imul($clone(p.Rect, Rectangle).Dx(), 2);
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				if (!(((x$4 = p.Pix, x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) === 255)) || !(((x$6 = p.Pix, x$7 = i + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])) === 255))) {
					return false;
				}
				i = i + (2) >> 0;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		return true;
	};
	Alpha16.prototype.Opaque = function() { return this.$val.Opaque(); };
	Gray.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.GrayModel;
	};
	Gray.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Gray.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Gray.prototype.Bounds = function() { return this.$val.Bounds(); };
	Gray.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.GrayAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	Gray.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Gray.ptr.prototype.GrayAt = function(x$4, y) {
		var i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Gray.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Gray.ptr((x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])));
	};
	Gray.prototype.GrayAt = function(x$4, y) { return this.$val.GrayAt(x$4, y); };
	Gray.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Gray.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Gray.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.GrayModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = $assertType(_r, color.Gray).Y));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gray.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Gray.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Gray.ptr.prototype.SetGray = function(x$4, y, c) {
		var c, i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = c.Y));
	};
	Gray.prototype.SetGray = function(x$4, y, c) { return this.$val.SetGray(x$4, y, c); };
	Gray.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Gray.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Gray.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Gray.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Gray.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	Gray.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewGray = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Gray.ptr(pix, $imul(1, w), $clone(r, Rectangle));
	};
	$pkg.NewGray = NewGray;
	Gray16.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.Gray16Model;
	};
	Gray16.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Gray16.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Gray16.prototype.Bounds = function() { return this.$val.Bounds(); };
	Gray16.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.Gray16At(x$4, y), new x$5.constructor.elem(x$5));
	};
	Gray16.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Gray16.ptr.prototype.Gray16At = function(x$4, y) {
		var i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.Gray16.ptr(0);
		}
		i = p.PixOffset(x$4, y);
		return new color.Gray16.ptr((((((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 16 >>> 16))) >>> 0);
	};
	Gray16.prototype.Gray16At = function(x$4, y) { return this.$val.Gray16At(x$4, y); };
	Gray16.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 2)) >> 0;
	};
	Gray16.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Gray16.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$4, x$5, x$6, x$7, x$8, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.Gray16Model.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.Gray16), color.Gray16);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c1.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c1.Y << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Gray16.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Gray16.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Gray16.ptr.prototype.SetGray16 = function(x$4, y, c) {
		var c, i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = (((c.Y >>> 8 << 16 >>> 16) << 24 >>> 24))));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = ((c.Y << 24 >>> 24))));
	};
	Gray16.prototype.SetGray16 = function(x$4, y, c) { return this.$val.SetGray16(x$4, y, c); };
	Gray16.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Gray16.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Gray16.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	Gray16.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Gray16.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	Gray16.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewGray16 = function(r) {
		var _tmp, _tmp$1, h, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(2, w)), h)));
		return new Gray16.ptr(pix, $imul(2, w), $clone(r, Rectangle));
	};
	$pkg.NewGray16 = NewGray16;
	CMYK.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.CMYKModel;
	};
	CMYK.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	CMYK.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	CMYK.prototype.Bounds = function() { return this.$val.Bounds(); };
	CMYK.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.CMYKAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	CMYK.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	CMYK.ptr.prototype.CMYKAt = function(x$4, y) {
		var i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.CMYK.ptr(0, 0, 0, 0);
		}
		i = p.PixOffset(x$4, y);
		return new color.CMYK.ptr((x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])), (x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), (x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])), (x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])));
	};
	CMYK.prototype.CMYKAt = function(x$4, y) { return this.$val.CMYKAt(x$4, y); };
	CMYK.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 4)) >> 0;
	};
	CMYK.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	CMYK.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, c1, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; c1 = $f.c1; i = $f.i; p = $f.p; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = color.CMYKModel.Convert(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		c1 = $clone($assertType(_r, color.CMYK), color.CMYK);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c1.C));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c1.M));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c1.Y));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c1.K));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CMYK.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.c1 = c1; $f.i = i; $f.p = p; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	CMYK.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	CMYK.ptr.prototype.SetCMYK = function(x$4, y, c) {
		var c, i, p, x$10, x$11, x$12, x$4, x$5, x$6, x$7, x$8, x$9, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, x$6 = i + 0 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = c.C));
		(x$7 = p.Pix, x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = c.M));
		(x$9 = p.Pix, x$10 = i + 2 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = c.Y));
		(x$11 = p.Pix, x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = c.K));
	};
	CMYK.prototype.SetCMYK = function(x$4, y, c) { return this.$val.SetCMYK(x$4, y, c); };
	CMYK.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new CMYK.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new CMYK.ptr($subslice(p.Pix, i), p.Stride, $clone(r, Rectangle));
	};
	CMYK.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	CMYK.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	CMYK.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewCMYK = function(r) {
		var _tmp, _tmp$1, buf, h, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		buf = $makeSlice(sliceType$1, ($imul(($imul(4, w)), h)));
		return new CMYK.ptr(buf, $imul(4, w), $clone(r, Rectangle));
	};
	$pkg.NewCMYK = NewCMYK;
	Paletted.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return p.Palette;
	};
	Paletted.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Paletted.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	Paletted.prototype.Bounds = function() { return this.$val.Bounds(); };
	Paletted.ptr.prototype.At = function(x$4, y) {
		var i, p, x$4, x$5, x$6, x$7, x$8, y;
		p = this;
		if (p.Palette.$length === 0) {
			return $ifaceNil;
		}
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return (x$5 = p.Palette, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]));
		}
		i = p.PixOffset(x$4, y);
		return (x$6 = p.Palette, x$7 = (x$8 = p.Pix, ((i < 0 || i >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + i])), ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
	};
	Paletted.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Paletted.ptr.prototype.PixOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.Stride)) + ($imul(((x$4 - p.Rect.Min.X >> 0)), 1)) >> 0;
	};
	Paletted.prototype.PixOffset = function(x$4, y) { return this.$val.PixOffset(x$4, y); };
	Paletted.ptr.prototype.Set = function(x$4, y, c) {
		var _r, c, i, p, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; i = $f.i; p = $f.p; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			$s = -1; return;
		}
		i = p.PixOffset(x$4, y);
		_r = p.Palette.Index(c); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = ((_r << 24 >>> 24))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Paletted.ptr.prototype.Set }; } $f._r = _r; $f.c = c; $f.i = i; $f.p = p; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Paletted.prototype.Set = function(x$4, y, c) { return this.$val.Set(x$4, y, c); };
	Paletted.ptr.prototype.ColorIndexAt = function(x$4, y) {
		var i, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return 0;
		}
		i = p.PixOffset(x$4, y);
		return (x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i]));
	};
	Paletted.prototype.ColorIndexAt = function(x$4, y) { return this.$val.ColorIndexAt(x$4, y); };
	Paletted.ptr.prototype.SetColorIndex = function(x$4, y, index) {
		var i, index, p, x$4, x$5, y;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return;
		}
		i = p.PixOffset(x$4, y);
		(x$5 = p.Pix, ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i] = index));
	};
	Paletted.prototype.SetColorIndex = function(x$4, y, index) { return this.$val.SetColorIndex(x$4, y, index); };
	Paletted.ptr.prototype.SubImage = function(r) {
		var i, p, r;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new Paletted.ptr(sliceType$1.nil, 0, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)), p.Palette);
		}
		i = p.PixOffset(r.Min.X, r.Min.Y);
		return new Paletted.ptr($subslice(p.Pix, i), p.Stride, $clone($clone(p.Rect, Rectangle).Intersect($clone(r, Rectangle)), Rectangle), p.Palette);
	};
	Paletted.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	Paletted.ptr.prototype.Opaque = function() {
		var _i, _i$1, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, a, c, c$1, i, i0, i1, p, present, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; a = $f.a; c = $f.c; c$1 = $f.c$1; i = $f.i; i0 = $f.i0; i1 = $f.i1; p = $f.p; present = $f.present; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		present = arrayType.zero();
		_tmp = 0;
		_tmp$1 = $clone(p.Rect, Rectangle).Dx();
		i0 = _tmp;
		i1 = _tmp$1;
		y = p.Rect.Min.Y;
		while (true) {
			if (!(y < p.Rect.Max.Y)) { break; }
			_ref = $subslice(p.Pix, i0, i1);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				((c < 0 || c >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[c] = true);
				_i++;
			}
			i0 = i0 + (p.Stride) >> 0;
			i1 = i1 + (p.Stride) >> 0;
			y = y + (1) >> 0;
		}
		_ref$1 = p.Palette;
		_i$1 = 0;
		/* while (true) { */ case 1:
			/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 2; continue; }
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			/* */ if (!((i < 0 || i >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[i])) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!((i < 0 || i >= present.length) ? ($throwRuntimeError("index out of range"), undefined) : present[i])) { */ case 3:
				_i$1++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r = c$1.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			a = _tuple[3];
			if (!((a === 65535))) {
				$s = -1; return false;
			}
			_i$1++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Paletted.ptr.prototype.Opaque }; } $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.c$1 = c$1; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.p = p; $f.present = present; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Paletted.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewPaletted = function(r, p) {
		var _tmp, _tmp$1, h, p, pix, r, w;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		pix = $makeSlice(sliceType$1, ($imul(($imul(1, w)), h)));
		return new Paletted.ptr(pix, $imul(1, w), $clone(r, Rectangle), p);
	};
	$pkg.NewPaletted = NewPaletted;
	Uniform.ptr.prototype.RGBA = function() {
		var _r, _tuple, a, b, c, g, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; b = $f.b; c = $f.c; g = $f.g; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = 0;
		g = 0;
		b = 0;
		a = 0;
		c = this;
		_r = c.C.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		g = _tuple[1];
		b = _tuple[2];
		a = _tuple[3];
		$s = -1; return [r, g, b, a];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uniform.ptr.prototype.RGBA }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.b = b; $f.c = c; $f.g = g; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uniform.prototype.RGBA = function() { return this.$val.RGBA(); };
	Uniform.ptr.prototype.ColorModel = function() {
		var c;
		c = this;
		return c;
	};
	Uniform.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	Uniform.ptr.prototype.Convert = function(param) {
		var c, param;
		c = this;
		return c.C;
	};
	Uniform.prototype.Convert = function(param) { return this.$val.Convert(param); };
	Uniform.ptr.prototype.Bounds = function() {
		var c;
		c = this;
		return new Rectangle.ptr(new Point.ptr(-1000000000, -1000000000), new Point.ptr(1000000000, 1000000000));
	};
	Uniform.prototype.Bounds = function() { return this.$val.Bounds(); };
	Uniform.ptr.prototype.At = function(x$4, y) {
		var c, x$4, y;
		c = this;
		return c.C;
	};
	Uniform.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	Uniform.ptr.prototype.Opaque = function() {
		var _r, _tuple, a, c, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; c = $f.c; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		c = this;
		_r = c.C.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		a = _tuple[3];
		$s = -1; return a === 65535;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Uniform.ptr.prototype.Opaque }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.c = c; $f.$s = $s; $f.$r = $r; return $f;
	};
	Uniform.prototype.Opaque = function() { return this.$val.Opaque(); };
	NewUniform = function(c) {
		var c;
		return new Uniform.ptr(c);
	};
	$pkg.NewUniform = NewUniform;
	YCbCrSubsampleRatio.prototype.String = function() {
		var _1, s;
		s = this.$val;
		_1 = s;
		if (_1 === (0)) {
			return "YCbCrSubsampleRatio444";
		} else if (_1 === (1)) {
			return "YCbCrSubsampleRatio422";
		} else if (_1 === (2)) {
			return "YCbCrSubsampleRatio420";
		} else if (_1 === (3)) {
			return "YCbCrSubsampleRatio440";
		} else if (_1 === (4)) {
			return "YCbCrSubsampleRatio411";
		} else if (_1 === (5)) {
			return "YCbCrSubsampleRatio410";
		}
		return "YCbCrSubsampleRatioUnknown";
	};
	$ptrType(YCbCrSubsampleRatio).prototype.String = function() { return new YCbCrSubsampleRatio(this.$get()).String(); };
	YCbCr.ptr.prototype.ColorModel = function() {
		var p;
		p = this;
		return color.YCbCrModel;
	};
	YCbCr.prototype.ColorModel = function() { return this.$val.ColorModel(); };
	YCbCr.ptr.prototype.Bounds = function() {
		var p;
		p = this;
		return p.Rect;
	};
	YCbCr.prototype.Bounds = function() { return this.$val.Bounds(); };
	YCbCr.ptr.prototype.At = function(x$4, y) {
		var p, x$4, x$5, y;
		p = this;
		return (x$5 = p.YCbCrAt(x$4, y), new x$5.constructor.elem(x$5));
	};
	YCbCr.prototype.At = function(x$4, y) { return this.$val.At(x$4, y); };
	YCbCr.ptr.prototype.YCbCrAt = function(x$4, y) {
		var ci, p, x$4, x$5, x$6, x$7, y, yi;
		p = this;
		if (!(new Point.ptr(x$4, y).In($clone(p.Rect, Rectangle)))) {
			return new color.YCbCr.ptr(0, 0, 0);
		}
		yi = p.YOffset(x$4, y);
		ci = p.COffset(x$4, y);
		return new color.YCbCr.ptr((x$5 = p.Y, ((yi < 0 || yi >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + yi])), (x$6 = p.Cb, ((ci < 0 || ci >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ci])), (x$7 = p.Cr, ((ci < 0 || ci >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ci])));
	};
	YCbCr.prototype.YCbCrAt = function(x$4, y) { return this.$val.YCbCrAt(x$4, y); };
	YCbCr.ptr.prototype.YOffset = function(x$4, y) {
		var p, x$4, y;
		p = this;
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.YStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
	};
	YCbCr.prototype.YOffset = function(x$4, y) { return this.$val.YOffset(x$4, y); };
	YCbCr.ptr.prototype.COffset = function(x$4, y) {
		var _1, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, p, x$4, y;
		p = this;
		_1 = p.SubsampleRatio;
		if (_1 === (1)) {
			return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + (((_q = x$4 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$1 = p.Rect.Min.X / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (2)) {
			return ($imul((((_q$2 = y / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = p.Rect.Min.Y / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + (((_q$4 = x$4 / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$5 = p.Rect.Min.X / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (3)) {
			return ($imul((((_q$6 = y / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = p.Rect.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
		} else if (_1 === (4)) {
			return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + (((_q$8 = x$4 / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$9 = p.Rect.Min.X / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		} else if (_1 === (5)) {
			return ($imul((((_q$10 = y / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$11 = p.Rect.Min.Y / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), p.CStride)) + (((_q$12 = x$4 / 4, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$13 = p.Rect.Min.X / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)) >> 0;
		}
		return ($imul(((y - p.Rect.Min.Y >> 0)), p.CStride)) + ((x$4 - p.Rect.Min.X >> 0)) >> 0;
	};
	YCbCr.prototype.COffset = function(x$4, y) { return this.$val.COffset(x$4, y); };
	YCbCr.ptr.prototype.SubImage = function(r) {
		var ci, p, r, yi;
		p = this;
		Rectangle.copy(r, $clone(r, Rectangle).Intersect($clone(p.Rect, Rectangle)));
		if ($clone(r, Rectangle).Empty()) {
			return new YCbCr.ptr(sliceType$1.nil, sliceType$1.nil, sliceType$1.nil, 0, 0, p.SubsampleRatio, new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0)));
		}
		yi = p.YOffset(r.Min.X, r.Min.Y);
		ci = p.COffset(r.Min.X, r.Min.Y);
		return new YCbCr.ptr($subslice(p.Y, yi), $subslice(p.Cb, ci), $subslice(p.Cr, ci), p.YStride, p.CStride, p.SubsampleRatio, $clone(r, Rectangle));
	};
	YCbCr.prototype.SubImage = function(r) { return this.$val.SubImage(r); };
	YCbCr.ptr.prototype.Opaque = function() {
		var p;
		p = this;
		return true;
	};
	YCbCr.prototype.Opaque = function() { return this.$val.Opaque(); };
	yCbCrSize = function(r, subsampleRatio) {
		var _1, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, _tmp, _tmp$1, ch, cw, h, r, subsampleRatio, w;
		w = 0;
		h = 0;
		cw = 0;
		ch = 0;
		_tmp = $clone(r, Rectangle).Dx();
		_tmp$1 = $clone(r, Rectangle).Dy();
		w = _tmp;
		h = _tmp$1;
		_1 = subsampleRatio;
		if (_1 === (1)) {
			cw = (_q = ((r.Max.X + 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$1 = r.Min.X / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			ch = h;
		} else if (_1 === (2)) {
			cw = (_q$2 = ((r.Max.X + 1 >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = r.Min.X / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			ch = (_q$4 = ((r.Max.Y + 1 >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$5 = r.Min.Y / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		} else if (_1 === (3)) {
			cw = w;
			ch = (_q$6 = ((r.Max.Y + 1 >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = r.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		} else if (_1 === (4)) {
			cw = (_q$8 = ((r.Max.X + 3 >> 0)) / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$9 = r.Min.X / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			ch = h;
		} else if (_1 === (5)) {
			cw = (_q$10 = ((r.Max.X + 3 >> 0)) / 4, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$11 = r.Min.X / 4, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			ch = (_q$12 = ((r.Max.Y + 1 >> 0)) / 2, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$13 = r.Min.Y / 2, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		} else {
			cw = w;
			ch = h;
		}
		return [w, h, cw, ch];
	};
	NewYCbCr = function(r, subsampleRatio) {
		var _tuple, b, ch, cw, h, i0, i1, i2, r, subsampleRatio, w;
		_tuple = yCbCrSize($clone(r, Rectangle), subsampleRatio);
		w = _tuple[0];
		h = _tuple[1];
		cw = _tuple[2];
		ch = _tuple[3];
		i0 = ($imul(w, h)) + ($imul(($imul(0, cw)), ch)) >> 0;
		i1 = ($imul(w, h)) + ($imul(($imul(1, cw)), ch)) >> 0;
		i2 = ($imul(w, h)) + ($imul(($imul(2, cw)), ch)) >> 0;
		b = $makeSlice(sliceType$1, i2);
		return new YCbCr.ptr($subslice(b, 0, i0, i0), $subslice(b, i0, i1, i1), $subslice(b, i1, i2, i2), w, cw, subsampleRatio, $clone(r, Rectangle));
	};
	$pkg.NewYCbCr = NewYCbCr;
	Point.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [Point], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point], [Point], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([$Int], [Point], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([$Int], [Point], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Mod", name: "Mod", pkg: "", typ: $funcType([Rectangle], [Point], false)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([Point], [$Bool], false)}];
	Rectangle.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Dx", name: "Dx", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Dy", name: "Dy", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [Point], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [Rectangle], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point], [Rectangle], false)}, {prop: "Inset", name: "Inset", pkg: "", typ: $funcType([$Int], [Rectangle], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Eq", name: "Eq", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Overlaps", name: "Overlaps", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}, {prop: "Canon", name: "Canon", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}];
	ptrType.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "RGBAAt", name: "RGBAAt", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetRGBA", name: "SetRGBA", pkg: "", typ: $funcType([$Int, $Int, color.RGBA], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "RGBA64At", name: "RGBA64At", pkg: "", typ: $funcType([$Int, $Int], [color.RGBA64], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetRGBA64", name: "SetRGBA64", pkg: "", typ: $funcType([$Int, $Int, color.RGBA64], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$2.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "NRGBAAt", name: "NRGBAAt", pkg: "", typ: $funcType([$Int, $Int], [color.NRGBA], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetNRGBA", name: "SetNRGBA", pkg: "", typ: $funcType([$Int, $Int, color.NRGBA], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$3.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "NRGBA64At", name: "NRGBA64At", pkg: "", typ: $funcType([$Int, $Int], [color.NRGBA64], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetNRGBA64", name: "SetNRGBA64", pkg: "", typ: $funcType([$Int, $Int, color.NRGBA64], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$4.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "AlphaAt", name: "AlphaAt", pkg: "", typ: $funcType([$Int, $Int], [color.Alpha], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetAlpha", name: "SetAlpha", pkg: "", typ: $funcType([$Int, $Int, color.Alpha], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$5.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Alpha16At", name: "Alpha16At", pkg: "", typ: $funcType([$Int, $Int], [color.Alpha16], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetAlpha16", name: "SetAlpha16", pkg: "", typ: $funcType([$Int, $Int, color.Alpha16], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$6.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "GrayAt", name: "GrayAt", pkg: "", typ: $funcType([$Int, $Int], [color.Gray], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetGray", name: "SetGray", pkg: "", typ: $funcType([$Int, $Int, color.Gray], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$7.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Gray16At", name: "Gray16At", pkg: "", typ: $funcType([$Int, $Int], [color.Gray16], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetGray16", name: "SetGray16", pkg: "", typ: $funcType([$Int, $Int, color.Gray16], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$8.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "CMYKAt", name: "CMYKAt", pkg: "", typ: $funcType([$Int, $Int], [color.CMYK], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "SetCMYK", name: "SetCMYK", pkg: "", typ: $funcType([$Int, $Int, color.CMYK], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$9.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "PixOffset", name: "PixOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}, {prop: "ColorIndexAt", name: "ColorIndexAt", pkg: "", typ: $funcType([$Int, $Int], [$Uint8], false)}, {prop: "SetColorIndex", name: "SetColorIndex", pkg: "", typ: $funcType([$Int, $Int, $Uint8], [], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	ptrType$10.methods = [{prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [$Uint32, $Uint32, $Uint32, $Uint32], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Convert", name: "Convert", pkg: "", typ: $funcType([color.Color], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	YCbCrSubsampleRatio.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "YCbCrAt", name: "YCbCrAt", pkg: "", typ: $funcType([$Int, $Int], [color.YCbCr], false)}, {prop: "YOffset", name: "YOffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "COffset", name: "COffset", pkg: "", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "SubImage", name: "SubImage", pkg: "", typ: $funcType([Rectangle], [Image], false)}, {prop: "Opaque", name: "Opaque", pkg: "", typ: $funcType([], [$Bool], false)}];
	format.init("image", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "magic", name: "magic", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "decode", name: "decode", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "decodeConfig", name: "decodeConfig", anonymous: false, exported: false, typ: funcType$1, tag: ""}]);
	Point.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Rectangle.init("", [{prop: "Min", name: "Min", anonymous: false, exported: true, typ: Point, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: Point, tag: ""}]);
	Config.init("", [{prop: "ColorModel", name: "ColorModel", anonymous: false, exported: true, typ: color.Model, tag: ""}, {prop: "Width", name: "Width", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Height", name: "Height", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Image.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}]);
	RGBA.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	RGBA64.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	NRGBA.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	NRGBA64.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Alpha.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Alpha16.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Gray.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Gray16.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	CMYK.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	Paletted.init("", [{prop: "Pix", name: "Pix", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Stride", name: "Stride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}, {prop: "Palette", name: "Palette", anonymous: false, exported: true, typ: color.Palette, tag: ""}]);
	Uniform.init("", [{prop: "C", name: "C", anonymous: false, exported: true, typ: color.Color, tag: ""}]);
	YCbCr.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Cb", name: "Cb", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "Cr", name: "Cr", anonymous: false, exported: true, typ: sliceType$1, tag: ""}, {prop: "YStride", name: "YStride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "CStride", name: "CStride", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "SubsampleRatio", name: "SubsampleRatio", anonymous: false, exported: true, typ: YCbCrSubsampleRatio, tag: ""}, {prop: "Rect", name: "Rect", anonymous: false, exported: true, typ: Rectangle, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		formats = sliceType.nil;
		$pkg.ZR = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
		$pkg.ErrFormat = errors.New("image: unknown format");
		$pkg.Black = NewUniform((x = color.Black, new x.constructor.elem(x)));
		$pkg.White = NewUniform((x$1 = color.White, new x$1.constructor.elem(x$1)));
		$pkg.Transparent = NewUniform((x$2 = color.Transparent, new x$2.constructor.elem(x$2)));
		$pkg.Opaque = NewUniform((x$3 = color.Opaque, new x$3.constructor.elem(x$3)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/internal/imageutil"] = (function() {
	var $pkg = {}, $init, image, DrawYCbCr;
	image = $packages["image"];
	DrawYCbCr = function(dst, r, src, sp) {
		var _1, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, b$1, b$2, b$3, cb1, cb1$1, cb1$2, cb1$3, ci, ci$1, ci$2, ci$3, ciBase, ciBase$1, cr1, cr1$1, cr1$2, cr1$3, dpix, dpix$1, dpix$2, dpix$3, dst, g, g$1, g$2, g$3, ok, r, r$1, r$2, r$3, r$4, rgba, rgba$1, rgba$2, rgba$3, sp, src, sx, sx$1, sy, sy$1, sy$2, sy$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y, y$1, y$2, y$3, y0, y1, yi, yi$1, yi$2, yi$3, yy1, yy1$1, yy1$2, yy1$3;
		ok = false;
		x0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		x1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		y0 = r.Min.Y - dst.Rect.Min.Y >> 0;
		y1 = r.Max.Y - dst.Rect.Min.Y >> 0;
		_1 = src.SubsampleRatio;
		if (_1 === (0)) {
			_tmp = y0;
			_tmp$1 = sp.Y;
			y = _tmp;
			sy = _tmp$1;
			while (true) {
				if (!(!((y === y1)))) { break; }
				dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
				yi = ($imul(((sy - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ci = ($imul(((sy - src.Rect.Min.Y >> 0)), src.CStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				x = x0;
				while (true) {
					if (!(!((x === x1)))) { break; }
					yy1 = $imul((((x$1 = src.Y, ((yi < 0 || yi >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + yi])) >> 0)), 65793);
					cb1 = (((x$2 = src.Cb, ((ci < 0 || ci >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ci])) >> 0)) - 128 >> 0;
					cr1 = (((x$3 = src.Cr, ((ci < 0 || ci >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ci])) >> 0)) - 128 >> 0;
					r$1 = yy1 + ($imul(91881, cr1)) >> 0;
					if (((((r$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$1 = (r$1 >> $min((16), 31)) >> 0;
					} else {
						r$1 = ~((r$1 >> 31 >> 0)) >> 0;
					}
					g = (yy1 - ($imul(22554, cb1)) >> 0) - ($imul(46802, cr1)) >> 0;
					if (((((g >>> 0)) & 4278190080) >>> 0) === 0) {
						g = (g >> $min((16), 31)) >> 0;
					} else {
						g = ~((g >> 31 >> 0)) >> 0;
					}
					b = yy1 + ($imul(116130, cb1)) >> 0;
					if (((((b >>> 0)) & 4278190080) >>> 0) === 0) {
						b = (b >> $min((16), 31)) >> 0;
					} else {
						b = ~((b >> 31 >> 0)) >> 0;
					}
					rgba = $subslice(dpix, x, (x + 4 >> 0), dpix.$length);
					(0 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 0] = ((r$1 << 24 >>> 24)));
					(1 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 1] = ((g << 24 >>> 24)));
					(2 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 2] = ((b << 24 >>> 24)));
					(3 >= rgba.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba.$array[rgba.$offset + 3] = 255);
					_tmp$2 = x + 4 >> 0;
					_tmp$3 = yi + 1 >> 0;
					_tmp$4 = ci + 1 >> 0;
					x = _tmp$2;
					yi = _tmp$3;
					ci = _tmp$4;
				}
				_tmp$5 = y + 1 >> 0;
				_tmp$6 = sy + 1 >> 0;
				y = _tmp$5;
				sy = _tmp$6;
			}
		} else if (_1 === (1)) {
			_tmp$7 = y0;
			_tmp$8 = sp.Y;
			y$1 = _tmp$7;
			sy$1 = _tmp$8;
			while (true) {
				if (!(!((y$1 === y1)))) { break; }
				dpix$1 = $subslice(dst.Pix, ($imul(y$1, dst.Stride)));
				yi$1 = ($imul(((sy$1 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ciBase = ($imul(((sy$1 - src.Rect.Min.Y >> 0)), src.CStride)) - (_q = src.Rect.Min.X / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				_tmp$9 = x0;
				_tmp$10 = sp.X;
				x$4 = _tmp$9;
				sx = _tmp$10;
				while (true) {
					if (!(!((x$4 === x1)))) { break; }
					ci$1 = ciBase + (_q$1 = sx / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					yy1$1 = $imul((((x$5 = src.Y, ((yi$1 < 0 || yi$1 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + yi$1])) >> 0)), 65793);
					cb1$1 = (((x$6 = src.Cb, ((ci$1 < 0 || ci$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ci$1])) >> 0)) - 128 >> 0;
					cr1$1 = (((x$7 = src.Cr, ((ci$1 < 0 || ci$1 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ci$1])) >> 0)) - 128 >> 0;
					r$2 = yy1$1 + ($imul(91881, cr1$1)) >> 0;
					if (((((r$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$2 = (r$2 >> $min((16), 31)) >> 0;
					} else {
						r$2 = ~((r$2 >> 31 >> 0)) >> 0;
					}
					g$1 = (yy1$1 - ($imul(22554, cb1$1)) >> 0) - ($imul(46802, cr1$1)) >> 0;
					if (((((g$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$1 = (g$1 >> $min((16), 31)) >> 0;
					} else {
						g$1 = ~((g$1 >> 31 >> 0)) >> 0;
					}
					b$1 = yy1$1 + ($imul(116130, cb1$1)) >> 0;
					if (((((b$1 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$1 = (b$1 >> $min((16), 31)) >> 0;
					} else {
						b$1 = ~((b$1 >> 31 >> 0)) >> 0;
					}
					rgba$1 = $subslice(dpix$1, x$4, (x$4 + 4 >> 0), dpix$1.$length);
					(0 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 0] = ((r$2 << 24 >>> 24)));
					(1 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 1] = ((g$1 << 24 >>> 24)));
					(2 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 2] = ((b$1 << 24 >>> 24)));
					(3 >= rgba$1.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$1.$array[rgba$1.$offset + 3] = 255);
					_tmp$11 = x$4 + 4 >> 0;
					_tmp$12 = sx + 1 >> 0;
					_tmp$13 = yi$1 + 1 >> 0;
					x$4 = _tmp$11;
					sx = _tmp$12;
					yi$1 = _tmp$13;
				}
				_tmp$14 = y$1 + 1 >> 0;
				_tmp$15 = sy$1 + 1 >> 0;
				y$1 = _tmp$14;
				sy$1 = _tmp$15;
			}
		} else if (_1 === (2)) {
			_tmp$16 = y0;
			_tmp$17 = sp.Y;
			y$2 = _tmp$16;
			sy$2 = _tmp$17;
			while (true) {
				if (!(!((y$2 === y1)))) { break; }
				dpix$2 = $subslice(dst.Pix, ($imul(y$2, dst.Stride)));
				yi$2 = ($imul(((sy$2 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ciBase$1 = ($imul((((_q$2 = sy$2 / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$3 = src.Rect.Min.Y / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), src.CStride)) - (_q$4 = src.Rect.Min.X / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
				_tmp$18 = x0;
				_tmp$19 = sp.X;
				x$8 = _tmp$18;
				sx$1 = _tmp$19;
				while (true) {
					if (!(!((x$8 === x1)))) { break; }
					ci$2 = ciBase$1 + (_q$5 = sx$1 / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					yy1$2 = $imul((((x$9 = src.Y, ((yi$2 < 0 || yi$2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + yi$2])) >> 0)), 65793);
					cb1$2 = (((x$10 = src.Cb, ((ci$2 < 0 || ci$2 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + ci$2])) >> 0)) - 128 >> 0;
					cr1$2 = (((x$11 = src.Cr, ((ci$2 < 0 || ci$2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + ci$2])) >> 0)) - 128 >> 0;
					r$3 = yy1$2 + ($imul(91881, cr1$2)) >> 0;
					if (((((r$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$3 = (r$3 >> $min((16), 31)) >> 0;
					} else {
						r$3 = ~((r$3 >> 31 >> 0)) >> 0;
					}
					g$2 = (yy1$2 - ($imul(22554, cb1$2)) >> 0) - ($imul(46802, cr1$2)) >> 0;
					if (((((g$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$2 = (g$2 >> $min((16), 31)) >> 0;
					} else {
						g$2 = ~((g$2 >> 31 >> 0)) >> 0;
					}
					b$2 = yy1$2 + ($imul(116130, cb1$2)) >> 0;
					if (((((b$2 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$2 = (b$2 >> $min((16), 31)) >> 0;
					} else {
						b$2 = ~((b$2 >> 31 >> 0)) >> 0;
					}
					rgba$2 = $subslice(dpix$2, x$8, (x$8 + 4 >> 0), dpix$2.$length);
					(0 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 0] = ((r$3 << 24 >>> 24)));
					(1 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 1] = ((g$2 << 24 >>> 24)));
					(2 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 2] = ((b$2 << 24 >>> 24)));
					(3 >= rgba$2.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$2.$array[rgba$2.$offset + 3] = 255);
					_tmp$20 = x$8 + 4 >> 0;
					_tmp$21 = sx$1 + 1 >> 0;
					_tmp$22 = yi$2 + 1 >> 0;
					x$8 = _tmp$20;
					sx$1 = _tmp$21;
					yi$2 = _tmp$22;
				}
				_tmp$23 = y$2 + 1 >> 0;
				_tmp$24 = sy$2 + 1 >> 0;
				y$2 = _tmp$23;
				sy$2 = _tmp$24;
			}
		} else if (_1 === (3)) {
			_tmp$25 = y0;
			_tmp$26 = sp.Y;
			y$3 = _tmp$25;
			sy$3 = _tmp$26;
			while (true) {
				if (!(!((y$3 === y1)))) { break; }
				dpix$3 = $subslice(dst.Pix, ($imul(y$3, dst.Stride)));
				yi$3 = ($imul(((sy$3 - src.Rect.Min.Y >> 0)), src.YStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				ci$3 = ($imul((((_q$6 = sy$3 / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) - (_q$7 = src.Rect.Min.Y / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), src.CStride)) + ((sp.X - src.Rect.Min.X >> 0)) >> 0;
				x$12 = x0;
				while (true) {
					if (!(!((x$12 === x1)))) { break; }
					yy1$3 = $imul((((x$13 = src.Y, ((yi$3 < 0 || yi$3 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + yi$3])) >> 0)), 65793);
					cb1$3 = (((x$14 = src.Cb, ((ci$3 < 0 || ci$3 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + ci$3])) >> 0)) - 128 >> 0;
					cr1$3 = (((x$15 = src.Cr, ((ci$3 < 0 || ci$3 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + ci$3])) >> 0)) - 128 >> 0;
					r$4 = yy1$3 + ($imul(91881, cr1$3)) >> 0;
					if (((((r$4 >>> 0)) & 4278190080) >>> 0) === 0) {
						r$4 = (r$4 >> $min((16), 31)) >> 0;
					} else {
						r$4 = ~((r$4 >> 31 >> 0)) >> 0;
					}
					g$3 = (yy1$3 - ($imul(22554, cb1$3)) >> 0) - ($imul(46802, cr1$3)) >> 0;
					if (((((g$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						g$3 = (g$3 >> $min((16), 31)) >> 0;
					} else {
						g$3 = ~((g$3 >> 31 >> 0)) >> 0;
					}
					b$3 = yy1$3 + ($imul(116130, cb1$3)) >> 0;
					if (((((b$3 >>> 0)) & 4278190080) >>> 0) === 0) {
						b$3 = (b$3 >> $min((16), 31)) >> 0;
					} else {
						b$3 = ~((b$3 >> 31 >> 0)) >> 0;
					}
					rgba$3 = $subslice(dpix$3, x$12, (x$12 + 4 >> 0), dpix$3.$length);
					(0 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 0] = ((r$4 << 24 >>> 24)));
					(1 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 1] = ((g$3 << 24 >>> 24)));
					(2 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 2] = ((b$3 << 24 >>> 24)));
					(3 >= rgba$3.$length ? ($throwRuntimeError("index out of range"), undefined) : rgba$3.$array[rgba$3.$offset + 3] = 255);
					_tmp$27 = x$12 + 4 >> 0;
					_tmp$28 = yi$3 + 1 >> 0;
					_tmp$29 = ci$3 + 1 >> 0;
					x$12 = _tmp$27;
					yi$3 = _tmp$28;
					ci$3 = _tmp$29;
				}
				_tmp$30 = y$3 + 1 >> 0;
				_tmp$31 = sy$3 + 1 >> 0;
				y$3 = _tmp$30;
				sy$3 = _tmp$31;
			}
		} else {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	$pkg.DrawYCbCr = DrawYCbCr;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/draw"] = (function() {
	var $pkg = {}, $init, image, color, imageutil, Image, Op, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, arrayType, sliceType, sliceType$1, clip, processBackward, Draw, DrawMask, drawFillOver, drawFillSrc, drawCopyOver, drawCopySrc, drawNRGBAOver, drawNRGBASrc, drawGray, drawCMYK, drawGlyphOver, drawRGBA, clamp, sqDiff, drawPaletted;
	image = $packages["image"];
	color = $packages["image/color"];
	imageutil = $packages["image/internal/imageutil"];
	Image = $pkg.Image = $newType(8, $kindInterface, "draw.Image", true, "image/draw", true, null);
	Op = $pkg.Op = $newType(4, $kindInt, "draw.Op", true, "image/draw", true, null);
	ptrType = $ptrType(image.Point);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.Uniform);
	ptrType$4 = $ptrType(image.NRGBA);
	ptrType$5 = $ptrType(image.YCbCr);
	ptrType$6 = $ptrType(image.Gray);
	ptrType$7 = $ptrType(image.CMYK);
	ptrType$8 = $ptrType(image.Alpha);
	ptrType$9 = $ptrType($Uint8);
	arrayType = $arrayType($Int32, 4);
	sliceType = $sliceType(arrayType);
	sliceType$1 = $sliceType($Uint8);
	Op.prototype.Draw = function(dst, r, src, sp) {
		var dst, op, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dst = $f.dst; op = $f.op; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		op = this.$val;
		$r = DrawMask(dst, $clone(r, image.Rectangle), src, $clone(sp, image.Point), $ifaceNil, new image.Point.ptr(0, 0), op); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Op.prototype.Draw }; } $f.dst = dst; $f.op = op; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Op).prototype.Draw = function(dst, r, src, sp) { return new Op(this.$get()).Draw(dst, r, src, sp); };
	clip = function(dst, r, src, sp, mask, mp) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, dst, dx, dy, mask, mp, orig, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; dst = $f.dst; dx = $f.dx; dy = $f.dy; mask = $f.mask; mp = $f.mp; orig = $f.orig; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		orig = $clone(r.Min, image.Point);
		_r = dst.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(r, image.Rectangle).Intersect($clone(_r, image.Rectangle)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		image.Rectangle.copy(r, _r$1);
		_r$2 = src.Bounds(); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$3 = $clone(_r$2, image.Rectangle).Add($clone($clone(orig, image.Point).Sub($clone(sp, image.Point)), image.Point)); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = $clone(r, image.Rectangle).Intersect($clone(_r$3, image.Rectangle)); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		image.Rectangle.copy(r, _r$4);
		/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 6:
			_r$5 = mask.Bounds(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$6 = $clone(_r$5, image.Rectangle).Add($clone($clone(orig, image.Point).Sub($clone(mp, image.Point)), image.Point)); /* */ $s = 9; case 9: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_r$7 = $clone(r, image.Rectangle).Intersect($clone(_r$6, image.Rectangle)); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			image.Rectangle.copy(r, _r$7);
		/* } */ case 7:
		dx = r.Min.X - orig.X >> 0;
		dy = r.Min.Y - orig.Y >> 0;
		if ((dx === 0) && (dy === 0)) {
			$s = -1; return;
		}
		sp.X = sp.X + (dx) >> 0;
		sp.Y = sp.Y + (dy) >> 0;
		if (!(mp === ptrType.nil)) {
			mp.X = mp.X + (dx) >> 0;
			mp.Y = mp.Y + (dy) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: clip }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f.dst = dst; $f.dx = dx; $f.dy = dy; $f.mask = mask; $f.mp = mp; $f.orig = orig; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	processBackward = function(dst, r, src, sp) {
		var dst, r, sp, src;
		return $interfaceIsEqual((dst), src) && $clone(r, image.Rectangle).Overlaps($clone($clone(r, image.Rectangle).Add($clone($clone(sp, image.Point).Sub($clone(r.Min, image.Point)), image.Point)), image.Rectangle)) && (sp.Y < r.Min.Y || ((sp.Y === r.Min.Y) && sp.X < r.Min.X));
	};
	Draw = function(dst, r, src, sp, op) {
		var dst, op, r, sp, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dst = $f.dst; op = $f.op; r = $f.r; sp = $f.sp; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = DrawMask(dst, $clone(r, image.Rectangle), src, $clone(sp, image.Point), $ifaceNil, new image.Point.ptr(0, 0), op); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Draw }; } $f.dst = dst; $f.op = op; $f.r = r; $f.sp = sp; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Draw = Draw;
	DrawMask = function(dst, r, src, sp, mask, mp, op) {
		var _arg, _arg$1, _arg$2, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, da, db, dg, dr, dst, dst0, dst0$1, dx, dy, ma, mask, mask0, mp, mx, my, ok, op, out, r, sa, sa$1, sa$2, sb, sb$1, sb$2, sg, sg$1, sg$2, sp, sr, sr$1, sr$2, src, src0, src0$1, src0$10, src0$11, src0$12, src0$2, src0$3, src0$4, src0$5, src0$6, src0$7, src0$8, src0$9, sx, sy, x$1, x$2, x0, x1, y, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; dr = $f.dr; dst = $f.dst; dst0 = $f.dst0; dst0$1 = $f.dst0$1; dx = $f.dx; dy = $f.dy; ma = $f.ma; mask = $f.mask; mask0 = $f.mask0; mp = $f.mp; mx = $f.mx; my = $f.my; ok = $f.ok; op = $f.op; out = $f.out; r = $f.r; sa = $f.sa; sa$1 = $f.sa$1; sa$2 = $f.sa$2; sb = $f.sb; sb$1 = $f.sb$1; sb$2 = $f.sb$2; sg = $f.sg; sg$1 = $f.sg$1; sg$2 = $f.sg$2; sp = $f.sp; sr = $f.sr; sr$1 = $f.sr$1; sr$2 = $f.sr$2; src = $f.src; src0 = $f.src0; src0$1 = $f.src0$1; src0$10 = $f.src0$10; src0$11 = $f.src0$11; src0$12 = $f.src0$12; src0$2 = $f.src0$2; src0$3 = $f.src0$3; src0$4 = $f.src0$4; src0$5 = $f.src0$5; src0$6 = $f.src0$6; src0$7 = $f.src0$7; src0$8 = $f.src0$8; src0$9 = $f.src0$9; sx = $f.sx; sy = $f.sy; x$1 = $f.x$1; x$2 = $f.x$2; x0 = $f.x0; x1 = $f.x1; y = $f.y; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		mp = [mp];
		out = [out];
		r = [r];
		sp = [sp];
		$r = clip(dst, r[0], src, sp[0], mask, mp[0]); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if ($clone(r[0], image.Rectangle).Empty()) {
			$s = -1; return;
		}
		_ref = dst;
		/* */ if ($assertType(_ref, ptrType$1, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if ($assertType(_ref, ptrType$1, true)[1]) { */ case 2:
			dst0 = _ref.$val;
			/* */ if (op === 0) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (op === 0) { */ case 5:
				/* */ if ($interfaceIsEqual(mask, $ifaceNil)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if ($interfaceIsEqual(mask, $ifaceNil)) { */ case 8:
					_ref$1 = src;
					/* */ if ($assertType(_ref$1, ptrType$3, true)[1]) { $s = 11; continue; }
					/* */ if ($assertType(_ref$1, ptrType$1, true)[1]) { $s = 12; continue; }
					/* */ if ($assertType(_ref$1, ptrType$4, true)[1]) { $s = 13; continue; }
					/* */ if ($assertType(_ref$1, ptrType$5, true)[1]) { $s = 14; continue; }
					/* */ if ($assertType(_ref$1, ptrType$6, true)[1]) { $s = 15; continue; }
					/* */ if ($assertType(_ref$1, ptrType$7, true)[1]) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if ($assertType(_ref$1, ptrType$3, true)[1]) { */ case 11:
						src0 = _ref$1.$val;
						_r = src0.RGBA(); /* */ $s = 18; case 18: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
						_tuple = _r;
						sr = _tuple[0];
						sg = _tuple[1];
						sb = _tuple[2];
						sa = _tuple[3];
						if (sa === 65535) {
							drawFillSrc(dst0, $clone(r[0], image.Rectangle), sr, sg, sb, sa);
						} else {
							drawFillOver(dst0, $clone(r[0], image.Rectangle), sr, sg, sb, sa);
						}
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$1, true)[1]) { */ case 12:
						src0$1 = _ref$1.$val;
						drawCopyOver(dst0, $clone(r[0], image.Rectangle), src0$1, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$4, true)[1]) { */ case 13:
						src0$2 = _ref$1.$val;
						drawNRGBAOver(dst0, $clone(r[0], image.Rectangle), src0$2, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$5, true)[1]) { */ case 14:
						src0$3 = _ref$1.$val;
						if (imageutil.DrawYCbCr(dst0, $clone(r[0], image.Rectangle), src0$3, $clone(sp[0], image.Point))) {
							$s = -1; return;
						}
						$s = 17; continue;
					/* } else if ($assertType(_ref$1, ptrType$6, true)[1]) { */ case 15:
						src0$4 = _ref$1.$val;
						drawGray(dst0, $clone(r[0], image.Rectangle), src0$4, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$1, ptrType$7, true)[1]) { */ case 16:
						src0$5 = _ref$1.$val;
						drawCMYK(dst0, $clone(r[0], image.Rectangle), src0$5, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } */ case 17:
					$s = 10; continue;
				/* } else { */ case 9:
					_tuple$1 = $assertType(mask, ptrType$8, true);
					mask0 = _tuple$1[0];
					ok = _tuple$1[1];
					/* */ if (ok) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (ok) { */ case 19:
						_ref$2 = src;
						/* */ if ($assertType(_ref$2, ptrType$3, true)[1]) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if ($assertType(_ref$2, ptrType$3, true)[1]) { */ case 21:
							src0$6 = _ref$2.$val;
							$r = drawGlyphOver(dst0, $clone(r[0], image.Rectangle), src0$6, mask0, $clone(mp[0], image.Point)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							$s = -1; return;
						/* } */ case 22:
					/* } */ case 20:
				/* } */ case 10:
				$s = 7; continue;
			/* } else { */ case 6:
				/* */ if ($interfaceIsEqual(mask, $ifaceNil)) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if ($interfaceIsEqual(mask, $ifaceNil)) { */ case 24:
					_ref$3 = src;
					/* */ if ($assertType(_ref$3, ptrType$3, true)[1]) { $s = 26; continue; }
					/* */ if ($assertType(_ref$3, ptrType$1, true)[1]) { $s = 27; continue; }
					/* */ if ($assertType(_ref$3, ptrType$4, true)[1]) { $s = 28; continue; }
					/* */ if ($assertType(_ref$3, ptrType$5, true)[1]) { $s = 29; continue; }
					/* */ if ($assertType(_ref$3, ptrType$6, true)[1]) { $s = 30; continue; }
					/* */ if ($assertType(_ref$3, ptrType$7, true)[1]) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if ($assertType(_ref$3, ptrType$3, true)[1]) { */ case 26:
						src0$7 = _ref$3.$val;
						_r$1 = src0$7.RGBA(); /* */ $s = 33; case 33: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
						_tuple$2 = _r$1;
						sr$1 = _tuple$2[0];
						sg$1 = _tuple$2[1];
						sb$1 = _tuple$2[2];
						sa$1 = _tuple$2[3];
						drawFillSrc(dst0, $clone(r[0], image.Rectangle), sr$1, sg$1, sb$1, sa$1);
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$1, true)[1]) { */ case 27:
						src0$8 = _ref$3.$val;
						drawCopySrc(dst0, $clone(r[0], image.Rectangle), src0$8, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$4, true)[1]) { */ case 28:
						src0$9 = _ref$3.$val;
						drawNRGBASrc(dst0, $clone(r[0], image.Rectangle), src0$9, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$5, true)[1]) { */ case 29:
						src0$10 = _ref$3.$val;
						if (imageutil.DrawYCbCr(dst0, $clone(r[0], image.Rectangle), src0$10, $clone(sp[0], image.Point))) {
							$s = -1; return;
						}
						$s = 32; continue;
					/* } else if ($assertType(_ref$3, ptrType$6, true)[1]) { */ case 30:
						src0$11 = _ref$3.$val;
						drawGray(dst0, $clone(r[0], image.Rectangle), src0$11, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } else if ($assertType(_ref$3, ptrType$7, true)[1]) { */ case 31:
						src0$12 = _ref$3.$val;
						drawCMYK(dst0, $clone(r[0], image.Rectangle), src0$12, $clone(sp[0], image.Point));
						$s = -1; return;
					/* } */ case 32:
				/* } */ case 25:
			/* } */ case 7:
			$r = drawRGBA(dst0, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point), mask, $clone(mp[0], image.Point), op); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 3:
			dst0$1 = _ref.$val;
			/* */ if ((op === 1) && $interfaceIsEqual(mask, $ifaceNil) && !processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if ((op === 1) && $interfaceIsEqual(mask, $ifaceNil) && !processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) { */ case 35:
				$r = drawPaletted(dst0$1, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point), false); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 36:
		/* } */ case 4:
		_tmp = r[0].Min.X;
		_tmp$1 = r[0].Max.X;
		_tmp$2 = 1;
		x0 = _tmp;
		x1 = _tmp$1;
		dx = _tmp$2;
		_tmp$3 = r[0].Min.Y;
		_tmp$4 = r[0].Max.Y;
		_tmp$5 = 1;
		y0 = _tmp$3;
		y1 = _tmp$4;
		dy = _tmp$5;
		if (processBackward(dst, $clone(r[0], image.Rectangle), src, $clone(sp[0], image.Point))) {
			_tmp$6 = x1 - 1 >> 0;
			_tmp$7 = x0 - 1 >> 0;
			_tmp$8 = -1;
			x0 = _tmp$6;
			x1 = _tmp$7;
			dx = _tmp$8;
			_tmp$9 = y1 - 1 >> 0;
			_tmp$10 = y0 - 1 >> 0;
			_tmp$11 = -1;
			y0 = _tmp$9;
			y1 = _tmp$10;
			dy = _tmp$11;
		}
		out[0] = new color.RGBA64.ptr(0, 0, 0, 0);
		sy = (sp[0].Y + y0 >> 0) - r[0].Min.Y >> 0;
		my = (mp[0].Y + y0 >> 0) - r[0].Min.Y >> 0;
		y = y0;
		/* while (true) { */ case 38:
			/* if (!(!((y === y1)))) { break; } */ if(!(!((y === y1)))) { $s = 39; continue; }
			sx = (sp[0].X + x0 >> 0) - r[0].Min.X >> 0;
			mx = (mp[0].X + x0 >> 0) - r[0].Min.X >> 0;
			x$1 = x0;
			/* while (true) { */ case 40:
				/* if (!(!((x$1 === x1)))) { break; } */ if(!(!((x$1 === x1)))) { $s = 41; continue; }
				ma = 65535;
				/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 42; continue; }
				/* */ $s = 43; continue;
				/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 42:
					_r$2 = mask.At(mx, my); /* */ $s = 44; case 44: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$3 = _r$2.RGBA(); /* */ $s = 45; case 45: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					ma = _tuple$3[3];
				/* } */ case 43:
					/* */ if ((ma === 0)) { $s = 47; continue; }
					/* */ if ((ma === 65535) && (op === 1)) { $s = 48; continue; }
					/* */ $s = 49; continue;
					/* if ((ma === 0)) { */ case 47:
						/* */ if (op === 0) { $s = 51; continue; }
						/* */ $s = 52; continue;
						/* if (op === 0) { */ case 51:
							$s = 53; continue;
						/* } else { */ case 52:
							$r = dst.Set(x$1, y, (x$2 = color.Transparent, new x$2.constructor.elem(x$2))); /* */ $s = 54; case 54: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 53:
						$s = 50; continue;
					/* } else if ((ma === 65535) && (op === 1)) { */ case 48:
						_arg = x$1;
						_arg$1 = y;
						_r$4 = src.At(sx, sy); /* */ $s = 55; case 55: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
						_arg$2 = _r$4;
						$r = dst.Set(_arg, _arg$1, _arg$2); /* */ $s = 56; case 56: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 50; continue;
					/* } else { */ case 49:
						_r$5 = src.At(sx, sy); /* */ $s = 57; case 57: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_r$6 = _r$5.RGBA(); /* */ $s = 58; case 58: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						_tuple$4 = _r$6;
						sr$2 = _tuple$4[0];
						sg$2 = _tuple$4[1];
						sb$2 = _tuple$4[2];
						sa$2 = _tuple$4[3];
						/* */ if (op === 0) { $s = 59; continue; }
						/* */ $s = 60; continue;
						/* if (op === 0) { */ case 59:
							_r$7 = dst.At(x$1, y); /* */ $s = 62; case 62: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							_r$8 = _r$7.RGBA(); /* */ $s = 63; case 63: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							_tuple$5 = _r$8;
							dr = _tuple$5[0];
							dg = _tuple$5[1];
							db = _tuple$5[2];
							da = _tuple$5[3];
							a = 65535 - ((_q = ($imul(sa$2, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0;
							out[0].R = (((_q$1 = ((($imul(dr, a) >>> 0) + ($imul(sr$2, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].G = (((_q$2 = ((($imul(dg, a) >>> 0) + ($imul(sg$2, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].B = (((_q$3 = ((($imul(db, a) >>> 0) + ($imul(sb$2, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].A = (((_q$4 = ((($imul(da, a) >>> 0) + ($imul(sa$2, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							$s = 61; continue;
						/* } else { */ case 60:
							out[0].R = (((_q$5 = ($imul(sr$2, ma) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].G = (((_q$6 = ($imul(sg$2, ma) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].B = (((_q$7 = ($imul(sb$2, ma) >>> 0) / 65535, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
							out[0].A = (((_q$8 = ($imul(sa$2, ma) >>> 0) / 65535, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >>> 0 : $throwRuntimeError("integer divide by zero")) << 16 >>> 16));
						/* } */ case 61:
						$r = dst.Set(x$1, y, out[0]); /* */ $s = 64; case 64: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 50:
				case 46:
				_tmp$12 = x$1 + dx >> 0;
				_tmp$13 = sx + dx >> 0;
				_tmp$14 = mx + dx >> 0;
				x$1 = _tmp$12;
				sx = _tmp$13;
				mx = _tmp$14;
			/* } */ $s = 40; continue; case 41:
			_tmp$15 = y + dy >> 0;
			_tmp$16 = sy + dy >> 0;
			_tmp$17 = my + dy >> 0;
			y = _tmp$15;
			sy = _tmp$16;
			my = _tmp$17;
		/* } */ $s = 38; continue; case 39:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DrawMask }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.dr = dr; $f.dst = dst; $f.dst0 = dst0; $f.dst0$1 = dst0$1; $f.dx = dx; $f.dy = dy; $f.ma = ma; $f.mask = mask; $f.mask0 = mask0; $f.mp = mp; $f.mx = mx; $f.my = my; $f.ok = ok; $f.op = op; $f.out = out; $f.r = r; $f.sa = sa; $f.sa$1 = sa$1; $f.sa$2 = sa$2; $f.sb = sb; $f.sb$1 = sb$1; $f.sb$2 = sb$2; $f.sg = sg; $f.sg$1 = sg$1; $f.sg$2 = sg$2; $f.sp = sp; $f.sr = sr; $f.sr$1 = sr$1; $f.sr$2 = sr$2; $f.src = src; $f.src0 = src0; $f.src0$1 = src0$1; $f.src0$10 = src0$10; $f.src0$11 = src0$11; $f.src0$12 = src0$12; $f.src0$2 = src0$2; $f.src0$3 = src0$3; $f.src0$4 = src0$4; $f.src0$5 = src0$5; $f.src0$6 = src0$6; $f.src0$7 = src0$7; $f.src0$8 = src0$8; $f.src0$9 = src0$9; $f.sx = sx; $f.sy = sy; $f.x$1 = x$1; $f.x$2 = x$2; $f.x0 = x0; $f.x1 = x1; $f.y = y; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DrawMask = DrawMask;
	drawFillOver = function(dst, r, sr, sg, sb, sa) {
		var _q, _q$1, _q$2, _q$3, a, da, db, dg, dr, dst, i, i0, i1, r, sa, sb, sg, sr, x$1, x$2, x$3, x$4, y;
		a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		y = r.Min.Y;
		while (true) {
			if (!(!((y === r.Max.Y)))) { break; }
			i = i0;
			while (true) {
				if (!(i < i1)) { break; }
				dr = (x$1 = dst.Pix, $indexPtr(x$1.$array, x$1.$offset + (i + 0 >> 0), ptrType$9));
				dg = (x$2 = dst.Pix, $indexPtr(x$2.$array, x$2.$offset + (i + 1 >> 0), ptrType$9));
				db = (x$3 = dst.Pix, $indexPtr(x$3.$array, x$3.$offset + (i + 2 >> 0), ptrType$9));
				da = (x$4 = dst.Pix, $indexPtr(x$4.$array, x$4.$offset + (i + 3 >> 0), ptrType$9));
				dr.$set(((((((_q = ($imul(((dr.$get() >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((((_q$1 = ($imul(((dg.$get() >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((((_q$2 = ($imul(((db.$get() >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((((_q$3 = ($imul(((da.$get() >>> 0)), a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				i = i + (4) >> 0;
			}
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			y = y + (1) >> 0;
		}
	};
	drawFillSrc = function(dst, r, sr, sg, sb, sa) {
		var dst, firstRow, i, i0, i1, r, sa, sa8, sb, sb8, sg, sg8, sr, sr8, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y;
		sr8 = (((sr >>> 8 >>> 0) << 24 >>> 24));
		sg8 = (((sg >>> 8 >>> 0) << 24 >>> 24));
		sb8 = (((sb >>> 8 >>> 0) << 24 >>> 24));
		sa8 = (((sa >>> 8 >>> 0) << 24 >>> 24));
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		i = i0;
		while (true) {
			if (!(i < i1)) { break; }
			(x$1 = dst.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = sr8));
			(x$3 = dst.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = sg8));
			(x$5 = dst.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = sb8));
			(x$7 = dst.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = sa8));
			i = i + (4) >> 0;
		}
		firstRow = $subslice(dst.Pix, i0, i1);
		y = r.Min.Y + 1 >> 0;
		while (true) {
			if (!(y < r.Max.Y)) { break; }
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			$copySlice($subslice(dst.Pix, i0, i1), firstRow);
			y = y + (1) >> 0;
		}
	};
	drawCopyOver = function(dst, r, src, sp) {
		var _q, _q$1, _q$2, _q$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, d0, da, db, ddelta, dg, dpix, dr, dst, dx, dy, i, i0, i1, idelta, r, s0, sa, sb, sdelta, sg, sp, spix, sr, src, x$1, x$2, x$3, x$4;
		_tmp = $clone(r, image.Rectangle).Dx();
		_tmp$1 = $clone(r, image.Rectangle).Dy();
		dx = _tmp;
		dy = _tmp$1;
		d0 = dst.PixOffset(r.Min.X, r.Min.Y);
		s0 = src.PixOffset(sp.X, sp.Y);
		_tmp$2 = 0;
		_tmp$3 = 0;
		ddelta = _tmp$2;
		sdelta = _tmp$3;
		_tmp$4 = 0;
		_tmp$5 = 0;
		_tmp$6 = 0;
		i0 = _tmp$4;
		i1 = _tmp$5;
		idelta = _tmp$6;
		if (r.Min.Y < sp.Y || (r.Min.Y === sp.Y) && r.Min.X <= sp.X) {
			ddelta = dst.Stride;
			sdelta = src.Stride;
			_tmp$7 = 0;
			_tmp$8 = $imul(dx, 4);
			_tmp$9 = 4;
			i0 = _tmp$7;
			i1 = _tmp$8;
			idelta = _tmp$9;
		} else {
			d0 = d0 + (($imul(((dy - 1 >> 0)), dst.Stride))) >> 0;
			s0 = s0 + (($imul(((dy - 1 >> 0)), src.Stride))) >> 0;
			ddelta = -dst.Stride;
			sdelta = -src.Stride;
			_tmp$10 = $imul(((dx - 1 >> 0)), 4);
			_tmp$11 = -4;
			_tmp$12 = -4;
			i0 = _tmp$10;
			i1 = _tmp$11;
			idelta = _tmp$12;
		}
		while (true) {
			if (!(dy > 0)) { break; }
			dpix = $subslice(dst.Pix, d0);
			spix = $subslice(src.Pix, s0);
			i = i0;
			while (true) {
				if (!(!((i === i1)))) { break; }
				sr = $imul((((x$1 = i + 0 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sg = $imul((((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), 257) >>> 0;
				sb = $imul((((x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), 257) >>> 0;
				sa = $imul((((x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), 257) >>> 0;
				dr = $indexPtr(dpix.$array, dpix.$offset + (i + 0 >> 0), ptrType$9);
				dg = $indexPtr(dpix.$array, dpix.$offset + (i + 1 >> 0), ptrType$9);
				db = $indexPtr(dpix.$array, dpix.$offset + (i + 2 >> 0), ptrType$9);
				da = $indexPtr(dpix.$array, dpix.$offset + (i + 3 >> 0), ptrType$9);
				a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
				dr.$set(((((((_q = ($imul(((dr.$get() >>> 0)), a) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((((_q$1 = ($imul(((dg.$get() >>> 0)), a) >>> 0) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((((_q$2 = ($imul(((db.$get() >>> 0)), a) >>> 0) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((((_q$3 = ($imul(((da.$get() >>> 0)), a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24)));
				i = i + (idelta) >> 0;
			}
			d0 = d0 + (ddelta) >> 0;
			s0 = s0 + (sdelta) >> 0;
			dy = dy - (1) >> 0;
		}
	};
	drawCopySrc = function(dst, r, src, sp) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, d0, ddelta, dst, dy, n, r, s0, sdelta, sp, src;
		_tmp = $imul(4, $clone(r, image.Rectangle).Dx());
		_tmp$1 = $clone(r, image.Rectangle).Dy();
		n = _tmp;
		dy = _tmp$1;
		d0 = dst.PixOffset(r.Min.X, r.Min.Y);
		s0 = src.PixOffset(sp.X, sp.Y);
		_tmp$2 = 0;
		_tmp$3 = 0;
		ddelta = _tmp$2;
		sdelta = _tmp$3;
		if (r.Min.Y <= sp.Y) {
			ddelta = dst.Stride;
			sdelta = src.Stride;
		} else {
			d0 = d0 + (($imul(((dy - 1 >> 0)), dst.Stride))) >> 0;
			s0 = s0 + (($imul(((dy - 1 >> 0)), src.Stride))) >> 0;
			ddelta = -dst.Stride;
			sdelta = -src.Stride;
		}
		while (true) {
			if (!(dy > 0)) { break; }
			$copySlice($subslice(dst.Pix, d0, (d0 + n >> 0)), $subslice(src.Pix, s0, (s0 + n >> 0)));
			d0 = d0 + (ddelta) >> 0;
			s0 = s0 + (sdelta) >> 0;
			dy = dy - (1) >> 0;
		}
	};
	drawNRGBAOver = function(dst, r, src, sp) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, da, db, dg, dpix, dr, dst, i, i0, i1, r, sa, sb, sg, si, si0, sp, spix, sr, src, sy, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				sa = $imul((((x$1 = si + 3 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sr = (_q = ($imul((((x$2 = si + 0 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), sa) >>> 0) / 255, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				sg = (_q$1 = ($imul((((x$3 = si + 1 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), sa) >>> 0) / 255, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				sb = (_q$2 = ($imul((((x$4 = si + 2 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), sa) >>> 0) / 255, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
				dr = (((x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5])) >>> 0));
				dg = (((x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6])) >>> 0));
				db = (((x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7])) >>> 0));
				da = (((x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8])) >>> 0));
				a = $imul(((65535 - sa >>> 0)), 257) >>> 0;
				(x$9 = i + 0 >> 0, ((x$9 < 0 || x$9 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$9] = ((((((_q$3 = ($imul(dr, a) >>> 0) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) + sr >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$10 = i + 1 >> 0, ((x$10 < 0 || x$10 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$10] = ((((((_q$4 = ($imul(dg, a) >>> 0) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) + sg >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$11 = i + 2 >> 0, ((x$11 < 0 || x$11 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$11] = ((((((_q$5 = ($imul(db, a) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) + sb >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				(x$12 = i + 3 >> 0, ((x$12 < 0 || x$12 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$12] = ((((((_q$6 = ($imul(da, a) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) + sa >>> 0)) >>> 8 >>> 0) << 24 >>> 24))));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawNRGBASrc = function(dst, r, src, sp) {
		var _q, _q$1, _q$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, dpix, dst, i, i0, i1, r, sa, sb, sg, si, si0, sp, spix, sr, src, sy, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				sa = $imul((((x$1 = si + 3 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])) >>> 0)), 257) >>> 0;
				sr = (_q = ($imul((((x$2 = si + 0 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])) >>> 0)), sa) >>> 0) / 255, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
				sg = (_q$1 = ($imul((((x$3 = si + 1 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])) >>> 0)), sa) >>> 0) / 255, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
				sb = (_q$2 = ($imul((((x$4 = si + 2 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])) >>> 0)), sa) >>> 0) / 255, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero"));
				(x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5] = (((sr >>> 8 >>> 0) << 24 >>> 24))));
				(x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6] = (((sg >>> 8 >>> 0) << 24 >>> 24))));
				(x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7] = (((sb >>> 8 >>> 0) << 24 >>> 24))));
				(x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8] = (((sa >>> 8 >>> 0) << 24 >>> 24))));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawGray = function(dst, r, src, sp) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, dpix, dst, i, i0, i1, p, r, si, si0, sp, spix, src, sy, x$1, x$2, x$3, x$4, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 1);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				p = ((si < 0 || si >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + si]);
				(x$1 = i + 0 >> 0, ((x$1 < 0 || x$1 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$1] = p));
				(x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$2] = p));
				(x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$3] = p));
				(x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$4] = 255));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 1 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawCMYK = function(dst, r, src, sp) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, dpix, dst, i, i0, i1, r, si, si0, sp, spix, src, sy, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, yMax;
		i0 = $imul(((r.Min.X - dst.Rect.Min.X >> 0)), 4);
		i1 = $imul(((r.Max.X - dst.Rect.Min.X >> 0)), 4);
		si0 = $imul(((sp.X - src.Rect.Min.X >> 0)), 4);
		yMax = r.Max.Y - dst.Rect.Min.Y >> 0;
		y = r.Min.Y - dst.Rect.Min.Y >> 0;
		sy = sp.Y - src.Rect.Min.Y >> 0;
		while (true) {
			if (!(!((y === yMax)))) { break; }
			dpix = $subslice(dst.Pix, ($imul(y, dst.Stride)));
			spix = $subslice(src.Pix, ($imul(sy, src.Stride)));
			_tmp = i0;
			_tmp$1 = si0;
			i = _tmp;
			si = _tmp$1;
			while (true) {
				if (!(i < i1)) { break; }
				_tuple = color.CMYKToRGB((x$1 = si + 0 >> 0, ((x$1 < 0 || x$1 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$1])), (x$2 = si + 1 >> 0, ((x$2 < 0 || x$2 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$2])), (x$3 = si + 2 >> 0, ((x$3 < 0 || x$3 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$3])), (x$4 = si + 3 >> 0, ((x$4 < 0 || x$4 >= spix.$length) ? ($throwRuntimeError("index out of range"), undefined) : spix.$array[spix.$offset + x$4])));
				(x$5 = i + 0 >> 0, ((x$5 < 0 || x$5 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$5] = _tuple[0]));
				(x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$6] = _tuple[1]));
				(x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$7] = _tuple[2]));
				(x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= dpix.$length) ? ($throwRuntimeError("index out of range"), undefined) : dpix.$array[dpix.$offset + x$8] = 255));
				_tmp$2 = i + 4 >> 0;
				_tmp$3 = si + 4 >> 0;
				i = _tmp$2;
				si = _tmp$3;
			}
			_tmp$4 = y + 1 >> 0;
			_tmp$5 = sy + 1 >> 0;
			y = _tmp$4;
			sy = _tmp$5;
		}
	};
	drawGlyphOver = function(dst, r, src, mask, mp) {
		var _q, _q$1, _q$2, _q$3, _q$4, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, da, db, dg, dr, dst, i, i0, i1, ma, mask, mi, mi0, mp, my, r, sa, sb, sg, sr, src, x$1, x$2, x$3, x$4, x$5, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; dr = $f.dr; dst = $f.dst; i = $f.i; i0 = $f.i0; i1 = $f.i1; ma = $f.ma; mask = $f.mask; mi = $f.mi; mi0 = $f.mi0; mp = $f.mp; my = $f.my; r = $f.r; sa = $f.sa; sb = $f.sb; sg = $f.sg; sr = $f.sr; src = $f.src; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i0 = dst.PixOffset(r.Min.X, r.Min.Y);
		i1 = i0 + ($imul($clone(r, image.Rectangle).Dx(), 4)) >> 0;
		mi0 = mask.PixOffset(mp.X, mp.Y);
		_r = src.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		sr = _tuple[0];
		sg = _tuple[1];
		sb = _tuple[2];
		sa = _tuple[3];
		_tmp = r.Min.Y;
		_tmp$1 = mp.Y;
		y = _tmp;
		my = _tmp$1;
		while (true) {
			if (!(!((y === r.Max.Y)))) { break; }
			_tmp$2 = i0;
			_tmp$3 = mi0;
			i = _tmp$2;
			mi = _tmp$3;
			while (true) {
				if (!(i < i1)) { break; }
				ma = (((x$1 = mask.Pix, ((mi < 0 || mi >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + mi])) >>> 0));
				if (ma === 0) {
					_tmp$4 = i + 4 >> 0;
					_tmp$5 = mi + 1 >> 0;
					i = _tmp$4;
					mi = _tmp$5;
					continue;
				}
				ma = (ma | ((ma << 8 >>> 0))) >>> 0;
				dr = (x$2 = dst.Pix, $indexPtr(x$2.$array, x$2.$offset + (i + 0 >> 0), ptrType$9));
				dg = (x$3 = dst.Pix, $indexPtr(x$3.$array, x$3.$offset + (i + 1 >> 0), ptrType$9));
				db = (x$4 = dst.Pix, $indexPtr(x$4.$array, x$4.$offset + (i + 2 >> 0), ptrType$9));
				da = (x$5 = dst.Pix, $indexPtr(x$5.$array, x$5.$offset + (i + 3 >> 0), ptrType$9));
				a = $imul(((65535 - ((_q = ($imul(sa, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0)), 257) >>> 0;
				dr.$set(((((_q$1 = ((($imul(((dr.$get() >>> 0)), a) >>> 0) + ($imul(sr, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				dg.$set(((((_q$2 = ((($imul(((dg.$get() >>> 0)), a) >>> 0) + ($imul(sg, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				db.$set(((((_q$3 = ((($imul(((db.$get() >>> 0)), a) >>> 0) + ($imul(sb, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				da.$set(((((_q$4 = ((($imul(((da.$get() >>> 0)), a) >>> 0) + ($imul(sa, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24)));
				_tmp$6 = i + 4 >> 0;
				_tmp$7 = mi + 1 >> 0;
				i = _tmp$6;
				mi = _tmp$7;
			}
			i0 = i0 + (dst.Stride) >> 0;
			i1 = i1 + (dst.Stride) >> 0;
			mi0 = mi0 + (mask.Stride) >> 0;
			_tmp$8 = y + 1 >> 0;
			_tmp$9 = my + 1 >> 0;
			y = _tmp$8;
			my = _tmp$9;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawGlyphOver }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.dr = dr; $f.dst = dst; $f.i = i; $f.i0 = i0; $f.i1 = i1; $f.ma = ma; $f.mask = mask; $f.mi = mi; $f.mi0 = mi0; $f.mp = mp; $f.my = my; $f.r = r; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sr = sr; $f.src = src; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	drawRGBA = function(dst, r, src, sp, mask, mp, op) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, a, da, db, dg, di, dr, dst, dx, dy, i, i0, ma, mask, mp, mx, mx0, my, op, r, sa, sb, sg, sp, sr, src, sx, sx0, sx1, sy, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x0, x1, y, y0, y1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; da = $f.da; db = $f.db; dg = $f.dg; di = $f.di; dr = $f.dr; dst = $f.dst; dx = $f.dx; dy = $f.dy; i = $f.i; i0 = $f.i0; ma = $f.ma; mask = $f.mask; mp = $f.mp; mx = $f.mx; mx0 = $f.mx0; my = $f.my; op = $f.op; r = $f.r; sa = $f.sa; sb = $f.sb; sg = $f.sg; sp = $f.sp; sr = $f.sr; src = $f.src; sx = $f.sx; sx0 = $f.sx0; sx1 = $f.sx1; sy = $f.sy; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; x0 = $f.x0; x1 = $f.x1; y = $f.y; y0 = $f.y0; y1 = $f.y1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = r.Min.X;
		_tmp$1 = r.Max.X;
		_tmp$2 = 1;
		x0 = _tmp;
		x1 = _tmp$1;
		dx = _tmp$2;
		_tmp$3 = r.Min.Y;
		_tmp$4 = r.Max.Y;
		_tmp$5 = 1;
		y0 = _tmp$3;
		y1 = _tmp$4;
		dy = _tmp$5;
		if ($interfaceIsEqual((dst), src) && $clone(r, image.Rectangle).Overlaps($clone($clone(r, image.Rectangle).Add($clone($clone(sp, image.Point).Sub($clone(r.Min, image.Point)), image.Point)), image.Rectangle))) {
			if (sp.Y < r.Min.Y || (sp.Y === r.Min.Y) && sp.X < r.Min.X) {
				_tmp$6 = x1 - 1 >> 0;
				_tmp$7 = x0 - 1 >> 0;
				_tmp$8 = -1;
				x0 = _tmp$6;
				x1 = _tmp$7;
				dx = _tmp$8;
				_tmp$9 = y1 - 1 >> 0;
				_tmp$10 = y0 - 1 >> 0;
				_tmp$11 = -1;
				y0 = _tmp$9;
				y1 = _tmp$10;
				dy = _tmp$11;
			}
		}
		sy = (sp.Y + y0 >> 0) - r.Min.Y >> 0;
		my = (mp.Y + y0 >> 0) - r.Min.Y >> 0;
		sx0 = (sp.X + x0 >> 0) - r.Min.X >> 0;
		mx0 = (mp.X + x0 >> 0) - r.Min.X >> 0;
		sx1 = sx0 + ((x1 - x0 >> 0)) >> 0;
		i0 = dst.PixOffset(x0, y0);
		di = $imul(dx, 4);
		y = y0;
		/* while (true) { */ case 1:
			/* if (!(!((y === y1)))) { break; } */ if(!(!((y === y1)))) { $s = 2; continue; }
			_tmp$12 = i0;
			_tmp$13 = sx0;
			_tmp$14 = mx0;
			i = _tmp$12;
			sx = _tmp$13;
			mx = _tmp$14;
			/* while (true) { */ case 3:
				/* if (!(!((sx === sx1)))) { break; } */ if(!(!((sx === sx1)))) { $s = 4; continue; }
				ma = 65535;
				/* */ if (!($interfaceIsEqual(mask, $ifaceNil))) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (!($interfaceIsEqual(mask, $ifaceNil))) { */ case 5:
					_r = mask.At(mx, my); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_r$1 = _r.RGBA(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple = _r$1;
					ma = _tuple[3];
				/* } */ case 6:
				_r$2 = src.At(sx, sy); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = _r$2.RGBA(); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				sr = _tuple$1[0];
				sg = _tuple$1[1];
				sb = _tuple$1[2];
				sa = _tuple$1[3];
				if (op === 0) {
					dr = (((x$1 = dst.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) >>> 0));
					dg = (((x$3 = dst.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])) >>> 0));
					db = (((x$5 = dst.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) >>> 0));
					da = (((x$7 = dst.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) >>> 0));
					a = $imul(((65535 - ((_q = ($imul(sa, ma) >>> 0) / 65535, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))) >>> 0)), 257) >>> 0;
					(x$9 = dst.Pix, x$10 = i + 0 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = ((((_q$1 = ((($imul(dr, a) >>> 0) + ($imul(sr, ma) >>> 0) >>> 0)) / 65535, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$11 = dst.Pix, x$12 = i + 1 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((((_q$2 = ((($imul(dg, a) >>> 0) + ($imul(sg, ma) >>> 0) >>> 0)) / 65535, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$13 = dst.Pix, x$14 = i + 2 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = ((((_q$3 = ((($imul(db, a) >>> 0) + ($imul(sb, ma) >>> 0) >>> 0)) / 65535, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$15 = dst.Pix, x$16 = i + 3 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((((_q$4 = ((($imul(da, a) >>> 0) + ($imul(sa, ma) >>> 0) >>> 0)) / 65535, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
				} else {
					(x$17 = dst.Pix, x$18 = i + 0 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = ((((_q$5 = ($imul(sr, ma) >>> 0) / 65535, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$19 = dst.Pix, x$20 = i + 1 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((((_q$6 = ($imul(sg, ma) >>> 0) / 65535, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$21 = dst.Pix, x$22 = i + 2 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22] = ((((_q$7 = ($imul(sb, ma) >>> 0) / 65535, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
					(x$23 = dst.Pix, x$24 = i + 3 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24] = ((((_q$8 = ($imul(sa, ma) >>> 0) / 65535, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 8 >>> 0) << 24 >>> 24))));
				}
				_tmp$15 = i + di >> 0;
				_tmp$16 = sx + dx >> 0;
				_tmp$17 = mx + dx >> 0;
				i = _tmp$15;
				sx = _tmp$16;
				mx = _tmp$17;
			/* } */ $s = 3; continue; case 4:
			i0 = i0 + (($imul(dy, dst.Stride))) >> 0;
			_tmp$18 = y + dy >> 0;
			_tmp$19 = sy + dy >> 0;
			_tmp$20 = my + dy >> 0;
			y = _tmp$18;
			sy = _tmp$19;
			my = _tmp$20;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawRGBA }; } $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.da = da; $f.db = db; $f.dg = dg; $f.di = di; $f.dr = dr; $f.dst = dst; $f.dx = dx; $f.dy = dy; $f.i = i; $f.i0 = i0; $f.ma = ma; $f.mask = mask; $f.mp = mp; $f.mx = mx; $f.mx0 = mx0; $f.my = my; $f.op = op; $f.r = r; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sp = sp; $f.sr = sr; $f.src = src; $f.sx = sx; $f.sx0 = sx0; $f.sx1 = sx1; $f.sy = sy; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.x0 = x0; $f.x1 = x1; $f.y = y; $f.y0 = y0; $f.y1 = y1; $f.$s = $s; $f.$r = $r; return $f;
	};
	clamp = function(i) {
		var i;
		if (i < 0) {
			return 0;
		}
		if (i > 65535) {
			return 65535;
		}
		return i;
	};
	sqDiff = function(x$1, y) {
		var d, x$1, y;
		d = 0;
		if (x$1 > y) {
			d = (((x$1 - y >> 0) >>> 0));
		} else {
			d = (((y - x$1 >> 0) >>> 0));
		}
		return (($imul(d, d) >>> 0)) >>> 2 >>> 0;
	};
	drawPaletted = function(dst, r, src, sp, floydSteinberg$1) {
		var _i, _i$1, _i$2, _index, _index$1, _index$10, _index$11, _index$12, _index$13, _index$14, _index$15, _index$2, _index$3, _index$4, _index$5, _index$6, _index$7, _index$8, _index$9, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, a, b, bestIndex, bestSum, col, dst, ea, eb, eg, er, floydSteinberg$1, g, i, i$1, index, ok, out, p, p$1, palette, pix, quantErrorCurr, quantErrorNext, r, r$1, sa, sb, sg, sp, sr, src, stride, sum, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _index = $f._index; _index$1 = $f._index$1; _index$10 = $f._index$10; _index$11 = $f._index$11; _index$12 = $f._index$12; _index$13 = $f._index$13; _index$14 = $f._index$14; _index$15 = $f._index$15; _index$2 = $f._index$2; _index$3 = $f._index$3; _index$4 = $f._index$4; _index$5 = $f._index$5; _index$6 = $f._index$6; _index$7 = $f._index$7; _index$8 = $f._index$8; _index$9 = $f._index$9; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; a = $f.a; b = $f.b; bestIndex = $f.bestIndex; bestSum = $f.bestSum; col = $f.col; dst = $f.dst; ea = $f.ea; eb = $f.eb; eg = $f.eg; er = $f.er; floydSteinberg$1 = $f.floydSteinberg$1; g = $f.g; i = $f.i; i$1 = $f.i$1; index = $f.index; ok = $f.ok; out = $f.out; p = $f.p; p$1 = $f.p$1; palette = $f.palette; pix = $f.pix; quantErrorCurr = $f.quantErrorCurr; quantErrorNext = $f.quantErrorNext; r = $f.r; r$1 = $f.r$1; sa = $f.sa; sb = $f.sb; sg = $f.sg; sp = $f.sp; sr = $f.sr; src = $f.src; stride = $f.stride; sum = $f.sum; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = [out];
		_tmp = (sliceType.nil);
		_tmp$1 = (sliceType$1.nil);
		_tmp$2 = 0;
		palette = _tmp;
		pix = _tmp$1;
		stride = _tmp$2;
		_tuple = $assertType(dst, ptrType$2, true);
		p = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			palette = $makeSlice(sliceType, p.Palette.$length);
			_ref = p.Palette;
			_i = 0;
			/* while (true) { */ case 3:
				/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 4; continue; }
				i = _i;
				col = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				_r = col.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				r$1 = _tuple$1[0];
				g = _tuple$1[1];
				b = _tuple$1[2];
				a = _tuple$1[3];
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[0] = ((r$1 >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[1] = ((g >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[2] = ((b >> 0));
				((i < 0 || i >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + i])[3] = ((a >> 0));
				_i++;
			/* } */ $s = 3; continue; case 4:
			_tmp$3 = $subslice(p.Pix, p.PixOffset(r.Min.X, r.Min.Y));
			_tmp$4 = p.Stride;
			pix = _tmp$3;
			stride = _tmp$4;
		/* } */ case 2:
		_tmp$5 = sliceType.nil;
		_tmp$6 = sliceType.nil;
		quantErrorCurr = _tmp$5;
		quantErrorNext = _tmp$6;
		if (floydSteinberg$1) {
			quantErrorCurr = $makeSlice(sliceType, ($clone(r, image.Rectangle).Dx() + 2 >> 0));
			quantErrorNext = $makeSlice(sliceType, ($clone(r, image.Rectangle).Dx() + 2 >> 0));
		}
		out[0] = new color.RGBA64.ptr(0, 0, 0, 65535);
		y = 0;
		/* while (true) { */ case 6:
			/* if (!(!((y === $clone(r, image.Rectangle).Dy())))) { break; } */ if(!(!((y === $clone(r, image.Rectangle).Dy())))) { $s = 7; continue; }
			x$1 = 0;
			/* while (true) { */ case 8:
				/* if (!(!((x$1 === $clone(r, image.Rectangle).Dx())))) { break; } */ if(!(!((x$1 === $clone(r, image.Rectangle).Dx())))) { $s = 9; continue; }
				_r$1 = src.At(sp.X + x$1 >> 0, sp.Y + y >> 0); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = _r$1.RGBA(); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$2 = _r$2;
				sr = _tuple$2[0];
				sg = _tuple$2[1];
				sb = _tuple$2[2];
				sa = _tuple$2[3];
				_tmp$7 = ((sr >> 0));
				_tmp$8 = ((sg >> 0));
				_tmp$9 = ((sb >> 0));
				_tmp$10 = ((sa >> 0));
				er = _tmp$7;
				eg = _tmp$8;
				eb = _tmp$9;
				ea = _tmp$10;
				if (floydSteinberg$1) {
					er = clamp(er + (_q = (x$2 = x$1 + 1 >> 0, ((x$2 < 0 || x$2 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$2]))[0] / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					eg = clamp(eg + (_q$1 = (x$3 = x$1 + 1 >> 0, ((x$3 < 0 || x$3 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$3]))[1] / 16, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					eb = clamp(eb + (_q$2 = (x$4 = x$1 + 1 >> 0, ((x$4 < 0 || x$4 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$4]))[2] / 16, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
					ea = clamp(ea + (_q$3 = (x$5 = x$1 + 1 >> 0, ((x$5 < 0 || x$5 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + x$5]))[3] / 16, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
				}
				/* */ if (!(palette === sliceType.nil)) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!(palette === sliceType.nil)) { */ case 12:
					_tmp$11 = 0;
					_tmp$12 = 4294967295;
					bestIndex = _tmp$11;
					bestSum = _tmp$12;
					_ref$1 = palette;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						index = _i$1;
						p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), arrayType);
						sum = ((sqDiff(er, p$1[0]) + sqDiff(eg, p$1[1]) >>> 0) + sqDiff(eb, p$1[2]) >>> 0) + sqDiff(ea, p$1[3]) >>> 0;
						if (sum < bestSum) {
							_tmp$13 = index;
							_tmp$14 = sum;
							bestIndex = _tmp$13;
							bestSum = _tmp$14;
							if (sum === 0) {
								break;
							}
						}
						_i$1++;
					}
					(x$6 = ($imul(y, stride)) + x$1 >> 0, ((x$6 < 0 || x$6 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$6] = ((bestIndex << 24 >>> 24))));
					if (!floydSteinberg$1) {
						x$1 = x$1 + (1) >> 0;
						/* continue; */ $s = 8; continue;
					}
					er = er - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[0]) >> 0;
					eg = eg - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[1]) >> 0;
					eb = eb - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[2]) >> 0;
					ea = ea - (((bestIndex < 0 || bestIndex >= palette.$length) ? ($throwRuntimeError("index out of range"), undefined) : palette.$array[palette.$offset + bestIndex])[3]) >> 0;
					$s = 14; continue;
				/* } else { */ case 13:
					out[0].R = ((er << 16 >>> 16));
					out[0].G = ((eg << 16 >>> 16));
					out[0].B = ((eb << 16 >>> 16));
					out[0].A = ((ea << 16 >>> 16));
					$r = dst.Set(r.Min.X + x$1 >> 0, r.Min.Y + y >> 0, out[0]); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!floydSteinberg$1) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (!floydSteinberg$1) { */ case 16:
						x$1 = x$1 + (1) >> 0;
						/* continue; */ $s = 8; continue;
					/* } */ case 17:
					_r$3 = dst.At(r.Min.X + x$1 >> 0, r.Min.Y + y >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_r$4 = _r$3.RGBA(); /* */ $s = 19; case 19: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$3 = _r$4;
					sr = _tuple$3[0];
					sg = _tuple$3[1];
					sb = _tuple$3[2];
					sa = _tuple$3[3];
					er = er - (((sr >> 0))) >> 0;
					eg = eg - (((sg >> 0))) >> 0;
					eb = eb - (((sb >> 0))) >> 0;
					ea = ea - (((sa >> 0))) >> 0;
				/* } */ case 14:
				_index = x$1 + 0 >> 0;
				((_index < 0 || _index >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index])[0] = (((_index < 0 || _index >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index])[0] + (($imul(er, 3))) >> 0);
				_index$1 = x$1 + 0 >> 0;
				((_index$1 < 0 || _index$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$1])[1] = (((_index$1 < 0 || _index$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$1])[1] + (($imul(eg, 3))) >> 0);
				_index$2 = x$1 + 0 >> 0;
				((_index$2 < 0 || _index$2 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$2])[2] = (((_index$2 < 0 || _index$2 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$2])[2] + (($imul(eb, 3))) >> 0);
				_index$3 = x$1 + 0 >> 0;
				((_index$3 < 0 || _index$3 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$3])[3] = (((_index$3 < 0 || _index$3 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$3])[3] + (($imul(ea, 3))) >> 0);
				_index$4 = x$1 + 1 >> 0;
				((_index$4 < 0 || _index$4 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$4])[0] = (((_index$4 < 0 || _index$4 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$4])[0] + (($imul(er, 5))) >> 0);
				_index$5 = x$1 + 1 >> 0;
				((_index$5 < 0 || _index$5 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$5])[1] = (((_index$5 < 0 || _index$5 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$5])[1] + (($imul(eg, 5))) >> 0);
				_index$6 = x$1 + 1 >> 0;
				((_index$6 < 0 || _index$6 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$6])[2] = (((_index$6 < 0 || _index$6 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$6])[2] + (($imul(eb, 5))) >> 0);
				_index$7 = x$1 + 1 >> 0;
				((_index$7 < 0 || _index$7 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$7])[3] = (((_index$7 < 0 || _index$7 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$7])[3] + (($imul(ea, 5))) >> 0);
				_index$8 = x$1 + 2 >> 0;
				((_index$8 < 0 || _index$8 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$8])[0] = (((_index$8 < 0 || _index$8 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$8])[0] + (($imul(er, 1))) >> 0);
				_index$9 = x$1 + 2 >> 0;
				((_index$9 < 0 || _index$9 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$9])[1] = (((_index$9 < 0 || _index$9 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$9])[1] + (($imul(eg, 1))) >> 0);
				_index$10 = x$1 + 2 >> 0;
				((_index$10 < 0 || _index$10 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$10])[2] = (((_index$10 < 0 || _index$10 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$10])[2] + (($imul(eb, 1))) >> 0);
				_index$11 = x$1 + 2 >> 0;
				((_index$11 < 0 || _index$11 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$11])[3] = (((_index$11 < 0 || _index$11 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + _index$11])[3] + (($imul(ea, 1))) >> 0);
				_index$12 = x$1 + 2 >> 0;
				((_index$12 < 0 || _index$12 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$12])[0] = (((_index$12 < 0 || _index$12 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$12])[0] + (($imul(er, 7))) >> 0);
				_index$13 = x$1 + 2 >> 0;
				((_index$13 < 0 || _index$13 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$13])[1] = (((_index$13 < 0 || _index$13 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$13])[1] + (($imul(eg, 7))) >> 0);
				_index$14 = x$1 + 2 >> 0;
				((_index$14 < 0 || _index$14 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$14])[2] = (((_index$14 < 0 || _index$14 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$14])[2] + (($imul(eb, 7))) >> 0);
				_index$15 = x$1 + 2 >> 0;
				((_index$15 < 0 || _index$15 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$15])[3] = (((_index$15 < 0 || _index$15 >= quantErrorCurr.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorCurr.$array[quantErrorCurr.$offset + _index$15])[3] + (($imul(ea, 7))) >> 0);
				x$1 = x$1 + (1) >> 0;
			/* } */ $s = 8; continue; case 9:
			if (floydSteinberg$1) {
				_tmp$15 = quantErrorNext;
				_tmp$16 = quantErrorCurr;
				quantErrorCurr = _tmp$15;
				quantErrorNext = _tmp$16;
				_ref$2 = quantErrorNext;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$1 = _i$2;
					arrayType.copy(((i$1 < 0 || i$1 >= quantErrorNext.$length) ? ($throwRuntimeError("index out of range"), undefined) : quantErrorNext.$array[quantErrorNext.$offset + i$1]), arrayType.zero());
					_i$2++;
				}
			}
			y = y + (1) >> 0;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawPaletted }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._index = _index; $f._index$1 = _index$1; $f._index$10 = _index$10; $f._index$11 = _index$11; $f._index$12 = _index$12; $f._index$13 = _index$13; $f._index$14 = _index$14; $f._index$15 = _index$15; $f._index$2 = _index$2; $f._index$3 = _index$3; $f._index$4 = _index$4; $f._index$5 = _index$5; $f._index$6 = _index$6; $f._index$7 = _index$7; $f._index$8 = _index$8; $f._index$9 = _index$9; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.a = a; $f.b = b; $f.bestIndex = bestIndex; $f.bestSum = bestSum; $f.col = col; $f.dst = dst; $f.ea = ea; $f.eb = eb; $f.eg = eg; $f.er = er; $f.floydSteinberg$1 = floydSteinberg$1; $f.g = g; $f.i = i; $f.i$1 = i$1; $f.index = index; $f.ok = ok; $f.out = out; $f.p = p; $f.p$1 = p$1; $f.palette = palette; $f.pix = pix; $f.quantErrorCurr = quantErrorCurr; $f.quantErrorNext = quantErrorNext; $f.r = r; $f.r$1 = r$1; $f.sa = sa; $f.sb = sb; $f.sg = sg; $f.sp = sp; $f.sr = sr; $f.src = src; $f.stride = stride; $f.sum = sum; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Op.methods = [{prop: "Draw", name: "Draw", pkg: "", typ: $funcType([Image, image.Rectangle, image.Image, image.Point], [], false)}];
	Image.init([{prop: "At", name: "At", pkg: "", typ: $funcType([$Int, $Int], [color.Color], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "ColorModel", name: "ColorModel", pkg: "", typ: $funcType([], [color.Model], false)}, {prop: "Set", name: "Set", pkg: "", typ: $funcType([$Int, $Int, color.Color], [], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = imageutil.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/exp/shiny/screen"] = (function() {
	var $pkg = {}, $init, f64, image, color, draw, utf8, Buffer, Texture, EventDeque, Window, PublishResult, NewWindowOptions, DrawOptions, ptrType, ptrType$1, ptrType$2, sanitizeUTF8;
	f64 = $packages["golang.org/x/image/math/f64"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(8, $kindInterface, "screen.Buffer", true, "golang.org/x/exp/shiny/screen", true, null);
	Texture = $pkg.Texture = $newType(8, $kindInterface, "screen.Texture", true, "golang.org/x/exp/shiny/screen", true, null);
	EventDeque = $pkg.EventDeque = $newType(8, $kindInterface, "screen.EventDeque", true, "golang.org/x/exp/shiny/screen", true, null);
	Window = $pkg.Window = $newType(8, $kindInterface, "screen.Window", true, "golang.org/x/exp/shiny/screen", true, null);
	PublishResult = $pkg.PublishResult = $newType(0, $kindStruct, "screen.PublishResult", true, "golang.org/x/exp/shiny/screen", true, function(BackBufferPreserved_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.BackBufferPreserved = false;
			return;
		}
		this.BackBufferPreserved = BackBufferPreserved_;
	});
	NewWindowOptions = $pkg.NewWindowOptions = $newType(0, $kindStruct, "screen.NewWindowOptions", true, "golang.org/x/exp/shiny/screen", true, function(Width_, Height_, Title_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Width = 0;
			this.Height = 0;
			this.Title = "";
			return;
		}
		this.Width = Width_;
		this.Height = Height_;
		this.Title = Title_;
	});
	DrawOptions = $pkg.DrawOptions = $newType(0, $kindStruct, "screen.DrawOptions", true, "golang.org/x/exp/shiny/screen", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	ptrType = $ptrType(NewWindowOptions);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(DrawOptions);
	NewWindowOptions.ptr.prototype.GetTitle = function() {
		var o;
		o = this;
		if (o === ptrType.nil) {
			return "";
		}
		return sanitizeUTF8(o.Title, 4096);
	};
	NewWindowOptions.prototype.GetTitle = function() { return this.$val.GetTitle(); };
	sanitizeUTF8 = function(s, n) {
		var _tuple, i, n, n$1, r, s;
		if (n < s.length) {
			s = $substring(s, 0, n);
		}
		i = 0;
		while (true) {
			if (!(i < s.length)) { break; }
			_tuple = utf8.DecodeRuneInString($substring(s, i));
			r = _tuple[0];
			n$1 = _tuple[1];
			if ((r === 0) || ((r === 65533) && (n$1 === 1))) {
				break;
			}
			i = i + (n$1) >> 0;
		}
		return $substring(s, 0, i);
	};
	ptrType.methods = [{prop: "GetTitle", name: "GetTitle", pkg: "", typ: $funcType([], [$String], false)}];
	Buffer.init([{prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [image.Point], false)}]);
	Texture.init([{prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([image.Rectangle, color.Color, draw.Op], [], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [image.Point], false)}, {prop: "Upload", name: "Upload", pkg: "", typ: $funcType([image.Point, Buffer, image.Rectangle], [], false)}]);
	EventDeque.init([{prop: "NextEvent", name: "NextEvent", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "SendFirst", name: "SendFirst", pkg: "", typ: $funcType([$emptyInterface], [], false)}]);
	Window.init([{prop: "Copy", name: "Copy", pkg: "", typ: $funcType([image.Point, Texture, image.Rectangle, draw.Op, ptrType$2], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([f64.Aff3, Texture, image.Rectangle, draw.Op, ptrType$2], [], false)}, {prop: "DrawUniform", name: "DrawUniform", pkg: "", typ: $funcType([f64.Aff3, color.Color, image.Rectangle, draw.Op, ptrType$2], [], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([image.Rectangle, color.Color, draw.Op], [], false)}, {prop: "NextEvent", name: "NextEvent", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Publish", name: "Publish", pkg: "", typ: $funcType([], [PublishResult], false)}, {prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([image.Rectangle, Texture, image.Rectangle, draw.Op, ptrType$2], [], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "SendFirst", name: "SendFirst", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Upload", name: "Upload", pkg: "", typ: $funcType([image.Point, Buffer, image.Rectangle], [], false)}]);
	PublishResult.init("", [{prop: "BackBufferPreserved", name: "BackBufferPreserved", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	NewWindowOptions.init("", [{prop: "Width", name: "Width", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Height", name: "Height", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Title", name: "Title", anonymous: false, exported: true, typ: $String, tag: ""}]);
	DrawOptions.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = f64.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/mobile/event/key"] = (function() {
	var $pkg = {}, $init, fmt, strings, Event, Direction, Modifiers, Code, structType, sliceType, sliceType$1, _Code_index_1, _Code_index_2, _Code_index_3, _Code_index_4, _Code_index_6, _Code_index_7, mods;
	fmt = $packages["fmt"];
	strings = $packages["strings"];
	Event = $pkg.Event = $newType(0, $kindStruct, "key.Event", true, "golang.org/x/mobile/event/key", true, function(Rune_, Code_, Modifiers_, Direction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Rune = 0;
			this.Code = 0;
			this.Modifiers = 0;
			this.Direction = 0;
			return;
		}
		this.Rune = Rune_;
		this.Code = Code_;
		this.Modifiers = Modifiers_;
		this.Direction = Direction_;
	});
	Direction = $pkg.Direction = $newType(1, $kindUint8, "key.Direction", true, "golang.org/x/mobile/event/key", true, null);
	Modifiers = $pkg.Modifiers = $newType(4, $kindUint32, "key.Modifiers", true, "golang.org/x/mobile/event/key", true, null);
	Code = $pkg.Code = $newType(4, $kindUint32, "key.Code", true, "golang.org/x/mobile/event/key", true, null);
	structType = $structType("golang.org/x/mobile/event/key", [{prop: "m", name: "m", anonymous: false, exported: false, typ: Modifiers, tag: ""}, {prop: "s", name: "s", anonymous: false, exported: false, typ: $String, tag: ""}]);
	sliceType = $sliceType($emptyInterface);
	sliceType$1 = $sliceType($String);
	Code.prototype.String = function() {
		var _r, i, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; i = $f.i; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this.$val;
			/* */ if ((i === 0)) { $s = 2; continue; }
			/* */ if (4 <= i && i <= 49) { $s = 3; continue; }
			/* */ if (51 <= i && i <= 69) { $s = 4; continue; }
			/* */ if (72 <= i && i <= 99) { $s = 5; continue; }
			/* */ if (103 <= i && i <= 115) { $s = 6; continue; }
			/* */ if ((i === 117)) { $s = 7; continue; }
			/* */ if (127 <= i && i <= 129) { $s = 8; continue; }
			/* */ if (224 <= i && i <= 231) { $s = 9; continue; }
			/* */ if ((i === 65536)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if ((i === 0)) { */ case 2:
				$s = -1; return "CodeUnknown";
			/* } else if (4 <= i && i <= 49) { */ case 3:
				i = i - (4) >>> 0;
				$s = -1; return $substring("CodeACodeBCodeCCodeDCodeECodeFCodeGCodeHCodeICodeJCodeKCodeLCodeMCodeNCodeOCodePCodeQCodeRCodeSCodeTCodeUCodeVCodeWCodeXCodeYCodeZCode1Code2Code3Code4Code5Code6Code7Code8Code9Code0CodeReturnEnterCodeEscapeCodeDeleteBackspaceCodeTabCodeSpacebarCodeHyphenMinusCodeEqualSignCodeLeftSquareBracketCodeRightSquareBracketCodeBackslash", ((i < 0 || i >= _Code_index_1.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_1[i]), (x = i + 1 >>> 0, ((x < 0 || x >= _Code_index_1.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_1[x])));
			/* } else if (51 <= i && i <= 69) { */ case 4:
				i = i - (51) >>> 0;
				$s = -1; return $substring("CodeSemicolonCodeApostropheCodeGraveAccentCodeCommaCodeFullStopCodeSlashCodeCapsLockCodeF1CodeF2CodeF3CodeF4CodeF5CodeF6CodeF7CodeF8CodeF9CodeF10CodeF11CodeF12", ((i < 0 || i >= _Code_index_2.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_2[i]), (x$1 = i + 1 >>> 0, ((x$1 < 0 || x$1 >= _Code_index_2.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_2[x$1])));
			/* } else if (72 <= i && i <= 99) { */ case 5:
				i = i - (72) >>> 0;
				$s = -1; return $substring("CodePauseCodeInsertCodeHomeCodePageUpCodeDeleteForwardCodeEndCodePageDownCodeRightArrowCodeLeftArrowCodeDownArrowCodeUpArrowCodeKeypadNumLockCodeKeypadSlashCodeKeypadAsteriskCodeKeypadHyphenMinusCodeKeypadPlusSignCodeKeypadEnterCodeKeypad1CodeKeypad2CodeKeypad3CodeKeypad4CodeKeypad5CodeKeypad6CodeKeypad7CodeKeypad8CodeKeypad9CodeKeypad0CodeKeypadFullStop", ((i < 0 || i >= _Code_index_3.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_3[i]), (x$2 = i + 1 >>> 0, ((x$2 < 0 || x$2 >= _Code_index_3.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_3[x$2])));
			/* } else if (103 <= i && i <= 115) { */ case 6:
				i = i - (103) >>> 0;
				$s = -1; return $substring("CodeKeypadEqualSignCodeF13CodeF14CodeF15CodeF16CodeF17CodeF18CodeF19CodeF20CodeF21CodeF22CodeF23CodeF24", ((i < 0 || i >= _Code_index_4.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_4[i]), (x$3 = i + 1 >>> 0, ((x$3 < 0 || x$3 >= _Code_index_4.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_4[x$3])));
			/* } else if ((i === 117)) { */ case 7:
				$s = -1; return "CodeHelp";
			/* } else if (127 <= i && i <= 129) { */ case 8:
				i = i - (127) >>> 0;
				$s = -1; return $substring("CodeMuteCodeVolumeUpCodeVolumeDown", ((i < 0 || i >= _Code_index_6.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_6[i]), (x$4 = i + 1 >>> 0, ((x$4 < 0 || x$4 >= _Code_index_6.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_6[x$4])));
			/* } else if (224 <= i && i <= 231) { */ case 9:
				i = i - (224) >>> 0;
				$s = -1; return $substring("CodeLeftControlCodeLeftShiftCodeLeftAltCodeLeftGUICodeRightControlCodeRightShiftCodeRightAltCodeRightGUI", ((i < 0 || i >= _Code_index_7.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_7[i]), (x$5 = i + 1 >>> 0, ((x$5 < 0 || x$5 >= _Code_index_7.length) ? ($throwRuntimeError("index out of range"), undefined) : _Code_index_7[x$5])));
			/* } else if ((i === 65536)) { */ case 10:
				$s = -1; return "CodeCompose";
			/* } else { */ case 11:
				_r = fmt.Sprintf("Code(%d)", new sliceType([new Code(i)])); /* */ $s = 13; case 13: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 12:
		case 1:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Code.prototype.String }; } $f._r = _r; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Code).prototype.String = function() { return new Code(this.$get()).String(); };
	Event.ptr.prototype.String = function() {
		var _r, _r$1, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		/* */ if (e.Rune >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (e.Rune >= 0) { */ case 1:
			_r = fmt.Sprintf("key.Event{%q (%v), %v, %v}", new sliceType([new $Int32(e.Rune), new Code(e.Code), new Modifiers(e.Modifiers), new Direction(e.Direction)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = fmt.Sprintf("key.Event{(%v), %v, %v}", new sliceType([new Code(e.Code), new Modifiers(e.Modifiers), new Direction(e.Direction)])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Event.ptr.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Event.prototype.String = function() { return this.$val.String(); };
	Modifiers.prototype.String = function() {
		var _i, _ref, m, match, mod;
		m = this.$val;
		match = sliceType$1.nil;
		_ref = mods;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			mod = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), structType);
			if (!((((mod.m & m) >>> 0) === 0))) {
				match = $append(match, mod.s);
			}
			_i++;
		}
		return "key.Modifiers(" + strings.Join(match, "|") + ")";
	};
	$ptrType(Modifiers).prototype.String = function() { return new Modifiers(this.$get()).String(); };
	Direction.prototype.String = function() {
		var _1, _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this.$val;
			_1 = d;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return "None";
			/* } else if (_1 === (1)) { */ case 3:
				$s = -1; return "Press";
			/* } else if (_1 === (2)) { */ case 4:
				$s = -1; return "Release";
			/* } else { */ case 5:
				_r = fmt.Sprintf("key.Direction(%d)", new sliceType([new Direction(d)])); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 6:
		case 1:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Direction.prototype.String }; } $f._1 = _1; $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Direction).prototype.String = function() { return new Direction(this.$get()).String(); };
	Event.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Direction.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Modifiers.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Code.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Event.init("", [{prop: "Rune", name: "Rune", anonymous: false, exported: true, typ: $Int32, tag: ""}, {prop: "Code", name: "Code", anonymous: false, exported: true, typ: Code, tag: ""}, {prop: "Modifiers", name: "Modifiers", anonymous: false, exported: true, typ: Modifiers, tag: ""}, {prop: "Direction", name: "Direction", anonymous: false, exported: true, typ: Direction, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_Code_index_1 = $toNativeArray($kindUint16, [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 195, 205, 224, 231, 243, 258, 271, 292, 314, 327]);
		_Code_index_2 = $toNativeArray($kindUint8, [0, 13, 27, 42, 51, 63, 72, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 145, 152, 159]);
		_Code_index_3 = $toNativeArray($kindUint16, [0, 9, 19, 27, 37, 54, 61, 73, 87, 100, 113, 124, 141, 156, 174, 195, 213, 228, 239, 250, 261, 272, 283, 294, 305, 316, 327, 338, 356]);
		_Code_index_4 = $toNativeArray($kindUint8, [0, 19, 26, 33, 40, 47, 54, 61, 68, 75, 82, 89, 96, 103]);
		_Code_index_6 = $toNativeArray($kindUint8, [0, 8, 20, 34]);
		_Code_index_7 = $toNativeArray($kindUint8, [0, 15, 28, 39, 50, 66, 80, 92, 104]);
		mods = $toNativeArray($kindStruct, [new structType.ptr(1, "Shift"), new structType.ptr(2, "Control"), new structType.ptr(4, "Alt"), new structType.ptr(8, "Meta")]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/mobile/event/mouse"] = (function() {
	var $pkg = {}, $init, fmt, key, Event, Button, Direction, sliceType;
	fmt = $packages["fmt"];
	key = $packages["golang.org/x/mobile/event/key"];
	Event = $pkg.Event = $newType(0, $kindStruct, "mouse.Event", true, "golang.org/x/mobile/event/mouse", true, function(X_, Y_, Button_, Modifiers_, Direction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			this.Button = 0;
			this.Modifiers = 0;
			this.Direction = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Button = Button_;
		this.Modifiers = Modifiers_;
		this.Direction = Direction_;
	});
	Button = $pkg.Button = $newType(4, $kindInt32, "mouse.Button", true, "golang.org/x/mobile/event/mouse", true, null);
	Direction = $pkg.Direction = $newType(1, $kindUint8, "mouse.Direction", true, "golang.org/x/mobile/event/mouse", true, null);
	sliceType = $sliceType($emptyInterface);
	Button.prototype.IsWheel = function() {
		var b;
		b = this.$val;
		return b < 0;
	};
	$ptrType(Button).prototype.IsWheel = function() { return new Button(this.$get()).IsWheel(); };
	Direction.prototype.String = function() {
		var _1, _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this.$val;
			_1 = d;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return "None";
			/* } else if (_1 === (1)) { */ case 3:
				$s = -1; return "Press";
			/* } else if (_1 === (2)) { */ case 4:
				$s = -1; return "Release";
			/* } else if (_1 === (3)) { */ case 5:
				$s = -1; return "Step";
			/* } else { */ case 6:
				_r = fmt.Sprintf("mouse.Direction(%d)", new sliceType([new Direction(d)])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 7:
		case 1:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Direction.prototype.String }; } $f._1 = _1; $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Direction).prototype.String = function() { return new Direction(this.$get()).String(); };
	Button.methods = [{prop: "IsWheel", name: "IsWheel", pkg: "", typ: $funcType([], [$Bool], false)}];
	Direction.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Event.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "Button", name: "Button", anonymous: false, exported: true, typ: Button, tag: ""}, {prop: "Modifiers", name: "Modifiers", anonymous: false, exported: true, typ: key.Modifiers, tag: ""}, {prop: "Direction", name: "Direction", anonymous: false, exported: true, typ: Direction, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = key.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/exp/shiny/gesture"] = (function() {
	var $pkg = {}, $init, fmt, screen, mouse, time, Type, Point, Event, internalEvent, EventFilter, sliceType, ptrType, ptrType$1, abs;
	fmt = $packages["fmt"];
	screen = $packages["golang.org/x/exp/shiny/screen"];
	mouse = $packages["golang.org/x/mobile/event/mouse"];
	time = $packages["time"];
	Type = $pkg.Type = $newType(1, $kindUint8, "gesture.Type", true, "golang.org/x/exp/shiny/gesture", true, null);
	Point = $pkg.Point = $newType(0, $kindStruct, "gesture.Point", true, "golang.org/x/exp/shiny/gesture", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Event = $pkg.Event = $newType(0, $kindStruct, "gesture.Event", true, "golang.org/x/exp/shiny/gesture", true, function(Type_, Drag_, LongPress_, DoublePress_, InitialPos_, CurrentPos_, Time_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Type = 0;
			this.Drag = false;
			this.LongPress = false;
			this.DoublePress = false;
			this.InitialPos = new Point.ptr(0, 0);
			this.CurrentPos = new Point.ptr(0, 0);
			this.Time = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$1.nil);
			return;
		}
		this.Type = Type_;
		this.Drag = Drag_;
		this.LongPress = LongPress_;
		this.DoublePress = DoublePress_;
		this.InitialPos = InitialPos_;
		this.CurrentPos = CurrentPos_;
		this.Time = Time_;
	});
	internalEvent = $pkg.internalEvent = $newType(0, $kindStruct, "gesture.internalEvent", true, "golang.org/x/exp/shiny/gesture", false, function(eventFilter_, typ_, x_, y_, pressCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.eventFilter = ptrType.nil;
			this.typ = 0;
			this.x = 0;
			this.y = 0;
			this.pressCounter = 0;
			return;
		}
		this.eventFilter = eventFilter_;
		this.typ = typ_;
		this.x = x_;
		this.y = y_;
		this.pressCounter = pressCounter_;
	});
	EventFilter = $pkg.EventFilter = $newType(0, $kindStruct, "gesture.EventFilter", true, "golang.org/x/exp/shiny/gesture", true, function(EventDeque_, inProgress_, drag_, longPress_, doublePress_, initialPos_, pressButton_, pressCounter_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.EventDeque = $ifaceNil;
			this.inProgress = false;
			this.drag = false;
			this.longPress = false;
			this.doublePress = false;
			this.initialPos = new Point.ptr(0, 0);
			this.pressButton = 0;
			this.pressCounter = 0;
			return;
		}
		this.EventDeque = EventDeque_;
		this.inProgress = inProgress_;
		this.drag = drag_;
		this.longPress = longPress_;
		this.doublePress = doublePress_;
		this.initialPos = initialPos_;
		this.pressButton = pressButton_;
		this.pressCounter = pressCounter_;
	});
	sliceType = $sliceType($emptyInterface);
	ptrType = $ptrType(EventFilter);
	ptrType$1 = $ptrType(time.Location);
	Type.prototype.String = function() {
		var _1, _r, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this.$val;
			_1 = t;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (10)) { $s = 4; continue; }
			/* */ if (_1 === (11)) { $s = 5; continue; }
			/* */ if (_1 === (12)) { $s = 6; continue; }
			/* */ if (_1 === (20)) { $s = 7; continue; }
			/* */ if (_1 === (21)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return "Start";
			/* } else if (_1 === (1)) { */ case 3:
				$s = -1; return "End";
			/* } else if (_1 === (10)) { */ case 4:
				$s = -1; return "IsLongPress";
			/* } else if (_1 === (11)) { */ case 5:
				$s = -1; return "IsDoublePress";
			/* } else if (_1 === (12)) { */ case 6:
				$s = -1; return "IsDrag";
			/* } else if (_1 === (20)) { */ case 7:
				$s = -1; return "Tap";
			/* } else if (_1 === (21)) { */ case 8:
				$s = -1; return "Drag";
			/* } else { */ case 9:
				_r = fmt.Sprintf("gesture.Type(%d)", new sliceType([new Type(t)])); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 10:
		case 1:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Type.prototype.String }; } $f._1 = _1; $f._r = _r; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Type).prototype.String = function() { return new Type(this.$get()).String(); };
	EventFilter.ptr.prototype.sendFirst = function(t, x, y, now) {
		var f, now, t, x, x$1, x$2, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; now = $f.now; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (t >= 100) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (t >= 100) { */ case 1:
			$r = f.EventDeque.SendFirst((x$1 = new internalEvent.ptr(f, t, x, y, f.pressCounter), new x$1.constructor.elem(x$1))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		$r = f.EventDeque.SendFirst((x$2 = new Event.ptr(t, f.drag, f.longPress, f.doublePress, $clone(f.initialPos, Point), new Point.ptr(x, y), $clone(now, time.Time)), new x$2.constructor.elem(x$2))); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EventFilter.ptr.prototype.sendFirst }; } $f.f = f; $f.now = now; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	EventFilter.prototype.sendFirst = function(t, x, y, now) { return this.$val.sendFirst(t, x, y, now); };
	EventFilter.ptr.prototype.sendAfter = function(e, sleep) {
		var e, f, sleep, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; e = $f.e; f = $f.f; sleep = $f.sleep; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = time.Sleep(sleep); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f.EventDeque.SendFirst(new e.constructor.elem(e)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EventFilter.ptr.prototype.sendAfter }; } $f.e = e; $f.f = f; $f.sleep = sleep; $f.$s = $s; $f.$r = $r; return $f;
	};
	EventFilter.prototype.sendAfter = function(e, sleep) { return this.$val.sendAfter(e, sleep); };
	EventFilter.ptr.prototype.end = function(x, y, now) {
		var f, now, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; now = $f.now; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		$r = f.sendFirst(1, x, y, $clone(now, time.Time)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f.inProgress = false;
		f.drag = false;
		f.longPress = false;
		f.doublePress = false;
		Point.copy(f.initialPos, new Point.ptr(0, 0));
		f.pressButton = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EventFilter.ptr.prototype.end }; } $f.f = f; $f.now = now; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	EventFilter.prototype.end = function(x, y, now) { return this.$val.end(x, y, now); };
	EventFilter.ptr.prototype.Filter = function(e) {
		var _1, _2, _ref, e, e$1, e$2, f, now, now$1, oldDoublePress, oldInProgress, startDrag, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _ref = $f._ref; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; f = $f.f; now = $f.now; now$1 = $f.now$1; oldDoublePress = $f.oldDoublePress; oldInProgress = $f.oldInProgress; startDrag = $f.startDrag; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_ref = e;
		/* */ if ($assertType(_ref, internalEvent, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, mouse.Event, true)[1]) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* switch (0) { default: if ($assertType(_ref, internalEvent, true)[1]) { */ case 1:
			e$1 = $clone(_ref.$val, internalEvent);
			if (!(e$1.eventFilter === f)) {
				/* break; */ $s = 3; continue;
			}
			now = $clone(time.Now(), time.Time);
				_1 = e$1.typ;
				/* */ if (_1 === (100)) { $s = 5; continue; }
				/* */ if (_1 === (101)) { $s = 6; continue; }
				/* */ if (_1 === (110)) { $s = 7; continue; }
				/* */ if (_1 === (111)) { $s = 8; continue; }
				/* */ $s = 9; continue;
				/* if (_1 === (100)) { */ case 5:
					e$1.typ = 101;
					$go($methodVal(f, "sendAfter"), [$clone(e$1, internalEvent), new time.Duration(0, 300000000)]);
					$s = 9; continue;
				/* } else if (_1 === (101)) { */ case 6:
					/* */ if (e$1.pressCounter === f.pressCounter) { $s = 10; continue; }
					/* */ $s = 11; continue;
					/* if (e$1.pressCounter === f.pressCounter) { */ case 10:
						$r = f.end(e$1.x, e$1.y, $clone(now, time.Time)); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 11:
					$s = 9; continue;
				/* } else if (_1 === (110)) { */ case 7:
					e$1.typ = 111;
					$go($methodVal(f, "sendAfter"), [$clone(e$1, internalEvent), new time.Duration(0, 500000000)]);
					$s = 9; continue;
				/* } else if (_1 === (111)) { */ case 8:
					/* */ if ((e$1.pressCounter === f.pressCounter) && !f.drag) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if ((e$1.pressCounter === f.pressCounter) && !f.drag) { */ case 13:
						f.longPress = true;
						$r = f.sendFirst(10, e$1.x, e$1.y, $clone(now, time.Time)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 14:
				/* } */ case 9:
			case 4:
			$s = -1; return $ifaceNil;
		/* } else if ($assertType(_ref, mouse.Event, true)[1]) { */ case 2:
			e$2 = $clone(_ref.$val, mouse.Event);
			now$1 = $clone(time.Now(), time.Time);
				_2 = e$2.Direction;
				/* */ if (_2 === (0)) { $s = 17; continue; }
				/* */ if (_2 === (1)) { $s = 18; continue; }
				/* */ if (_2 === (2)) { $s = 19; continue; }
				/* */ $s = 20; continue;
				/* if (_2 === (0)) { */ case 17:
					if (f.pressButton === 0) {
						/* break; */ $s = 16; continue;
					}
					startDrag = false;
					if (!f.drag && (abs($fround(e$2.X - f.initialPos.X)) > 10 || abs($fround(e$2.Y - f.initialPos.Y)) > 10)) {
						f.drag = true;
						startDrag = true;
					}
					/* */ if (f.drag) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (f.drag) { */ case 21:
						$r = f.sendFirst(21, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 22:
					/* */ if (startDrag) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (startDrag) { */ case 24:
						$r = f.sendFirst(12, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 25:
					$s = 20; continue;
				/* } else if (_2 === (1)) { */ case 18:
					if (!((f.pressButton === 0))) {
						/* break; */ $s = 16; continue;
					}
					oldInProgress = f.inProgress;
					oldDoublePress = f.doublePress;
					f.drag = false;
					f.longPress = false;
					f.doublePress = f.inProgress;
					Point.copy(f.initialPos, new Point.ptr(e$2.X, e$2.Y));
					f.pressButton = e$2.Button;
					f.pressCounter = f.pressCounter + (1) >>> 0;
					f.inProgress = true;
					$r = f.sendFirst(110, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!oldDoublePress && f.doublePress) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (!oldDoublePress && f.doublePress) { */ case 28:
						$r = f.sendFirst(11, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 29:
					/* */ if (!oldInProgress) { $s = 31; continue; }
					/* */ $s = 32; continue;
					/* if (!oldInProgress) { */ case 31:
						$r = f.sendFirst(0, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 32:
					$s = 20; continue;
				/* } else if (_2 === (2)) { */ case 19:
					if (!((f.pressButton === e$2.Button))) {
						/* break; */ $s = 16; continue;
					}
					f.pressButton = 0;
					f.pressCounter = f.pressCounter + (1) >>> 0;
					/* */ if (f.drag) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (f.drag) { */ case 34:
						$r = f.end(e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* break; */ $s = 16; continue;
					/* } */ case 35:
					$r = f.sendFirst(100, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$r = f.sendFirst(20, e$2.X, e$2.Y, $clone(now$1, time.Time)); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 20:
			case 16:
		/* } } */ case 3:
		$s = -1; return e;
		/* */ } return; } if ($f === undefined) { $f = { $blk: EventFilter.ptr.prototype.Filter }; } $f._1 = _1; $f._2 = _2; $f._ref = _ref; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.f = f; $f.now = now; $f.now$1 = now$1; $f.oldDoublePress = oldDoublePress; $f.oldInProgress = oldInProgress; $f.startDrag = startDrag; $f.$s = $s; $f.$r = $r; return $f;
	};
	EventFilter.prototype.Filter = function(e) { return this.$val.Filter(e); };
	abs = function(x) {
		var x;
		if (x < 0) {
			return -x;
		} else if (x === 0) {
			return 0;
		}
		return x;
	};
	Type.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType.methods = [{prop: "sendFirst", name: "sendFirst", pkg: "golang.org/x/exp/shiny/gesture", typ: $funcType([Type, $Float32, $Float32, time.Time], [], false)}, {prop: "sendAfter", name: "sendAfter", pkg: "golang.org/x/exp/shiny/gesture", typ: $funcType([internalEvent, time.Duration], [], false)}, {prop: "end", name: "end", pkg: "golang.org/x/exp/shiny/gesture", typ: $funcType([$Float32, $Float32, time.Time], [], false)}, {prop: "Filter", name: "Filter", pkg: "", typ: $funcType([$emptyInterface], [$emptyInterface], false)}];
	Point.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Float32, tag: ""}]);
	Event.init("", [{prop: "Type", name: "Type", anonymous: false, exported: true, typ: Type, tag: ""}, {prop: "Drag", name: "Drag", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "LongPress", name: "LongPress", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "DoublePress", name: "DoublePress", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "InitialPos", name: "InitialPos", anonymous: false, exported: true, typ: Point, tag: ""}, {prop: "CurrentPos", name: "CurrentPos", anonymous: false, exported: true, typ: Point, tag: ""}, {prop: "Time", name: "Time", anonymous: false, exported: true, typ: time.Time, tag: ""}]);
	internalEvent.init("golang.org/x/exp/shiny/gesture", [{prop: "eventFilter", name: "eventFilter", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "typ", name: "typ", anonymous: false, exported: false, typ: Type, tag: ""}, {prop: "x", name: "x", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "y", name: "y", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "pressCounter", name: "pressCounter", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	EventFilter.init("golang.org/x/exp/shiny/gesture", [{prop: "EventDeque", name: "EventDeque", anonymous: false, exported: true, typ: screen.EventDeque, tag: ""}, {prop: "inProgress", name: "inProgress", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "drag", name: "drag", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "longPress", name: "longPress", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "doublePress", name: "doublePress", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "initialPos", name: "initialPos", anonymous: false, exported: false, typ: Point, tag: ""}, {prop: "pressButton", name: "pressButton", anonymous: false, exported: false, typ: mouse.Button, tag: ""}, {prop: "pressCounter", name: "pressCounter", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = screen.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mouse.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/mouse"] = (function() {
	var $pkg = {}, $init, errors, collision, event, physics, gesture, mouse, time, Event, GestureEvent, ptrType, sliceType, ptrType$1, ptrType$2, ptrType$3, FromShinyGesture, init, Clear, Propagate, GetMouseButton, GetEventName;
	errors = $packages["errors"];
	collision = $packages["github.com/oakmound/oak/collision"];
	event = $packages["github.com/oakmound/oak/event"];
	physics = $packages["github.com/oakmound/oak/physics"];
	gesture = $packages["golang.org/x/exp/shiny/gesture"];
	mouse = $packages["golang.org/x/mobile/event/mouse"];
	time = $packages["time"];
	Event = $pkg.Event = $newType(0, $kindStruct, "mouse.Event", true, "github.com/oakmound/oak/mouse", true, function(X_, Y_, Button_, Event_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			this.Button = "";
			this.Event = "";
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Button = Button_;
		this.Event = Event_;
	});
	GestureEvent = $pkg.GestureEvent = $newType(0, $kindStruct, "mouse.GestureEvent", true, "github.com/oakmound/oak/mouse", true, function(Drag_, LongPress_, DoublePress_, InitialPos_, CurrentPos_, Time_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Drag = false;
			this.LongPress = false;
			this.DoublePress = false;
			this.InitialPos = new physics.Vector.ptr(ptrType$2.nil, ptrType$2.nil, 0, 0);
			this.CurrentPos = new physics.Vector.ptr(ptrType$2.nil, ptrType$2.nil, 0, 0);
			this.Time = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$3.nil);
			return;
		}
		this.Drag = Drag_;
		this.LongPress = LongPress_;
		this.DoublePress = DoublePress_;
		this.InitialPos = InitialPos_;
		this.CurrentPos = CurrentPos_;
		this.Time = Time_;
	});
	ptrType = $ptrType(collision.Tree);
	sliceType = $sliceType($Int);
	ptrType$1 = $ptrType(collision.Space);
	ptrType$2 = $ptrType($Float64);
	ptrType$3 = $ptrType(time.Location);
	Event.ptr.prototype.ToSpace = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = collision.NewUnassignedSpace((e.X), (e.Y), 0.1, 0.1); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Event.ptr.prototype.ToSpace }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Event.prototype.ToSpace = function() { return this.$val.ToSpace(); };
	Event.ptr.prototype.ToVector = function() {
		var e;
		e = this;
		return physics.NewVector((e.X), (e.Y));
	};
	Event.prototype.ToVector = function() { return this.$val.ToVector(); };
	FromShinyGesture = function(shinyGesture) {
		var shinyGesture;
		return new GestureEvent.ptr(shinyGesture.Drag, shinyGesture.LongPress, shinyGesture.DoublePress, $clone(physics.NewVector((shinyGesture.InitialPos.X), (shinyGesture.InitialPos.Y)), physics.Vector), $clone(physics.NewVector((shinyGesture.CurrentPos.X), (shinyGesture.CurrentPos.Y)), physics.Vector), $clone(shinyGesture.Time, time.Time));
	};
	$pkg.FromShinyGesture = FromShinyGesture;
	init = function() {
		var _tuple;
		_tuple = collision.NewTree(new sliceType([]));
		$pkg.DefTree = _tuple[0];
	};
	Clear = function() {
		$pkg.DefTree.Clear();
	};
	$pkg.Clear = Clear;
	Propagate = function(eventName, me) {
		var _i, _r, _r$1, _r$2, _ref, eventName, hits, me, sp, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; eventName = $f.eventName; hits = $f.hits; me = $f.me; sp = $f.sp; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $clone(me, Event).ToSpace(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = _r.Bounds(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = $pkg.DefTree.Rtree.SearchIntersect(_r$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		hits = _r$2;
		_ref = hits;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			sp = $assertType(v, ptrType$1);
			new event.CID(sp.CID).Trigger(eventName, new me.constructor.elem(me));
			_i++;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Propagate }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f.eventName = eventName; $f.hits = hits; $f.me = me; $f.sp = sp; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Propagate = Propagate;
	GetMouseButton = function(b) {
		var _1, b, s;
		s = "";
		_1 = b;
		if (_1 === (1)) {
			s = "LeftMouse";
		} else if (_1 === (2)) {
			s = "MiddleMouse";
		} else if (_1 === (3)) {
			s = "RightMouse";
		} else if (_1 === (-1)) {
			s = "ScrollUpMouse";
		} else if (_1 === (-2)) {
			s = "ScrollDownMouse";
		} else {
			s = "";
		}
		return s;
	};
	$pkg.GetMouseButton = GetMouseButton;
	GetEventName = function(d, b) {
		var _1, _2, b, d;
		_1 = d;
		if (_1 === (1)) {
			return "MousePress";
		} else if (_1 === (2)) {
			return "MouseRelease";
		} else {
			_2 = b;
			if (_2 === (-2)) {
				return "MouseScrollDown";
			} else if (_2 === (-1)) {
				return "MouseScrollUp";
			}
		}
		return "MouseDrag";
	};
	$pkg.GetEventName = GetEventName;
	Event.methods = [{prop: "ToSpace", name: "ToSpace", pkg: "", typ: $funcType([], [ptrType$1], false)}, {prop: "ToVector", name: "ToVector", pkg: "", typ: $funcType([], [physics.Vector], false)}];
	Event.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "Button", name: "Button", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Event", name: "Event", anonymous: false, exported: true, typ: $String, tag: ""}]);
	GestureEvent.init("", [{prop: "Drag", name: "Drag", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "LongPress", name: "LongPress", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "DoublePress", name: "DoublePress", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "InitialPos", name: "InitialPos", anonymous: false, exported: true, typ: physics.Vector, tag: ""}, {prop: "CurrentPos", name: "CurrentPos", anonymous: false, exported: true, typ: physics.Vector, tag: ""}, {prop: "Time", name: "Time", anonymous: false, exported: true, typ: time.Time, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = collision.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = physics.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gesture.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mouse.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.LastMouseEvent = new Event.ptr(0, 0, "", "");
		$pkg.DefTree = ptrType.nil;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["container/heap"] = (function() {
	var $pkg = {}, $init, sort, Push, Pop, up, down;
	sort = $packages["sort"];
	Push = function(h, x) {
		var _arg, _arg$1, _r, h, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; h = $f.h; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = h.Push(x); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_arg = h;
		_r = h.Len(); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r - 1 >> 0;
		$r = up(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Push }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.h = h; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Push = Push;
	Pop = function(h) {
		var _r, _r$1, _r$2, h, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; h = $f.h; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = h.Len(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		n = _r - 1 >> 0;
		$r = h.Swap(0, n); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = down(h, 0, n); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = h.Pop(); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return _r$2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pop }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.h = h; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Pop = Pop;
	up = function(h, j) {
		var _q, _r, _v, h, i, j, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r = $f._r; _v = $f._v; h = $f.h; i = $f.i; j = $f.j; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* while (true) { */ case 1:
			i = (_q = ((j - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (i === j) { _v = true; $s = 5; continue s; }
			_r = h.Less(j, i); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				/* break; */ $s = 2; continue;
			/* } */ case 4:
			$r = h.Swap(i, j); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			j = i;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: up }; } $f._q = _q; $f._r = _r; $f._v = _v; $f.h = h; $f.i = i; $f.j = j; $f.$s = $s; $f.$r = $r; return $f;
	};
	down = function(h, i0, n) {
		var _r, _r$1, _v, h, i, i0, j, j1, j2, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _v = $f._v; h = $f.h; i = $f.i; i0 = $f.i0; j = $f.j; j1 = $f.j1; j2 = $f.j2; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = i0;
		/* while (true) { */ case 1:
			j1 = ($imul(2, i)) + 1 >> 0;
			if (j1 >= n || j1 < 0) {
				/* break; */ $s = 2; continue;
			}
			j = j1;
			j2 = j1 + 1 >> 0;
			if (!(j2 < n)) { _v = false; $s = 5; continue s; }
			_r = h.Less(j2, j1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = _r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				j = j2;
			/* } */ case 4:
			_r$1 = h.Less(j, i); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!_r$1) { */ case 7:
				/* break; */ $s = 2; continue;
			/* } */ case 8:
			$r = h.Swap(i, j); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			i = j;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return i > i0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: down }; } $f._r = _r; $f._r$1 = _r$1; $f._v = _v; $f.h = h; $f.i = i; $f.i0 = i0; $f.j = j; $f.j1 = j1; $f.j2 = j2; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/200sc/go-dist/intrange"] = (function() {
	var $pkg = {}, $init, math, rand, time;
	math = $packages["math"];
	rand = $packages["math/rand"];
	time = $packages["time"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = math.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/200sc/go-dist/colorrange"] = (function() {
	var $pkg = {}, $init, intrange, color;
	intrange = $packages["github.com/200sc/go-dist/intrange"];
	color = $packages["image/color"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = intrange.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/akavel/polyclip-go"] = (function() {
	var $pkg = {}, $init, fmt, math, sort, polygonType, edgeType, clipper, connector, endpoint, eventQueue, queueComparer, Point, Rectangle, segment, Contour, Polygon, Op, chain, sweepline, ptrType, sliceType, ptrType$1, sliceType$1, ptrType$2, sliceType$2, ptrType$3, sliceType$3, ptrType$4, sliceType$4, sliceType$5, ptrType$5, ptrType$6, ptrType$7, ptrType$8, _DBG, findIntersection, findIntersection2, addProcessedSegment, signedArea, endpointLess, newChain, reversed, segmentCompare;
	fmt = $packages["fmt"];
	math = $packages["math"];
	sort = $packages["sort"];
	polygonType = $pkg.polygonType = $newType(4, $kindInt, "polyclip.polygonType", true, "github.com/akavel/polyclip-go", false, null);
	edgeType = $pkg.edgeType = $newType(4, $kindInt, "polyclip.edgeType", true, "github.com/akavel/polyclip-go", false, null);
	clipper = $pkg.clipper = $newType(0, $kindStruct, "polyclip.clipper", true, "github.com/akavel/polyclip-go", false, function(subject_, clipping_, eventQueue_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.subject = Polygon.nil;
			this.clipping = Polygon.nil;
			this.eventQueue = new eventQueue.ptr(sliceType$3.nil, false);
			return;
		}
		this.subject = subject_;
		this.clipping = clipping_;
		this.eventQueue = eventQueue_;
	});
	connector = $pkg.connector = $newType(0, $kindStruct, "polyclip.connector", true, "github.com/akavel/polyclip-go", false, function(openPolys_, closedPolys_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.openPolys = sliceType.nil;
			this.closedPolys = sliceType.nil;
			return;
		}
		this.openPolys = openPolys_;
		this.closedPolys = closedPolys_;
	});
	endpoint = $pkg.endpoint = $newType(0, $kindStruct, "polyclip.endpoint", true, "github.com/akavel/polyclip-go", false, function(p_, left_, polygonType_, other_, inout_, edgeType_, inside_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = new Point.ptr(0, 0);
			this.left = false;
			this.polygonType = 0;
			this.other = ptrType$1.nil;
			this.inout = false;
			this.edgeType = 0;
			this.inside = false;
			return;
		}
		this.p = p_;
		this.left = left_;
		this.polygonType = polygonType_;
		this.other = other_;
		this.inout = inout_;
		this.edgeType = edgeType_;
		this.inside = inside_;
	});
	eventQueue = $pkg.eventQueue = $newType(0, $kindStruct, "polyclip.eventQueue", true, "github.com/akavel/polyclip-go", false, function(elements_, sorted_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.elements = sliceType$3.nil;
			this.sorted = false;
			return;
		}
		this.elements = elements_;
		this.sorted = sorted_;
	});
	queueComparer = $pkg.queueComparer = $newType(12, $kindSlice, "polyclip.queueComparer", true, "github.com/akavel/polyclip-go", false, null);
	Point = $pkg.Point = $newType(0, $kindStruct, "polyclip.Point", true, "github.com/akavel/polyclip-go", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle = $pkg.Rectangle = $newType(0, $kindStruct, "polyclip.Rectangle", true, "github.com/akavel/polyclip-go", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point.ptr(0, 0);
			this.Max = new Point.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	segment = $pkg.segment = $newType(0, $kindStruct, "polyclip.segment", true, "github.com/akavel/polyclip-go", false, function(start_, end_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.start = new Point.ptr(0, 0);
			this.end = new Point.ptr(0, 0);
			return;
		}
		this.start = start_;
		this.end = end_;
	});
	Contour = $pkg.Contour = $newType(12, $kindSlice, "polyclip.Contour", true, "github.com/akavel/polyclip-go", true, null);
	Polygon = $pkg.Polygon = $newType(12, $kindSlice, "polyclip.Polygon", true, "github.com/akavel/polyclip-go", true, null);
	Op = $pkg.Op = $newType(4, $kindInt, "polyclip.Op", true, "github.com/akavel/polyclip-go", true, null);
	chain = $pkg.chain = $newType(0, $kindStruct, "polyclip.chain", true, "github.com/akavel/polyclip-go", false, function(closed_, points_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.closed = false;
			this.points = sliceType$4.nil;
			return;
		}
		this.closed = closed_;
		this.points = points_;
	});
	sweepline = $pkg.sweepline = $newType(12, $kindSlice, "polyclip.sweepline", true, "github.com/akavel/polyclip-go", false, null);
	ptrType = $ptrType(Polygon);
	sliceType = $sliceType(chain);
	ptrType$1 = $ptrType(endpoint);
	sliceType$1 = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(sweepline);
	sliceType$2 = $sliceType($Float64);
	ptrType$3 = $ptrType(sliceType$2);
	sliceType$3 = $sliceType(ptrType$1);
	ptrType$4 = $ptrType(Contour);
	sliceType$4 = $sliceType(Point);
	sliceType$5 = $sliceType(Contour);
	ptrType$5 = $ptrType(clipper);
	ptrType$6 = $ptrType(connector);
	ptrType$7 = $ptrType(eventQueue);
	ptrType$8 = $ptrType(chain);
	_DBG = function(f) {
		var f;
	};
	clipper.ptr.prototype.compute = function(operation) {
		var MINMAX_X, S, _1, _2, _3, _4, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, clippingbb, connector$1, cont, cont$1, cont$2, e, i, i$1, i$2, next, operation, otherPos, pos, prev, prevTwo, result, result$24ptr, subjectbb, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; MINMAX_X = $f.MINMAX_X; S = $f.S; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _i$5 = $f._i$5; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _ref$5 = $f._ref$5; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; c = $f.c; clippingbb = $f.clippingbb; connector$1 = $f.connector$1; cont = $f.cont; cont$1 = $f.cont$1; cont$2 = $f.cont$2; e = $f.e; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; next = $f.next; operation = $f.operation; otherPos = $f.otherPos; pos = $f.pos; prev = $f.prev; prevTwo = $f.prevTwo; result = $f.result; result$24ptr = $f.result$24ptr; subjectbb = $f.subjectbb; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		S = [S];
		c = [c];
		connector$1 = [connector$1];
		c[0] = this;
		if (($imul(c[0].subject.$length, c[0].clipping.$length)) === 0) {
			_1 = operation;
			if (_1 === (2)) {
				$s = -1; return c[0].subject.Clone();
			} else if (_1 === (0)) {
				if (c[0].subject.$length === 0) {
					$s = -1; return c[0].clipping.Clone();
				}
				$s = -1; return c[0].subject.Clone();
			}
			$s = -1; return new Polygon([]);
		}
		subjectbb = $clone(c[0].subject.BoundingBox(), Rectangle);
		clippingbb = $clone(c[0].clipping.BoundingBox(), Rectangle);
		if (!$clone(subjectbb, Rectangle).Overlaps($clone(clippingbb, Rectangle))) {
			_2 = operation;
			if (_2 === (2)) {
				$s = -1; return c[0].subject.Clone();
			} else if (_2 === (0)) {
				result = c[0].subject.Clone();
				_ref = c[0].clipping;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					cont = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					(result$24ptr || (result$24ptr = new ptrType(function() { return result; }, function($v) { result = $subslice(new Polygon($v.$array), $v.$offset, $v.$offset + $v.$length); }))).Add(cont.Clone());
					_i++;
				}
				$s = -1; return result;
			}
			$s = -1; return new Polygon([]);
		}
		_ref$1 = c[0].subject;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			cont$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			_ref$2 = cont$1;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				i = _i$2;
				addProcessedSegment(c[0].eventQueue, $clone(cont$1.segment(i), segment), 0);
				_i$2++;
			}
			_i$1++;
		}
		_ref$3 = c[0].clipping;
		_i$3 = 0;
		while (true) {
			if (!(_i$3 < _ref$3.$length)) { break; }
			cont$2 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
			_ref$4 = cont$2;
			_i$4 = 0;
			while (true) {
				if (!(_i$4 < _ref$4.$length)) { break; }
				i$1 = _i$4;
				addProcessedSegment(c[0].eventQueue, $clone(cont$2.segment(i$1), segment), 1);
				_i$4++;
			}
			_i$3++;
		}
		connector$1[0] = new connector.ptr(sliceType.nil, sliceType.nil);
		S[0] = new sweepline([]);
		MINMAX_X = math.Min(subjectbb.Max.X, clippingbb.Max.X);
		_DBG((function(S, c, connector$1) { return function $b() {
			var _i$5, _r, _r$1, _r$2, _ref$5, e, e$1, i$2, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i$5 = $f._i$5; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref$5 = $f._ref$5; e = $f.e; e$1 = $f.e$1; i$2 = $f.i$2; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_r = c[0].eventQueue.dequeue(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			e = _r;
			c[0].eventQueue.enqueue(e);
			_r$1 = fmt.Print(new sliceType$1([new $String("\nInitial queue:\n")])); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$1;
			_ref$5 = c[0].eventQueue.elements;
			_i$5 = 0;
			/* while (true) { */ case 3:
				/* if (!(_i$5 < _ref$5.$length)) { break; } */ if(!(_i$5 < _ref$5.$length)) { $s = 4; continue; }
				i$2 = _i$5;
				e$1 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$5]);
				_r$2 = fmt.Println(new sliceType$1([new $Int(i$2), new $String("="), (x = e$1, new x.constructor.elem(x))])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$2;
				_i$5++;
			/* } */ $s = 3; continue; case 4:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._i$5 = _i$5; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref$5 = _ref$5; $f.e = e; $f.e$1 = e$1; $f.i$2 = i$2; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}; })(S, c, connector$1));
		/* while (true) { */ case 1:
			/* if (!(!c[0].eventQueue.IsEmpty())) { break; } */ if(!(!c[0].eventQueue.IsEmpty())) { $s = 2; continue; }
			e = [e];
			_tmp = ptrType$1.nil;
			_tmp$1 = ptrType$1.nil;
			prev = _tmp;
			next = _tmp$1;
			_r = c[0].eventQueue.dequeue(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			e[0] = _r;
			_DBG((function(S, c, connector$1, e) { return function $b() {
				var _r$1, x, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$1 = fmt.Printf("\nProcess event: (of %d)\n%v\n", new sliceType$1([new $Int((c[0].eventQueue.elements.$length + 1 >> 0)), (x = e[0], new x.constructor.elem(x))])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
			}; })(S, c, connector$1, e));
			if ((operation === 1) && e[0].p.X > MINMAX_X) {
				$s = -1; return connector$1[0].toPolygon();
			} else if ((operation === 2) && e[0].p.X > subjectbb.Max.X) {
				$s = -1; return connector$1[0].toPolygon();
			}
			if (e[0].left) {
				pos = (S.$ptr || (S.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, S))).insert(e[0]);
				prev = ptrType$1.nil;
				if (pos > 0) {
					prev = (x = pos - 1 >> 0, ((x < 0 || x >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + x]));
				}
				next = ptrType$1.nil;
				if (pos < (S[0].$length - 1 >> 0)) {
					next = (x$1 = pos + 1 >> 0, ((x$1 < 0 || x$1 >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + x$1]));
				}
				if (prev === ptrType$1.nil) {
					_tmp$2 = false;
					_tmp$3 = false;
					e[0].inside = _tmp$2;
					e[0].inout = _tmp$3;
				} else if (!((prev.edgeType === 0))) {
					if ((pos - 2 >> 0) < 0) {
						_tmp$4 = false;
						_tmp$5 = false;
						e[0].inside = _tmp$4;
						e[0].inout = _tmp$5;
						if (!((prev.polygonType === e[0].polygonType))) {
							e[0].inside = true;
						} else {
							e[0].inout = true;
						}
					} else {
						prevTwo = (x$2 = pos - 2 >> 0, ((x$2 < 0 || x$2 >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + x$2]));
						if (prev.polygonType === e[0].polygonType) {
							e[0].inout = !prev.inout;
							e[0].inside = !prevTwo.inout;
						} else {
							e[0].inout = !prevTwo.inout;
							e[0].inside = !prev.inout;
						}
					}
				} else if ((e[0].polygonType === prev.polygonType)) {
					e[0].inside = prev.inside;
					e[0].inout = !prev.inout;
				} else {
					e[0].inside = !prev.inout;
					e[0].inout = prev.inside;
				}
				_DBG((function(S, c, connector$1, e) { return function $b() {
					var _i$5, _r$1, _r$2, _ref$5, e$1, x$3, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i$5 = $f._i$5; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref$5 = $f._ref$5; e$1 = $f.e$1; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_r$1 = fmt.Println(new sliceType$1([new $String("Status line after insertion: ")])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					_ref$5 = S[0];
					_i$5 = 0;
					/* while (true) { */ case 2:
						/* if (!(_i$5 < _ref$5.$length)) { break; } */ if(!(_i$5 < _ref$5.$length)) { $s = 3; continue; }
						e$1 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$5.$array[_ref$5.$offset + _i$5]);
						_r$2 = fmt.Println(new sliceType$1([(x$3 = e$1, new x$3.constructor.elem(x$3))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
						_r$2;
						_i$5++;
					/* } */ $s = 2; continue; case 3:
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._i$5 = _i$5; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref$5 = _ref$5; $f.e$1 = e$1; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
				}; })(S, c, connector$1, e));
				if (!(next === ptrType$1.nil)) {
					c[0].possibleIntersection(e[0], next);
				}
				if (!(prev === ptrType$1.nil)) {
					c[0].possibleIntersection(prev, e[0]);
				}
			} else {
				otherPos = -1;
				_ref$5 = S[0];
				_i$5 = 0;
				while (true) {
					if (!(_i$5 < _ref$5.$length)) { break; }
					i$2 = _i$5;
					if (((i$2 < 0 || i$2 >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + i$2]).equals(e[0].other)) {
						otherPos = i$2;
						break;
					}
					_i$5++;
				}
				if (!((otherPos === -1))) {
					prev = ptrType$1.nil;
					if (otherPos > 0) {
						prev = (x$3 = otherPos - 1 >> 0, ((x$3 < 0 || x$3 >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + x$3]));
					}
					next = ptrType$1.nil;
					if (otherPos < (S[0].$length - 1 >> 0)) {
						next = (x$4 = otherPos + 1 >> 0, ((x$4 < 0 || x$4 >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + x$4]));
					}
				}
				_3 = e[0].edgeType;
				if (_3 === (0)) {
					_4 = operation;
					if (_4 === (1)) {
						if (e[0].other.inside) {
							connector$1[0].add($clone(e[0].segment(), segment));
						}
					} else if (_4 === (0)) {
						if (!e[0].other.inside) {
							connector$1[0].add($clone(e[0].segment(), segment));
						}
					} else if (_4 === (2)) {
						if (((e[0].polygonType === 0) && !e[0].other.inside) || ((e[0].polygonType === 1) && e[0].other.inside)) {
							connector$1[0].add($clone(e[0].segment(), segment));
						}
					} else if (_4 === (3)) {
						connector$1[0].add($clone(e[0].segment(), segment));
					}
				} else if (_3 === (2)) {
					if ((operation === 1) || (operation === 0)) {
						connector$1[0].add($clone(e[0].segment(), segment));
					}
				} else if (_3 === (3)) {
					if (operation === 2) {
						connector$1[0].add($clone(e[0].segment(), segment));
					}
				}
				if (!((otherPos === -1))) {
					(S.$ptr || (S.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, S))).remove(((otherPos < 0 || otherPos >= S[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : S[0].$array[S[0].$offset + otherPos]));
				}
				if (!(next === ptrType$1.nil) && !(prev === ptrType$1.nil)) {
					c[0].possibleIntersection(next, prev);
				}
				_DBG((function(S, c, connector$1, e) { return function $b() {
					var _r$1, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					_r$1 = fmt.Print(new sliceType$1([new $String("Connector:\n"), new connector$1[0].constructor.elem(connector$1[0]), new $String("\n")])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1;
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
				}; })(S, c, connector$1, e));
			}
			_DBG((function(S, c, connector$1, e) { return function $b() {
				var _i$6, _r$1, _r$2, _ref$6, e$1, x$5, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i$6 = $f._i$6; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref$6 = $f._ref$6; e$1 = $f.e$1; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$1 = fmt.Println(new sliceType$1([new $String("Status line after processing intersections: ")])); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				_ref$6 = S[0];
				_i$6 = 0;
				/* while (true) { */ case 2:
					/* if (!(_i$6 < _ref$6.$length)) { break; } */ if(!(_i$6 < _ref$6.$length)) { $s = 3; continue; }
					e$1 = ((_i$6 < 0 || _i$6 >= _ref$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$6.$array[_ref$6.$offset + _i$6]);
					_r$2 = fmt.Println(new sliceType$1([(x$5 = e$1, new x$5.constructor.elem(x$5))])); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_r$2;
					_i$6++;
				/* } */ $s = 2; continue; case 3:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._i$6 = _i$6; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref$6 = _ref$6; $f.e$1 = e$1; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
			}; })(S, c, connector$1, e));
		/* } */ $s = 1; continue; case 2:
		$s = -1; return connector$1[0].toPolygon();
		/* */ } return; } if ($f === undefined) { $f = { $blk: clipper.ptr.prototype.compute }; } $f.MINMAX_X = MINMAX_X; $f.S = S; $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._i$5 = _i$5; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._ref$5 = _ref$5; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.c = c; $f.clippingbb = clippingbb; $f.connector$1 = connector$1; $f.cont = cont; $f.cont$1 = cont$1; $f.cont$2 = cont$2; $f.e = e; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.next = next; $f.operation = operation; $f.otherPos = otherPos; $f.pos = pos; $f.prev = prev; $f.prevTwo = prevTwo; $f.result = result; $f.result$24ptr = result$24ptr; $f.subjectbb = subjectbb; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	clipper.prototype.compute = function(operation) { return this.$val.compute(operation); };
	findIntersection = function(seg0, seg1) {
		var E, _tmp, _tmp$1, d0, d1, imax, kross, p0, p1, pi0, pi1, s, s0, s1, seg0, seg1, smax, smin, sqrEpsilon, sqrKross, sqrLen0, sqrLen1, sqrLenE, t, w, w$24ptr;
		_tmp = new Point.ptr(0, 0);
		_tmp$1 = new Point.ptr(0, 0);
		pi0 = $clone(_tmp, Point);
		pi1 = $clone(_tmp$1, Point);
		p0 = $clone(seg0.start, Point);
		d0 = new Point.ptr(seg0.end.X - p0.X, seg0.end.Y - p0.Y);
		p1 = $clone(seg1.start, Point);
		d1 = new Point.ptr(seg1.end.X - p1.X, seg1.end.Y - p1.Y);
		sqrEpsilon = 1e-07;
		E = new Point.ptr(p1.X - p0.X, p1.Y - p0.Y);
		kross = d0.X * d1.Y - d0.Y * d1.X;
		sqrKross = kross * kross;
		sqrLen0 = $clone(d0, Point).Length();
		sqrLen1 = $clone(d1, Point).Length();
		if (sqrKross > sqrEpsilon * sqrLen0 * sqrLen1) {
			s = (E.X * d1.Y - E.Y * d1.X) / kross;
			if (s < 0 || s > 1) {
				return [0, new Point.ptr(0, 0), new Point.ptr(0, 0)];
			}
			t = (E.X * d0.Y - E.Y * d0.X) / kross;
			if (t < 0 || t > 1) {
				return [0, new Point.ptr(0, 0), new Point.ptr(0, 0)];
			}
			pi0.X = p0.X + s * d0.X;
			pi0.Y = p0.Y + s * d0.Y;
			return [1, pi0, pi1];
		}
		sqrLenE = $clone(E, Point).Length();
		kross = E.X * d0.Y - E.Y * d0.X;
		sqrKross = kross * kross;
		if (sqrKross > sqrEpsilon * sqrLen0 * sqrLenE) {
			return [0, pi0, pi1];
		}
		s0 = (d0.X * E.X + d0.Y * E.Y) / sqrLen0;
		s1 = s0 + (d0.X * d1.X + d0.Y * d1.Y) / sqrLen0;
		smin = math.Min(s0, s1);
		smax = math.Max(s0, s1);
		w = $makeSlice(sliceType$2, 0);
		imax = findIntersection2(0, 1, smin, smax, (w$24ptr || (w$24ptr = new ptrType$3(function() { return w; }, function($v) { w = $subslice(new sliceType$2($v.$array), $v.$offset, $v.$offset + $v.$length); }))));
		if (imax > 0) {
			pi0.X = p0.X + (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]) * d0.X;
			pi0.Y = p0.Y + (0 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 0]) * d0.Y;
			if (imax > 1) {
				pi1.X = p0.X + (1 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 1]) * d0.X;
				pi1.Y = p0.Y + (1 >= w.$length ? ($throwRuntimeError("index out of range"), undefined) : w.$array[w.$offset + 1]) * d0.Y;
			}
		}
		return [imax, pi0, pi1];
	};
	findIntersection2 = function(u0, u1, v0, v1, w) {
		var u0, u1, v0, v1, w;
		if (u1 < v0 || u0 > v1) {
			return 0;
		}
		if (u1 === v0) {
			w.$set($append(w.$get(), u1));
			return 1;
		}
		if (u0 === v1) {
			w.$set($append(w.$get(), u0));
			return 1;
		}
		if (u0 < v0) {
			w.$set($append(w.$get(), v0));
		} else {
			w.$set($append(w.$get(), u0));
		}
		if (u1 > v1) {
			w.$set($append(w.$get(), v1));
		} else {
			w.$set($append(w.$get(), u1));
		}
		return 2;
	};
	clipper.ptr.prototype.possibleIntersection = function(e1, e2) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, c, e1, e2, idx, ip1, numIntersections, sortedEvents;
		c = this;
		_tuple = findIntersection($clone(e1.segment(), segment), $clone(e2.segment(), segment));
		numIntersections = _tuple[0];
		ip1 = $clone(_tuple[1], Point);
		if (numIntersections === 0) {
			return;
		}
		if ((numIntersections === 1) && ($clone(e1.p, Point).Equals($clone(e2.p, Point)) || $clone(e1.other.p, Point).Equals($clone(e2.other.p, Point)))) {
			return;
		}
		if ((numIntersections === 2) && (e1.polygonType === e2.polygonType)) {
			return;
		}
		if (numIntersections === 1) {
			if (!$clone(e1.p, Point).Equals($clone(ip1, Point)) && !$clone(e1.other.p, Point).Equals($clone(ip1, Point))) {
				c.divideSegment(e1, $clone(ip1, Point));
			}
			if (!$clone(e2.p, Point).Equals($clone(ip1, Point)) && !$clone(e2.other.p, Point).Equals($clone(ip1, Point))) {
				c.divideSegment(e2, $clone(ip1, Point));
			}
			return;
		}
		sortedEvents = $makeSlice(sliceType$3, 0);
		if ($clone(e1.p, Point).Equals($clone(e2.p, Point))) {
			sortedEvents = $append(sortedEvents, ptrType$1.nil);
		} else if (endpointLess(e1, e2)) {
			sortedEvents = $append(sortedEvents, e2, e1);
		} else {
			sortedEvents = $append(sortedEvents, e1, e2);
		}
		if ($clone(e1.other.p, Point).Equals($clone(e2.other.p, Point))) {
			sortedEvents = $append(sortedEvents, ptrType$1.nil);
		} else if (endpointLess(e1.other, e2.other)) {
			sortedEvents = $append(sortedEvents, e2.other, e1.other);
		} else {
			sortedEvents = $append(sortedEvents, e1.other, e2.other);
		}
		if (sortedEvents.$length === 2) {
			_tmp = 1;
			_tmp$1 = 1;
			e1.edgeType = _tmp;
			e1.other.edgeType = _tmp$1;
			if (e1.inout === e2.inout) {
				_tmp$2 = 2;
				_tmp$3 = 2;
				e2.edgeType = _tmp$2;
				e2.other.edgeType = _tmp$3;
			} else {
				_tmp$4 = 3;
				_tmp$5 = 3;
				e2.edgeType = _tmp$4;
				e2.other.edgeType = _tmp$5;
			}
			return;
		}
		if (sortedEvents.$length === 3) {
			_tmp$6 = 1;
			_tmp$7 = 1;
			(1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).edgeType = _tmp$6;
			(1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).other.edgeType = _tmp$7;
			idx = 0;
			if (!((0 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 0]) === ptrType$1.nil)) {
				idx = 0;
			} else {
				idx = 2;
			}
			if (e1.inout === e2.inout) {
				((idx < 0 || idx >= sortedEvents.$length) ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + idx]).other.edgeType = 2;
			} else {
				((idx < 0 || idx >= sortedEvents.$length) ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + idx]).other.edgeType = 3;
			}
			if (!((0 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 0]) === ptrType$1.nil)) {
				c.divideSegment((0 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 0]), $clone((1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).p, Point));
			} else {
				c.divideSegment((2 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 2]).other, $clone((1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).p, Point));
			}
			return;
		}
		if (!((0 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 0]) === (3 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 3]).other)) {
			(1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).edgeType = 1;
			if (e1.inout === e2.inout) {
				(2 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 2]).edgeType = 2;
			} else {
				(2 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 2]).edgeType = 3;
			}
			c.divideSegment((0 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 0]), $clone((1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).p, Point));
			c.divideSegment((1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]), $clone((2 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 2]).p, Point));
			return;
		}
		_tmp$8 = 1;
		_tmp$9 = 1;
		(1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).edgeType = _tmp$8;
		(1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).other.edgeType = _tmp$9;
		c.divideSegment((0 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 0]), $clone((1 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 1]).p, Point));
		if (e1.inout === e2.inout) {
			(3 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 3]).other.edgeType = 2;
		} else {
			(3 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 3]).other.edgeType = 3;
		}
		c.divideSegment((3 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 3]).other, $clone((2 >= sortedEvents.$length ? ($throwRuntimeError("index out of range"), undefined) : sortedEvents.$array[sortedEvents.$offset + 2]).p, Point));
	};
	clipper.prototype.possibleIntersection = function(e1, e2) { return this.$val.possibleIntersection(e1, e2); };
	clipper.ptr.prototype.divideSegment = function(e, p) {
		var c, e, l, p, r;
		c = this;
		r = new endpoint.ptr($clone(p, Point), false, e.polygonType, e, false, e.edgeType, false);
		l = new endpoint.ptr($clone(p, Point), true, e.polygonType, e.other, false, e.other.edgeType, false);
		if (endpointLess(l, e.other)) {
			e.other.left = true;
			e.left = false;
		}
		e.other.other = l;
		e.other = r;
		c.eventQueue.enqueue(l);
		c.eventQueue.enqueue(r);
	};
	clipper.prototype.divideSegment = function(e, p) { return this.$val.divideSegment(e, p); };
	addProcessedSegment = function(q, segment$1, polyType) {
		var e1, e2, polyType, q, segment$1;
		if ($clone(segment$1.start, Point).Equals($clone(segment$1.end, Point))) {
			return;
		}
		e1 = new endpoint.ptr($clone(segment$1.start, Point), true, polyType, ptrType$1.nil, false, 0, false);
		e2 = new endpoint.ptr($clone(segment$1.end, Point), true, polyType, e1, false, 0, false);
		e1.other = e2;
		if (e1.p.X < e2.p.X) {
			e2.left = false;
		} else if (e1.p.X > e2.p.X) {
			e1.left = false;
		} else if (e1.p.Y < e2.p.Y) {
			e2.left = false;
		} else {
			e1.left = false;
		}
		q.enqueue(e1);
		q.enqueue(e2);
	};
	connector.ptr.prototype.add = function(s) {
		var _i, _ref, c, chain$1, i, j, k, s, x, x$1, x$2;
		c = this;
		_ref = c.openPolys;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j = _i;
			chain$1 = (x = c.openPolys, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			if (!chain$1.linkSegment($clone(s, segment))) {
				_i++;
				continue;
			}
			if (chain$1.closed) {
				if (chain$1.points.$length === 2) {
					chain$1.closed = false;
					return;
				}
				c.closedPolys = $append(c.closedPolys, (x$1 = c.openPolys, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])));
				c.openPolys = $appendSlice($subslice(c.openPolys, 0, j), $subslice(c.openPolys, (j + 1 >> 0)));
				return;
			}
			k = c.openPolys.$length;
			i = j + 1 >> 0;
			while (true) {
				if (!(i < k)) { break; }
				if (chain$1.linkChain((x$2 = c.openPolys, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])))) {
					c.openPolys = $appendSlice($subslice(c.openPolys, 0, i), $subslice(c.openPolys, (i + 1 >> 0)));
					return;
				}
				i = i + (1) >> 0;
			}
			return;
		}
		c.openPolys = $append(c.openPolys, newChain($clone(s, segment)));
	};
	connector.prototype.add = function(s) { return this.$val.add(s); };
	connector.ptr.prototype.toPolygon = function() {
		var _i, _i$1, _ref, _ref$1, c, chain$1, con, con$24ptr, p, poly, poly$24ptr;
		c = this;
		poly = new Polygon([]);
		_ref = c.closedPolys;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			chain$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), chain);
			con = new Contour([]);
			_ref$1 = chain$1.points;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				p = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), Point);
				(con$24ptr || (con$24ptr = new ptrType$4(function() { return con; }, function($v) { con = $subslice(new Contour($v.$array), $v.$offset, $v.$offset + $v.$length); }))).Add($clone(p, Point));
				_i$1++;
			}
			(poly$24ptr || (poly$24ptr = new ptrType(function() { return poly; }, function($v) { poly = $subslice(new Polygon($v.$array), $v.$offset, $v.$offset + $v.$length); }))).Add(con);
			_i++;
		}
		return poly;
	};
	connector.prototype.toPolygon = function() { return this.$val.toPolygon(); };
	endpoint.ptr.prototype.String = function() {
		var _entry, _r, e, sleft, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; e = $f.e; sleft = $f.sleft; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		sleft = $makeMap($Bool.keyFor, [{ k: true, v: "left" }, { k: false, v: "right" }]);
		_r = fmt.Sprint(new sliceType$1([new $String("{"), (x = e.p, new x.constructor.elem(x)), new $String(" "), new $String((_entry = sleft[$Bool.keyFor(e.left)], _entry !== undefined ? _entry.v : "")), new $String(" type:"), new polygonType(e.polygonType), new $String(" other:"), (x$1 = e.other.p, new x$1.constructor.elem(x$1)), new $String(" inout:"), new $Bool(e.inout), new $String(" inside:"), new $Bool(e.inside), new $String(" edgeType:"), new edgeType(e.edgeType), new $String("}")])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: endpoint.ptr.prototype.String }; } $f._entry = _entry; $f._r = _r; $f.e = e; $f.sleft = sleft; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	endpoint.prototype.String = function() { return this.$val.String(); };
	endpoint.ptr.prototype.equals = function(e2) {
		var e1, e2;
		e1 = this;
		return $clone(e1.p, Point).Equals($clone(e2.p, Point)) && e1.left === e2.left && (e1.polygonType === e2.polygonType) && e1.other === e2.other && e1.inout === e2.inout && (e1.edgeType === e2.edgeType) && e1.inside === e2.inside;
	};
	endpoint.prototype.equals = function(e2) { return this.$val.equals(e2); };
	endpoint.ptr.prototype.segment = function() {
		var se;
		se = this;
		return new segment.ptr($clone(se.p, Point), $clone(se.other.p, Point));
	};
	endpoint.prototype.segment = function() { return this.$val.segment(); };
	signedArea = function(p0, p1, p2) {
		var p0, p1, p2;
		return (p0.X - p2.X) * (p1.Y - p2.Y) - (p1.X - p2.X) * (p0.Y - p2.Y);
	};
	endpoint.ptr.prototype.below = function(x) {
		var se, x;
		se = this;
		if (se.left) {
			return signedArea($clone(se.p, Point), $clone(se.other.p, Point), $clone(x, Point)) > 0;
		}
		return signedArea($clone(se.other.p, Point), $clone(se.p, Point), $clone(x, Point)) > 0;
	};
	endpoint.prototype.below = function(x) { return this.$val.below(x); };
	endpoint.ptr.prototype.above = function(x) {
		var se, x;
		se = this;
		return !se.below($clone(x, Point));
	};
	endpoint.prototype.above = function(x) { return this.$val.above(x); };
	eventQueue.ptr.prototype.enqueue = function(e) {
		var e, i, length, q, x, x$1, x$2, x$3, x$4, x$5;
		q = this;
		if (!q.sorted) {
			q.elements = $append(q.elements, e);
			return;
		}
		length = q.elements.$length;
		if (length === 0) {
			q.elements = $append(q.elements, e);
			return;
		}
		q.elements = $append(q.elements, ptrType$1.nil);
		i = length - 1 >> 0;
		while (true) {
			if (!(i >= 0 && endpointLess(e, (x = q.elements, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]))))) { break; }
			(x$2 = q.elements, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = (x$1 = q.elements, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))));
			i = i - (1) >> 0;
		}
		(x$4 = q.elements, x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = e));
	};
	eventQueue.prototype.enqueue = function(e) { return this.$val.enqueue(e); };
	endpointLess = function(e1, e2) {
		var e1, e2;
		if (!((e1.p.X === e2.p.X))) {
			return e1.p.X > e2.p.X;
		}
		if (!((e1.p.Y === e2.p.Y))) {
			return e1.p.Y > e2.p.Y;
		}
		if (!(e1.left === e2.left)) {
			return e1.left;
		}
		return e1.above($clone(e2.other.p, Point));
	};
	eventQueue.ptr.prototype.dequeue = function() {
		var q, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; q = $f.q; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		q = this;
		/* */ if (!q.sorted) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!q.sorted) { */ case 1:
			$r = sort.Sort(((x = q.elements, $subslice(new queueComparer(x.$array), x.$offset, x.$offset + x.$length)))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			q.sorted = true;
		/* } */ case 2:
		x$3 = (x$1 = q.elements, x$2 = q.elements.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2]));
		q.elements = $subslice(q.elements, 0, (q.elements.$length - 1 >> 0));
		$s = -1; return x$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: eventQueue.ptr.prototype.dequeue }; } $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	eventQueue.prototype.dequeue = function() { return this.$val.dequeue(); };
	queueComparer.prototype.Len = function() {
		var q;
		q = this;
		return q.$length;
	};
	$ptrType(queueComparer).prototype.Len = function() { return this.$get().Len(); };
	queueComparer.prototype.Less = function(i, j) {
		var i, j, q;
		q = this;
		return endpointLess(((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]), ((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j]));
	};
	$ptrType(queueComparer).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	queueComparer.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, q;
		q = this;
		_tmp = ((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j]);
		_tmp$1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
		((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i] = _tmp);
		((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j] = _tmp$1);
	};
	$ptrType(queueComparer).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	eventQueue.ptr.prototype.IsEmpty = function() {
		var q;
		q = this;
		return q.elements.$length === 0;
	};
	eventQueue.prototype.IsEmpty = function() { return this.$val.IsEmpty(); };
	Point.ptr.prototype.Equals = function(p2) {
		var p1, p2;
		p1 = this;
		return (p1.X === p2.X) && (p1.Y === p2.Y);
	};
	Point.prototype.Equals = function(p2) { return this.$val.Equals(p2); };
	Point.ptr.prototype.Length = function() {
		var p;
		p = this;
		return math.Sqrt(p.X * p.X + p.Y * p.Y);
	};
	Point.prototype.Length = function() { return this.$val.Length(); };
	Rectangle.ptr.prototype.union = function(r2) {
		var r1, r2;
		r1 = this;
		return new Rectangle.ptr(new Point.ptr(math.Min(r1.Min.X, r2.Min.X), math.Min(r1.Min.Y, r2.Min.Y)), new Point.ptr(math.Max(r1.Max.X, r2.Max.X), math.Max(r1.Max.Y, r2.Max.Y)));
	};
	Rectangle.prototype.union = function(r2) { return this.$val.union(r2); };
	Rectangle.ptr.prototype.Overlaps = function(r2) {
		var r1, r2;
		r1 = this;
		return r1.Min.X <= r2.Max.X && r1.Max.X >= r2.Min.X && r1.Min.Y <= r2.Max.Y && r1.Max.Y >= r2.Min.Y;
	};
	Rectangle.prototype.Overlaps = function(r2) { return this.$val.Overlaps(r2); };
	$ptrType(Contour).prototype.Add = function(p) {
		var c, p;
		c = this;
		c.$set($append(c.$get(), p));
	};
	Contour.prototype.BoundingBox = function() {
		var _i, _ref, bb, c, p;
		c = this;
		bb = new Rectangle.ptr(new Point.ptr(0, 0), new Point.ptr(0, 0));
		bb.Min.X = math.Inf(1);
		bb.Min.Y = math.Inf(1);
		bb.Max.X = math.Inf(-1);
		bb.Max.Y = math.Inf(-1);
		_ref = c;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Point);
			if (p.X > bb.Max.X) {
				bb.Max.X = p.X;
			}
			if (p.X < bb.Min.X) {
				bb.Min.X = p.X;
			}
			if (p.Y > bb.Max.Y) {
				bb.Max.Y = p.Y;
			}
			if (p.Y < bb.Min.Y) {
				bb.Min.Y = p.Y;
			}
			_i++;
		}
		return bb;
	};
	$ptrType(Contour).prototype.BoundingBox = function() { return this.$get().BoundingBox(); };
	Contour.prototype.segment = function(index) {
		var c, index, x, x$1;
		c = this;
		if (index === (c.$length - 1 >> 0)) {
			return new segment.ptr($clone((x = c.$length - 1 >> 0, ((x < 0 || x >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + x])), Point), $clone((0 >= c.$length ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + 0]), Point));
		}
		return new segment.ptr($clone(((index < 0 || index >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + index]), Point), $clone((x$1 = index + 1 >> 0, ((x$1 < 0 || x$1 >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + x$1])), Point));
	};
	$ptrType(Contour).prototype.segment = function(index) { return this.$get().segment(index); };
	Contour.prototype.Contains = function(p) {
		var _i, _r, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, bottom, c, curr, i, ii, intersections, next, p, top, xint;
		c = this;
		intersections = 0;
		_ref = c;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			curr = $clone(((i < 0 || i >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + i]), Point);
			ii = i + 1 >> 0;
			if (ii === c.$length) {
				ii = 0;
			}
			next = $clone(((ii < 0 || ii >= c.$length) ? ($throwRuntimeError("index out of range"), undefined) : c.$array[c.$offset + ii]), Point);
			_tmp = $clone(curr, Point);
			_tmp$1 = $clone(next, Point);
			bottom = $clone(_tmp, Point);
			top = $clone(_tmp$1, Point);
			if (bottom.Y > top.Y) {
				_tmp$2 = $clone(top, Point);
				_tmp$3 = $clone(bottom, Point);
				Point.copy(bottom, _tmp$2);
				Point.copy(top, _tmp$3);
			}
			if (p.Y < bottom.Y || p.Y >= top.Y) {
				_i++;
				continue;
			}
			if (p.X >= math.Max(curr.X, next.X) || (next.Y === curr.Y)) {
				_i++;
				continue;
			}
			xint = (p.Y - curr.Y) * (next.X - curr.X) / (next.Y - curr.Y) + curr.X;
			if (!((curr.X === next.X)) && p.X > xint) {
				_i++;
				continue;
			}
			intersections = intersections + (1) >> 0;
			_i++;
		}
		return !(((_r = intersections % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
	};
	$ptrType(Contour).prototype.Contains = function(p) { return this.$get().Contains(p); };
	Contour.prototype.Clone = function() {
		var c, x;
		c = this;
		return (x = $appendSlice(new sliceType$4([]), $subslice(new sliceType$4(c.$array), c.$offset, c.$offset + c.$length)), $subslice(new Contour(x.$array), x.$offset, x.$offset + x.$length));
	};
	$ptrType(Contour).prototype.Clone = function() { return this.$get().Clone(); };
	Polygon.prototype.NumVertices = function() {
		var _i, _ref, c, num, p;
		p = this;
		num = 0;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			num = num + (c.$length) >> 0;
			_i++;
		}
		return num;
	};
	$ptrType(Polygon).prototype.NumVertices = function() { return this.$get().NumVertices(); };
	Polygon.prototype.BoundingBox = function() {
		var _i, _ref, bb, c, p;
		p = this;
		bb = $clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).BoundingBox(), Rectangle);
		_ref = $subslice(p, 1);
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			c = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			Rectangle.copy(bb, $clone(bb, Rectangle).union($clone(c.BoundingBox(), Rectangle)));
			_i++;
		}
		return bb;
	};
	$ptrType(Polygon).prototype.BoundingBox = function() { return this.$get().BoundingBox(); };
	$ptrType(Polygon).prototype.Add = function(c) {
		var c, p;
		p = this;
		p.$set($append(p.$get(), c));
	};
	Polygon.prototype.Clone = function() {
		var _i, _ref, i, p, r, x;
		p = this;
		r = ((x = $makeSlice(sliceType$5, p.$length), $subslice(new Polygon(x.$array), x.$offset, x.$offset + x.$length)));
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + i] = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).Clone());
			_i++;
		}
		return r;
	};
	$ptrType(Polygon).prototype.Clone = function() { return this.$get().Clone(); };
	Polygon.prototype.Construct = function(operation, clipping) {
		var _r, c, clipping, operation, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; c = $f.c; clipping = $f.clipping; operation = $f.operation; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		c = new clipper.ptr(p, clipping, new eventQueue.ptr(sliceType$3.nil, false));
		_r = c.compute(operation); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Polygon.prototype.Construct }; } $f._r = _r; $f.c = c; $f.clipping = clipping; $f.operation = operation; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Polygon).prototype.Construct = function(operation, clipping) { return this.$get().Construct(operation, clipping); };
	newChain = function(s) {
		var s;
		return new chain.ptr(false, new sliceType$4([$clone(s.start, Point), $clone(s.end, Point)]));
	};
	chain.ptr.prototype.pushFront = function(p) {
		var c, p;
		c = this;
		c.points = $appendSlice(new sliceType$4([$clone(p, Point)]), c.points);
	};
	chain.prototype.pushFront = function(p) { return this.$val.pushFront(p); };
	chain.ptr.prototype.pushBack = function(p) {
		var c, p;
		c = this;
		c.points = $append(c.points, p);
	};
	chain.prototype.pushBack = function(p) { return this.$val.pushBack(p); };
	chain.ptr.prototype.linkSegment = function(s) {
		var _1, back, c, front, s, x, x$1, x$2;
		c = this;
		front = $clone((x = c.points, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), Point);
		back = $clone((x$1 = c.points, x$2 = c.points.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), Point);
		_1 = true;
		if (_1 === ($clone(s.start, Point).Equals($clone(front, Point)))) {
			if ($clone(s.end, Point).Equals($clone(back, Point))) {
				c.closed = true;
			} else {
				c.pushFront($clone(s.end, Point));
			}
			return true;
		} else if (_1 === ($clone(s.end, Point).Equals($clone(back, Point)))) {
			if ($clone(s.start, Point).Equals($clone(front, Point))) {
				c.closed = true;
			} else {
				c.pushBack($clone(s.start, Point));
			}
			return true;
		} else if (_1 === ($clone(s.end, Point).Equals($clone(front, Point)))) {
			if ($clone(s.start, Point).Equals($clone(back, Point))) {
				c.closed = true;
			} else {
				c.pushFront($clone(s.start, Point));
			}
			return true;
		} else if (_1 === ($clone(s.start, Point).Equals($clone(back, Point)))) {
			if ($clone(s.end, Point).Equals($clone(front, Point))) {
				c.closed = true;
			} else {
				c.pushBack($clone(s.end, Point));
			}
			return true;
		}
		return false;
	};
	chain.prototype.linkSegment = function(s) { return this.$val.linkSegment(s); };
	chain.ptr.prototype.linkChain = function(other) {
		var back, c, front, other, otherBack, otherFront, x, x$1, x$2, x$3, x$4, x$5, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		c = this;
		front = $clone((x = c.points, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), Point);
		back = $clone((x$1 = c.points, x$2 = c.points.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])), Point);
		otherFront = $clone((x$3 = other.points, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])), Point);
		otherBack = $clone((x$4 = other.points, x$5 = other.points.$length - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])), Point);
		/* */ if ($clone(otherFront, Point).Equals($clone(back, Point))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($clone(otherFront, Point).Equals($clone(back, Point))) { */ case 1:
			c.points = $appendSlice(c.points, $subslice(other.points, 1));
			/* goto success */ $s = 3; continue;
		/* } */ case 2:
		/* */ if ($clone(otherBack, Point).Equals($clone(front, Point))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($clone(otherBack, Point).Equals($clone(front, Point))) { */ case 4:
			c.points = $appendSlice(other.points, $subslice(c.points, 1));
			/* goto success */ $s = 3; continue;
		/* } */ case 5:
		/* */ if ($clone(otherFront, Point).Equals($clone(front, Point))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if ($clone(otherFront, Point).Equals($clone(front, Point))) { */ case 6:
			c.points = $appendSlice(reversed(other.points), $subslice(c.points, 1));
			/* goto success */ $s = 3; continue;
		/* } */ case 7:
		/* */ if ($clone(otherBack, Point).Equals($clone(back, Point))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($clone(otherBack, Point).Equals($clone(back, Point))) { */ case 8:
			c.points = $appendSlice($subslice(c.points, 0, (c.points.$length - 1 >> 0)), reversed(other.points));
			/* goto success */ $s = 3; continue;
		/* } */ case 9:
		$s = -1; return false;
		/* success: */ case 3:
		other.points = new sliceType$4([]);
		$s = -1; return true;
		/* */ } return; }
	};
	chain.prototype.linkChain = function(other) { return this.$val.linkChain(other); };
	reversed = function(list) {
		var _i, _ref, i, length, list, other, x;
		length = list.$length;
		other = $makeSlice(sliceType$4, length);
		_ref = list;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			Point.copy((x = (length - i >> 0) - 1 >> 0, ((x < 0 || x >= other.$length) ? ($throwRuntimeError("index out of range"), undefined) : other.$array[other.$offset + x])), ((i < 0 || i >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + i]));
			_i++;
		}
		return other;
	};
	$ptrType(sweepline).prototype.remove = function(key) {
		var _i, _ref, el, i, key, s, x;
		s = this;
		_ref = s.$get();
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			el = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (el.equals(key)) {
				s.$set($appendSlice($subslice((s.$get()), 0, i), (x = $subslice((s.$get()), (i + 1 >> 0)), $subslice(new sliceType$3(x.$array), x.$offset, x.$offset + x.$length))));
				return;
			}
			_i++;
		}
	};
	$ptrType(sweepline).prototype.insert = function(item) {
		var i, item, length, s, x, x$1, x$2, x$3, x$4, x$5;
		s = this;
		length = s.$get().$length;
		if (length === 0) {
			s.$set($append(s.$get(), item));
			return 0;
		}
		s.$set($append(s.$get(), new endpoint.ptr(new Point.ptr(0, 0), false, 0, ptrType$1.nil, false, 0, false)));
		i = length - 1 >> 0;
		while (true) {
			if (!(i >= 0 && segmentCompare(item, (x = s.$get(), ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]))))) { break; }
			(x$2 = s.$get(), x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = (x$1 = s.$get(), ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))));
			i = i - (1) >> 0;
		}
		(x$4 = s.$get(), x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5] = item));
		return i + 1 >> 0;
	};
	segmentCompare = function(e1, e2) {
		var e1, e2;
		if (e1 === e2) {
			return false;
		} else if (!((signedArea($clone(e1.p, Point), $clone(e1.other.p, Point), $clone(e2.p, Point)) === 0))) {
			if ($clone(e1.p, Point).Equals($clone(e2.p, Point))) {
				return e1.below($clone(e2.other.p, Point));
			}
			if (endpointLess(e1, e2)) {
				return e2.above($clone(e1.p, Point));
			}
			return e1.below($clone(e2.p, Point));
		} else if (!((signedArea($clone(e1.p, Point), $clone(e1.other.p, Point), $clone(e2.other.p, Point)) === 0))) {
			if ($clone(e1.p, Point).Equals($clone(e2.p, Point))) {
				return e1.below($clone(e2.other.p, Point));
			}
			if (endpointLess(e1, e2)) {
				return e2.above($clone(e1.p, Point));
			}
			return e1.below($clone(e2.p, Point));
		} else if ($clone(e1.p, Point).Equals($clone(e2.p, Point))) {
			return false;
		}
		return endpointLess(e1, e2);
	};
	ptrType$5.methods = [{prop: "compute", name: "compute", pkg: "github.com/akavel/polyclip-go", typ: $funcType([Op], [Polygon], false)}, {prop: "possibleIntersection", name: "possibleIntersection", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$1, ptrType$1], [], false)}, {prop: "divideSegment", name: "divideSegment", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$1, Point], [], false)}];
	ptrType$6.methods = [{prop: "add", name: "add", pkg: "github.com/akavel/polyclip-go", typ: $funcType([segment], [], false)}, {prop: "toPolygon", name: "toPolygon", pkg: "github.com/akavel/polyclip-go", typ: $funcType([], [Polygon], false)}];
	endpoint.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "equals", name: "equals", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$1], [$Bool], false)}, {prop: "segment", name: "segment", pkg: "github.com/akavel/polyclip-go", typ: $funcType([], [segment], false)}, {prop: "below", name: "below", pkg: "github.com/akavel/polyclip-go", typ: $funcType([Point], [$Bool], false)}, {prop: "above", name: "above", pkg: "github.com/akavel/polyclip-go", typ: $funcType([Point], [$Bool], false)}];
	ptrType$7.methods = [{prop: "enqueue", name: "enqueue", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$1], [], false)}, {prop: "dequeue", name: "dequeue", pkg: "github.com/akavel/polyclip-go", typ: $funcType([], [ptrType$1], false)}, {prop: "IsEmpty", name: "IsEmpty", pkg: "", typ: $funcType([], [$Bool], false)}];
	queueComparer.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	Point.methods = [{prop: "Equals", name: "Equals", pkg: "", typ: $funcType([Point], [$Bool], false)}, {prop: "Length", name: "Length", pkg: "", typ: $funcType([], [$Float64], false)}];
	Rectangle.methods = [{prop: "union", name: "union", pkg: "github.com/akavel/polyclip-go", typ: $funcType([Rectangle], [Rectangle], false)}, {prop: "Overlaps", name: "Overlaps", pkg: "", typ: $funcType([Rectangle], [$Bool], false)}];
	Contour.methods = [{prop: "BoundingBox", name: "BoundingBox", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "segment", name: "segment", pkg: "github.com/akavel/polyclip-go", typ: $funcType([$Int], [segment], false)}, {prop: "Contains", name: "Contains", pkg: "", typ: $funcType([Point], [$Bool], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [Contour], false)}];
	ptrType$4.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point], [], false)}];
	Polygon.methods = [{prop: "NumVertices", name: "NumVertices", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BoundingBox", name: "BoundingBox", pkg: "", typ: $funcType([], [Rectangle], false)}, {prop: "Clone", name: "Clone", pkg: "", typ: $funcType([], [Polygon], false)}, {prop: "Construct", name: "Construct", pkg: "", typ: $funcType([Op, Polygon], [Polygon], false)}];
	ptrType.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Contour], [], false)}];
	ptrType$8.methods = [{prop: "pushFront", name: "pushFront", pkg: "github.com/akavel/polyclip-go", typ: $funcType([Point], [], false)}, {prop: "pushBack", name: "pushBack", pkg: "github.com/akavel/polyclip-go", typ: $funcType([Point], [], false)}, {prop: "linkSegment", name: "linkSegment", pkg: "github.com/akavel/polyclip-go", typ: $funcType([segment], [$Bool], false)}, {prop: "linkChain", name: "linkChain", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$8], [$Bool], false)}];
	ptrType$2.methods = [{prop: "remove", name: "remove", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$1], [], false)}, {prop: "insert", name: "insert", pkg: "github.com/akavel/polyclip-go", typ: $funcType([ptrType$1], [$Int], false)}];
	clipper.init("github.com/akavel/polyclip-go", [{prop: "subject", name: "subject", anonymous: false, exported: false, typ: Polygon, tag: ""}, {prop: "clipping", name: "clipping", anonymous: false, exported: false, typ: Polygon, tag: ""}, {prop: "eventQueue", name: "eventQueue", anonymous: true, exported: false, typ: eventQueue, tag: ""}]);
	connector.init("github.com/akavel/polyclip-go", [{prop: "openPolys", name: "openPolys", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "closedPolys", name: "closedPolys", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	endpoint.init("github.com/akavel/polyclip-go", [{prop: "p", name: "p", anonymous: false, exported: false, typ: Point, tag: ""}, {prop: "left", name: "left", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "polygonType", name: "polygonType", anonymous: true, exported: false, typ: polygonType, tag: ""}, {prop: "other", name: "other", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "inout", name: "inout", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "edgeType", name: "edgeType", anonymous: true, exported: false, typ: edgeType, tag: ""}, {prop: "inside", name: "inside", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	eventQueue.init("github.com/akavel/polyclip-go", [{prop: "elements", name: "elements", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "sorted", name: "sorted", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	queueComparer.init(ptrType$1);
	Point.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Float64, tag: ""}]);
	Rectangle.init("", [{prop: "Min", name: "Min", anonymous: false, exported: true, typ: Point, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: Point, tag: ""}]);
	segment.init("github.com/akavel/polyclip-go", [{prop: "start", name: "start", anonymous: false, exported: false, typ: Point, tag: ""}, {prop: "end", name: "end", anonymous: false, exported: false, typ: Point, tag: ""}]);
	Contour.init(Point);
	Polygon.init(Contour);
	chain.init("github.com/akavel/polyclip-go", [{prop: "closed", name: "closed", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "points", name: "points", anonymous: false, exported: false, typ: sliceType$4, tag: ""}]);
	sweepline.init(ptrType$1);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/disintegration/gift"] = (function() {
	var $pkg = {}, $init, image, color, draw, math, runtime, sync, atomic, Filter, Options, GIFT, Operator, pixel, imageType, pixelGetter, pixelSetter, resamp, transformType, transformFilter, ptrType, sliceType$2, ptrType$1, sliceType$5, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, sliceType$6, ptrType$11, arrayType$4, ptrType$12, funcType, ptrType$21, ptrType$26, defaultOptions, defaultOptions$24ptr, New, getSubImage, newPixelGetter, convertPalette, getPaletteIndex, pixelclr, f32u8, f32u16, newPixelSetter, bcspline, sinc, init, FlipHorizontal, FlipVertical, parallelize, minf32, maxf32, createTempImage, copyimage;
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	Filter = $pkg.Filter = $newType(8, $kindInterface, "gift.Filter", true, "github.com/disintegration/gift", true, null);
	Options = $pkg.Options = $newType(0, $kindStruct, "gift.Options", true, "github.com/disintegration/gift", true, function(Parallelization_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Parallelization = false;
			return;
		}
		this.Parallelization = Parallelization_;
	});
	GIFT = $pkg.GIFT = $newType(0, $kindStruct, "gift.GIFT", true, "github.com/disintegration/gift", true, function(Filters_, Options_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filters = sliceType$5.nil;
			this.Options = new Options.ptr(false);
			return;
		}
		this.Filters = Filters_;
		this.Options = Options_;
	});
	Operator = $pkg.Operator = $newType(4, $kindInt, "gift.Operator", true, "github.com/disintegration/gift", true, null);
	pixel = $pkg.pixel = $newType(0, $kindStruct, "gift.pixel", true, "github.com/disintegration/gift", false, function(R_, G_, B_, A_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.R = 0;
			this.G = 0;
			this.B = 0;
			this.A = 0;
			return;
		}
		this.R = R_;
		this.G = G_;
		this.B = B_;
		this.A = A_;
	});
	imageType = $pkg.imageType = $newType(4, $kindInt, "gift.imageType", true, "github.com/disintegration/gift", false, null);
	pixelGetter = $pkg.pixelGetter = $newType(0, $kindStruct, "gift.pixelGetter", true, "github.com/disintegration/gift", false, function(imgType_, imgBounds_, imgGeneric_, imgNRGBA_, imgNRGBA64_, imgRGBA_, imgRGBA64_, imgYCbCr_, imgGray_, imgGray16_, imgPaletted_, imgPalette_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.imgType = 0;
			this.imgBounds = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.imgGeneric = $ifaceNil;
			this.imgNRGBA = ptrType$6.nil;
			this.imgNRGBA64 = ptrType$7.nil;
			this.imgRGBA = ptrType$4.nil;
			this.imgRGBA64 = ptrType$5.nil;
			this.imgYCbCr = ptrType$9.nil;
			this.imgGray = ptrType$2.nil;
			this.imgGray16 = ptrType$3.nil;
			this.imgPaletted = ptrType$10.nil;
			this.imgPalette = sliceType$2.nil;
			return;
		}
		this.imgType = imgType_;
		this.imgBounds = imgBounds_;
		this.imgGeneric = imgGeneric_;
		this.imgNRGBA = imgNRGBA_;
		this.imgNRGBA64 = imgNRGBA64_;
		this.imgRGBA = imgRGBA_;
		this.imgRGBA64 = imgRGBA64_;
		this.imgYCbCr = imgYCbCr_;
		this.imgGray = imgGray_;
		this.imgGray16 = imgGray16_;
		this.imgPaletted = imgPaletted_;
		this.imgPalette = imgPalette_;
	});
	pixelSetter = $pkg.pixelSetter = $newType(0, $kindStruct, "gift.pixelSetter", true, "github.com/disintegration/gift", false, function(imgType_, imgBounds_, imgGeneric_, imgNRGBA_, imgNRGBA64_, imgRGBA_, imgRGBA64_, imgGray_, imgGray16_, imgPaletted_, imgPalette_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.imgType = 0;
			this.imgBounds = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.imgGeneric = $ifaceNil;
			this.imgNRGBA = ptrType$6.nil;
			this.imgNRGBA64 = ptrType$7.nil;
			this.imgRGBA = ptrType$4.nil;
			this.imgRGBA64 = ptrType$5.nil;
			this.imgGray = ptrType$2.nil;
			this.imgGray16 = ptrType$3.nil;
			this.imgPaletted = ptrType$10.nil;
			this.imgPalette = sliceType$2.nil;
			return;
		}
		this.imgType = imgType_;
		this.imgBounds = imgBounds_;
		this.imgGeneric = imgGeneric_;
		this.imgNRGBA = imgNRGBA_;
		this.imgNRGBA64 = imgNRGBA64_;
		this.imgRGBA = imgRGBA_;
		this.imgRGBA64 = imgRGBA64_;
		this.imgGray = imgGray_;
		this.imgGray16 = imgGray16_;
		this.imgPaletted = imgPaletted_;
		this.imgPalette = imgPalette_;
	});
	resamp = $pkg.resamp = $newType(0, $kindStruct, "gift.resamp", true, "github.com/disintegration/gift", false, function(name_, support_, kernel_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.support = 0;
			this.kernel = $throwNilPointerError;
			return;
		}
		this.name = name_;
		this.support = support_;
		this.kernel = kernel_;
	});
	transformType = $pkg.transformType = $newType(4, $kindInt, "gift.transformType", true, "github.com/disintegration/gift", false, null);
	transformFilter = $pkg.transformFilter = $newType(0, $kindStruct, "gift.transformFilter", true, "github.com/disintegration/gift", false, function(tt_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.tt = 0;
			return;
		}
		this.tt = tt_;
	});
	ptrType = $ptrType(Options);
	sliceType$2 = $sliceType(pixel);
	ptrType$1 = $ptrType(sliceType$2);
	sliceType$5 = $sliceType(Filter);
	ptrType$2 = $ptrType(image.Gray);
	ptrType$3 = $ptrType(image.Gray16);
	ptrType$4 = $ptrType(image.RGBA);
	ptrType$5 = $ptrType(image.RGBA64);
	ptrType$6 = $ptrType(image.NRGBA);
	ptrType$7 = $ptrType(image.NRGBA64);
	ptrType$8 = $ptrType(pixelGetter);
	ptrType$9 = $ptrType(image.YCbCr);
	ptrType$10 = $ptrType(image.Paletted);
	sliceType$6 = $sliceType(color.Color);
	ptrType$11 = $ptrType(pixelSetter);
	arrayType$4 = $arrayType($Uint8, 12);
	ptrType$12 = $ptrType($Int64);
	funcType = $funcType([$Float32], [$Float32], false);
	ptrType$21 = $ptrType(GIFT);
	ptrType$26 = $ptrType(transformFilter);
	New = function(filters) {
		var filters;
		return new GIFT.ptr(filters, $clone(defaultOptions, Options));
	};
	$pkg.New = New;
	GIFT.ptr.prototype.SetParallelization = function(isEnabled) {
		var g, isEnabled;
		g = this;
		g.Options.Parallelization = isEnabled;
	};
	GIFT.prototype.SetParallelization = function(isEnabled) { return this.$val.SetParallelization(isEnabled); };
	GIFT.ptr.prototype.Parallelization = function() {
		var g;
		g = this;
		return g.Options.Parallelization;
	};
	GIFT.prototype.Parallelization = function() { return this.$val.Parallelization(); };
	GIFT.ptr.prototype.Add = function(filters) {
		var filters, g;
		g = this;
		g.Filters = $appendSlice(g.Filters, filters);
	};
	GIFT.prototype.Add = function(filters) { return this.$val.Add(filters); };
	GIFT.ptr.prototype.Empty = function() {
		var g;
		g = this;
		g.Filters = new sliceType$5([]);
	};
	GIFT.prototype.Empty = function() { return this.$val.Empty(); };
	GIFT.ptr.prototype.Bounds = function(srcBounds) {
		var _i, _r, _ref, b, dstBounds, f, g, srcBounds, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; b = $f.b; dstBounds = $f.dstBounds; f = $f.f; g = $f.g; srcBounds = $f.srcBounds; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dstBounds = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		g = this;
		b = $clone(srcBounds, image.Rectangle);
		_ref = g.Filters;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r = f.Bounds($clone(b, image.Rectangle)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			image.Rectangle.copy(b, _r);
			_i++;
		/* } */ $s = 1; continue; case 2:
		image.Rectangle.copy(dstBounds, b);
		$s = -1; return dstBounds;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GIFT.ptr.prototype.Bounds }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.b = b; $f.dstBounds = dstBounds; $f.f = f; $f.g = g; $f.srcBounds = srcBounds; $f.$s = $s; $f.$r = $r; return $f;
	};
	GIFT.prototype.Bounds = function(srcBounds) { return this.$val.Bounds(srcBounds); };
	GIFT.ptr.prototype.Draw = function(dst, src) {
		var _i, _r, _r$1, _r$2, _ref, _tmp, _tmp$1, dst, f, first, g, i, last, src, tmpIn, tmpOut, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; dst = $f.dst; f = $f.f; first = $f.first; g = $f.g; i = $f.i; last = $f.last; src = $f.src; tmpIn = $f.tmpIn; tmpOut = $f.tmpOut; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		g = this;
		/* */ if (g.Filters.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (g.Filters.$length === 0) { */ case 1:
			$r = copyimage(dst, src, g.Options); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		_tmp = 0;
		_tmp$1 = g.Filters.$length - 1 >> 0;
		first = _tmp;
		last = _tmp$1;
		tmpIn = $ifaceNil;
		tmpOut = $ifaceNil;
		_ref = g.Filters;
		_i = 0;
		/* while (true) { */ case 4:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 5; continue; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (i === first) {
				tmpIn = src;
			} else {
				tmpIn = tmpOut;
			}
			/* */ if (i === last) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i === last) { */ case 6:
				tmpOut = dst;
				$s = 8; continue;
			/* } else { */ case 7:
				_r = tmpIn.Bounds(); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = f.Bounds($clone(_r, image.Rectangle)); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = createTempImage($clone(_r$1, image.Rectangle)); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				tmpOut = _r$2;
			/* } */ case 8:
			$r = f.Draw(tmpOut, tmpIn, g.Options); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GIFT.ptr.prototype.Draw }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.dst = dst; $f.f = f; $f.first = first; $f.g = g; $f.i = i; $f.last = last; $f.src = src; $f.tmpIn = tmpIn; $f.tmpOut = tmpOut; $f.$s = $s; $f.$r = $r; return $f;
	};
	GIFT.prototype.Draw = function(dst, src) { return this.$val.Draw(dst, src); };
	GIFT.ptr.prototype.DrawAt = function(dst, src, pt, op) {
		var _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, dst, g, ib, ib$1, ok, op, pixGetter, pixGetterDst, pixGetterTmp, pixSetter, pixSetterDst, pt, src, subimg, tb, tb$1, tmp, tmp$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; dst = $f.dst; g = $f.g; ib = $f.ib; ib$1 = $f.ib$1; ok = $f.ok; op = $f.op; pixGetter = $f.pixGetter; pixGetterDst = $f.pixGetterDst; pixGetterTmp = $f.pixGetterTmp; pixSetter = $f.pixSetter; pixSetterDst = $f.pixSetterDst; pt = $f.pt; src = $f.src; subimg = $f.subimg; tb = $f.tb; tb$1 = $f.tb$1; tmp = $f.tmp; tmp$1 = $f.tmp$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ib = [ib];
		ib$1 = [ib$1];
		pixGetter = [pixGetter];
		pixGetterDst = [pixGetterDst];
		pixGetterTmp = [pixGetterTmp];
		pixSetter = [pixSetter];
		pixSetterDst = [pixSetterDst];
		g = this;
			_1 = op;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === (1)) { */ case 2:
				_r = src.Bounds(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = g.Bounds($clone(_r, image.Rectangle)); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				tb = $clone(_r$1, image.Rectangle);
				image.Rectangle.copy(tb, $clone($clone(tb, image.Rectangle).Sub($clone(tb.Min, image.Point)), image.Rectangle).Add($clone(pt, image.Point)));
				tmp = createTempImage($clone(tb, image.Rectangle));
				$r = g.Draw(tmp, src); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$2 = newPixelGetter(dst); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				pixGetterDst[0] = _r$2;
				_r$3 = newPixelGetter(tmp); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				pixGetterTmp[0] = _r$3;
				_r$4 = newPixelSetter(dst); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				pixSetterDst[0] = _r$4;
				_r$5 = dst.Bounds(); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = $clone(tb, image.Rectangle).Intersect($clone(_r$5, image.Rectangle)); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				ib[0] = $clone(_r$6, image.Rectangle);
				$r = parallelize(g.Options.Parallelization, ib[0].Min.Y, ib[0].Max.Y, (function(ib, ib$1, pixGetter, pixGetterDst, pixGetterTmp, pixSetter, pixSetterDst) { return function $b(pmin, pmax) {
					var _r$7, _r$8, a, b, c0, c1, cs, g$1, pmax, pmin, px0, px1, r, x, y, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$7 = $f._r$7; _r$8 = $f._r$8; a = $f.a; b = $f.b; c0 = $f.c0; c1 = $f.c1; cs = $f.cs; g$1 = $f.g$1; pmax = $f.pmax; pmin = $f.pmin; px0 = $f.px0; px1 = $f.px1; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					y = pmin;
					/* while (true) { */ case 1:
						/* if (!(y < pmax)) { break; } */ if(!(y < pmax)) { $s = 2; continue; }
						x = ib[0].Min.X;
						/* while (true) { */ case 3:
							/* if (!(x < ib[0].Max.X)) { break; } */ if(!(x < ib[0].Max.X)) { $s = 4; continue; }
							_r$7 = pixGetterDst[0].getPixel(x, y); /* */ $s = 5; case 5: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
							px0 = $clone(_r$7, pixel);
							_r$8 = pixGetterTmp[0].getPixel(x, y); /* */ $s = 6; case 6: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
							px1 = $clone(_r$8, pixel);
							c1 = px1.A;
							c0 = $fround(($fround(1 - c1)) * px0.A);
							cs = $fround(c0 + c1);
							c0 = $fround(c0 / (cs));
							c1 = $fround(c1 / (cs));
							r = $fround($fround(px0.R * c0) + $fround(px1.R * c1));
							g$1 = $fround($fround(px0.G * c0) + $fround(px1.G * c1));
							b = $fround($fround(px0.B * c0) + $fround(px1.B * c1));
							a = $fround(px0.A + $fround(px1.A * ($fround(1 - px0.A))));
							$r = pixSetterDst[0].setPixel(x, y, new pixel.ptr(r, g$1, b, a)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							x = x + (1) >> 0;
						/* } */ $s = 3; continue; case 4:
						y = y + (1) >> 0;
					/* } */ $s = 1; continue; case 2:
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$7 = _r$7; $f._r$8 = _r$8; $f.a = a; $f.b = b; $f.c0 = c0; $f.c1 = c1; $f.cs = cs; $f.g$1 = g$1; $f.pmax = pmax; $f.pmin = pmin; $f.px0 = px0; $f.px1 = px1; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
				}; })(ib, ib$1, pixGetter, pixGetterDst, pixGetterTmp, pixSetter, pixSetterDst)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 4; continue;
			/* } else { */ case 3:
				_r$7 = dst.Bounds(); /* */ $s = 16; case 16: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = $clone(pt, image.Point).Eq($clone(_r$7.Min, image.Point)); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				/* */ if (_r$8) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (_r$8) { */ case 14:
					$r = g.Draw(dst, src); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 15:
				_r$9 = getSubImage(dst, $clone(pt, image.Point)); /* */ $s = 19; case 19: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_tuple = _r$9;
				subimg = _tuple[0];
				ok = _tuple[1];
				/* */ if (ok) { $s = 20; continue; }
				/* */ $s = 21; continue;
				/* if (ok) { */ case 20:
					$r = g.Draw(subimg, src); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 21:
				_r$10 = src.Bounds(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = g.Bounds($clone(_r$10, image.Rectangle)); /* */ $s = 24; case 24: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				tb$1 = $clone(_r$11, image.Rectangle);
				image.Rectangle.copy(tb$1, $clone($clone(tb$1, image.Rectangle).Sub($clone(tb$1.Min, image.Point)), image.Rectangle).Add($clone(pt, image.Point)));
				tmp$1 = createTempImage($clone(tb$1, image.Rectangle));
				$r = g.Draw(tmp$1, src); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$12 = newPixelGetter(tmp$1); /* */ $s = 26; case 26: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				pixGetter[0] = _r$12;
				_r$13 = newPixelSetter(dst); /* */ $s = 27; case 27: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				pixSetter[0] = _r$13;
				_r$14 = dst.Bounds(); /* */ $s = 28; case 28: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				_r$15 = $clone(tb$1, image.Rectangle).Intersect($clone(_r$14, image.Rectangle)); /* */ $s = 29; case 29: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
				ib$1[0] = $clone(_r$15, image.Rectangle);
				$r = parallelize(g.Options.Parallelization, ib$1[0].Min.Y, ib$1[0].Max.Y, (function(ib, ib$1, pixGetter, pixGetterDst, pixGetterTmp, pixSetter, pixSetterDst) { return function $b(pmin, pmax) {
					var _arg, _arg$1, _arg$2, _r$16, pmax, pmin, x, y, $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$16 = $f._r$16; pmax = $f.pmax; pmin = $f.pmin; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					y = pmin;
					/* while (true) { */ case 1:
						/* if (!(y < pmax)) { break; } */ if(!(y < pmax)) { $s = 2; continue; }
						x = ib$1[0].Min.X;
						/* while (true) { */ case 3:
							/* if (!(x < ib$1[0].Max.X)) { break; } */ if(!(x < ib$1[0].Max.X)) { $s = 4; continue; }
							_arg = x;
							_arg$1 = y;
							_r$16 = pixGetter[0].getPixel(x, y); /* */ $s = 5; case 5: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
							_arg$2 = $clone(_r$16, pixel);
							$r = pixSetter[0].setPixel(_arg, _arg$1, _arg$2); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							x = x + (1) >> 0;
						/* } */ $s = 3; continue; case 4:
						y = y + (1) >> 0;
					/* } */ $s = 1; continue; case 2:
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$16 = _r$16; $f.pmax = pmax; $f.pmin = pmin; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
				}; })(ib, ib$1, pixGetter, pixGetterDst, pixGetterTmp, pixSetter, pixSetterDst)); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 4:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: GIFT.ptr.prototype.DrawAt }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f.dst = dst; $f.g = g; $f.ib = ib; $f.ib$1 = ib$1; $f.ok = ok; $f.op = op; $f.pixGetter = pixGetter; $f.pixGetterDst = pixGetterDst; $f.pixGetterTmp = pixGetterTmp; $f.pixSetter = pixSetter; $f.pixSetterDst = pixSetterDst; $f.pt = pt; $f.src = src; $f.subimg = subimg; $f.tb = tb; $f.tb$1 = tb$1; $f.tmp = tmp; $f.tmp$1 = tmp$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	GIFT.prototype.DrawAt = function(dst, src, pt, op) { return this.$val.DrawAt(dst, src, pt, op); };
	getSubImage = function(img, pt) {
		var _r, _r$1, _ref, img, img$1, img$2, img$3, img$4, img$5, img$6, img$7, pt, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; img = $f.img; img$1 = $f.img$1; img$2 = $f.img$2; img$3 = $f.img$3; img$4 = $f.img$4; img$5 = $f.img$5; img$6 = $f.img$6; img$7 = $f.img$7; pt = $f.pt; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = img.Bounds(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = $clone(pt, image.Point).In($clone(_r, image.Rectangle)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r$1) { */ case 1:
			$s = -1; return [$ifaceNil, false];
		/* } */ case 2:
		_ref = img;
		if ($assertType(_ref, ptrType$2, true)[1]) {
			img$1 = _ref.$val;
			$s = -1; return [$assertType(img$1.SubImage(new image.Rectangle.ptr($clone(pt, image.Point), $clone(img$1.Bounds().Max, image.Point))), draw.Image), true];
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			img$2 = _ref.$val;
			$s = -1; return [$assertType(img$2.SubImage(new image.Rectangle.ptr($clone(pt, image.Point), $clone(img$2.Bounds().Max, image.Point))), draw.Image), true];
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			img$3 = _ref.$val;
			$s = -1; return [$assertType(img$3.SubImage(new image.Rectangle.ptr($clone(pt, image.Point), $clone(img$3.Bounds().Max, image.Point))), draw.Image), true];
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			img$4 = _ref.$val;
			$s = -1; return [$assertType(img$4.SubImage(new image.Rectangle.ptr($clone(pt, image.Point), $clone(img$4.Bounds().Max, image.Point))), draw.Image), true];
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			img$5 = _ref.$val;
			$s = -1; return [$assertType(img$5.SubImage(new image.Rectangle.ptr($clone(pt, image.Point), $clone(img$5.Bounds().Max, image.Point))), draw.Image), true];
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			img$6 = _ref.$val;
			$s = -1; return [$assertType(img$6.SubImage(new image.Rectangle.ptr($clone(pt, image.Point), $clone(img$6.Bounds().Max, image.Point))), draw.Image), true];
		} else {
			img$7 = _ref;
			$s = -1; return [$ifaceNil, false];
		}
		$s = -1; return [$ifaceNil, false];
		/* */ } return; } if ($f === undefined) { $f = { $blk: getSubImage }; } $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.img = img; $f.img$1 = img$1; $f.img$2 = img$2; $f.img$3 = img$3; $f.img$4 = img$4; $f.img$5 = img$5; $f.img$6 = img$6; $f.img$7 = img$7; $f.pt = pt; $f.$s = $s; $f.$r = $r; return $f;
	};
	newPixelGetter = function(img) {
		var _r, _r$1, _ref, img, img$1, img$2, img$3, img$4, img$5, img$6, img$7, img$8, img$9, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; img = $f.img; img$1 = $f.img$1; img$2 = $f.img$2; img$3 = $f.img$3; img$4 = $f.img$4; img$5 = $f.img$5; img$6 = $f.img$6; img$7 = $f.img$7; img$8 = $f.img$8; img$9 = $f.img$9; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = ptrType$8.nil;
		_ref = img;
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$9, true)[1]) { $s = 7; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($assertType(_ref, ptrType$6, true)[1]) { */ case 1:
			img$1 = _ref.$val;
			p = new pixelGetter.ptr(1, $clone(img$1.Bounds(), image.Rectangle), $ifaceNil, img$1, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$9.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 2:
			img$2 = _ref.$val;
			p = new pixelGetter.ptr(2, $clone(img$2.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, img$2, ptrType$4.nil, ptrType$5.nil, ptrType$9.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 3:
			img$3 = _ref.$val;
			p = new pixelGetter.ptr(3, $clone(img$3.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, img$3, ptrType$5.nil, ptrType$9.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 4:
			img$4 = _ref.$val;
			p = new pixelGetter.ptr(4, $clone(img$4.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, img$4, ptrType$9.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 5:
			img$5 = _ref.$val;
			p = new pixelGetter.ptr(6, $clone(img$5.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$9.nil, img$5, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 6:
			img$6 = _ref.$val;
			p = new pixelGetter.ptr(7, $clone(img$6.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$9.nil, ptrType$2.nil, img$6, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$9, true)[1]) { */ case 7:
			img$7 = _ref.$val;
			p = new pixelGetter.ptr(5, $clone(img$7.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, img$7, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 10; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 8:
			img$8 = _ref.$val;
			_r = convertPalette((x = img$8.Palette, $subslice(new sliceType$6(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 11; case 11: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p = new pixelGetter.ptr(8, $clone(img$8.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$9.nil, ptrType$2.nil, ptrType$3.nil, img$8, _r);
			$s = -1; return p;
		/* } else { */ case 9:
			img$9 = _ref;
			_r$1 = img$9.Bounds(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			p = new pixelGetter.ptr(0, $clone(_r$1, image.Rectangle), img$9, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$9.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
		/* } */ case 10:
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPixelGetter }; } $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.img = img; $f.img$1 = img$1; $f.img$2 = img$2; $f.img$3 = img$3; $f.img$4 = img$4; $f.img$5 = img$5; $f.img$6 = img$6; $f.img$7 = img$7; $f.img$8 = img$8; $f.img$9 = img$9; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	convertPalette = function(p) {
		var _1, _r, _tuple, a, a16, b, b$1, b16, g, g$1, g16, i, p, plen, pnew, q, r, r$1, r16, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; a16 = $f.a16; b = $f.b; b$1 = $f.b$1; b16 = $f.b16; g = $f.g; g$1 = $f.g$1; g16 = $f.g16; i = $f.i; p = $f.p; plen = $f.plen; pnew = $f.pnew; q = $f.q; r = $f.r; r$1 = $f.r$1; r16 = $f.r16; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		plen = p.$length;
		pnew = $makeSlice(sliceType$2, plen);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < plen)) { break; } */ if(!(i < plen)) { $s = 2; continue; }
			_r = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]).RGBA(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			r16 = _tuple[0];
			g16 = _tuple[1];
			b16 = _tuple[2];
			a16 = _tuple[3];
			_1 = a16;
			if (_1 === (0)) {
				pixel.copy(((i < 0 || i >= pnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : pnew.$array[pnew.$offset + i]), new pixel.ptr(0, 0, 0, 0));
			} else if (_1 === (65535)) {
				r = $fround((r16) * 1.5259021893143654e-05);
				g = $fround((g16) * 1.5259021893143654e-05);
				b = $fround((b16) * 1.5259021893143654e-05);
				pixel.copy(((i < 0 || i >= pnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : pnew.$array[pnew.$offset + i]), new pixel.ptr(r, g, b, 1));
			} else {
				q = $fround(1 / (a16));
				r$1 = $fround((r16) * q);
				g$1 = $fround((g16) * q);
				b$1 = $fround((b16) * q);
				a = $fround((a16) * 1.5259021893143654e-05);
				pixel.copy(((i < 0 || i >= pnew.$length) ? ($throwRuntimeError("index out of range"), undefined) : pnew.$array[pnew.$offset + i]), new pixel.ptr(r$1, g$1, b$1, a));
			}
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return pnew;
		/* */ } return; } if ($f === undefined) { $f = { $blk: convertPalette }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.a16 = a16; $f.b = b; $f.b$1 = b$1; $f.b16 = b16; $f.g = g; $f.g$1 = g$1; $f.g16 = g16; $f.i = i; $f.p = p; $f.plen = plen; $f.pnew = pnew; $f.q = q; $f.r = r; $f.r$1 = r$1; $f.r16 = r16; $f.$s = $s; $f.$r = $r; return $f;
	};
	getPaletteIndex = function(pal, px) {
		var _i, _ref, d, dcur, dmin, i, k, pal, palpx, px;
		k = 0;
		dmin = 4;
		_ref = pal;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			palpx = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), pixel);
			d = $fround(px.R - palpx.R);
			dcur = $fround(d * d);
			d = $fround(px.G - palpx.G);
			dcur = $fround(dcur + ($fround(d * d)));
			d = $fround(px.B - palpx.B);
			dcur = $fround(dcur + ($fround(d * d)));
			d = $fround(px.A - palpx.A);
			dcur = $fround(dcur + ($fround(d * d)));
			if (dcur < 1.1641887454061361e-10) {
				return i;
			}
			if (dcur < dmin) {
				dmin = dcur;
				k = i;
			}
			_i++;
		}
		return k;
	};
	pixelclr = function(c) {
		var _1, _r, _tuple, a, a16, b, b$1, b16, c, g, g$1, g16, px, q, r, r$1, r16, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; a = $f.a; a16 = $f.a16; b = $f.b; b$1 = $f.b$1; b16 = $f.b16; c = $f.c; g = $f.g; g$1 = $f.g$1; g16 = $f.g16; px = $f.px; q = $f.q; r = $f.r; r$1 = $f.r$1; r16 = $f.r16; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		px = new pixel.ptr(0, 0, 0, 0);
		_r = c.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r16 = _tuple[0];
		g16 = _tuple[1];
		b16 = _tuple[2];
		a16 = _tuple[3];
		_1 = a16;
		if (_1 === (0)) {
			pixel.copy(px, new pixel.ptr(0, 0, 0, 0));
		} else if (_1 === (65535)) {
			r = $fround((r16) * 1.5259021893143654e-05);
			g = $fround((g16) * 1.5259021893143654e-05);
			b = $fround((b16) * 1.5259021893143654e-05);
			pixel.copy(px, new pixel.ptr(r, g, b, 1));
		} else {
			q = $fround(1 / (a16));
			r$1 = $fround((r16) * q);
			g$1 = $fround((g16) * q);
			b$1 = $fround((b16) * q);
			a = $fround((a16) * 1.5259021893143654e-05);
			pixel.copy(px, new pixel.ptr(r$1, g$1, b$1, a));
		}
		pixel.copy(px, px);
		$s = -1; return px;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pixelclr }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.a16 = a16; $f.b = b; $f.b$1 = b$1; $f.b16 = b16; $f.c = c; $f.g = g; $f.g$1 = g$1; $f.g16 = g16; $f.px = px; $f.q = q; $f.r = r; $f.r$1 = r$1; $f.r16 = r16; $f.$s = $s; $f.$r = $r; return $f;
	};
	pixelGetter.ptr.prototype.getPixel = function(x, y) {
		var _1, _2, _3, _r, _r$1, _tuple, a, a$1, a$2, a$3, a16, a8, b, b$1, b$2, b$3, b$4, b$5, b$6, b8, g, g$1, g$2, g$3, g$4, g$5, g$6, g8, i, i$1, i$2, i$3, i$4, i$5, i$6, ic, iy, k, p, px, q, q$1, r, r$1, r$2, r$3, r$4, r$5, r$6, r8, v, v$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; a = $f.a; a$1 = $f.a$1; a$2 = $f.a$2; a$3 = $f.a$3; a16 = $f.a16; a8 = $f.a8; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; b$4 = $f.b$4; b$5 = $f.b$5; b$6 = $f.b$6; b8 = $f.b8; g = $f.g; g$1 = $f.g$1; g$2 = $f.g$2; g$3 = $f.g$3; g$4 = $f.g$4; g$5 = $f.g$5; g$6 = $f.g$6; g8 = $f.g8; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; ic = $f.ic; iy = $f.iy; k = $f.k; p = $f.p; px = $f.px; q = $f.q; q$1 = $f.q$1; r = $f.r; r$1 = $f.r$1; r$2 = $f.r$2; r$3 = $f.r$3; r$4 = $f.r$4; r$5 = $f.r$5; r$6 = $f.r$6; r8 = $f.r8; v = $f.v; v$1 = $f.v$1; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$64 = $f.x$64; x$65 = $f.x$65; x$66 = $f.x$66; x$67 = $f.x$67; x$68 = $f.x$68; x$69 = $f.x$69; x$7 = $f.x$7; x$70 = $f.x$70; x$71 = $f.x$71; x$72 = $f.x$72; x$73 = $f.x$73; x$74 = $f.x$74; x$75 = $f.x$75; x$76 = $f.x$76; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		px = new pixel.ptr(0, 0, 0, 0);
		p = this;
			_1 = p.imgType;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ if (_1 === (7)) { $s = 7; continue; }
			/* */ if (_1 === (5)) { $s = 8; continue; }
			/* */ if (_1 === (8)) { $s = 9; continue; }
			/* */ if (_1 === (0)) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_1 === (1)) { */ case 2:
				i = p.imgNRGBA.PixOffset(x, y);
				r = $fround(((x$1 = p.imgNRGBA.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2]))) * 0.003921568859368563);
				g = $fround(((x$3 = p.imgNRGBA.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4]))) * 0.003921568859368563);
				b = $fround(((x$5 = p.imgNRGBA.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]))) * 0.003921568859368563);
				a = $fround(((x$7 = p.imgNRGBA.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]))) * 0.003921568859368563);
				pixel.copy(px, new pixel.ptr(r, g, b, a));
				$s = 11; continue;
			/* } else if (_1 === (2)) { */ case 3:
				i$1 = p.imgNRGBA64.PixOffset(x, y);
				r$1 = $fround((((((((x$9 = p.imgNRGBA64.Pix, x$10 = i$1 + 0 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$11 = p.imgNRGBA64.Pix, x$12 = i$1 + 1 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
				g$1 = $fround((((((((x$13 = p.imgNRGBA64.Pix, x$14 = i$1 + 2 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$15 = p.imgNRGBA64.Pix, x$16 = i$1 + 3 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
				b$1 = $fround((((((((x$17 = p.imgNRGBA64.Pix, x$18 = i$1 + 4 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$19 = p.imgNRGBA64.Pix, x$20 = i$1 + 5 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
				a$1 = $fround((((((((x$21 = p.imgNRGBA64.Pix, x$22 = i$1 + 6 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$23 = p.imgNRGBA64.Pix, x$24 = i$1 + 7 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
				pixel.copy(px, new pixel.ptr(r$1, g$1, b$1, a$1));
				$s = 11; continue;
			/* } else if (_1 === (3)) { */ case 4:
				i$2 = p.imgRGBA.PixOffset(x, y);
				a8 = (x$25 = p.imgRGBA.Pix, x$26 = i$2 + 3 >> 0, ((x$26 < 0 || x$26 >= x$25.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$25.$array[x$25.$offset + x$26]));
				_2 = a8;
				if (_2 === (0)) {
					pixel.copy(px, new pixel.ptr(0, 0, 0, 0));
				} else if (_2 === (255)) {
					r$2 = $fround(((x$27 = p.imgRGBA.Pix, x$28 = i$2 + 0 >> 0, ((x$28 < 0 || x$28 >= x$27.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$27.$array[x$27.$offset + x$28]))) * 0.003921568859368563);
					g$2 = $fround(((x$29 = p.imgRGBA.Pix, x$30 = i$2 + 1 >> 0, ((x$30 < 0 || x$30 >= x$29.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$29.$array[x$29.$offset + x$30]))) * 0.003921568859368563);
					b$2 = $fround(((x$31 = p.imgRGBA.Pix, x$32 = i$2 + 2 >> 0, ((x$32 < 0 || x$32 >= x$31.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$31.$array[x$31.$offset + x$32]))) * 0.003921568859368563);
					pixel.copy(px, new pixel.ptr(r$2, g$2, b$2, 1));
				} else {
					q = $fround(1 / (a8));
					r$3 = $fround(((x$33 = p.imgRGBA.Pix, x$34 = i$2 + 0 >> 0, ((x$34 < 0 || x$34 >= x$33.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$33.$array[x$33.$offset + x$34]))) * q);
					g$3 = $fround(((x$35 = p.imgRGBA.Pix, x$36 = i$2 + 1 >> 0, ((x$36 < 0 || x$36 >= x$35.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$35.$array[x$35.$offset + x$36]))) * q);
					b$3 = $fround(((x$37 = p.imgRGBA.Pix, x$38 = i$2 + 2 >> 0, ((x$38 < 0 || x$38 >= x$37.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$37.$array[x$37.$offset + x$38]))) * q);
					a$2 = $fround((a8) * 0.003921568859368563);
					pixel.copy(px, new pixel.ptr(r$3, g$3, b$3, a$2));
				}
				$s = 11; continue;
			/* } else if (_1 === (4)) { */ case 5:
				i$3 = p.imgRGBA64.PixOffset(x, y);
				a16 = (((((x$39 = p.imgRGBA64.Pix, x$40 = i$3 + 6 >> 0, ((x$40 < 0 || x$40 >= x$39.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$39.$array[x$39.$offset + x$40])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$41 = p.imgRGBA64.Pix, x$42 = i$3 + 7 >> 0, ((x$42 < 0 || x$42 >= x$41.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$41.$array[x$41.$offset + x$42])) << 16 >>> 16))) >>> 0;
				_3 = a16;
				if (_3 === (0)) {
					pixel.copy(px, new pixel.ptr(0, 0, 0, 0));
				} else if (_3 === (65535)) {
					r$4 = $fround((((((((x$43 = p.imgRGBA64.Pix, x$44 = i$3 + 0 >> 0, ((x$44 < 0 || x$44 >= x$43.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$43.$array[x$43.$offset + x$44])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$45 = p.imgRGBA64.Pix, x$46 = i$3 + 1 >> 0, ((x$46 < 0 || x$46 >= x$45.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$45.$array[x$45.$offset + x$46])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
					g$4 = $fround((((((((x$47 = p.imgRGBA64.Pix, x$48 = i$3 + 2 >> 0, ((x$48 < 0 || x$48 >= x$47.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$47.$array[x$47.$offset + x$48])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$49 = p.imgRGBA64.Pix, x$50 = i$3 + 3 >> 0, ((x$50 < 0 || x$50 >= x$49.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$49.$array[x$49.$offset + x$50])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
					b$4 = $fround((((((((x$51 = p.imgRGBA64.Pix, x$52 = i$3 + 4 >> 0, ((x$52 < 0 || x$52 >= x$51.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$51.$array[x$51.$offset + x$52])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$53 = p.imgRGBA64.Pix, x$54 = i$3 + 5 >> 0, ((x$54 < 0 || x$54 >= x$53.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$53.$array[x$53.$offset + x$54])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
					pixel.copy(px, new pixel.ptr(r$4, g$4, b$4, 1));
				} else {
					q$1 = $fround(1 / (a16));
					r$5 = $fround((((((((x$55 = p.imgRGBA64.Pix, x$56 = i$3 + 0 >> 0, ((x$56 < 0 || x$56 >= x$55.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$55.$array[x$55.$offset + x$56])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$57 = p.imgRGBA64.Pix, x$58 = i$3 + 1 >> 0, ((x$58 < 0 || x$58 >= x$57.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$57.$array[x$57.$offset + x$58])) << 16 >>> 16))) >>> 0)) * q$1);
					g$5 = $fround((((((((x$59 = p.imgRGBA64.Pix, x$60 = i$3 + 2 >> 0, ((x$60 < 0 || x$60 >= x$59.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$59.$array[x$59.$offset + x$60])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$61 = p.imgRGBA64.Pix, x$62 = i$3 + 3 >> 0, ((x$62 < 0 || x$62 >= x$61.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$61.$array[x$61.$offset + x$62])) << 16 >>> 16))) >>> 0)) * q$1);
					b$5 = $fround((((((((x$63 = p.imgRGBA64.Pix, x$64 = i$3 + 4 >> 0, ((x$64 < 0 || x$64 >= x$63.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$63.$array[x$63.$offset + x$64])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$65 = p.imgRGBA64.Pix, x$66 = i$3 + 5 >> 0, ((x$66 < 0 || x$66 >= x$65.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$65.$array[x$65.$offset + x$66])) << 16 >>> 16))) >>> 0)) * q$1);
					a$3 = $fround((a16) * 1.5259021893143654e-05);
					pixel.copy(px, new pixel.ptr(r$5, g$5, b$5, a$3));
				}
				$s = 11; continue;
			/* } else if (_1 === (6)) { */ case 6:
				i$4 = p.imgGray.PixOffset(x, y);
				v = $fround(((x$67 = p.imgGray.Pix, ((i$4 < 0 || i$4 >= x$67.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$67.$array[x$67.$offset + i$4]))) * 0.003921568859368563);
				pixel.copy(px, new pixel.ptr(v, v, v, 1));
				$s = 11; continue;
			/* } else if (_1 === (7)) { */ case 7:
				i$5 = p.imgGray16.PixOffset(x, y);
				v$1 = $fround((((((((x$68 = p.imgGray16.Pix, x$69 = i$5 + 0 >> 0, ((x$69 < 0 || x$69 >= x$68.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$68.$array[x$68.$offset + x$69])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$70 = p.imgGray16.Pix, x$71 = i$5 + 1 >> 0, ((x$71 < 0 || x$71 >= x$70.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$70.$array[x$70.$offset + x$71])) << 16 >>> 16))) >>> 0)) * 1.5259021893143654e-05);
				pixel.copy(px, new pixel.ptr(v$1, v$1, v$1, 1));
				$s = 11; continue;
			/* } else if (_1 === (5)) { */ case 8:
				iy = p.imgYCbCr.YOffset(x, y);
				ic = p.imgYCbCr.COffset(x, y);
				_tuple = color.YCbCrToRGB((x$72 = p.imgYCbCr.Y, ((iy < 0 || iy >= x$72.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$72.$array[x$72.$offset + iy])), (x$73 = p.imgYCbCr.Cb, ((ic < 0 || ic >= x$73.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$73.$array[x$73.$offset + ic])), (x$74 = p.imgYCbCr.Cr, ((ic < 0 || ic >= x$74.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$74.$array[x$74.$offset + ic])));
				r8 = _tuple[0];
				g8 = _tuple[1];
				b8 = _tuple[2];
				r$6 = $fround((r8) * 0.003921568859368563);
				g$6 = $fround((g8) * 0.003921568859368563);
				b$6 = $fround((b8) * 0.003921568859368563);
				pixel.copy(px, new pixel.ptr(r$6, g$6, b$6, 1));
				$s = 11; continue;
			/* } else if (_1 === (8)) { */ case 9:
				i$6 = p.imgPaletted.PixOffset(x, y);
				k = (x$75 = p.imgPaletted.Pix, ((i$6 < 0 || i$6 >= x$75.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$75.$array[x$75.$offset + i$6]));
				pixel.copy(px, (x$76 = p.imgPalette, ((k < 0 || k >= x$76.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$76.$array[x$76.$offset + k])));
				$s = 11; continue;
			/* } else if (_1 === (0)) { */ case 10:
				_r = p.imgGeneric.At(x, y); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = pixelclr(_r); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				pixel.copy(px, _r$1);
			/* } */ case 11:
		case 1:
		$s = -1; return px;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pixelGetter.ptr.prototype.getPixel }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.a = a; $f.a$1 = a$1; $f.a$2 = a$2; $f.a$3 = a$3; $f.a16 = a16; $f.a8 = a8; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.b$4 = b$4; $f.b$5 = b$5; $f.b$6 = b$6; $f.b8 = b8; $f.g = g; $f.g$1 = g$1; $f.g$2 = g$2; $f.g$3 = g$3; $f.g$4 = g$4; $f.g$5 = g$5; $f.g$6 = g$6; $f.g8 = g8; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.ic = ic; $f.iy = iy; $f.k = k; $f.p = p; $f.px = px; $f.q = q; $f.q$1 = q$1; $f.r = r; $f.r$1 = r$1; $f.r$2 = r$2; $f.r$3 = r$3; $f.r$4 = r$4; $f.r$5 = r$5; $f.r$6 = r$6; $f.r8 = r8; $f.v = v; $f.v$1 = v$1; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$64 = x$64; $f.x$65 = x$65; $f.x$66 = x$66; $f.x$67 = x$67; $f.x$68 = x$68; $f.x$69 = x$69; $f.x$7 = x$7; $f.x$70 = x$70; $f.x$71 = x$71; $f.x$72 = x$72; $f.x$73 = x$73; $f.x$74 = x$74; $f.x$75 = x$75; $f.x$76 = x$76; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	pixelGetter.prototype.getPixel = function(x, y) { return this.$val.getPixel(x, y); };
	f32u8 = function(val) {
		var val, x;
		x = (new $Int64(0, $fround(val + 0.5)));
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 255))) {
			return 255;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 0))) {
			return ((x.$low << 24 >>> 24));
		}
		return 0;
	};
	f32u16 = function(val) {
		var val, x;
		x = (new $Int64(0, $fround(val + 0.5)));
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 65535))) {
			return 65535;
		}
		if ((x.$high > 0 || (x.$high === 0 && x.$low > 0))) {
			return ((x.$low << 16 >>> 16));
		}
		return 0;
	};
	newPixelSetter = function(img) {
		var _r, _r$1, _ref, img, img$1, img$2, img$3, img$4, img$5, img$6, img$7, img$8, p, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; img = $f.img; img$1 = $f.img$1; img$2 = $f.img$2; img$3 = $f.img$3; img$4 = $f.img$4; img$5 = $f.img$5; img$6 = $f.img$6; img$7 = $f.img$7; img$8 = $f.img$8; p = $f.p; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = ptrType$11.nil;
		_ref = img;
		/* */ if ($assertType(_ref, ptrType$6, true)[1]) { $s = 1; continue; }
		/* */ if ($assertType(_ref, ptrType$7, true)[1]) { $s = 2; continue; }
		/* */ if ($assertType(_ref, ptrType$4, true)[1]) { $s = 3; continue; }
		/* */ if ($assertType(_ref, ptrType$5, true)[1]) { $s = 4; continue; }
		/* */ if ($assertType(_ref, ptrType$2, true)[1]) { $s = 5; continue; }
		/* */ if ($assertType(_ref, ptrType$3, true)[1]) { $s = 6; continue; }
		/* */ if ($assertType(_ref, ptrType$10, true)[1]) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if ($assertType(_ref, ptrType$6, true)[1]) { */ case 1:
			img$1 = _ref.$val;
			p = new pixelSetter.ptr(1, $clone(img$1.Bounds(), image.Rectangle), $ifaceNil, img$1, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$7, true)[1]) { */ case 2:
			img$2 = _ref.$val;
			p = new pixelSetter.ptr(2, $clone(img$2.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, img$2, ptrType$4.nil, ptrType$5.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$4, true)[1]) { */ case 3:
			img$3 = _ref.$val;
			p = new pixelSetter.ptr(3, $clone(img$3.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, img$3, ptrType$5.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$5, true)[1]) { */ case 4:
			img$4 = _ref.$val;
			p = new pixelSetter.ptr(4, $clone(img$4.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, img$4, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$2, true)[1]) { */ case 5:
			img$5 = _ref.$val;
			p = new pixelSetter.ptr(6, $clone(img$5.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, img$5, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$3, true)[1]) { */ case 6:
			img$6 = _ref.$val;
			p = new pixelSetter.ptr(7, $clone(img$6.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$2.nil, img$6, ptrType$10.nil, sliceType$2.nil);
			$s = 9; continue;
		/* } else if ($assertType(_ref, ptrType$10, true)[1]) { */ case 7:
			img$7 = _ref.$val;
			_r = convertPalette((x = img$7.Palette, $subslice(new sliceType$6(x.$array), x.$offset, x.$offset + x.$length))); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			p = new pixelSetter.ptr(8, $clone(img$7.Bounds(), image.Rectangle), $ifaceNil, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$2.nil, ptrType$3.nil, img$7, _r);
			$s = 9; continue;
		/* } else { */ case 8:
			img$8 = _ref;
			_r$1 = img$8.Bounds(); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			p = new pixelSetter.ptr(0, $clone(_r$1, image.Rectangle), img$8, ptrType$6.nil, ptrType$7.nil, ptrType$4.nil, ptrType$5.nil, ptrType$2.nil, ptrType$3.nil, ptrType$10.nil, sliceType$2.nil);
		/* } */ case 9:
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPixelSetter }; } $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f.img = img; $f.img$1 = img$1; $f.img$2 = img$2; $f.img$3 = img$3; $f.img$4 = img$4; $f.img$5 = img$5; $f.img$6 = img$6; $f.img$7 = img$7; $f.img$8 = img$8; $f.p = p; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	pixelSetter.ptr.prototype.setPixel = function(x, y, px) {
		var _1, a16, a16$1, a16$2, b16, b16$1, b16$2, fa, fa$1, g16, g16$1, g16$2, i, i$1, i$2, i$3, i$4, i$5, i$6, k, p, px, px1, r16, r16$1, r16$2, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$6, x$7, x$8, x$9, y, y16, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; a16 = $f.a16; a16$1 = $f.a16$1; a16$2 = $f.a16$2; b16 = $f.b16; b16$1 = $f.b16$1; b16$2 = $f.b16$2; fa = $f.fa; fa$1 = $f.fa$1; g16 = $f.g16; g16$1 = $f.g16$1; g16$2 = $f.g16$2; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; i$6 = $f.i$6; k = $f.k; p = $f.p; px = $f.px; px1 = $f.px1; r16 = $f.r16; r16$1 = $f.r16$1; r16$2 = $f.r16$2; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y16 = $f.y16; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (!$clone(image.Pt(x, y), image.Point).In($clone(p.imgBounds, image.Rectangle))) {
			$s = -1; return;
		}
			_1 = p.imgType;
			/* */ if (_1 === (1)) { $s = 2; continue; }
			/* */ if (_1 === (2)) { $s = 3; continue; }
			/* */ if (_1 === (3)) { $s = 4; continue; }
			/* */ if (_1 === (4)) { $s = 5; continue; }
			/* */ if (_1 === (6)) { $s = 6; continue; }
			/* */ if (_1 === (7)) { $s = 7; continue; }
			/* */ if (_1 === (8)) { $s = 8; continue; }
			/* */ if (_1 === (0)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (1)) { */ case 2:
				i = p.imgNRGBA.PixOffset(x, y);
				(x$1 = p.imgNRGBA.Pix, x$2 = i + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = f32u8($fround(px.R * 255))));
				(x$3 = p.imgNRGBA.Pix, x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = f32u8($fround(px.G * 255))));
				(x$5 = p.imgNRGBA.Pix, x$6 = i + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6] = f32u8($fround(px.B * 255))));
				(x$7 = p.imgNRGBA.Pix, x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8] = f32u8($fround(px.A * 255))));
				$s = 10; continue;
			/* } else if (_1 === (2)) { */ case 3:
				r16 = f32u16($fround(px.R * 65535));
				g16 = f32u16($fround(px.G * 65535));
				b16 = f32u16($fround(px.B * 65535));
				a16 = f32u16($fround(px.A * 65535));
				i$1 = p.imgNRGBA64.PixOffset(x, y);
				(x$9 = p.imgNRGBA64.Pix, x$10 = i$1 + 0 >> 0, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = (((r16 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$11 = p.imgNRGBA64.Pix, x$12 = i$1 + 1 >> 0, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = ((((r16 & 255) >>> 0) << 24 >>> 24))));
				(x$13 = p.imgNRGBA64.Pix, x$14 = i$1 + 2 >> 0, ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14] = (((g16 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$15 = p.imgNRGBA64.Pix, x$16 = i$1 + 3 >> 0, ((x$16 < 0 || x$16 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + x$16] = ((((g16 & 255) >>> 0) << 24 >>> 24))));
				(x$17 = p.imgNRGBA64.Pix, x$18 = i$1 + 4 >> 0, ((x$18 < 0 || x$18 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + x$18] = (((b16 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$19 = p.imgNRGBA64.Pix, x$20 = i$1 + 5 >> 0, ((x$20 < 0 || x$20 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + x$20] = ((((b16 & 255) >>> 0) << 24 >>> 24))));
				(x$21 = p.imgNRGBA64.Pix, x$22 = i$1 + 6 >> 0, ((x$22 < 0 || x$22 >= x$21.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$21.$array[x$21.$offset + x$22] = (((a16 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$23 = p.imgNRGBA64.Pix, x$24 = i$1 + 7 >> 0, ((x$24 < 0 || x$24 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + x$24] = ((((a16 & 255) >>> 0) << 24 >>> 24))));
				$s = 10; continue;
			/* } else if (_1 === (3)) { */ case 4:
				fa = $fround(px.A * 255);
				i$2 = p.imgRGBA.PixOffset(x, y);
				(x$25 = p.imgRGBA.Pix, x$26 = i$2 + 0 >> 0, ((x$26 < 0 || x$26 >= x$25.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$25.$array[x$25.$offset + x$26] = f32u8($fround(px.R * fa))));
				(x$27 = p.imgRGBA.Pix, x$28 = i$2 + 1 >> 0, ((x$28 < 0 || x$28 >= x$27.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$27.$array[x$27.$offset + x$28] = f32u8($fround(px.G * fa))));
				(x$29 = p.imgRGBA.Pix, x$30 = i$2 + 2 >> 0, ((x$30 < 0 || x$30 >= x$29.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$29.$array[x$29.$offset + x$30] = f32u8($fround(px.B * fa))));
				(x$31 = p.imgRGBA.Pix, x$32 = i$2 + 3 >> 0, ((x$32 < 0 || x$32 >= x$31.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$31.$array[x$31.$offset + x$32] = f32u8(fa)));
				$s = 10; continue;
			/* } else if (_1 === (4)) { */ case 5:
				fa$1 = $fround(px.A * 65535);
				r16$1 = f32u16($fround(px.R * fa$1));
				g16$1 = f32u16($fround(px.G * fa$1));
				b16$1 = f32u16($fround(px.B * fa$1));
				a16$1 = f32u16(fa$1);
				i$3 = p.imgRGBA64.PixOffset(x, y);
				(x$33 = p.imgRGBA64.Pix, x$34 = i$3 + 0 >> 0, ((x$34 < 0 || x$34 >= x$33.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$33.$array[x$33.$offset + x$34] = (((r16$1 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$35 = p.imgRGBA64.Pix, x$36 = i$3 + 1 >> 0, ((x$36 < 0 || x$36 >= x$35.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$35.$array[x$35.$offset + x$36] = ((((r16$1 & 255) >>> 0) << 24 >>> 24))));
				(x$37 = p.imgRGBA64.Pix, x$38 = i$3 + 2 >> 0, ((x$38 < 0 || x$38 >= x$37.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$37.$array[x$37.$offset + x$38] = (((g16$1 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$39 = p.imgRGBA64.Pix, x$40 = i$3 + 3 >> 0, ((x$40 < 0 || x$40 >= x$39.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$39.$array[x$39.$offset + x$40] = ((((g16$1 & 255) >>> 0) << 24 >>> 24))));
				(x$41 = p.imgRGBA64.Pix, x$42 = i$3 + 4 >> 0, ((x$42 < 0 || x$42 >= x$41.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$41.$array[x$41.$offset + x$42] = (((b16$1 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$43 = p.imgRGBA64.Pix, x$44 = i$3 + 5 >> 0, ((x$44 < 0 || x$44 >= x$43.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$43.$array[x$43.$offset + x$44] = ((((b16$1 & 255) >>> 0) << 24 >>> 24))));
				(x$45 = p.imgRGBA64.Pix, x$46 = i$3 + 6 >> 0, ((x$46 < 0 || x$46 >= x$45.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$45.$array[x$45.$offset + x$46] = (((a16$1 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$47 = p.imgRGBA64.Pix, x$48 = i$3 + 7 >> 0, ((x$48 < 0 || x$48 >= x$47.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$47.$array[x$47.$offset + x$48] = ((((a16$1 & 255) >>> 0) << 24 >>> 24))));
				$s = 10; continue;
			/* } else if (_1 === (6)) { */ case 6:
				i$4 = p.imgGray.PixOffset(x, y);
				(x$49 = p.imgGray.Pix, ((i$4 < 0 || i$4 >= x$49.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$49.$array[x$49.$offset + i$4] = f32u8($fround($fround(($fround($fround($fround(0.29899999499320984 * px.R) + $fround(0.5870000123977661 * px.G)) + $fround(0.11400000005960464 * px.B))) * px.A) * 255))));
				$s = 10; continue;
			/* } else if (_1 === (7)) { */ case 7:
				i$5 = p.imgGray16.PixOffset(x, y);
				y16 = f32u16($fround($fround(($fround($fround($fround(0.29899999499320984 * px.R) + $fround(0.5870000123977661 * px.G)) + $fround(0.11400000005960464 * px.B))) * px.A) * 65535));
				(x$50 = p.imgGray16.Pix, x$51 = i$5 + 0 >> 0, ((x$51 < 0 || x$51 >= x$50.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$50.$array[x$50.$offset + x$51] = (((y16 >>> 8 << 16 >>> 16) << 24 >>> 24))));
				(x$52 = p.imgGray16.Pix, x$53 = i$5 + 1 >> 0, ((x$53 < 0 || x$53 >= x$52.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$52.$array[x$52.$offset + x$53] = ((((y16 & 255) >>> 0) << 24 >>> 24))));
				$s = 10; continue;
			/* } else if (_1 === (8)) { */ case 8:
				px1 = new pixel.ptr(minf32(maxf32(px.R, 0), 1), minf32(maxf32(px.G, 0), 1), minf32(maxf32(px.B, 0), 1), minf32(maxf32(px.A, 0), 1));
				i$6 = p.imgPaletted.PixOffset(x, y);
				k = getPaletteIndex(p.imgPalette, $clone(px1, pixel));
				(x$54 = p.imgPaletted.Pix, ((i$6 < 0 || i$6 >= x$54.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$54.$array[x$54.$offset + i$6] = ((k << 24 >>> 24))));
				$s = 10; continue;
			/* } else if (_1 === (0)) { */ case 9:
				r16$2 = f32u16($fround(px.R * 65535));
				g16$2 = f32u16($fround(px.G * 65535));
				b16$2 = f32u16($fround(px.B * 65535));
				a16$2 = f32u16($fround(px.A * 65535));
				$r = p.imgGeneric.Set(x, y, (x$55 = new color.NRGBA64.ptr(r16$2, g16$2, b16$2, a16$2), new x$55.constructor.elem(x$55))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 10:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: pixelSetter.ptr.prototype.setPixel }; } $f._1 = _1; $f.a16 = a16; $f.a16$1 = a16$1; $f.a16$2 = a16$2; $f.b16 = b16; $f.b16$1 = b16$1; $f.b16$2 = b16$2; $f.fa = fa; $f.fa$1 = fa$1; $f.g16 = g16; $f.g16$1 = g16$1; $f.g16$2 = g16$2; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.i$6 = i$6; $f.k = k; $f.p = p; $f.px = px; $f.px1 = px1; $f.r16 = r16; $f.r16$1 = r16$1; $f.r16$2 = r16$2; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y16 = y16; $f.$s = $s; $f.$r = $r; return $f;
	};
	pixelSetter.prototype.setPixel = function(x, y, px) { return this.$val.setPixel(x, y, px); };
	bcspline = function(x, b, c) {
		var b, c, x;
		if (x < 0) {
			x = -x;
		}
		if (x < 1) {
			return $fround(($fround($fround($fround($fround($fround(($fround($fround(12 - $fround(9 * b)) - $fround(6 * c))) * x) * x) * x) + $fround($fround(($fround($fround(-18 + $fround(12 * b)) + $fround(6 * c))) * x) * x)) + ($fround(6 - $fround(2 * b))))) / 6);
		}
		if (x < 2) {
			return $fround(($fround($fround($fround($fround($fround($fround(($fround(-b - $fround(6 * c))) * x) * x) * x) + $fround($fround(($fround($fround(6 * b) + $fround(30 * c))) * x) * x)) + $fround(($fround($fround(-12 * b) - $fround(48 * c))) * x)) + ($fround($fround(8 * b) + $fround(24 * c))))) / 6);
		}
		return 0;
	};
	sinc = function(x) {
		var x;
		if (x === 0) {
			return 1;
		}
		return ($fround(math.Sin(3.141592653589793 * (x)) / (3.141592653589793 * (x))));
	};
	resamp.ptr.prototype.String = function() {
		var r;
		r = this;
		return r.name;
	};
	resamp.prototype.String = function() { return this.$val.String(); };
	resamp.ptr.prototype.Support = function() {
		var r;
		r = this;
		return r.support;
	};
	resamp.prototype.Support = function() { return this.$val.Support(); };
	resamp.ptr.prototype.Kernel = function(x) {
		var _r, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		_r = r.kernel(x); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: resamp.ptr.prototype.Kernel }; } $f._r = _r; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	resamp.prototype.Kernel = function(x) { return this.$val.Kernel(x); };
	init = function() {
		var x, x$1, x$2, x$3, x$4;
		$pkg.NearestNeighborResampling = (x = new resamp.ptr("NearestNeighborResampling", 0, (function(x$1) {
			var x$1;
			return 0;
		})), new x.constructor.elem(x));
		$pkg.BoxResampling = (x$1 = new resamp.ptr("BoxResampling", 0.5, (function(x$2) {
			var x$2;
			if (x$2 < 0) {
				x$2 = -x$2;
			}
			if (x$2 <= 0.5) {
				return 1;
			}
			return 0;
		})), new x$1.constructor.elem(x$1));
		$pkg.LinearResampling = (x$2 = new resamp.ptr("LinearResampling", 1, (function(x$3) {
			var x$3;
			if (x$3 < 0) {
				x$3 = -x$3;
			}
			if (x$3 < 1) {
				return $fround(1 - x$3);
			}
			return 0;
		})), new x$2.constructor.elem(x$2));
		$pkg.CubicResampling = (x$3 = new resamp.ptr("CubicResampling", 2, (function(x$4) {
			var x$4;
			if (x$4 < 0) {
				x$4 = -x$4;
			}
			if (x$4 < 2) {
				return bcspline(x$4, 0, 0.5);
			}
			return 0;
		})), new x$3.constructor.elem(x$3));
		$pkg.LanczosResampling = (x$4 = new resamp.ptr("LanczosResampling", 3, (function(x$5) {
			var x$5;
			if (x$5 < 0) {
				x$5 = -x$5;
			}
			if (x$5 < 3) {
				return $fround(sinc(x$5) * sinc($fround(x$5 / 3)));
			}
			return 0;
		})), new x$4.constructor.elem(x$4));
	};
	transformFilter.ptr.prototype.Bounds = function(srcBounds) {
		var dstBounds, p, srcBounds;
		dstBounds = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		p = this;
		if ((p.tt === 0) || (p.tt === 2) || (p.tt === 5) || (p.tt === 6)) {
			image.Rectangle.copy(dstBounds, image.Rect(0, 0, $clone(srcBounds, image.Rectangle).Dy(), $clone(srcBounds, image.Rectangle).Dx()));
		} else {
			image.Rectangle.copy(dstBounds, image.Rect(0, 0, $clone(srcBounds, image.Rectangle).Dx(), $clone(srcBounds, image.Rectangle).Dy()));
		}
		return dstBounds;
	};
	transformFilter.prototype.Bounds = function(srcBounds) { return this.$val.Bounds(srcBounds); };
	transformFilter.ptr.prototype.Draw = function(dst, src, options) {
		var _r, _r$1, _r$2, _r$3, dst, dstb, options, p, pixGetter, pixSetter, src, srcb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; dst = $f.dst; dstb = $f.dstb; options = $f.options; p = $f.p; pixGetter = $f.pixGetter; pixSetter = $f.pixSetter; src = $f.src; srcb = $f.srcb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dstb = [dstb];
		p = [p];
		pixGetter = [pixGetter];
		pixSetter = [pixSetter];
		srcb = [srcb];
		p[0] = this;
		if (options === ptrType.nil) {
			options = defaultOptions;
		}
		_r = src.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		srcb[0] = $clone(_r, image.Rectangle);
		_r$1 = dst.Bounds(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		dstb[0] = $clone(_r$1, image.Rectangle);
		_r$2 = newPixelGetter(src); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pixGetter[0] = _r$2;
		_r$3 = newPixelSetter(dst); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		pixSetter[0] = _r$3;
		$r = parallelize(options.Parallelization, srcb[0].Min.Y, srcb[0].Max.Y, (function(dstb, p, pixGetter, pixSetter, srcb) { return function $b(pmin, pmax) {
			var _1, _arg, _arg$1, _arg$2, _r$4, _tmp, _tmp$1, dstx, dsty, pmax, pmin, srcx, srcy, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; dstx = $f.dstx; dsty = $f.dsty; pmax = $f.pmax; pmin = $f.pmin; srcx = $f.srcx; srcy = $f.srcy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			srcy = pmin;
			/* while (true) { */ case 1:
				/* if (!(srcy < pmax)) { break; } */ if(!(srcy < pmax)) { $s = 2; continue; }
				srcx = srcb[0].Min.X;
				/* while (true) { */ case 3:
					/* if (!(srcx < srcb[0].Max.X)) { break; } */ if(!(srcx < srcb[0].Max.X)) { $s = 4; continue; }
					_tmp = 0;
					_tmp$1 = 0;
					dstx = _tmp;
					dsty = _tmp$1;
					_1 = p[0].tt;
					if (_1 === (0)) {
						dstx = (dstb[0].Min.X + srcy >> 0) - srcb[0].Min.Y >> 0;
						dsty = ((dstb[0].Min.Y + srcb[0].Max.X >> 0) - srcx >> 0) - 1 >> 0;
					} else if (_1 === (1)) {
						dstx = ((dstb[0].Min.X + srcb[0].Max.X >> 0) - srcx >> 0) - 1 >> 0;
						dsty = ((dstb[0].Min.Y + srcb[0].Max.Y >> 0) - srcy >> 0) - 1 >> 0;
					} else if (_1 === (2)) {
						dstx = ((dstb[0].Min.X + srcb[0].Max.Y >> 0) - srcy >> 0) - 1 >> 0;
						dsty = (dstb[0].Min.Y + srcx >> 0) - srcb[0].Min.X >> 0;
					} else if (_1 === (3)) {
						dstx = ((dstb[0].Min.X + srcb[0].Max.X >> 0) - srcx >> 0) - 1 >> 0;
						dsty = (dstb[0].Min.Y + srcy >> 0) - srcb[0].Min.Y >> 0;
					} else if (_1 === (4)) {
						dstx = (dstb[0].Min.X + srcx >> 0) - srcb[0].Min.X >> 0;
						dsty = ((dstb[0].Min.Y + srcb[0].Max.Y >> 0) - srcy >> 0) - 1 >> 0;
					} else if (_1 === (5)) {
						dstx = (dstb[0].Min.X + srcy >> 0) - srcb[0].Min.Y >> 0;
						dsty = (dstb[0].Min.Y + srcx >> 0) - srcb[0].Min.X >> 0;
					} else if (_1 === (6)) {
						dstx = ((dstb[0].Min.Y + srcb[0].Max.Y >> 0) - srcy >> 0) - 1 >> 0;
						dsty = ((dstb[0].Min.X + srcb[0].Max.X >> 0) - srcx >> 0) - 1 >> 0;
					}
					_arg = dstx;
					_arg$1 = dsty;
					_r$4 = pixGetter[0].getPixel(srcx, srcy); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg$2 = $clone(_r$4, pixel);
					$r = pixSetter[0].setPixel(_arg, _arg$1, _arg$2); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					srcx = srcx + (1) >> 0;
				/* } */ $s = 3; continue; case 4:
				srcy = srcy + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.dstx = dstx; $f.dsty = dsty; $f.pmax = pmax; $f.pmin = pmin; $f.srcx = srcx; $f.srcy = srcy; $f.$s = $s; $f.$r = $r; return $f;
		}; })(dstb, p, pixGetter, pixSetter, srcb)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: transformFilter.ptr.prototype.Draw }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.dst = dst; $f.dstb = dstb; $f.options = options; $f.p = p; $f.pixGetter = pixGetter; $f.pixSetter = pixSetter; $f.src = src; $f.srcb = srcb; $f.$s = $s; $f.$r = $r; return $f;
	};
	transformFilter.prototype.Draw = function(dst, src, options) { return this.$val.Draw(dst, src, options); };
	FlipHorizontal = function() {
		return new transformFilter.ptr(3);
	};
	$pkg.FlipHorizontal = FlipHorizontal;
	FlipVertical = function() {
		return new transformFilter.ptr(4);
	};
	$pkg.FlipVertical = FlipVertical;
	parallelize = function(enabled, datamin, datamax, fn) {
		var _q, datamax, datamin, datasize, enabled, fn, idx, numGoroutines, numProcs, p, partsize, wg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; datamax = $f.datamax; datamin = $f.datamin; datasize = $f.datasize; enabled = $f.enabled; fn = $f.fn; idx = $f.idx; numGoroutines = $f.numGoroutines; numProcs = $f.numProcs; p = $f.p; partsize = $f.partsize; wg = $f.wg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		datamax = [datamax];
		fn = [fn];
		idx = [idx];
		partsize = [partsize];
		wg = [wg];
		datasize = datamax[0] - datamin >> 0;
		partsize[0] = datasize;
		numGoroutines = 1;
		if (enabled) {
			numProcs = runtime.GOMAXPROCS(0);
			if (numProcs > 1) {
				numGoroutines = numProcs;
				partsize[0] = (_q = partsize[0] / (($imul(numGoroutines, 10))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				if (partsize[0] < 1) {
					partsize[0] = 1;
				}
			}
		}
		/* */ if (numGoroutines === 1) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (numGoroutines === 1) { */ case 1:
			$r = fn[0](datamin, datamax[0]); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			wg[0] = new sync.WaitGroup.ptr(0, $chanNil, arrayType$4.zero(), 0);
			wg[0].Add(numGoroutines);
			idx[0] = (new $Int64(0, datamin));
			p = 0;
			/* while (true) { */ case 5:
				/* if (!(p < numGoroutines)) { break; } */ if(!(p < numGoroutines)) { $s = 6; continue; }
				$go((function(datamax, fn, idx, partsize, wg) { return function $b() {
					var pmax, pmin, x, $s, $deferred, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; pmax = $f.pmax; pmin = $f.pmin; x = $f.x; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
					$deferred.push([$methodVal(wg[0], "Done"), []]);
					/* while (true) { */ case 1:
						pmin = (((x = atomic.AddInt64((idx.$ptr || (idx.$ptr = new ptrType$12(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, idx))), (new $Int64(0, partsize[0]))), x.$low + ((x.$high >> 31) * 4294967296)) >> 0)) - partsize[0] >> 0;
						if (pmin >= datamax[0]) {
							/* break; */ $s = 2; continue;
						}
						pmax = pmin + partsize[0] >> 0;
						if (pmax > datamax[0]) {
							pmax = datamax[0];
						}
						$r = fn[0](pmin, pmax); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ $s = 1; continue; case 2:
					$s = -1; return;
					/* */ } return; } } catch(err) { $err = err; $s = -1; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: $b }; } $f.pmax = pmax; $f.pmin = pmin; $f.x = x; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
				}; })(datamax, fn, idx, partsize, wg), []);
				p = p + (1) >> 0;
			/* } */ $s = 5; continue; case 6:
			$r = wg[0].Wait(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parallelize }; } $f._q = _q; $f.datamax = datamax; $f.datamin = datamin; $f.datasize = datasize; $f.enabled = enabled; $f.fn = fn; $f.idx = idx; $f.numGoroutines = numGoroutines; $f.numProcs = numProcs; $f.p = p; $f.partsize = partsize; $f.wg = wg; $f.$s = $s; $f.$r = $r; return $f;
	};
	minf32 = function(x, y) {
		var x, y;
		if (x < y) {
			return x;
		}
		return y;
	};
	maxf32 = function(x, y) {
		var x, y;
		if (x > y) {
			return x;
		}
		return y;
	};
	createTempImage = function(r) {
		var r;
		return image.NewNRGBA64($clone(r, image.Rectangle));
	};
	copyimage = function(dst, src, options) {
		var _r, _r$1, _r$2, _r$3, dst, dstb, options, pixGetter, pixSetter, src, srcb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; dst = $f.dst; dstb = $f.dstb; options = $f.options; pixGetter = $f.pixGetter; pixSetter = $f.pixSetter; src = $f.src; srcb = $f.srcb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dstb = [dstb];
		pixGetter = [pixGetter];
		pixSetter = [pixSetter];
		srcb = [srcb];
		if (options === ptrType.nil) {
			options = defaultOptions;
		}
		_r = src.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		srcb[0] = $clone(_r, image.Rectangle);
		_r$1 = dst.Bounds(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		dstb[0] = $clone(_r$1, image.Rectangle);
		_r$2 = newPixelGetter(src); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		pixGetter[0] = _r$2;
		_r$3 = newPixelSetter(dst); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		pixSetter[0] = _r$3;
		$r = parallelize(options.Parallelization, srcb[0].Min.Y, srcb[0].Max.Y, (function(dstb, pixGetter, pixSetter, srcb) { return function $b(pmin, pmax) {
			var _arg, _arg$1, _arg$2, _r$4, dstx, dsty, pmax, pmin, srcx, srcy, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r$4 = $f._r$4; dstx = $f.dstx; dsty = $f.dsty; pmax = $f.pmax; pmin = $f.pmin; srcx = $f.srcx; srcy = $f.srcy; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			srcy = pmin;
			/* while (true) { */ case 1:
				/* if (!(srcy < pmax)) { break; } */ if(!(srcy < pmax)) { $s = 2; continue; }
				srcx = srcb[0].Min.X;
				/* while (true) { */ case 3:
					/* if (!(srcx < srcb[0].Max.X)) { break; } */ if(!(srcx < srcb[0].Max.X)) { $s = 4; continue; }
					dstx = (dstb[0].Min.X + srcx >> 0) - srcb[0].Min.X >> 0;
					dsty = (dstb[0].Min.Y + srcy >> 0) - srcb[0].Min.Y >> 0;
					_arg = dstx;
					_arg$1 = dsty;
					_r$4 = pixGetter[0].getPixel(srcx, srcy); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_arg$2 = $clone(_r$4, pixel);
					$r = pixSetter[0].setPixel(_arg, _arg$1, _arg$2); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					srcx = srcx + (1) >> 0;
				/* } */ $s = 3; continue; case 4:
				srcy = srcy + (1) >> 0;
			/* } */ $s = 1; continue; case 2:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r$4 = _r$4; $f.dstx = dstx; $f.dsty = dsty; $f.pmax = pmax; $f.pmin = pmin; $f.srcx = srcx; $f.srcy = srcy; $f.$s = $s; $f.$r = $r; return $f;
		}; })(dstb, pixGetter, pixSetter, srcb)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: copyimage }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.dst = dst; $f.dstb = dstb; $f.options = options; $f.pixGetter = pixGetter; $f.pixSetter = pixSetter; $f.src = src; $f.srcb = srcb; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType$21.methods = [{prop: "SetParallelization", name: "SetParallelization", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "Parallelization", name: "Parallelization", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Add", name: "Add", pkg: "", typ: $funcType([sliceType$5], [], true)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([image.Rectangle], [image.Rectangle], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image, image.Image], [], false)}, {prop: "DrawAt", name: "DrawAt", pkg: "", typ: $funcType([draw.Image, image.Image, image.Point, Operator], [], false)}];
	ptrType$8.methods = [{prop: "getPixel", name: "getPixel", pkg: "github.com/disintegration/gift", typ: $funcType([$Int, $Int], [pixel], false)}, {prop: "getPixelRow", name: "getPixelRow", pkg: "github.com/disintegration/gift", typ: $funcType([$Int, ptrType$1], [], false)}, {prop: "getPixelColumn", name: "getPixelColumn", pkg: "github.com/disintegration/gift", typ: $funcType([$Int, ptrType$1], [], false)}];
	ptrType$11.methods = [{prop: "setPixel", name: "setPixel", pkg: "github.com/disintegration/gift", typ: $funcType([$Int, $Int, pixel], [], false)}, {prop: "setPixelRow", name: "setPixelRow", pkg: "github.com/disintegration/gift", typ: $funcType([$Int, sliceType$2], [], false)}, {prop: "setPixelColumn", name: "setPixelColumn", pkg: "github.com/disintegration/gift", typ: $funcType([$Int, sliceType$2], [], false)}];
	resamp.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Support", name: "Support", pkg: "", typ: $funcType([], [$Float32], false)}, {prop: "Kernel", name: "Kernel", pkg: "", typ: $funcType([$Float32], [$Float32], false)}];
	ptrType$26.methods = [{prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([image.Rectangle], [image.Rectangle], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image, image.Image, ptrType], [], false)}];
	Filter.init([{prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([image.Rectangle], [image.Rectangle], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image, image.Image, ptrType], [], false)}]);
	Options.init("", [{prop: "Parallelization", name: "Parallelization", anonymous: false, exported: true, typ: $Bool, tag: ""}]);
	GIFT.init("", [{prop: "Filters", name: "Filters", anonymous: false, exported: true, typ: sliceType$5, tag: ""}, {prop: "Options", name: "Options", anonymous: false, exported: true, typ: Options, tag: ""}]);
	pixel.init("", [{prop: "R", name: "R", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "G", name: "G", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "B", name: "B", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "A", name: "A", anonymous: false, exported: true, typ: $Float32, tag: ""}]);
	pixelGetter.init("github.com/disintegration/gift", [{prop: "imgType", name: "imgType", anonymous: false, exported: false, typ: imageType, tag: ""}, {prop: "imgBounds", name: "imgBounds", anonymous: false, exported: false, typ: image.Rectangle, tag: ""}, {prop: "imgGeneric", name: "imgGeneric", anonymous: false, exported: false, typ: image.Image, tag: ""}, {prop: "imgNRGBA", name: "imgNRGBA", anonymous: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "imgNRGBA64", name: "imgNRGBA64", anonymous: false, exported: false, typ: ptrType$7, tag: ""}, {prop: "imgRGBA", name: "imgRGBA", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "imgRGBA64", name: "imgRGBA64", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "imgYCbCr", name: "imgYCbCr", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "imgGray", name: "imgGray", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "imgGray16", name: "imgGray16", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "imgPaletted", name: "imgPaletted", anonymous: false, exported: false, typ: ptrType$10, tag: ""}, {prop: "imgPalette", name: "imgPalette", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	pixelSetter.init("github.com/disintegration/gift", [{prop: "imgType", name: "imgType", anonymous: false, exported: false, typ: imageType, tag: ""}, {prop: "imgBounds", name: "imgBounds", anonymous: false, exported: false, typ: image.Rectangle, tag: ""}, {prop: "imgGeneric", name: "imgGeneric", anonymous: false, exported: false, typ: draw.Image, tag: ""}, {prop: "imgNRGBA", name: "imgNRGBA", anonymous: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "imgNRGBA64", name: "imgNRGBA64", anonymous: false, exported: false, typ: ptrType$7, tag: ""}, {prop: "imgRGBA", name: "imgRGBA", anonymous: false, exported: false, typ: ptrType$4, tag: ""}, {prop: "imgRGBA64", name: "imgRGBA64", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "imgGray", name: "imgGray", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "imgGray16", name: "imgGray16", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "imgPaletted", name: "imgPaletted", anonymous: false, exported: false, typ: ptrType$10, tag: ""}, {prop: "imgPalette", name: "imgPalette", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	resamp.init("github.com/disintegration/gift", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "support", name: "support", anonymous: false, exported: false, typ: $Float32, tag: ""}, {prop: "kernel", name: "kernel", anonymous: false, exported: false, typ: funcType, tag: ""}]);
	transformFilter.init("github.com/disintegration/gift", [{prop: "tt", name: "tt", anonymous: false, exported: false, typ: transformType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = image.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = atomic.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.NearestNeighborResampling = $ifaceNil;
		$pkg.BoxResampling = $ifaceNil;
		$pkg.LinearResampling = $ifaceNil;
		$pkg.CubicResampling = $ifaceNil;
		$pkg.LanczosResampling = $ifaceNil;
		defaultOptions = new Options.ptr(true);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/math/fixed"] = (function() {
	var $pkg = {}, $init, fmt, Int26_6, Int52_12, Point26_6, Rectangle26_6, sliceType, muli64, P;
	fmt = $packages["fmt"];
	Int26_6 = $pkg.Int26_6 = $newType(4, $kindInt32, "fixed.Int26_6", true, "golang.org/x/image/math/fixed", true, null);
	Int52_12 = $pkg.Int52_12 = $newType(8, $kindInt64, "fixed.Int52_12", true, "golang.org/x/image/math/fixed", true, null);
	Point26_6 = $pkg.Point26_6 = $newType(0, $kindStruct, "fixed.Point26_6", true, "golang.org/x/image/math/fixed", true, function(X_, Y_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
	});
	Rectangle26_6 = $pkg.Rectangle26_6 = $newType(0, $kindStruct, "fixed.Rectangle26_6", true, "golang.org/x/image/math/fixed", true, function(Min_, Max_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Min = new Point26_6.ptr(0, 0);
			this.Max = new Point26_6.ptr(0, 0);
			return;
		}
		this.Min = Min_;
		this.Max = Max_;
	});
	sliceType = $sliceType($emptyInterface);
	Int26_6.prototype.String = function() {
		var _r, _r$1, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this.$val;
		/* */ if (x >= 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (x >= 0) { */ case 1:
			_r = fmt.Sprintf("%d:%02d", new sliceType([new $Int32((((x >> 6 >> 0) >> 0))), new $Int32((((x & 63) >> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		x = -x;
		/* */ if (x >= 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (x >= 0) { */ case 4:
			_r$1 = fmt.Sprintf("-%d:%02d", new sliceType([new $Int32((((x >> 6 >> 0) >> 0))), new $Int32((((x & 63) >> 0)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return "-33554432:00";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int26_6.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Int26_6).prototype.String = function() { return new Int26_6(this.$get()).String(); };
	Int26_6.prototype.Floor = function() {
		var x;
		x = this.$val;
		return (((((x + 0 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Floor = function() { return new Int26_6(this.$get()).Floor(); };
	Int26_6.prototype.Round = function() {
		var x;
		x = this.$val;
		return (((((x + 32 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Round = function() { return new Int26_6(this.$get()).Round(); };
	Int26_6.prototype.Ceil = function() {
		var x;
		x = this.$val;
		return (((((x + 63 >> 0)) >> 6 >> 0) >> 0));
	};
	$ptrType(Int26_6).prototype.Ceil = function() { return new Int26_6(this.$get()).Ceil(); };
	Int26_6.prototype.Mul = function(y) {
		var x, x$1, x$2, y;
		x = this.$val;
		return (((x$1 = $shiftRightInt64(((x$2 = $mul64((new $Int64(0, x)), (new $Int64(0, y))), new $Int64(x$2.$high + 0, x$2.$low + 32))), 6), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int26_6).prototype.Mul = function(y) { return new Int26_6(this.$get()).Mul(y); };
	Int52_12.prototype.String = function() {
		var _r, _r$1, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = this;
		/* */ if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { */ case 1:
			_r = fmt.Sprintf("%d:%04d", new sliceType([((x$1 = $shiftRightInt64(x, 12), new $Int64(x$1.$high, x$1.$low))), ((x$2 = new Int52_12(x.$high & 0, (x.$low & 4095) >>> 0), new $Int64(x$2.$high, x$2.$low)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		x = new Int52_12(-x.$high, -x.$low);
		/* */ if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x.$high > 0 || (x.$high === 0 && x.$low >= 0))) { */ case 4:
			_r$1 = fmt.Sprintf("-%d:%04d", new sliceType([((x$3 = $shiftRightInt64(x, 12), new $Int64(x$3.$high, x$3.$low))), ((x$4 = new Int52_12(x.$high & 0, (x.$low & 4095) >>> 0), new $Int64(x$4.$high, x$4.$low)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		$s = -1; return "-2251799813685248:0000";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Int52_12.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Int52_12).prototype.String = function() { return this.$get().String(); };
	Int52_12.prototype.Floor = function() {
		var x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 0)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Floor = function() { return this.$get().Floor(); };
	Int52_12.prototype.Round = function() {
		var x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 2048)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Round = function() { return this.$get().Round(); };
	Int52_12.prototype.Ceil = function() {
		var x, x$1;
		x = this;
		return (((x$1 = $shiftRightInt64((new Int52_12(x.$high + 0, x.$low + 4095)), 12), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	$ptrType(Int52_12).prototype.Ceil = function() { return this.$get().Ceil(); };
	Int52_12.prototype.Mul = function(y) {
		var _tuple, hi, lo, ret, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		x = this;
		_tuple = muli64((new $Int64(x.$high, x.$low)), (new $Int64(y.$high, y.$low)));
		lo = _tuple[0];
		hi = _tuple[1];
		ret = ((x$1 = (x$2 = $shiftLeft64(hi, 52), x$3 = $shiftRightUint64(lo, 12), new $Uint64(x$2.$high | x$3.$high, (x$2.$low | x$3.$low) >>> 0)), new Int52_12(x$1.$high, x$1.$low)));
		ret = (x$4 = ((x$5 = (x$6 = $shiftRightUint64(lo, 11), new $Uint64(x$6.$high & 0, (x$6.$low & 1) >>> 0)), new Int52_12(x$5.$high, x$5.$low))), new Int52_12(ret.$high + x$4.$high, ret.$low + x$4.$low));
		return ret;
	};
	$ptrType(Int52_12).prototype.Mul = function(y) { return this.$get().Mul(y); };
	muli64 = function(u, v) {
		var _tmp, _tmp$1, hi, lo, t, u, u0, u1, v, v0, v1, w0, w1, w2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		lo = new $Uint64(0, 0);
		hi = new $Uint64(0, 0);
		u1 = ((x = $shiftRightInt64(u, 32), new $Uint64(x.$high, x.$low)));
		u0 = ((x$1 = new $Int64(u.$high & 0, (u.$low & 4294967295) >>> 0), new $Uint64(x$1.$high, x$1.$low)));
		v1 = ((x$2 = $shiftRightInt64(v, 32), new $Uint64(x$2.$high, x$2.$low)));
		v0 = ((x$3 = new $Int64(v.$high & 0, (v.$low & 4294967295) >>> 0), new $Uint64(x$3.$high, x$3.$low)));
		w0 = $mul64(u0, v0);
		t = (x$4 = $mul64(u1, v0), x$5 = $shiftRightUint64(w0, 32), new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		w1 = new $Uint64(t.$high & 0, (t.$low & 4294967295) >>> 0);
		w2 = ((x$6 = $shiftRightInt64((new $Int64(t.$high, t.$low)), 32), new $Uint64(x$6.$high, x$6.$low)));
		w1 = (x$7 = $mul64(u0, v1), new $Uint64(w1.$high + x$7.$high, w1.$low + x$7.$low));
		_tmp = $mul64((new $Uint64(u.$high, u.$low)), (new $Uint64(v.$high, v.$low)));
		_tmp$1 = (x$8 = (x$9 = $mul64(u1, v1), new $Uint64(x$9.$high + w2.$high, x$9.$low + w2.$low)), x$10 = ((x$11 = $shiftRightInt64((new $Int64(w1.$high, w1.$low)), 32), new $Uint64(x$11.$high, x$11.$low))), new $Uint64(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		lo = _tmp;
		hi = _tmp$1;
		return [lo, hi];
	};
	P = function(x, y) {
		var x, y;
		return new Point26_6.ptr((((x << 6 >> 0) >> 0)), (((y << 6 >> 0) >> 0)));
	};
	$pkg.P = P;
	Point26_6.ptr.prototype.Add = function(q) {
		var p, q;
		p = this;
		return new Point26_6.ptr(p.X + q.X >> 0, p.Y + q.Y >> 0);
	};
	Point26_6.prototype.Add = function(q) { return this.$val.Add(q); };
	Point26_6.ptr.prototype.Sub = function(q) {
		var p, q;
		p = this;
		return new Point26_6.ptr(p.X - q.X >> 0, p.Y - q.Y >> 0);
	};
	Point26_6.prototype.Sub = function(q) { return this.$val.Sub(q); };
	Point26_6.ptr.prototype.Mul = function(k) {
		var _q, _q$1, k, p;
		p = this;
		return new Point26_6.ptr((_q = ($imul(p.X, k)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(p.Y, k)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point26_6.prototype.Mul = function(k) { return this.$val.Mul(k); };
	Point26_6.ptr.prototype.Div = function(k) {
		var _q, _q$1, k, p;
		p = this;
		return new Point26_6.ptr((_q = ($imul(p.X, 64)) / k, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ($imul(p.Y, 64)) / k, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	Point26_6.prototype.Div = function(k) { return this.$val.Div(k); };
	Point26_6.ptr.prototype.In = function(r) {
		var p, r;
		p = this;
		return r.Min.X <= p.X && p.X < r.Max.X && r.Min.Y <= p.Y && p.Y < r.Max.Y;
	};
	Point26_6.prototype.In = function(r) { return this.$val.In(r); };
	Rectangle26_6.ptr.prototype.Add = function(p) {
		var p, r;
		r = this;
		return new Rectangle26_6.ptr(new Point26_6.ptr(r.Min.X + p.X >> 0, r.Min.Y + p.Y >> 0), new Point26_6.ptr(r.Max.X + p.X >> 0, r.Max.Y + p.Y >> 0));
	};
	Rectangle26_6.prototype.Add = function(p) { return this.$val.Add(p); };
	Rectangle26_6.ptr.prototype.Sub = function(p) {
		var p, r;
		r = this;
		return new Rectangle26_6.ptr(new Point26_6.ptr(r.Min.X - p.X >> 0, r.Min.Y - p.Y >> 0), new Point26_6.ptr(r.Max.X - p.X >> 0, r.Max.Y - p.Y >> 0));
	};
	Rectangle26_6.prototype.Sub = function(p) { return this.$val.Sub(p); };
	Rectangle26_6.ptr.prototype.Intersect = function(s) {
		var r, s;
		r = this;
		if (r.Min.X < s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y < s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X > s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y > s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		if ($clone(r, Rectangle26_6).Empty()) {
			return new Rectangle26_6.ptr(new Point26_6.ptr(0, 0), new Point26_6.ptr(0, 0));
		}
		return r;
	};
	Rectangle26_6.prototype.Intersect = function(s) { return this.$val.Intersect(s); };
	Rectangle26_6.ptr.prototype.Union = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle26_6).Empty()) {
			return s;
		}
		if ($clone(s, Rectangle26_6).Empty()) {
			return r;
		}
		if (r.Min.X > s.Min.X) {
			r.Min.X = s.Min.X;
		}
		if (r.Min.Y > s.Min.Y) {
			r.Min.Y = s.Min.Y;
		}
		if (r.Max.X < s.Max.X) {
			r.Max.X = s.Max.X;
		}
		if (r.Max.Y < s.Max.Y) {
			r.Max.Y = s.Max.Y;
		}
		return r;
	};
	Rectangle26_6.prototype.Union = function(s) { return this.$val.Union(s); };
	Rectangle26_6.ptr.prototype.Empty = function() {
		var r;
		r = this;
		return r.Min.X >= r.Max.X || r.Min.Y >= r.Max.Y;
	};
	Rectangle26_6.prototype.Empty = function() { return this.$val.Empty(); };
	Rectangle26_6.ptr.prototype.In = function(s) {
		var r, s;
		r = this;
		if ($clone(r, Rectangle26_6).Empty()) {
			return true;
		}
		return s.Min.X <= r.Min.X && r.Max.X <= s.Max.X && s.Min.Y <= r.Min.Y && r.Max.Y <= s.Max.Y;
	};
	Rectangle26_6.prototype.In = function(s) { return this.$val.In(s); };
	Int26_6.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int26_6], [Int26_6], false)}];
	Int52_12.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Floor", name: "Floor", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Ceil", name: "Ceil", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int52_12], [Int52_12], false)}];
	Point26_6.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point26_6], [Point26_6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point26_6], [Point26_6], false)}, {prop: "Mul", name: "Mul", pkg: "", typ: $funcType([Int26_6], [Point26_6], false)}, {prop: "Div", name: "Div", pkg: "", typ: $funcType([Int26_6], [Point26_6], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle26_6], [$Bool], false)}];
	Rectangle26_6.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Point26_6], [Rectangle26_6], false)}, {prop: "Sub", name: "Sub", pkg: "", typ: $funcType([Point26_6], [Rectangle26_6], false)}, {prop: "Intersect", name: "Intersect", pkg: "", typ: $funcType([Rectangle26_6], [Rectangle26_6], false)}, {prop: "Union", name: "Union", pkg: "", typ: $funcType([Rectangle26_6], [Rectangle26_6], false)}, {prop: "Empty", name: "Empty", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "In", name: "In", pkg: "", typ: $funcType([Rectangle26_6], [$Bool], false)}];
	Point26_6.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: Int26_6, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: Int26_6, tag: ""}]);
	Rectangle26_6.init("", [{prop: "Min", name: "Min", anonymous: false, exported: true, typ: Point26_6, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/golang/freetype/raster"] = (function() {
	var $pkg = {}, $init, fmt, fixed, image, color, draw, math, strconv, Adder, Path, Span, Painter, cell, Rasterizer, Capper, CapperFunc, Joiner, JoinerFunc, stroker, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType$1, arrayType$2, sliceType$4, arrayType$3, sliceType$5, arrayType$4, arrayType$5, arrayType$6, arrayType$7, arrayType$8, ptrType$1, ptrType$6, ptrType$7, maxAbs, pNeg, pDot, pLen, pNorm, pRot45CW, pRot90CW, pRot45CCW, pRot90CCW, addPathReversed, roundCapper, roundJoiner, addArc, midpoint, angleGreaterThan45, interpolate, curviest2, Stroke;
	fmt = $packages["fmt"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	math = $packages["math"];
	strconv = $packages["strconv"];
	Adder = $pkg.Adder = $newType(8, $kindInterface, "raster.Adder", true, "github.com/golang/freetype/raster", true, null);
	Path = $pkg.Path = $newType(12, $kindSlice, "raster.Path", true, "github.com/golang/freetype/raster", true, null);
	Span = $pkg.Span = $newType(0, $kindStruct, "raster.Span", true, "github.com/golang/freetype/raster", true, function(Y_, X0_, X1_, Alpha_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Y = 0;
			this.X0 = 0;
			this.X1 = 0;
			this.Alpha = 0;
			return;
		}
		this.Y = Y_;
		this.X0 = X0_;
		this.X1 = X1_;
		this.Alpha = Alpha_;
	});
	Painter = $pkg.Painter = $newType(8, $kindInterface, "raster.Painter", true, "github.com/golang/freetype/raster", true, null);
	cell = $pkg.cell = $newType(0, $kindStruct, "raster.cell", true, "github.com/golang/freetype/raster", false, function(xi_, area_, cover_, next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xi = 0;
			this.area = 0;
			this.cover = 0;
			this.next = 0;
			return;
		}
		this.xi = xi_;
		this.area = area_;
		this.cover = cover_;
		this.next = next_;
	});
	Rasterizer = $pkg.Rasterizer = $newType(0, $kindStruct, "raster.Rasterizer", true, "github.com/golang/freetype/raster", true, function(UseNonZeroWinding_, Dx_, Dy_, width_, splitScale2_, splitScale3_, a_, xi_, yi_, area_, cover_, cell_, cellIndex_, cellBuf_, cellIndexBuf_, spanBuf_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.UseNonZeroWinding = false;
			this.Dx = 0;
			this.Dy = 0;
			this.width = 0;
			this.splitScale2 = 0;
			this.splitScale3 = 0;
			this.a = new fixed.Point26_6.ptr(0, 0);
			this.xi = 0;
			this.yi = 0;
			this.area = 0;
			this.cover = 0;
			this.cell = sliceType$3.nil;
			this.cellIndex = sliceType$5.nil;
			this.cellBuf = arrayType$4.zero();
			this.cellIndexBuf = arrayType$5.zero();
			this.spanBuf = arrayType$6.zero();
			return;
		}
		this.UseNonZeroWinding = UseNonZeroWinding_;
		this.Dx = Dx_;
		this.Dy = Dy_;
		this.width = width_;
		this.splitScale2 = splitScale2_;
		this.splitScale3 = splitScale3_;
		this.a = a_;
		this.xi = xi_;
		this.yi = yi_;
		this.area = area_;
		this.cover = cover_;
		this.cell = cell_;
		this.cellIndex = cellIndex_;
		this.cellBuf = cellBuf_;
		this.cellIndexBuf = cellIndexBuf_;
		this.spanBuf = spanBuf_;
	});
	Capper = $pkg.Capper = $newType(8, $kindInterface, "raster.Capper", true, "github.com/golang/freetype/raster", true, null);
	CapperFunc = $pkg.CapperFunc = $newType(4, $kindFunc, "raster.CapperFunc", true, "github.com/golang/freetype/raster", true, null);
	Joiner = $pkg.Joiner = $newType(8, $kindInterface, "raster.Joiner", true, "github.com/golang/freetype/raster", true, null);
	JoinerFunc = $pkg.JoinerFunc = $newType(4, $kindFunc, "raster.JoinerFunc", true, "github.com/golang/freetype/raster", true, null);
	stroker = $pkg.stroker = $newType(0, $kindStruct, "raster.stroker", true, "github.com/golang/freetype/raster", false, function(p_, u_, cr_, jr_, r_, a_, anorm_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = $ifaceNil;
			this.u = 0;
			this.cr = $ifaceNil;
			this.jr = $ifaceNil;
			this.r = Path.nil;
			this.a = new fixed.Point26_6.ptr(0, 0);
			this.anorm = new fixed.Point26_6.ptr(0, 0);
			return;
		}
		this.p = p_;
		this.u = u_;
		this.cr = cr_;
		this.jr = jr_;
		this.r = r_;
		this.a = a_;
		this.anorm = anorm_;
	});
	sliceType = $sliceType(fixed.Int26_6);
	sliceType$1 = $sliceType($emptyInterface);
	sliceType$2 = $sliceType(Span);
	sliceType$3 = $sliceType(cell);
	arrayType$1 = $arrayType(fixed.Point26_6, 35);
	arrayType$2 = $arrayType($Int, 17);
	sliceType$4 = $sliceType(fixed.Point26_6);
	arrayType$3 = $arrayType(fixed.Point26_6, 52);
	sliceType$5 = $sliceType($Int);
	arrayType$4 = $arrayType(cell, 256);
	arrayType$5 = $arrayType($Int, 64);
	arrayType$6 = $arrayType(Span, 64);
	arrayType$7 = $arrayType($Int, 6);
	arrayType$8 = $arrayType(fixed.Point26_6, 13);
	ptrType$1 = $ptrType(Path);
	ptrType$6 = $ptrType(Rasterizer);
	ptrType$7 = $ptrType(stroker);
	maxAbs = function(a, b) {
		var a, b;
		if (a < 0) {
			a = -a;
		}
		if (b < 0) {
			b = -b;
		}
		if (a < b) {
			return b;
		}
		return a;
	};
	pNeg = function(p) {
		var p;
		return new fixed.Point26_6.ptr(-p.X, -p.Y);
	};
	pDot = function(p, q) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, p, px, py, q, qx, qy, x, x$1, x$2;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		_tmp$2 = (new $Int64(0, q.X));
		_tmp$3 = (new $Int64(0, q.Y));
		qx = _tmp$2;
		qy = _tmp$3;
		return ((x = (x$1 = $mul64(px, qx), x$2 = $mul64(py, qy), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), new fixed.Int52_12(x.$high, x.$low)));
	};
	pLen = function(p) {
		var p, x, y;
		x = (p.X);
		y = (p.Y);
		return ((math.Sqrt(x * x + y * y) >> 0));
	};
	pNorm = function(p, length) {
		var _tmp, _tmp$1, d, length, p, s, t, x, y;
		d = pLen($clone(p, fixed.Point26_6));
		if (d === 0) {
			return new fixed.Point26_6.ptr(0, 0);
		}
		_tmp = (new $Int64(0, length));
		_tmp$1 = (new $Int64(0, d));
		s = _tmp;
		t = _tmp$1;
		x = $div64($mul64((new $Int64(0, p.X)), s), t, false);
		y = $div64($mul64((new $Int64(0, p.Y)), s), t, false);
		return new fixed.Point26_6.ptr((((x.$low + ((x.$high >> 31) * 4294967296)) >> 0)), (((y.$low + ((y.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot45CW = function(p) {
		var _tmp, _tmp$1, p, px, py, qx, qy, x, x$1;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		qx = $div64($mul64(((x = px, new $Int64(x.$high - py.$high, x.$low - py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		qy = $div64($mul64(((x$1 = px, new $Int64(x$1.$high + py.$high, x$1.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		return new fixed.Point26_6.ptr((((qx.$low + ((qx.$high >> 31) * 4294967296)) >> 0)), (((qy.$low + ((qy.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot90CW = function(p) {
		var p;
		return new fixed.Point26_6.ptr(-p.Y, p.X);
	};
	pRot45CCW = function(p) {
		var _tmp, _tmp$1, p, px, py, qx, qy, x, x$1;
		_tmp = (new $Int64(0, p.X));
		_tmp$1 = (new $Int64(0, p.Y));
		px = _tmp;
		py = _tmp$1;
		qx = $div64($mul64(((x = px, new $Int64(x.$high + py.$high, x.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		qy = $div64($mul64(((x$1 = new $Int64(-px.$high, -px.$low), new $Int64(x$1.$high + py.$high, x$1.$low + py.$low))), new $Int64(0, 181)), new $Int64(0, 256), false);
		return new fixed.Point26_6.ptr((((qx.$low + ((qx.$high >> 31) * 4294967296)) >> 0)), (((qy.$low + ((qy.$high >> 31) * 4294967296)) >> 0)));
	};
	pRot90CCW = function(p) {
		var p;
		return new fixed.Point26_6.ptr(p.Y, -p.X);
	};
	Path.prototype.String = function() {
		var _1, _r, _r$1, _r$2, _r$3, i, p, s, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; i = $f.i; p = $f.p; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		s = "";
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < p.$length)) { break; } */ if(!(i < p.$length)) { $s = 2; continue; }
			if (!((i === 0))) {
				s = s + (" ");
			}
				_1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					_r = fmt.Sprint(new sliceType$1([((x = $subslice(p, (i + 1 >> 0), (i + 3 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)))])); /* */ $s = 10; case 10: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					s = s + ("S0" + _r);
					i = i + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 5:
					_r$1 = fmt.Sprint(new sliceType$1([((x$1 = $subslice(p, (i + 1 >> 0), (i + 3 >> 0)), $subslice(new sliceType(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)))])); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					s = s + ("A1" + _r$1);
					i = i + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					_r$2 = fmt.Sprint(new sliceType$1([((x$2 = $subslice(p, (i + 1 >> 0), (i + 5 >> 0)), $subslice(new sliceType(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)))])); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					s = s + ("A2" + _r$2);
					i = i + (6) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					_r$3 = fmt.Sprint(new sliceType$1([((x$3 = $subslice(p, (i + 1 >> 0), (i + 7 >> 0)), $subslice(new sliceType(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)))])); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					s = s + ("A3" + _r$3);
					i = i + (8) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Path.prototype.String }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.i = i; $f.p = p; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Path).prototype.String = function() { return this.$get().String(); };
	$ptrType(Path).prototype.Clear = function() {
		var p;
		p = this;
		p.$set($subslice((p.$get()), 0, 0));
	};
	$ptrType(Path).prototype.Start = function(a) {
		var a, p;
		p = this;
		p.$set($append(p.$get(), 0, a.X, a.Y, 0));
	};
	$ptrType(Path).prototype.Add1 = function(b) {
		var b, p;
		p = this;
		p.$set($append(p.$get(), 1, b.X, b.Y, 1));
	};
	$ptrType(Path).prototype.Add2 = function(b, c) {
		var b, c, p;
		p = this;
		p.$set($append(p.$get(), 2, b.X, b.Y, c.X, c.Y, 2));
	};
	$ptrType(Path).prototype.Add3 = function(b, c, d) {
		var b, c, d, p;
		p = this;
		p.$set($append(p.$get(), 3, b.X, b.Y, c.X, c.Y, d.X, d.Y, 3));
	};
	$ptrType(Path).prototype.AddPath = function(q) {
		var p, q;
		p = this;
		p.$set($appendSlice(p.$get(), $subslice(new sliceType(q.$array), q.$offset, q.$offset + q.$length)));
	};
	$ptrType(Path).prototype.AddStroke = function(q, width, cr, jr) {
		var cr, jr, p, q, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cr = $f.cr; jr = $f.jr; p = $f.p; q = $f.q; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		$r = Stroke(p, q, width, cr, jr); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(Path).prototype.AddStroke }; } $f.cr = cr; $f.jr = jr; $f.p = p; $f.q = q; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Path.prototype.firstPoint = function() {
		var p;
		p = this;
		return new fixed.Point26_6.ptr((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]), (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]));
	};
	$ptrType(Path).prototype.firstPoint = function() { return this.$get().firstPoint(); };
	Path.prototype.lastPoint = function() {
		var p, x, x$1;
		p = this;
		return new fixed.Point26_6.ptr((x = p.$length - 3 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])), (x$1 = p.$length - 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1])));
	};
	$ptrType(Path).prototype.lastPoint = function() { return this.$get().lastPoint(); };
	addPathReversed = function(p, q) {
		var _1, i, p, q, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; i = $f.i; p = $f.p; q = $f.q; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (q.$length === 0) {
			$s = -1; return;
		}
		i = q.$length - 1 >> 0;
		/* while (true) { */ case 1:
				_1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					$s = -1; return;
				/* } else if (_1 === (1)) { */ case 5:
					i = i - (4) >> 0;
					$r = p.Add1(new fixed.Point26_6.ptr((x = i - 2 >> 0, ((x < 0 || x >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x])), (x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$1])))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					i = i - (6) >> 0;
					$r = p.Add2(new fixed.Point26_6.ptr((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$2])), (x$3 = i + 3 >> 0, ((x$3 < 0 || x$3 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$3]))), new fixed.Point26_6.ptr((x$4 = i - 2 >> 0, ((x$4 < 0 || x$4 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$4])), (x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$5])))); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					i = i - (8) >> 0;
					$r = p.Add3(new fixed.Point26_6.ptr((x$6 = i + 4 >> 0, ((x$6 < 0 || x$6 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$6])), (x$7 = i + 5 >> 0, ((x$7 < 0 || x$7 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$7]))), new fixed.Point26_6.ptr((x$8 = i + 2 >> 0, ((x$8 < 0 || x$8 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$8])), (x$9 = i + 3 >> 0, ((x$9 < 0 || x$9 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i - 2 >> 0, ((x$10 < 0 || x$10 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$10])), (x$11 = i - 1 >> 0, ((x$11 < 0 || x$11 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$11])))); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addPathReversed }; } $f._1 = _1; $f.i = i; $f.p = p; $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.ptr.prototype.findCell = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, buf, c, i, prev, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, xi;
		r = this;
		if (r.yi < 0 || r.yi >= r.cellIndex.$length) {
			return -1;
		}
		xi = r.xi;
		if (xi < 0) {
			xi = -1;
		} else if (xi > r.width) {
			xi = r.width;
		}
		_tmp = (x = r.cellIndex, x$1 = r.yi, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		_tmp$1 = -1;
		i = _tmp;
		prev = _tmp$1;
		while (true) {
			if (!(!((i === -1)) && (x$2 = r.cell, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).xi <= xi)) { break; }
			if ((x$3 = r.cell, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).xi === xi) {
				return i;
			}
			_tmp$2 = (x$4 = r.cell, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).next;
			_tmp$3 = i;
			i = _tmp$2;
			prev = _tmp$3;
		}
		c = r.cell.$length;
		if (c === r.cell.$capacity) {
			buf = $makeSlice(sliceType$3, c, ($imul(4, c)));
			$copySlice(buf, r.cell);
			r.cell = $subslice(buf, 0, (c + 1 >> 0));
		} else {
			r.cell = $subslice(r.cell, 0, (c + 1 >> 0));
		}
		cell.copy((x$5 = r.cell, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c])), new cell.ptr(xi, 0, 0, i));
		if (prev === -1) {
			(x$6 = r.cellIndex, x$7 = r.yi, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = c));
		} else {
			(x$8 = r.cell, ((prev < 0 || prev >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + prev])).next = c;
		}
		return c;
	};
	Rasterizer.prototype.findCell = function() { return this.$val.findCell(); };
	Rasterizer.ptr.prototype.saveCell = function() {
		var i, r, x, x$1, x$2, x$3;
		r = this;
		if (!((r.area === 0)) || !((r.cover === 0))) {
			i = r.findCell();
			if (!((i === -1))) {
				(x$1 = r.cell, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).area = (x = r.cell, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).area + (r.area) >> 0;
				(x$3 = r.cell, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])).cover = (x$2 = r.cell, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i])).cover + (r.cover) >> 0;
			}
			r.area = 0;
			r.cover = 0;
		}
	};
	Rasterizer.prototype.saveCell = function() { return this.$val.saveCell(); };
	Rasterizer.ptr.prototype.setCell = function(xi, yi) {
		var _tmp, _tmp$1, r, xi, yi;
		r = this;
		if (!((r.xi === xi)) || !((r.yi === yi))) {
			r.saveCell();
			_tmp = xi;
			_tmp$1 = yi;
			r.xi = _tmp;
			r.yi = _tmp$1;
		}
	};
	Rasterizer.prototype.setCell = function(xi, yi) { return this.$val.setCell(xi, yi); };
	Rasterizer.ptr.prototype.scan = function(yi, x0, y0f, x1, y1f) {
		var _q, _q$1, _q$2, _q$3, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dx, dy, edge0, edge1, fullDelta, fullRem, p, q, r, x0, x0f, x0i, x1, x1f, x1i, xi, xiDelta, y, y0f, y1f, yDelta, yRem, yi;
		r = this;
		x0i = (_q = ((x0 >> 0)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		x0f = x0 - ((($imul(64, x0i)) >> 0)) >> 0;
		x1i = (_q$1 = ((x1 >> 0)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		x1f = x1 - ((($imul(64, x1i)) >> 0)) >> 0;
		if (y0f === y1f) {
			r.setCell(x1i, yi);
			return;
		}
		_tmp = x1 - x0 >> 0;
		_tmp$1 = y1f - y0f >> 0;
		dx = _tmp;
		dy = _tmp$1;
		if (x0i === x1i) {
			r.area = r.area + (((($imul(((x0f + x1f >> 0)), dy)) >> 0))) >> 0;
			r.cover = r.cover + (((dy >> 0))) >> 0;
			return;
		}
		_tmp$2 = 0;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		p = _tmp$2;
		q = _tmp$3;
		edge0 = _tmp$4;
		edge1 = _tmp$5;
		xiDelta = 0;
		if (dx > 0) {
			_tmp$6 = $imul(((64 - x0f >> 0)), dy);
			_tmp$7 = dx;
			p = _tmp$6;
			q = _tmp$7;
			_tmp$8 = 0;
			_tmp$9 = 64;
			_tmp$10 = 1;
			edge0 = _tmp$8;
			edge1 = _tmp$9;
			xiDelta = _tmp$10;
		} else {
			_tmp$11 = $imul(x0f, dy);
			_tmp$12 = -dx;
			p = _tmp$11;
			q = _tmp$12;
			_tmp$13 = 64;
			_tmp$14 = 0;
			_tmp$15 = -1;
			edge0 = _tmp$13;
			edge1 = _tmp$14;
			xiDelta = _tmp$15;
		}
		_tmp$16 = (_q$2 = p / q, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$17 = (_r = p % q, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		yDelta = _tmp$16;
		yRem = _tmp$17;
		if (yRem < 0) {
			yDelta = yDelta - (1) >> 0;
			yRem = yRem + (q) >> 0;
		}
		_tmp$18 = x0i;
		_tmp$19 = y0f;
		xi = _tmp$18;
		y = _tmp$19;
		r.area = r.area + (((($imul(((x0f + edge1 >> 0)), yDelta)) >> 0))) >> 0;
		r.cover = r.cover + (((yDelta >> 0))) >> 0;
		_tmp$20 = xi + xiDelta >> 0;
		_tmp$21 = y + yDelta >> 0;
		xi = _tmp$20;
		y = _tmp$21;
		r.setCell(xi, yi);
		if (!((xi === x1i))) {
			p = $imul(64, (((y1f - y >> 0) + yDelta >> 0)));
			_tmp$22 = (_q$3 = p / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$23 = (_r$1 = p % q, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			fullDelta = _tmp$22;
			fullRem = _tmp$23;
			if (fullRem < 0) {
				fullDelta = fullDelta - (1) >> 0;
				fullRem = fullRem + (q) >> 0;
			}
			yRem = yRem - (q) >> 0;
			while (true) {
				if (!(!((xi === x1i)))) { break; }
				yDelta = fullDelta;
				yRem = yRem + (fullRem) >> 0;
				if (yRem >= 0) {
					yDelta = yDelta + (1) >> 0;
					yRem = yRem - (q) >> 0;
				}
				r.area = r.area + (((($imul(64, yDelta)) >> 0))) >> 0;
				r.cover = r.cover + (((yDelta >> 0))) >> 0;
				_tmp$24 = xi + xiDelta >> 0;
				_tmp$25 = y + yDelta >> 0;
				xi = _tmp$24;
				y = _tmp$25;
				r.setCell(xi, yi);
			}
		}
		yDelta = y1f - y >> 0;
		r.area = r.area + (((($imul(((edge0 + x1f >> 0)), yDelta)) >> 0))) >> 0;
		r.cover = r.cover + (((yDelta >> 0))) >> 0;
	};
	Rasterizer.prototype.scan = function(yi, x0, y0f, x1, y1f) { return this.$val.scan(yi, x0, y0f, x1, y1f); };
	Rasterizer.ptr.prototype.Start = function(a) {
		var _q, _q$1, a, r;
		r = this;
		r.setCell((((_q = a.X / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)), (((_q$1 = a.Y / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0)));
		fixed.Point26_6.copy(r.a, a);
	};
	Rasterizer.prototype.Start = function(a) { return this.$val.Start(a); };
	Rasterizer.ptr.prototype.Add1 = function(b) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, darea, dcover, dx, dy, edge0, edge0$1, edge1, edge1$1, fullDelta, fullRem, p, q, r, x, x0, x0fTimes2, x0i, x1, xDelta, xRem, y0, y0f, y0i, y1, y1f, y1i, yi, yi$1, yiDelta, yiDelta$1;
		r = this;
		_tmp = r.a.X;
		_tmp$1 = r.a.Y;
		x0 = _tmp;
		y0 = _tmp$1;
		_tmp$2 = b.X;
		_tmp$3 = b.Y;
		x1 = _tmp$2;
		y1 = _tmp$3;
		_tmp$4 = x1 - x0 >> 0;
		_tmp$5 = y1 - y0 >> 0;
		dx = _tmp$4;
		dy = _tmp$5;
		y0i = (_q = ((y0 >> 0)) / 64, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		y0f = y0 - ((($imul(64, y0i)) >> 0)) >> 0;
		y1i = (_q$1 = ((y1 >> 0)) / 64, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		y1f = y1 - ((($imul(64, y1i)) >> 0)) >> 0;
		if (y0i === y1i) {
			r.scan(y0i, x0, y0f, x1, y1f);
		} else if (dx === 0) {
			_tmp$6 = 0;
			_tmp$7 = 0;
			edge0 = _tmp$6;
			edge1 = _tmp$7;
			yiDelta = 0;
			if (dy > 0) {
				_tmp$8 = 0;
				_tmp$9 = 64;
				_tmp$10 = 1;
				edge0 = _tmp$8;
				edge1 = _tmp$9;
				yiDelta = _tmp$10;
			} else {
				_tmp$11 = 64;
				_tmp$12 = 0;
				_tmp$13 = -1;
				edge0 = _tmp$11;
				edge1 = _tmp$12;
				yiDelta = _tmp$13;
			}
			_tmp$14 = (_q$2 = ((x0 >> 0)) / 64, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$15 = y0i;
			x0i = _tmp$14;
			yi = _tmp$15;
			x0fTimes2 = $imul(((((x0 >> 0)) - (($imul(64, x0i))) >> 0)), 2);
			dcover = (((edge1 - y0f >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			r.area = r.area + (darea) >> 0;
			r.cover = r.cover + (dcover) >> 0;
			yi = yi + (yiDelta) >> 0;
			r.setCell(x0i, yi);
			dcover = (((edge1 - edge0 >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			while (true) {
				if (!(!((yi === y1i)))) { break; }
				r.area = r.area + (darea) >> 0;
				r.cover = r.cover + (dcover) >> 0;
				yi = yi + (yiDelta) >> 0;
				r.setCell(x0i, yi);
			}
			dcover = (((y1f - edge0 >> 0) >> 0));
			darea = (($imul(x0fTimes2, dcover)));
			r.area = r.area + (darea) >> 0;
			r.cover = r.cover + (dcover) >> 0;
		} else {
			_tmp$16 = 0;
			_tmp$17 = 0;
			_tmp$18 = 0;
			_tmp$19 = 0;
			p = _tmp$16;
			q = _tmp$17;
			edge0$1 = _tmp$18;
			edge1$1 = _tmp$19;
			yiDelta$1 = 0;
			if (dy > 0) {
				_tmp$20 = $imul(((64 - y0f >> 0)), dx);
				_tmp$21 = dy;
				p = _tmp$20;
				q = _tmp$21;
				_tmp$22 = 0;
				_tmp$23 = 64;
				_tmp$24 = 1;
				edge0$1 = _tmp$22;
				edge1$1 = _tmp$23;
				yiDelta$1 = _tmp$24;
			} else {
				_tmp$25 = $imul(y0f, dx);
				_tmp$26 = -dy;
				p = _tmp$25;
				q = _tmp$26;
				_tmp$27 = 64;
				_tmp$28 = 0;
				_tmp$29 = -1;
				edge0$1 = _tmp$27;
				edge1$1 = _tmp$28;
				yiDelta$1 = _tmp$29;
			}
			_tmp$30 = (_q$3 = p / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			_tmp$31 = (_r = p % q, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			xDelta = _tmp$30;
			xRem = _tmp$31;
			if (xRem < 0) {
				xDelta = xDelta - (1) >> 0;
				xRem = xRem + (q) >> 0;
			}
			_tmp$32 = x0;
			_tmp$33 = y0i;
			x = _tmp$32;
			yi$1 = _tmp$33;
			r.scan(yi$1, x, y0f, x + xDelta >> 0, edge1$1);
			_tmp$34 = x + xDelta >> 0;
			_tmp$35 = yi$1 + yiDelta$1 >> 0;
			x = _tmp$34;
			yi$1 = _tmp$35;
			r.setCell((_q$4 = ((x >> 0)) / 64, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")), yi$1);
			if (!((yi$1 === y1i))) {
				p = $imul(64, dx);
				_tmp$36 = (_q$5 = p / q, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				_tmp$37 = (_r$1 = p % q, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
				fullDelta = _tmp$36;
				fullRem = _tmp$37;
				if (fullRem < 0) {
					fullDelta = fullDelta - (1) >> 0;
					fullRem = fullRem + (q) >> 0;
				}
				xRem = xRem - (q) >> 0;
				while (true) {
					if (!(!((yi$1 === y1i)))) { break; }
					xDelta = fullDelta;
					xRem = xRem + (fullRem) >> 0;
					if (xRem >= 0) {
						xDelta = xDelta + (1) >> 0;
						xRem = xRem - (q) >> 0;
					}
					r.scan(yi$1, x, edge0$1, x + xDelta >> 0, edge1$1);
					_tmp$38 = x + xDelta >> 0;
					_tmp$39 = yi$1 + yiDelta$1 >> 0;
					x = _tmp$38;
					yi$1 = _tmp$39;
					r.setCell((_q$6 = ((x >> 0)) / 64, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")), yi$1);
				}
			}
			r.scan(yi$1, x, edge0$1, x1, y1f);
		}
		fixed.Point26_6.copy(r.a, b);
	};
	Rasterizer.prototype.Add1 = function(b) { return this.$val.Add1(b); };
	Rasterizer.ptr.prototype.Add2 = function(b, c) {
		var _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, b, c, dev, i, midx, midy, mx, my, nsplit, p, pStack, r, s, sStack, x;
		r = this;
		dev = (_q = maxAbs((r.a.X - ($imul(2, b.X)) >> 0) + c.X >> 0, (r.a.Y - ($imul(2, b.Y)) >> 0) + c.Y >> 0) / ((r.splitScale2 >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		nsplit = 0;
		while (true) {
			if (!(dev > 0)) { break; }
			dev = (_q$1 = dev / (4), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			nsplit = nsplit + (1) >> 0;
		}
		if (nsplit > 16) {
			$panic(new $String("freetype/raster: Add2 nsplit too large: " + strconv.Itoa(nsplit)));
		}
		pStack = arrayType$1.zero();
		sStack = arrayType$2.zero();
		i = 0;
		sStack[0] = nsplit;
		fixed.Point26_6.copy(pStack[0], c);
		fixed.Point26_6.copy(pStack[1], b);
		fixed.Point26_6.copy(pStack[2], r.a);
		while (true) {
			if (!(i >= 0)) { break; }
			s = ((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i]);
			p = $subslice(new sliceType$4(pStack), ($imul(2, i)));
			if (s > 0) {
				mx = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X;
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X;
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X = (_q$2 = (((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X + mx >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X = (_q$3 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + mx >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X = (_q$4 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				my = (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y;
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y = (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y;
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y = (_q$5 = (((4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y + my >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y = (_q$6 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + my >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y = (_q$7 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i] = (s - 1 >> 0));
				(x = i + 1 >> 0, ((x < 0 || x >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[x] = (s - 1 >> 0)));
				i = i + (1) >> 0;
			} else {
				midx = (_q$8 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + ($imul(2, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X)) >> 0) + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)) / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero"));
				midy = (_q$9 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + ($imul(2, (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y)) >> 0) + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)) / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
				r.Add1(new fixed.Point26_6.ptr(midx, midy));
				r.Add1($clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), fixed.Point26_6));
				i = i - (1) >> 0;
			}
		}
	};
	Rasterizer.prototype.Add2 = function(b, c) { return this.$val.Add2(b, c); };
	Rasterizer.ptr.prototype.Add3 = function(b, c, d) {
		var _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$14, _q$15, _q$16, _q$17, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, b, c, d, dev2, dev3, i, m01x, m01y, m12x, m12y, m23x, m23y, midx, midy, nsplit, p, pStack, r, s, sStack, x;
		r = this;
		dev2 = (_q = maxAbs((r.a.X - ($imul(3, ((b.X + c.X >> 0)))) >> 0) + d.X >> 0, (r.a.Y - ($imul(3, ((b.Y + c.Y >> 0)))) >> 0) + d.Y >> 0) / ((r.splitScale2 >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		dev3 = (_q$1 = maxAbs((r.a.X - ($imul(2, b.X)) >> 0) + d.X >> 0, (r.a.Y - ($imul(2, b.Y)) >> 0) + d.Y >> 0) / ((r.splitScale3 >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		nsplit = 0;
		while (true) {
			if (!(dev2 > 0 || dev3 > 0)) { break; }
			dev2 = (_q$2 = dev2 / (8), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			dev3 = (_q$3 = dev3 / (4), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
			nsplit = nsplit + (1) >> 0;
		}
		if (nsplit > 16) {
			$panic(new $String("freetype/raster: Add3 nsplit too large: " + strconv.Itoa(nsplit)));
		}
		pStack = arrayType$3.zero();
		sStack = arrayType$2.zero();
		i = 0;
		sStack[0] = nsplit;
		fixed.Point26_6.copy(pStack[0], d);
		fixed.Point26_6.copy(pStack[1], c);
		fixed.Point26_6.copy(pStack[2], b);
		fixed.Point26_6.copy(pStack[3], r.a);
		while (true) {
			if (!(i >= 0)) { break; }
			s = ((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i]);
			p = $subslice(new sliceType$4(pStack), ($imul(3, i)));
			if (s > 0) {
				m01x = (_q$4 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X >> 0)) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
				m12x = (_q$5 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
				m23x = (_q$6 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 2, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]).X = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X;
				(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]).X = m23x;
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X = m01x;
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X = (_q$7 = ((m01x + m12x >> 0)) / 2, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero"));
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X = (_q$8 = ((m12x + m23x >> 0)) / 2, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero"));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X = (_q$9 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X + (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).X >> 0)) / 2, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero"));
				m01y = (_q$10 = (((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + (1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y >> 0)) / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero"));
				m12y = (_q$11 = (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)) / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero"));
				m23y = (_q$12 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 2, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero"));
				(6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]).Y = (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y;
				(5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]).Y = m23y;
				(1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y = m01y;
				(2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y = (_q$13 = ((m01y + m12y >> 0)) / 2, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero"));
				(4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y = (_q$14 = ((m12y + m23y >> 0)) / 2, (_q$14 === _q$14 && _q$14 !== 1/0 && _q$14 !== -1/0) ? _q$14 >> 0 : $throwRuntimeError("integer divide by zero"));
				(3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y = (_q$15 = (((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y + (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]).Y >> 0)) / 2, (_q$15 === _q$15 && _q$15 !== 1/0 && _q$15 !== -1/0) ? _q$15 >> 0 : $throwRuntimeError("integer divide by zero"));
				((i < 0 || i >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[i] = (s - 1 >> 0));
				(x = i + 1 >> 0, ((x < 0 || x >= sStack.length) ? ($throwRuntimeError("index out of range"), undefined) : sStack[x] = (s - 1 >> 0)));
				i = i + (1) >> 0;
			} else {
				midx = (_q$16 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).X + ($imul(3, (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).X + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).X >> 0)))) >> 0) + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).X >> 0)) / 8, (_q$16 === _q$16 && _q$16 !== 1/0 && _q$16 !== -1/0) ? _q$16 >> 0 : $throwRuntimeError("integer divide by zero"));
				midy = (_q$17 = ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]).Y + ($imul(3, (((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]).Y + (2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]).Y >> 0)))) >> 0) + (3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]).Y >> 0)) / 8, (_q$17 === _q$17 && _q$17 !== 1/0 && _q$17 !== -1/0) ? _q$17 >> 0 : $throwRuntimeError("integer divide by zero"));
				r.Add1(new fixed.Point26_6.ptr(midx, midy));
				r.Add1($clone((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]), fixed.Point26_6));
				i = i - (1) >> 0;
			}
		}
	};
	Rasterizer.prototype.Add3 = function(b, c, d) { return this.$val.Add3(b, c, d); };
	Rasterizer.ptr.prototype.AddPath = function(p) {
		var _1, i, p, r, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		r = this;
		i = 0;
		while (true) {
			if (!(i < p.$length)) { break; }
			_1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
			if (_1 === (0)) {
				r.Start(new fixed.Point26_6.ptr((x = i + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])), (x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]))));
				i = i + (4) >> 0;
			} else if (_1 === (1)) {
				r.Add1(new fixed.Point26_6.ptr((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2])), (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3]))));
				i = i + (4) >> 0;
			} else if (_1 === (2)) {
				r.Add2(new fixed.Point26_6.ptr((x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$4])), (x$5 = i + 2 >> 0, ((x$5 < 0 || x$5 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$5]))), new fixed.Point26_6.ptr((x$6 = i + 3 >> 0, ((x$6 < 0 || x$6 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$6])), (x$7 = i + 4 >> 0, ((x$7 < 0 || x$7 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$7]))));
				i = i + (6) >> 0;
			} else if (_1 === (3)) {
				r.Add3(new fixed.Point26_6.ptr((x$8 = i + 1 >> 0, ((x$8 < 0 || x$8 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$8])), (x$9 = i + 2 >> 0, ((x$9 < 0 || x$9 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i + 3 >> 0, ((x$10 < 0 || x$10 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$10])), (x$11 = i + 4 >> 0, ((x$11 < 0 || x$11 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$11]))), new fixed.Point26_6.ptr((x$12 = i + 5 >> 0, ((x$12 < 0 || x$12 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$12])), (x$13 = i + 6 >> 0, ((x$13 < 0 || x$13 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$13]))));
				i = i + (8) >> 0;
			} else {
				$panic(new $String("freetype/raster: bad path"));
			}
		}
	};
	Rasterizer.prototype.AddPath = function(p) { return this.$val.AddPath(p); };
	Rasterizer.ptr.prototype.AddStroke = function(q, width, cr, jr) {
		var cr, jr, q, r, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; cr = $f.cr; jr = $f.jr; q = $f.q; r = $f.r; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		$r = Stroke(r, q, width, cr, jr); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rasterizer.ptr.prototype.AddStroke }; } $f.cr = cr; $f.jr = jr; $f.q = q; $f.r = r; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.prototype.AddStroke = function(q, width, cr, jr) { return this.$val.AddStroke(q, width, cr, jr); };
	Rasterizer.ptr.prototype.areaToAlpha = function(area) {
		var a, alpha, area, r;
		r = this;
		a = ((area + 1 >> 0)) >> 1 >> 0;
		if (a < 0) {
			a = -a;
		}
		alpha = ((a >>> 0));
		if (r.UseNonZeroWinding) {
			if (alpha > 4095) {
				alpha = 4095;
			}
		} else {
			alpha = (alpha & (8191)) >>> 0;
			if (alpha > 4096) {
				alpha = 8192 - alpha >>> 0;
			} else if (alpha === 4096) {
				alpha = 4095;
			}
		}
		return ((alpha << 4 >>> 0) | (alpha >>> 8 >>> 0)) >>> 0;
	};
	Rasterizer.prototype.areaToAlpha = function(area) { return this.$val.areaToAlpha(area); };
	Rasterizer.ptr.prototype.Rasterize = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, alpha, alpha$1, c, cover, p, r, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xi, xi0, xi0$1, xi1, xi1$1, yi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; alpha = $f.alpha; alpha$1 = $f.alpha$1; c = $f.c; cover = $f.cover; p = $f.p; r = $f.r; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; xi = $f.xi; xi0 = $f.xi0; xi0$1 = $f.xi0$1; xi1 = $f.xi1; xi1$1 = $f.xi1$1; yi = $f.yi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r = this;
		r.saveCell();
		s = 0;
		yi = 0;
		/* while (true) { */ case 1:
			/* if (!(yi < r.cellIndex.$length)) { break; } */ if(!(yi < r.cellIndex.$length)) { $s = 2; continue; }
			_tmp = 0;
			_tmp$1 = 0;
			xi = _tmp;
			cover = _tmp$1;
			c = (x = r.cellIndex, ((yi < 0 || yi >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + yi]));
			/* while (true) { */ case 3:
				/* if (!(!((c === -1)))) { break; } */ if(!(!((c === -1)))) { $s = 4; continue; }
				if (!((cover === 0)) && (x$1 = r.cell, ((c < 0 || c >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + c])).xi > xi) {
					alpha = r.areaToAlpha($imul(($imul(cover, 64)), 2));
					if (!((alpha === 0))) {
						_tmp$2 = xi;
						_tmp$3 = (x$2 = r.cell, ((c < 0 || c >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + c])).xi;
						xi0 = _tmp$2;
						xi1 = _tmp$3;
						if (xi0 < 0) {
							xi0 = 0;
						}
						if (xi1 >= r.width) {
							xi1 = r.width;
						}
						if (xi0 < xi1) {
							Span.copy((x$3 = r.spanBuf, ((s < 0 || s >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[s])), new Span.ptr(yi + r.Dy >> 0, xi0 + r.Dx >> 0, xi1 + r.Dx >> 0, alpha));
							s = s + (1) >> 0;
						}
					}
				}
				cover = cover + ((x$4 = r.cell, ((c < 0 || c >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + c])).cover) >> 0;
				alpha$1 = r.areaToAlpha(($imul(($imul(cover, 64)), 2)) - (x$5 = r.cell, ((c < 0 || c >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + c])).area >> 0);
				xi = (x$6 = r.cell, ((c < 0 || c >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + c])).xi + 1 >> 0;
				if (!((alpha$1 === 0))) {
					_tmp$4 = (x$7 = r.cell, ((c < 0 || c >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + c])).xi;
					_tmp$5 = xi;
					xi0$1 = _tmp$4;
					xi1$1 = _tmp$5;
					if (xi0$1 < 0) {
						xi0$1 = 0;
					}
					if (xi1$1 >= r.width) {
						xi1$1 = r.width;
					}
					if (xi0$1 < xi1$1) {
						Span.copy((x$8 = r.spanBuf, ((s < 0 || s >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[s])), new Span.ptr(yi + r.Dy >> 0, xi0$1 + r.Dx >> 0, xi1$1 + r.Dx >> 0, alpha$1));
						s = s + (1) >> 0;
					}
				}
				/* */ if (s > 62) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (s > 62) { */ case 5:
					$r = p.Paint($subslice(new sliceType$2(r.spanBuf), 0, s), false); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					s = 0;
				/* } */ case 6:
				c = (x$9 = r.cell, ((c < 0 || c >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + c])).next;
			/* } */ $s = 3; continue; case 4:
			yi = yi + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$r = p.Paint($subslice(new sliceType$2(r.spanBuf), 0, s), true); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Rasterizer.ptr.prototype.Rasterize }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.alpha = alpha; $f.alpha$1 = alpha$1; $f.c = c; $f.cover = cover; $f.p = p; $f.r = r; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.xi = xi; $f.xi0 = xi0; $f.xi0$1 = xi0$1; $f.xi1 = xi1; $f.xi1$1 = xi1$1; $f.yi = yi; $f.$s = $s; $f.$r = $r; return $f;
	};
	Rasterizer.prototype.Rasterize = function(p) { return this.$val.Rasterize(p); };
	Rasterizer.ptr.prototype.Clear = function() {
		var i, r, x;
		r = this;
		fixed.Point26_6.copy(r.a, new fixed.Point26_6.ptr(0, 0));
		r.xi = 0;
		r.yi = 0;
		r.area = 0;
		r.cover = 0;
		r.cell = $subslice(r.cell, 0, 0);
		i = 0;
		while (true) {
			if (!(i < r.cellIndex.$length)) { break; }
			(x = r.cellIndex, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = -1));
			i = i + (1) >> 0;
		}
	};
	Rasterizer.prototype.Clear = function() { return this.$val.Clear(); };
	Rasterizer.ptr.prototype.SetBounds = function(width, height) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, height, r, ss2, ss3, width;
		r = this;
		if (width < 0) {
			width = 0;
		}
		if (height < 0) {
			height = 0;
		}
		_tmp = 32;
		_tmp$1 = 16;
		ss2 = _tmp;
		ss3 = _tmp$1;
		if (width > 24 || height > 24) {
			_tmp$2 = $imul(2, ss2);
			_tmp$3 = $imul(2, ss3);
			ss2 = _tmp$2;
			ss3 = _tmp$3;
			if (width > 120 || height > 120) {
				_tmp$4 = $imul(2, ss2);
				_tmp$5 = $imul(2, ss3);
				ss2 = _tmp$4;
				ss3 = _tmp$5;
			}
		}
		r.width = width;
		r.splitScale2 = ss2;
		r.splitScale3 = ss3;
		r.cell = $subslice(new sliceType$3(r.cellBuf), 0, 0);
		if (height > 64) {
			r.cellIndex = $makeSlice(sliceType$5, height);
		} else {
			r.cellIndex = $subslice(new sliceType$5(r.cellIndexBuf), 0, height);
		}
		r.Clear();
	};
	Rasterizer.prototype.SetBounds = function(width, height) { return this.$val.SetBounds(width, height); };
	CapperFunc.prototype.Cap = function(p, halfWidth, pivot, n1) {
		var f, halfWidth, n1, p, pivot, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; halfWidth = $f.halfWidth; n1 = $f.n1; p = $f.p; pivot = $f.pivot; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(p, halfWidth, $clone(pivot, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: CapperFunc.prototype.Cap }; } $f.f = f; $f.halfWidth = halfWidth; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(CapperFunc).prototype.Cap = function(p, halfWidth, pivot, n1) { return new CapperFunc(this.$get()).Cap(p, halfWidth, pivot, n1); };
	JoinerFunc.prototype.Join = function(lhs, rhs, halfWidth, pivot, n0, n1) {
		var f, halfWidth, lhs, n0, n1, pivot, rhs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; halfWidth = $f.halfWidth; lhs = $f.lhs; n0 = $f.n0; n1 = $f.n1; pivot = $f.pivot; rhs = $f.rhs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this.$val;
		$r = f(lhs, rhs, halfWidth, $clone(pivot, fixed.Point26_6), $clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JoinerFunc.prototype.Join }; } $f.f = f; $f.halfWidth = halfWidth; $f.lhs = lhs; $f.n0 = n0; $f.n1 = n1; $f.pivot = pivot; $f.rhs = rhs; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(JoinerFunc).prototype.Join = function(lhs, rhs, halfWidth, pivot, n0, n1) { return new JoinerFunc(this.$get()).Join(lhs, rhs, halfWidth, pivot, n0, n1); };
	roundCapper = function(p, halfWidth, pivot, n1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, d, e, end, halfWidth, n1, p, pivot, side, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; e = $f.e; end = $f.end; halfWidth = $f.halfWidth; n1 = $f.n1; p = $f.p; pivot = $f.pivot; side = $f.side; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = $clone(pRot90CCW($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		side = $clone($clone(pivot, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6);
		_tmp = $clone($clone(pivot, fixed.Point26_6).Sub($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		_tmp$1 = $clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6);
		start = $clone(_tmp, fixed.Point26_6);
		end = $clone(_tmp$1, fixed.Point26_6);
		_tmp$2 = $clone($clone(n1, fixed.Point26_6).Mul(35), fixed.Point26_6);
		_tmp$3 = $clone($clone(e, fixed.Point26_6).Mul(35), fixed.Point26_6);
		d = $clone(_tmp$2, fixed.Point26_6);
		e = $clone(_tmp$3, fixed.Point26_6);
		$r = p.Add3($clone($clone(start, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6), $clone($clone(side, fixed.Point26_6).Sub($clone(d, fixed.Point26_6)), fixed.Point26_6), $clone(side, fixed.Point26_6)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = p.Add3($clone($clone(side, fixed.Point26_6).Add($clone(d, fixed.Point26_6)), fixed.Point26_6), $clone($clone(end, fixed.Point26_6).Add($clone(e, fixed.Point26_6)), fixed.Point26_6), $clone(end, fixed.Point26_6)); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundCapper }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.e = e; $f.end = end; $f.halfWidth = halfWidth; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.side = side; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	roundJoiner = function(lhs, rhs, haflWidth, pivot, n0, n1) {
		var dot, haflWidth, lhs, n0, n1, pivot, rhs, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dot = $f.dot; haflWidth = $f.haflWidth; lhs = $f.lhs; n0 = $f.n0; n1 = $f.n1; pivot = $f.pivot; rhs = $f.rhs; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dot = pDot($clone(pRot90CW($clone(n0, fixed.Point26_6)), fixed.Point26_6), $clone(n1, fixed.Point26_6));
		/* */ if ((dot.$high > 0 || (dot.$high === 0 && dot.$low >= 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((dot.$high > 0 || (dot.$high === 0 && dot.$low >= 0))) { */ case 1:
			$r = addArc(lhs, $clone(pivot, fixed.Point26_6), $clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = rhs.Add1($clone($clone(pivot, fixed.Point26_6).Sub($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 3; continue;
		/* } else { */ case 2:
			$r = lhs.Add1($clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = addArc(rhs, $clone(pivot, fixed.Point26_6), $clone(pNeg($clone(n0, fixed.Point26_6)), fixed.Point26_6), $clone(pNeg($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: roundJoiner }; } $f.dot = dot; $f.haflWidth = haflWidth; $f.lhs = lhs; $f.n0 = n0; $f.n1 = n1; $f.pivot = pivot; $f.rhs = rhs; $f.$s = $s; $f.$r = $r; return $f;
	};
	addArc = function(p, pivot, n0, n1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, d, m0, m1, m2, multiple, n0, n0t, n0t$1, n1, p, pivot, pm1, pm1$1, r2, s, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; m0 = $f.m0; m1 = $f.m1; m2 = $f.m2; multiple = $f.multiple; n0 = $f.n0; n0t = $f.n0t; n0t$1 = $f.n0t$1; n1 = $f.n1; p = $f.p; pivot = $f.pivot; pm1 = $f.pm1; pm1$1 = $f.pm1$1; r2 = $f.r2; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		r2 = pDot($clone(n0, fixed.Point26_6), $clone(n0, fixed.Point26_6));
		/* */ if ((r2.$high < 0 || (r2.$high === 0 && r2.$low < 1024))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((r2.$high < 0 || (r2.$high === 0 && r2.$low < 1024))) { */ case 1:
			$r = p.Add1($clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 2:
		s = new fixed.Point26_6.ptr(0, 0);
		m0 = $clone(pRot45CW($clone(n0, fixed.Point26_6)), fixed.Point26_6);
		m1 = $clone(pRot90CW($clone(n0, fixed.Point26_6)), fixed.Point26_6);
		m2 = $clone(pRot90CW($clone(m0, fixed.Point26_6)), fixed.Point26_6);
		/* */ if ((x = pDot($clone(m1, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x.$high > 0 || (x.$high === 0 && x.$low >= 0)))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ((x = pDot($clone(m1, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x.$high > 0 || (x.$high === 0 && x.$low >= 0)))) { */ case 4:
			/* */ if ((x$1 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0)))) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ((x$1 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$1.$high > 0 || (x$1.$high === 0 && x$1.$low >= 0)))) { */ case 7:
				/* */ if ((x$2 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if ((x$2 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low <= 0)))) { */ case 10:
					fixed.Point26_6.copy(s, n0);
					$s = 12; continue;
				/* } else { */ case 11:
					$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Add($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, m0);
				/* } */ case 12:
				$s = 9; continue;
			/* } else { */ case 8:
				_tmp = $clone($clone(pivot, fixed.Point26_6).Add($clone(m1, fixed.Point26_6)), fixed.Point26_6);
				_tmp$1 = $clone($clone(n0, fixed.Point26_6).Mul(27), fixed.Point26_6);
				pm1 = $clone(_tmp, fixed.Point26_6);
				n0t = $clone(_tmp$1, fixed.Point26_6);
				$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Add($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.Add2($clone($clone(pm1, fixed.Point26_6).Add($clone(n0t, fixed.Point26_6)), fixed.Point26_6), $clone(pm1, fixed.Point26_6)); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((x$3 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$3.$high > 0 || (x$3.$high === 0 && x$3.$low >= 0)))) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if ((x$3 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$3.$high > 0 || (x$3.$high === 0 && x$3.$low >= 0)))) { */ case 16:
					fixed.Point26_6.copy(s, m1);
					$s = 18; continue;
				/* } else { */ case 17:
					$r = p.Add2($clone($clone(pm1, fixed.Point26_6).Sub($clone(n0t, fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, m2);
				/* } */ case 18:
			/* } */ case 9:
			$s = 6; continue;
		/* } else { */ case 5:
			/* */ if ((x$4 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0)))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if ((x$4 = pDot($clone(n0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0)))) { */ case 20:
				/* */ if ((x$5 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$5.$high > 0 || (x$5.$high === 0 && x$5.$low >= 0)))) { $s = 23; continue; }
				/* */ $s = 24; continue;
				/* if ((x$5 = pDot($clone(m0, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$5.$high > 0 || (x$5.$high === 0 && x$5.$low >= 0)))) { */ case 23:
					fixed.Point26_6.copy(s, n0);
					$s = 25; continue;
				/* } else { */ case 24:
					$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Sub($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, pNeg($clone(m2, fixed.Point26_6)));
				/* } */ case 25:
				$s = 22; continue;
			/* } else { */ case 21:
				_tmp$2 = $clone($clone(pivot, fixed.Point26_6).Sub($clone(m1, fixed.Point26_6)), fixed.Point26_6);
				_tmp$3 = $clone($clone(n0, fixed.Point26_6).Mul(27), fixed.Point26_6);
				pm1$1 = $clone(_tmp$2, fixed.Point26_6);
				n0t$1 = $clone(_tmp$3, fixed.Point26_6);
				$r = p.Add2($clone($clone($clone(pivot, fixed.Point26_6).Add($clone(n0, fixed.Point26_6)), fixed.Point26_6).Sub($clone($clone(m1, fixed.Point26_6).Mul(27), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m2, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = p.Add2($clone($clone(pm1$1, fixed.Point26_6).Add($clone(n0t$1, fixed.Point26_6)), fixed.Point26_6), $clone(pm1$1, fixed.Point26_6)); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* */ if ((x$6 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$6.$high < 0 || (x$6.$high === 0 && x$6.$low <= 0)))) { $s = 29; continue; }
				/* */ $s = 30; continue;
				/* if ((x$6 = pDot($clone(m2, fixed.Point26_6), $clone(n1, fixed.Point26_6)), (x$6.$high < 0 || (x$6.$high === 0 && x$6.$low <= 0)))) { */ case 29:
					fixed.Point26_6.copy(s, pNeg($clone(m1, fixed.Point26_6)));
					$s = 31; continue;
				/* } else { */ case 30:
					$r = p.Add2($clone($clone(pm1$1, fixed.Point26_6).Sub($clone(n0t$1, fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub($clone(m0, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					fixed.Point26_6.copy(s, pNeg($clone(m0, fixed.Point26_6)));
				/* } */ case 31:
			/* } */ case 22:
		/* } */ case 6:
		d = $div64($mul64(new fixed.Int52_12(0, 256), pDot($clone(s, fixed.Point26_6), $clone(n1, fixed.Point26_6))), r2, false);
		multiple = (((x$7 = (x$8 = $div64($mul64(new fixed.Int52_12(0, 22), (new fixed.Int52_12(d.$high - 0, d.$low - 181))), new fixed.Int52_12(0, 75), false), new fixed.Int52_12(0 - x$8.$high, 150 - x$8.$low)), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) >> 2 >> 0;
		$r = p.Add2($clone($clone(pivot, fixed.Point26_6).Add($clone($clone($clone(s, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6).Mul(multiple), fixed.Point26_6)), fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Add($clone(n1, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: addArc }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.m0 = m0; $f.m1 = m1; $f.m2 = m2; $f.multiple = multiple; $f.n0 = n0; $f.n0t = n0t; $f.n0t$1 = n0t$1; $f.n1 = n1; $f.p = p; $f.pivot = pivot; $f.pm1 = pm1; $f.pm1$1 = pm1$1; $f.r2 = r2; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.$s = $s; $f.$r = $r; return $f;
	};
	midpoint = function(a, b) {
		var _q, _q$1, a, b;
		return new fixed.Point26_6.ptr((_q = ((a.X + b.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((a.Y + b.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
	};
	angleGreaterThan45 = function(v0, v1) {
		var v, v0, v1, x, x$1;
		v = $clone(pRot45CCW($clone(v0, fixed.Point26_6)), fixed.Point26_6);
		return (x = pDot($clone(v, fixed.Point26_6), $clone(v1, fixed.Point26_6)), (x.$high < 0 || (x.$high === 0 && x.$low < 0))) || (x$1 = pDot($clone(pRot90CW($clone(v, fixed.Point26_6)), fixed.Point26_6), $clone(v1, fixed.Point26_6)), (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 0)));
	};
	interpolate = function(a, b, t) {
		var a, b, s, t, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		s = new fixed.Int52_12(0 - t.$high, 4096 - t.$low);
		x$2 = (x = $mul64(s, (new fixed.Int52_12(0, a.X))), x$1 = $mul64(t, (new fixed.Int52_12(0, b.X))), new fixed.Int52_12(x.$high + x$1.$high, x.$low + x$1.$low));
		y = (x$3 = $mul64(s, (new fixed.Int52_12(0, a.Y))), x$4 = $mul64(t, (new fixed.Int52_12(0, b.Y))), new fixed.Int52_12(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
		return new fixed.Point26_6.ptr((((x$5 = $shiftRightInt64(x$2, 12), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)), (((x$6 = $shiftRightInt64(y, 12), x$6.$low + ((x$6.$high >> 31) * 4294967296)) >> 0)));
	};
	curviest2 = function(a, b, c) {
		var a, b, c, dx, dy, ex, ey, x, x$1, x$2, x$3, x$4;
		dx = (new $Int64(0, (b.X - a.X >> 0)));
		dy = (new $Int64(0, (b.Y - a.Y >> 0)));
		ex = (new $Int64(0, ((c.X - ($imul(2, b.X)) >> 0) + a.X >> 0)));
		ey = (new $Int64(0, ((c.Y - ($imul(2, b.Y)) >> 0) + a.Y >> 0)));
		if ((ex.$high === 0 && ex.$low === 0) && (ey.$high === 0 && ey.$low === 0)) {
			return new fixed.Int52_12(0, 2048);
		}
		return ((x = $div64($mul64(new $Int64(-1, 4294963200), ((x$1 = $mul64(dx, ex), x$2 = $mul64(dy, ey), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)))), ((x$3 = $mul64(ex, ex), x$4 = $mul64(ey, ey), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low))), false), new fixed.Int52_12(x.$high, x.$low)));
	};
	stroker.ptr.prototype.addNonCurvy2 = function(b, c) {
		var _tmp, _tmp$1, a, ab, abIsSmall, anorm, b, b$1, bc, bcIsSmall, bnorm, c, c$1, cnorm, depth, ds, k, mab, mac, mbc, ps, t, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; a = $f.a; ab = $f.ab; abIsSmall = $f.abIsSmall; anorm = $f.anorm; b = $f.b; b$1 = $f.b$1; bc = $f.bc; bcIsSmall = $f.bcIsSmall; bnorm = $f.bnorm; c = $f.c; c$1 = $f.c$1; cnorm = $f.cnorm; depth = $f.depth; ds = $f.ds; k = $f.k; mab = $f.mab; mac = $f.mac; mbc = $f.mbc; ps = $f.ps; t = $f.t; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		ds = arrayType$7.zero();
		ps = arrayType$8.zero();
		t = 0;
		ds[0] = 0;
		fixed.Point26_6.copy(ps[2], k.a);
		fixed.Point26_6.copy(ps[1], b);
		fixed.Point26_6.copy(ps[0], c);
		anorm = $clone(k.anorm, fixed.Point26_6);
		cnorm = new fixed.Point26_6.ptr(0, 0);
		/* while (true) { */ case 1:
			depth = ((t < 0 || t >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[t]);
			a = $clone((x = ($imul(2, t)) + 2 >> 0, ((x < 0 || x >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x])), fixed.Point26_6);
			b$1 = $clone((x$1 = ($imul(2, t)) + 1 >> 0, ((x$1 < 0 || x$1 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$1])), fixed.Point26_6);
			c$1 = $clone((x$2 = ($imul(2, t)) + 0 >> 0, ((x$2 < 0 || x$2 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$2])), fixed.Point26_6);
			ab = $clone($clone(b$1, fixed.Point26_6).Sub($clone(a, fixed.Point26_6)), fixed.Point26_6);
			bc = $clone($clone(c$1, fixed.Point26_6).Sub($clone(b$1, fixed.Point26_6)), fixed.Point26_6);
			abIsSmall = (x$3 = pDot($clone(ab, fixed.Point26_6), $clone(ab, fixed.Point26_6)), (x$3.$high < 0 || (x$3.$high === 0 && x$3.$low < 4096)));
			bcIsSmall = (x$4 = pDot($clone(bc, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$4.$high < 0 || (x$4.$high === 0 && x$4.$low < 4096)));
			/* */ if (abIsSmall && bcIsSmall) { $s = 3; continue; }
			/* */ if (depth < 5 && angleGreaterThan45($clone(ab, fixed.Point26_6), $clone(bc, fixed.Point26_6))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (abIsSmall && bcIsSmall) { */ case 3:
				fixed.Point26_6.copy(cnorm, pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)));
				mac = $clone(midpoint($clone(a, fixed.Point26_6), $clone(c$1, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc(k.p, $clone(mac, fixed.Point26_6), $clone(anorm, fixed.Point26_6), $clone(cnorm, fixed.Point26_6)); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mac, fixed.Point26_6), $clone(pNeg($clone(anorm, fixed.Point26_6)), fixed.Point26_6), $clone(pNeg($clone(cnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 6; continue;
			/* } else if (depth < 5 && angleGreaterThan45($clone(ab, fixed.Point26_6), $clone(bc, fixed.Point26_6))) { */ case 4:
				mab = $clone(midpoint($clone(a, fixed.Point26_6), $clone(b$1, fixed.Point26_6)), fixed.Point26_6);
				mbc = $clone(midpoint($clone(b$1, fixed.Point26_6), $clone(c$1, fixed.Point26_6)), fixed.Point26_6);
				t = t + (1) >> 0;
				(x$5 = t + 0 >> 0, ((x$5 < 0 || x$5 >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[x$5] = (depth + 1 >> 0)));
				(x$6 = t - 1 >> 0, ((x$6 < 0 || x$6 >= ds.length) ? ($throwRuntimeError("index out of range"), undefined) : ds[x$6] = (depth + 1 >> 0)));
				fixed.Point26_6.copy((x$7 = ($imul(2, t)) + 2 >> 0, ((x$7 < 0 || x$7 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$7])), a);
				fixed.Point26_6.copy((x$8 = ($imul(2, t)) + 1 >> 0, ((x$8 < 0 || x$8 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$8])), mab);
				fixed.Point26_6.copy((x$9 = ($imul(2, t)) + 0 >> 0, ((x$9 < 0 || x$9 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$9])), midpoint($clone(mab, fixed.Point26_6), $clone(mbc, fixed.Point26_6)));
				fixed.Point26_6.copy((x$10 = ($imul(2, t)) - 1 >> 0, ((x$10 < 0 || x$10 >= ps.length) ? ($throwRuntimeError("index out of range"), undefined) : ps[x$10])), mbc);
				/* continue; */ $s = 1; continue;
				$s = 6; continue;
			/* } else { */ case 5:
				bnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(c$1, fixed.Point26_6).Sub($clone(a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
				fixed.Point26_6.copy(cnorm, pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)));
				$r = k.p.Add2($clone($clone(b$1, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6), $clone($clone(c$1, fixed.Point26_6).Add($clone(cnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add2($clone($clone(b$1, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6), $clone($clone(c$1, fixed.Point26_6).Sub($clone(cnorm, fixed.Point26_6)), fixed.Point26_6));
			/* } */ case 6:
			if (t === 0) {
				_tmp = $clone(c$1, fixed.Point26_6);
				_tmp$1 = $clone(cnorm, fixed.Point26_6);
				fixed.Point26_6.copy(k.a, _tmp);
				fixed.Point26_6.copy(k.anorm, _tmp$1);
				$s = -1; return;
			}
			t = t - (1) >> 0;
			fixed.Point26_6.copy(anorm, cnorm);
		/* } */ $s = 1; continue; case 2:
		$panic(new $String("unreachable"));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.addNonCurvy2 }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.a = a; $f.ab = ab; $f.abIsSmall = abIsSmall; $f.anorm = anorm; $f.b = b; $f.b$1 = b$1; $f.bc = bc; $f.bcIsSmall = bcIsSmall; $f.bnorm = bnorm; $f.c = c; $f.c$1 = c$1; $f.cnorm = cnorm; $f.depth = depth; $f.ds = ds; $f.k = k; $f.mab = mab; $f.mac = mac; $f.mbc = mbc; $f.ps = ps; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.addNonCurvy2 = function(b, c) { return this.$val.addNonCurvy2(b, c); };
	stroker.ptr.prototype.Add1 = function(b) {
		var _tmp, _tmp$1, b, bnorm, k, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; b = $f.b; bnorm = $f.bnorm; k = $f.k; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		bnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(b, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if (k.r.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (k.r.$length === 0) { */ case 1:
			$r = k.p.Start($clone($clone(k.a, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Start($clone($clone(k.a, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6));
			$s = 3; continue;
		/* } else { */ case 2:
			$r = k.jr.Join(k.p, (k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), k.u, $clone(k.a, fixed.Point26_6), $clone(k.anorm, fixed.Point26_6), $clone(bnorm, fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$r = k.p.Add1($clone($clone(b, fixed.Point26_6).Add($clone(bnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(b, fixed.Point26_6).Sub($clone(bnorm, fixed.Point26_6)), fixed.Point26_6));
		_tmp = $clone(b, fixed.Point26_6);
		_tmp$1 = $clone(bnorm, fixed.Point26_6);
		fixed.Point26_6.copy(k.a, _tmp);
		fixed.Point26_6.copy(k.anorm, _tmp$1);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.Add1 }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.b = b; $f.bnorm = bnorm; $f.k = k; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.Add1 = function(b) { return this.$val.Add1(b); };
	stroker.ptr.prototype.Add2 = function(b, c) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ab, abIsSmall, abnorm, acnorm, b, bc, bcIsSmall, bcnorm, c, k, mab, mabc, mbc, pArc, t, x, x$1, x$2, x$3, x$4, x$5, z, z$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; ab = $f.ab; abIsSmall = $f.abIsSmall; abnorm = $f.abnorm; acnorm = $f.acnorm; b = $f.b; bc = $f.bc; bcIsSmall = $f.bcIsSmall; bcnorm = $f.bcnorm; c = $f.c; k = $f.k; mab = $f.mab; mabc = $f.mabc; mbc = $f.mbc; pArc = $f.pArc; t = $f.t; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; z = $f.z; z$1 = $f.z$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		ab = $clone($clone(b, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6);
		bc = $clone($clone(c, fixed.Point26_6).Sub($clone(b, fixed.Point26_6)), fixed.Point26_6);
		abnorm = $clone(pRot90CCW($clone(pNorm($clone(ab, fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if (k.r.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (k.r.$length === 0) { */ case 1:
			$r = k.p.Start($clone($clone(k.a, fixed.Point26_6).Add($clone(abnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Start($clone($clone(k.a, fixed.Point26_6).Sub($clone(abnorm, fixed.Point26_6)), fixed.Point26_6));
			$s = 3; continue;
		/* } else { */ case 2:
			$r = k.jr.Join(k.p, (k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), k.u, $clone(k.a, fixed.Point26_6), $clone(k.anorm, fixed.Point26_6), $clone(abnorm, fixed.Point26_6)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		abIsSmall = (x = pDot($clone(ab, fixed.Point26_6), $clone(ab, fixed.Point26_6)), (x.$high < 0 || (x.$high === 0 && x.$low < 1024)));
		bcIsSmall = (x$1 = pDot($clone(bc, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low < 1024)));
		/* */ if (abIsSmall || bcIsSmall) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (abIsSmall || bcIsSmall) { */ case 6:
			acnorm = $clone(pRot90CCW($clone(pNorm($clone($clone(c, fixed.Point26_6).Sub($clone(k.a, fixed.Point26_6)), fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
			$r = k.p.Add1($clone($clone(c, fixed.Point26_6).Add($clone(acnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(c, fixed.Point26_6).Sub($clone(acnorm, fixed.Point26_6)), fixed.Point26_6));
			_tmp = $clone(c, fixed.Point26_6);
			_tmp$1 = $clone(acnorm, fixed.Point26_6);
			fixed.Point26_6.copy(k.a, _tmp);
			fixed.Point26_6.copy(k.anorm, _tmp$1);
			$s = -1; return;
		/* } */ case 7:
		t = curviest2($clone(k.a, fixed.Point26_6), $clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6));
		/* */ if ((t.$high < 0 || (t.$high === 0 && t.$low <= 0)) || (0 < t.$high || (0 === t.$high && 4096 <= t.$low))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if ((t.$high < 0 || (t.$high === 0 && t.$low <= 0)) || (0 < t.$high || (0 === t.$high && 4096 <= t.$low))) { */ case 9:
			$r = k.addNonCurvy2($clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 10:
		mab = $clone(interpolate($clone(k.a, fixed.Point26_6), $clone(b, fixed.Point26_6), t), fixed.Point26_6);
		mbc = $clone(interpolate($clone(b, fixed.Point26_6), $clone(c, fixed.Point26_6), t), fixed.Point26_6);
		mabc = $clone(interpolate($clone(mab, fixed.Point26_6), $clone(mbc, fixed.Point26_6), t), fixed.Point26_6);
		bcnorm = $clone(pRot90CCW($clone(pNorm($clone(bc, fixed.Point26_6), k.u), fixed.Point26_6)), fixed.Point26_6);
		/* */ if ((x$2 = pDot($clone(abnorm, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)), x$3 = $div64($mul64($mul64((x$4 = (new fixed.Int52_12(0, k.u)), new fixed.Int52_12(-x$4.$high, -x$4.$low)), (new fixed.Int52_12(0, k.u))), new fixed.Int52_12(0, 2047)), new fixed.Int52_12(0, 2048), false), (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if ((x$2 = pDot($clone(abnorm, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)), x$3 = $div64($mul64($mul64((x$4 = (new fixed.Int52_12(0, k.u)), new fixed.Int52_12(-x$4.$high, -x$4.$low)), (new fixed.Int52_12(0, k.u))), new fixed.Int52_12(0, 2047)), new fixed.Int52_12(0, 2048), false), (x$2.$high < x$3.$high || (x$2.$high === x$3.$high && x$2.$low < x$3.$low)))) { */ case 12:
			pArc = (x$5 = pDot($clone(abnorm, fixed.Point26_6), $clone(bc, fixed.Point26_6)), (x$5.$high < 0 || (x$5.$high === 0 && x$5.$low < 0)));
			$r = k.p.Add1($clone($clone(mabc, fixed.Point26_6).Add($clone(abnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (pArc) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (pArc) { */ case 15:
				z = $clone(pRot90CW($clone(abnorm, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc(k.p, $clone(mabc, fixed.Point26_6), $clone(abnorm, fixed.Point26_6), $clone(z, fixed.Point26_6)); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc(k.p, $clone(mabc, fixed.Point26_6), $clone(z, fixed.Point26_6), $clone(bcnorm, fixed.Point26_6)); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 16:
			$r = k.p.Add1($clone($clone(mabc, fixed.Point26_6).Add($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = k.p.Add1($clone($clone(c, fixed.Point26_6).Add($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(mabc, fixed.Point26_6).Sub($clone(abnorm, fixed.Point26_6)), fixed.Point26_6));
			/* */ if (!pArc) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!pArc) { */ case 21:
				z$1 = $clone(pRot90CW($clone(abnorm, fixed.Point26_6)), fixed.Point26_6);
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mabc, fixed.Point26_6), $clone(pNeg($clone(abnorm, fixed.Point26_6)), fixed.Point26_6), $clone(z$1, fixed.Point26_6)); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = addArc((k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))), $clone(mabc, fixed.Point26_6), $clone(z$1, fixed.Point26_6), $clone(pNeg($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 22:
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(mabc, fixed.Point26_6).Sub($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6));
			(k.$ptr_r || (k.$ptr_r = new ptrType$1(function() { return this.$target.r; }, function($v) { this.$target.r = $v; }, k))).Add1($clone($clone(c, fixed.Point26_6).Sub($clone(bcnorm, fixed.Point26_6)), fixed.Point26_6));
			_tmp$2 = $clone(c, fixed.Point26_6);
			_tmp$3 = $clone(bcnorm, fixed.Point26_6);
			fixed.Point26_6.copy(k.a, _tmp$2);
			fixed.Point26_6.copy(k.anorm, _tmp$3);
			$s = -1; return;
		/* } */ case 13:
		$r = k.addNonCurvy2($clone(mab, fixed.Point26_6), $clone(mabc, fixed.Point26_6)); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = k.addNonCurvy2($clone(mbc, fixed.Point26_6), $clone(c, fixed.Point26_6)); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.Add2 }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.ab = ab; $f.abIsSmall = abIsSmall; $f.abnorm = abnorm; $f.acnorm = acnorm; $f.b = b; $f.bc = bc; $f.bcIsSmall = bcIsSmall; $f.bcnorm = bcnorm; $f.c = c; $f.k = k; $f.mab = mab; $f.mabc = mabc; $f.mbc = mbc; $f.pArc = pArc; $f.t = t; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.z = z; $f.z$1 = z$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.Add2 = function(b, c) { return this.$val.Add2(b, c); };
	stroker.ptr.prototype.Add3 = function(b, c, d) {
		var b, c, d, k;
		k = this;
		$panic(new $String("freetype/raster: stroke unimplemented for cubic segments"));
	};
	stroker.prototype.Add3 = function(b, c, d) { return this.$val.Add3(b, c, d); };
	stroker.ptr.prototype.stroke = function(q) {
		var _1, i, k, pivot, q, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; i = $f.i; k = $f.k; pivot = $f.pivot; q = $f.q; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = this;
		k.r = $makeSlice(Path, 0, q.$length);
		fixed.Point26_6.copy(k.a, new fixed.Point26_6.ptr((1 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 1]), (2 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 2])));
		i = 4;
		/* while (true) { */ case 1:
			/* if (!(i < q.$length)) { break; } */ if(!(i < q.$length)) { $s = 2; continue; }
				_1 = ((i < 0 || i >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + i]);
				/* */ if (_1 === (1)) { $s = 4; continue; }
				/* */ if (_1 === (2)) { $s = 5; continue; }
				/* */ if (_1 === (3)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_1 === (1)) { */ case 4:
					$r = k.Add1(new fixed.Point26_6.ptr((x = i + 1 >> 0, ((x < 0 || x >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x])), (x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$1])))); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (4) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (2)) { */ case 5:
					$r = k.Add2(new fixed.Point26_6.ptr((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$2])), (x$3 = i + 2 >> 0, ((x$3 < 0 || x$3 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$3]))), new fixed.Point26_6.ptr((x$4 = i + 3 >> 0, ((x$4 < 0 || x$4 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$4])), (x$5 = i + 4 >> 0, ((x$5 < 0 || x$5 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$5])))); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					i = i + (6) >> 0;
					$s = 8; continue;
				/* } else if (_1 === (3)) { */ case 6:
					k.Add3(new fixed.Point26_6.ptr((x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$6])), (x$7 = i + 2 >> 0, ((x$7 < 0 || x$7 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$7]))), new fixed.Point26_6.ptr((x$8 = i + 3 >> 0, ((x$8 < 0 || x$8 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$8])), (x$9 = i + 4 >> 0, ((x$9 < 0 || x$9 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$9]))), new fixed.Point26_6.ptr((x$10 = i + 5 >> 0, ((x$10 < 0 || x$10 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$10])), (x$11 = i + 6 >> 0, ((x$11 < 0 || x$11 >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + x$11]))));
					i = i + (8) >> 0;
					$s = 8; continue;
				/* } else { */ case 7:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 8:
			case 3:
		/* } */ $s = 1; continue; case 2:
		if (k.r.$length === 0) {
			$s = -1; return;
		}
		$r = k.cr.Cap(k.p, k.u, $clone(q.lastPoint(), fixed.Point26_6), $clone(pNeg($clone(k.anorm, fixed.Point26_6)), fixed.Point26_6)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = addPathReversed(k.p, k.r); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		pivot = $clone(q.firstPoint(), fixed.Point26_6);
		$r = k.cr.Cap(k.p, k.u, $clone(pivot, fixed.Point26_6), $clone($clone(pivot, fixed.Point26_6).Sub(new fixed.Point26_6.ptr((x$12 = k.r, (1 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 1])), (x$13 = k.r, (2 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 2])))), fixed.Point26_6)); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: stroker.ptr.prototype.stroke }; } $f._1 = _1; $f.i = i; $f.k = k; $f.pivot = pivot; $f.q = q; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	stroker.prototype.stroke = function(q) { return this.$val.stroke(q); };
	Stroke = function(p, q, width, cr, jr) {
		var _1, _q, _tmp, _tmp$1, cr, i, j, jr, p, q, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; cr = $f.cr; i = $f.i; j = $f.j; jr = $f.jr; p = $f.p; q = $f.q; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (q.$length === 0) {
			$s = -1; return;
		}
		if ($interfaceIsEqual(cr, $ifaceNil)) {
			cr = $pkg.RoundCapper;
		}
		if ($interfaceIsEqual(jr, $ifaceNil)) {
			jr = $pkg.RoundJoiner;
		}
		if (!(((0 >= q.$length ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + 0]) === 0))) {
			$panic(new $String("freetype/raster: bad path"));
		}
		s = new stroker.ptr(p, (_q = width / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), cr, jr, Path.nil, new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		i = 0;
		j = 4;
		/* while (true) { */ case 1:
			/* if (!(j < q.$length)) { break; } */ if(!(j < q.$length)) { $s = 2; continue; }
				_1 = ((j < 0 || j >= q.$length) ? ($throwRuntimeError("index out of range"), undefined) : q.$array[q.$offset + j]);
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (_1 === (0)) { */ case 4:
					$r = s.stroke($subslice(q, i, j)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_tmp = j;
					_tmp$1 = j + 4 >> 0;
					i = _tmp;
					j = _tmp$1;
					$s = 9; continue;
				/* } else if (_1 === (1)) { */ case 5:
					j = j + (4) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (2)) { */ case 6:
					j = j + (6) >> 0;
					$s = 9; continue;
				/* } else if (_1 === (3)) { */ case 7:
					j = j + (8) >> 0;
					$s = 9; continue;
				/* } else { */ case 8:
					$panic(new $String("freetype/raster: bad path"));
				/* } */ case 9:
			case 3:
		/* } */ $s = 1; continue; case 2:
		$r = s.stroke($subslice(q, i)); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stroke }; } $f._1 = _1; $f._q = _q; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.cr = cr; $f.i = i; $f.j = j; $f.jr = jr; $f.p = p; $f.q = q; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Stroke = Stroke;
	Path.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "firstPoint", name: "firstPoint", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [fixed.Point26_6], false)}, {prop: "lastPoint", name: "lastPoint", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [fixed.Point26_6], false)}];
	ptrType$1.methods = [{prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "AddPath", name: "AddPath", pkg: "", typ: $funcType([Path], [], false)}, {prop: "AddStroke", name: "AddStroke", pkg: "", typ: $funcType([Path, fixed.Int26_6, Capper, Joiner], [], false)}];
	ptrType$6.methods = [{prop: "findCell", name: "findCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [$Int], false)}, {prop: "saveCell", name: "saveCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([], [], false)}, {prop: "setCell", name: "setCell", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int, $Int], [], false)}, {prop: "scan", name: "scan", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int, fixed.Int26_6, fixed.Int26_6, fixed.Int26_6, fixed.Int26_6], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "AddPath", name: "AddPath", pkg: "", typ: $funcType([Path], [], false)}, {prop: "AddStroke", name: "AddStroke", pkg: "", typ: $funcType([Path, fixed.Int26_6, Capper, Joiner], [], false)}, {prop: "areaToAlpha", name: "areaToAlpha", pkg: "github.com/golang/freetype/raster", typ: $funcType([$Int], [$Uint32], false)}, {prop: "Rasterize", name: "Rasterize", pkg: "", typ: $funcType([Painter], [], false)}, {prop: "Clear", name: "Clear", pkg: "", typ: $funcType([], [], false)}, {prop: "SetBounds", name: "SetBounds", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	CapperFunc.methods = [{prop: "Cap", name: "Cap", pkg: "", typ: $funcType([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false)}];
	JoinerFunc.methods = [{prop: "Join", name: "Join", pkg: "", typ: $funcType([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}];
	ptrType$7.methods = [{prop: "addNonCurvy2", name: "addNonCurvy2", pkg: "github.com/golang/freetype/raster", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "stroke", name: "stroke", pkg: "github.com/golang/freetype/raster", typ: $funcType([Path], [], false)}];
	Adder.init([{prop: "Add1", name: "Add1", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}, {prop: "Add2", name: "Add2", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Add3", name: "Add3", pkg: "", typ: $funcType([fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}, {prop: "Start", name: "Start", pkg: "", typ: $funcType([fixed.Point26_6], [], false)}]);
	Path.init(fixed.Int26_6);
	Span.init("", [{prop: "Y", name: "Y", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "X0", name: "X0", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "X1", name: "X1", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Alpha", name: "Alpha", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	Painter.init([{prop: "Paint", name: "Paint", pkg: "", typ: $funcType([sliceType$2, $Bool], [], false)}]);
	cell.init("github.com/golang/freetype/raster", [{prop: "xi", name: "xi", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "area", name: "area", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cover", name: "cover", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "next", name: "next", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Rasterizer.init("github.com/golang/freetype/raster", [{prop: "UseNonZeroWinding", name: "UseNonZeroWinding", anonymous: false, exported: true, typ: $Bool, tag: ""}, {prop: "Dx", name: "Dx", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Dy", name: "Dy", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "splitScale2", name: "splitScale2", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "splitScale3", name: "splitScale3", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "a", name: "a", anonymous: false, exported: false, typ: fixed.Point26_6, tag: ""}, {prop: "xi", name: "xi", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "yi", name: "yi", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "area", name: "area", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cover", name: "cover", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cell", name: "cell", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "cellIndex", name: "cellIndex", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "cellBuf", name: "cellBuf", anonymous: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "cellIndexBuf", name: "cellIndexBuf", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "spanBuf", name: "spanBuf", anonymous: false, exported: false, typ: arrayType$6, tag: ""}]);
	Capper.init([{prop: "Cap", name: "Cap", pkg: "", typ: $funcType([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false)}]);
	CapperFunc.init([Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6], [], false);
	Joiner.init([{prop: "Join", name: "Join", pkg: "", typ: $funcType([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false)}]);
	JoinerFunc.init([Adder, Adder, fixed.Int26_6, fixed.Point26_6, fixed.Point26_6, fixed.Point26_6], [], false);
	stroker.init("github.com/golang/freetype/raster", [{prop: "p", name: "p", anonymous: false, exported: false, typ: Adder, tag: ""}, {prop: "u", name: "u", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "cr", name: "cr", anonymous: false, exported: false, typ: Capper, tag: ""}, {prop: "jr", name: "jr", anonymous: false, exported: false, typ: Joiner, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: Path, tag: ""}, {prop: "a", name: "a", anonymous: false, exported: false, typ: fixed.Point26_6, tag: ""}, {prop: "anorm", name: "anorm", anonymous: false, exported: false, typ: fixed.Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.RoundCapper = new CapperFunc((roundCapper));
		$pkg.RoundJoiner = new JoinerFunc((roundJoiner));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/image/font"] = (function() {
	var $pkg = {}, $init, fixed, image, draw, io, utf8, Face, Metrics, Drawer, Hinting, sliceType, ptrType, BoundBytes, BoundString, MeasureBytes, MeasureString;
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	draw = $packages["image/draw"];
	io = $packages["io"];
	utf8 = $packages["unicode/utf8"];
	Face = $pkg.Face = $newType(8, $kindInterface, "font.Face", true, "golang.org/x/image/font", true, null);
	Metrics = $pkg.Metrics = $newType(0, $kindStruct, "font.Metrics", true, "golang.org/x/image/font", true, function(Height_, Ascent_, Descent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Height = 0;
			this.Ascent = 0;
			this.Descent = 0;
			return;
		}
		this.Height = Height_;
		this.Ascent = Ascent_;
		this.Descent = Descent_;
	});
	Drawer = $pkg.Drawer = $newType(0, $kindStruct, "font.Drawer", true, "golang.org/x/image/font", true, function(Dst_, Src_, Face_, Dot_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Dst = $ifaceNil;
			this.Src = $ifaceNil;
			this.Face = $ifaceNil;
			this.Dot = new fixed.Point26_6.ptr(0, 0);
			return;
		}
		this.Dst = Dst_;
		this.Src = Src_;
		this.Face = Face_;
		this.Dot = Dot_;
	});
	Hinting = $pkg.Hinting = $newType(4, $kindInt, "font.Hinting", true, "golang.org/x/image/font", true, null);
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(Drawer);
	Drawer.ptr.prototype.DrawBytes = function(s) {
		var _r, _r$1, _tuple, _tuple$1, advance, c, d, dr, mask, maskp, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; advance = $f.advance; c = $f.c; d = $f.d; dr = $f.dr; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = d.Face.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.Dot.X = d.Dot.X + (_r) >> 0;
			/* } */ case 4:
			_r$1 = d.Face.Glyph($clone(d.Dot, fixed.Point26_6), c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			dr = $clone(_tuple$1[0], image.Rectangle);
			mask = _tuple$1[1];
			maskp = $clone(_tuple$1[2], image.Point);
			advance = _tuple$1[3];
			ok = _tuple$1[4];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			$r = draw.DrawMask(d.Dst, $clone(dr, image.Rectangle), d.Src, new image.Point.ptr(0, 0), mask, $clone(maskp, image.Point), 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.Dot.X = d.Dot.X + (advance) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.DrawBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.advance = advance; $f.c = c; $f.d = d; $f.dr = dr; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.DrawBytes = function(s) { return this.$val.DrawBytes(s); };
	Drawer.ptr.prototype.DrawString = function(s) {
		var _i, _r, _r$1, _ref, _rune, _tuple, advance, c, d, dr, mask, maskp, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; advance = $f.advance; c = $f.c; d = $f.d; dr = $f.dr; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = d.Face.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.Dot.X = d.Dot.X + (_r) >> 0;
			/* } */ case 4:
			_r$1 = d.Face.Glyph($clone(d.Dot, fixed.Point26_6), c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			dr = $clone(_tuple[0], image.Rectangle);
			mask = _tuple[1];
			maskp = $clone(_tuple[2], image.Point);
			advance = _tuple[3];
			ok = _tuple[4];
			/* */ if (!ok) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!ok) { */ case 7:
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			$r = draw.DrawMask(d.Dst, $clone(dr, image.Rectangle), d.Src, new image.Point.ptr(0, 0), mask, $clone(maskp, image.Point), 0); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			d.Dot.X = d.Dot.X + (advance) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.DrawString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.advance = advance; $f.c = c; $f.d = d; $f.dr = dr; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.DrawString = function(s) { return this.$val.DrawString(s); };
	Drawer.ptr.prototype.BoundBytes = function(s) {
		var _r, _tuple, advance, bounds, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; advance = $f.advance; bounds = $f.bounds; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		d = this;
		_r = BoundBytes(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fixed.Rectangle26_6.copy(bounds, _tuple[0]);
		advance = _tuple[1];
		fixed.Point26_6.copy(bounds.Min, $clone(bounds.Min, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		fixed.Point26_6.copy(bounds.Max, $clone(bounds.Max, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.BoundBytes }; } $f._r = _r; $f._tuple = _tuple; $f.advance = advance; $f.bounds = bounds; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.BoundBytes = function(s) { return this.$val.BoundBytes(s); };
	Drawer.ptr.prototype.BoundString = function(s) {
		var _r, _tuple, advance, bounds, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; advance = $f.advance; bounds = $f.bounds; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		d = this;
		_r = BoundString(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		fixed.Rectangle26_6.copy(bounds, _tuple[0]);
		advance = _tuple[1];
		fixed.Point26_6.copy(bounds.Min, $clone(bounds.Min, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		fixed.Point26_6.copy(bounds.Max, $clone(bounds.Max, fixed.Point26_6).Add($clone(d.Dot, fixed.Point26_6)));
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.BoundString }; } $f._r = _r; $f._tuple = _tuple; $f.advance = advance; $f.bounds = bounds; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.BoundString = function(s) { return this.$val.BoundString(s); };
	Drawer.ptr.prototype.MeasureBytes = function(s) {
		var _r, advance, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; advance = $f.advance; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		d = this;
		_r = MeasureBytes(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		advance = _r;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.MeasureBytes }; } $f._r = _r; $f.advance = advance; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.MeasureBytes = function(s) { return this.$val.MeasureBytes(s); };
	Drawer.ptr.prototype.MeasureString = function(s) {
		var _r, advance, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; advance = $f.advance; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		d = this;
		_r = MeasureString(d.Face, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		advance = _r;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Drawer.ptr.prototype.MeasureString }; } $f._r = _r; $f.advance = advance; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Drawer.prototype.MeasureString = function(s) { return this.$val.MeasureString(s); };
	BoundBytes = function(f, s) {
		var _r, _r$1, _tuple, _tuple$1, a, advance, b, bounds, c, f, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; advance = $f.advance; b = $f.b; bounds = $f.bounds; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphBounds(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			b = $clone(_tuple$1[0], fixed.Rectangle26_6);
			a = _tuple$1[1];
			ok = _tuple$1[2];
			if (!ok) {
				/* continue; */ $s = 1; continue;
			}
			b.Min.X = b.Min.X + (advance) >> 0;
			b.Max.X = b.Max.X + (advance) >> 0;
			fixed.Rectangle26_6.copy(bounds, $clone(bounds, fixed.Rectangle26_6).Union($clone(b, fixed.Rectangle26_6)));
			advance = advance + (a) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoundBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.advance = advance; $f.b = b; $f.bounds = bounds; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoundBytes = BoundBytes;
	BoundString = function(f, s) {
		var _i, _r, _r$1, _ref, _rune, _tuple, a, advance, b, bounds, c, f, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; a = $f.a; advance = $f.advance; b = $f.b; bounds = $f.bounds; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphBounds(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			b = $clone(_tuple[0], fixed.Rectangle26_6);
			a = _tuple[1];
			ok = _tuple[2];
			if (!ok) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			b.Min.X = b.Min.X + (advance) >> 0;
			b.Max.X = b.Max.X + (advance) >> 0;
			fixed.Rectangle26_6.copy(bounds, $clone(bounds, fixed.Rectangle26_6).Union($clone(b, fixed.Rectangle26_6)));
			advance = advance + (a) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [bounds, advance];
		/* */ } return; } if ($f === undefined) { $f = { $blk: BoundString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.b = b; $f.bounds = bounds; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BoundString = BoundString;
	MeasureBytes = function(f, s) {
		var _r, _r$1, _tuple, _tuple$1, a, advance, c, f, ok, prevC, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; advance = $f.advance; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		prevC = -1;
		/* while (true) { */ case 1:
			/* if (!(s.$length > 0)) { break; } */ if(!(s.$length > 0)) { $s = 2; continue; }
			_tuple = utf8.DecodeRune(s);
			c = _tuple[0];
			size = _tuple[1];
			s = $subslice(s, size);
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphAdvance(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			a = _tuple$1[0];
			ok = _tuple$1[1];
			if (!ok) {
				/* continue; */ $s = 1; continue;
			}
			advance = advance + (a) >> 0;
			prevC = c;
		/* } */ $s = 1; continue; case 2:
		advance = advance;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MeasureBytes }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.advance = advance; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MeasureBytes = MeasureBytes;
	MeasureString = function(f, s) {
		var _i, _r, _r$1, _ref, _rune, _tuple, a, advance, c, f, ok, prevC, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _rune = $f._rune; _tuple = $f._tuple; a = $f.a; advance = $f.advance; c = $f.c; f = $f.f; ok = $f.ok; prevC = $f.prevC; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		advance = 0;
		prevC = -1;
		_ref = s;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.length)) { break; } */ if(!(_i < _ref.length)) { $s = 2; continue; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			/* */ if (prevC >= 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (prevC >= 0) { */ case 3:
				_r = f.Kern(prevC, c); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				advance = advance + (_r) >> 0;
			/* } */ case 4:
			_r$1 = f.GlyphAdvance(c); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			a = _tuple[0];
			ok = _tuple[1];
			if (!ok) {
				_i += _rune[1];
				/* continue; */ $s = 1; continue;
			}
			advance = advance + (a) >> 0;
			prevC = c;
			_i += _rune[1];
		/* } */ $s = 1; continue; case 2:
		advance = advance;
		$s = -1; return advance;
		/* */ } return; } if ($f === undefined) { $f = { $blk: MeasureString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._rune = _rune; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.c = c; $f.f = f; $f.ok = ok; $f.prevC = prevC; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.MeasureString = MeasureString;
	ptrType.methods = [{prop: "DrawBytes", name: "DrawBytes", pkg: "", typ: $funcType([sliceType], [], false)}, {prop: "DrawString", name: "DrawString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "BoundBytes", name: "BoundBytes", pkg: "", typ: $funcType([sliceType], [fixed.Rectangle26_6, fixed.Int26_6], false)}, {prop: "BoundString", name: "BoundString", pkg: "", typ: $funcType([$String], [fixed.Rectangle26_6, fixed.Int26_6], false)}, {prop: "MeasureBytes", name: "MeasureBytes", pkg: "", typ: $funcType([sliceType], [fixed.Int26_6], false)}, {prop: "MeasureString", name: "MeasureString", pkg: "", typ: $funcType([$String], [fixed.Int26_6], false)}];
	Face.init([{prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Glyph", name: "Glyph", pkg: "", typ: $funcType([fixed.Point26_6, $Int32], [image.Rectangle, image.Image, image.Point, fixed.Int26_6, $Bool], false)}, {prop: "GlyphAdvance", name: "GlyphAdvance", pkg: "", typ: $funcType([$Int32], [fixed.Int26_6, $Bool], false)}, {prop: "GlyphBounds", name: "GlyphBounds", pkg: "", typ: $funcType([$Int32], [fixed.Rectangle26_6, fixed.Int26_6, $Bool], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([$Int32, $Int32], [fixed.Int26_6], false)}, {prop: "Metrics", name: "Metrics", pkg: "", typ: $funcType([], [Metrics], false)}]);
	Metrics.init("", [{prop: "Height", name: "Height", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Ascent", name: "Ascent", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Descent", name: "Descent", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}]);
	Drawer.init("", [{prop: "Dst", name: "Dst", anonymous: false, exported: true, typ: draw.Image, tag: ""}, {prop: "Src", name: "Src", anonymous: false, exported: true, typ: image.Image, tag: ""}, {prop: "Face", name: "Face", anonymous: false, exported: true, typ: Face, tag: ""}, {prop: "Dot", name: "Dot", anonymous: false, exported: true, typ: fixed.Point26_6, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixed.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/golang/freetype/truetype"] = (function() {
	var $pkg = {}, $init, errors, fmt, raster, font, fixed, image, math, Options, glyphCacheEntry, glyphCacheKey, glyphCacheVal, indexCacheEntry, face, facePainter, Point, GlyphBuf, pointType, callStackEntry, hinter, graphicsState, f2dot14, Index, NameID, HMetric, VMetric, FormatError, UnsupportedError, cm, Font, arrayType, arrayType$1, ptrType, ptrType$1, ptrType$2, sliceType, sliceType$1, sliceType$2, arrayType$2, arrayType$3, arrayType$4, sliceType$3, sliceType$4, arrayType$5, arrayType$6, sliceType$5, arrayType$7, arrayType$8, sliceType$6, arrayType$9, arrayType$10, ptrType$3, sliceType$7, sliceType$8, ptrType$4, sliceType$9, ptrType$5, ptrType$6, mapType, globalDefaultGS, popCount, powerOf2, subPixels, NewFace, clear, resetTwilightPoints, skipInstructionPayload, normalize, fabs, fdiv, fmul, dotProduct, mulDiv, bool2int32, u32, u16, readTable, parseSubtables, printable, Parse, parse;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	raster = $packages["github.com/golang/freetype/raster"];
	font = $packages["golang.org/x/image/font"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	math = $packages["math"];
	Options = $pkg.Options = $newType(0, $kindStruct, "truetype.Options", true, "github.com/golang/freetype/truetype", true, function(Size_, DPI_, Hinting_, GlyphCacheEntries_, SubPixelsX_, SubPixelsY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Size = 0;
			this.DPI = 0;
			this.Hinting = 0;
			this.GlyphCacheEntries = 0;
			this.SubPixelsX = 0;
			this.SubPixelsY = 0;
			return;
		}
		this.Size = Size_;
		this.DPI = DPI_;
		this.Hinting = Hinting_;
		this.GlyphCacheEntries = GlyphCacheEntries_;
		this.SubPixelsX = SubPixelsX_;
		this.SubPixelsY = SubPixelsY_;
	});
	glyphCacheEntry = $pkg.glyphCacheEntry = $newType(0, $kindStruct, "truetype.glyphCacheEntry", true, "github.com/golang/freetype/truetype", false, function(key_, val_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.key = new glyphCacheKey.ptr(0, 0, 0);
			this.val = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			return;
		}
		this.key = key_;
		this.val = val_;
	});
	glyphCacheKey = $pkg.glyphCacheKey = $newType(0, $kindStruct, "truetype.glyphCacheKey", true, "github.com/golang/freetype/truetype", false, function(index_, fx_, fy_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.index = 0;
			this.fx = 0;
			this.fy = 0;
			return;
		}
		this.index = index_;
		this.fx = fx_;
		this.fy = fy_;
	});
	glyphCacheVal = $pkg.glyphCacheVal = $newType(0, $kindStruct, "truetype.glyphCacheVal", true, "github.com/golang/freetype/truetype", false, function(advanceWidth_, offset_, gw_, gh_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.advanceWidth = 0;
			this.offset = new image.Point.ptr(0, 0);
			this.gw = 0;
			this.gh = 0;
			return;
		}
		this.advanceWidth = advanceWidth_;
		this.offset = offset_;
		this.gw = gw_;
		this.gh = gh_;
	});
	indexCacheEntry = $pkg.indexCacheEntry = $newType(0, $kindStruct, "truetype.indexCacheEntry", true, "github.com/golang/freetype/truetype", false, function(rune_, index_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rune = 0;
			this.index = 0;
			return;
		}
		this.rune = rune_;
		this.index = index_;
	});
	face = $pkg.face = $newType(0, $kindStruct, "truetype.face", true, "github.com/golang/freetype/truetype", false, function(f_, hinting_, scale_, subPixelX_, subPixelBiasX_, subPixelMaskX_, subPixelY_, subPixelBiasY_, subPixelMaskY_, masks_, glyphCache_, r_, p_, paintOffset_, maxw_, maxh_, glyphBuf_, indexCache_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.f = ptrType$1.nil;
			this.hinting = 0;
			this.scale = 0;
			this.subPixelX = 0;
			this.subPixelBiasX = 0;
			this.subPixelMaskX = 0;
			this.subPixelY = 0;
			this.subPixelBiasY = 0;
			this.subPixelMaskY = 0;
			this.masks = ptrType$2.nil;
			this.glyphCache = sliceType.nil;
			this.r = new raster.Rasterizer.ptr(false, 0, 0, 0, 0, 0, new fixed.Point26_6.ptr(0, 0), 0, 0, 0, 0, sliceType$1.nil, sliceType$2.nil, arrayType$2.zero(), arrayType$3.zero(), arrayType$4.zero());
			this.p = $ifaceNil;
			this.paintOffset = 0;
			this.maxw = 0;
			this.maxh = 0;
			this.glyphBuf = new GlyphBuf.ptr(0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, ptrType$1.nil, 0, 0, new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil), arrayType$7.zero(), 0, false, sliceType$3.nil);
			this.indexCache = arrayType$8.zero();
			return;
		}
		this.f = f_;
		this.hinting = hinting_;
		this.scale = scale_;
		this.subPixelX = subPixelX_;
		this.subPixelBiasX = subPixelBiasX_;
		this.subPixelMaskX = subPixelMaskX_;
		this.subPixelY = subPixelY_;
		this.subPixelBiasY = subPixelBiasY_;
		this.subPixelMaskY = subPixelMaskY_;
		this.masks = masks_;
		this.glyphCache = glyphCache_;
		this.r = r_;
		this.p = p_;
		this.paintOffset = paintOffset_;
		this.maxw = maxw_;
		this.maxh = maxh_;
		this.glyphBuf = glyphBuf_;
		this.indexCache = indexCache_;
	});
	facePainter = $pkg.facePainter = $newType(0, $kindStruct, "truetype.facePainter", true, "github.com/golang/freetype/truetype", false, function(a_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = ptrType$4.nil;
			return;
		}
		this.a = a_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "truetype.Point", true, "github.com/golang/freetype/truetype", true, function(X_, Y_, Flags_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.X = 0;
			this.Y = 0;
			this.Flags = 0;
			return;
		}
		this.X = X_;
		this.Y = Y_;
		this.Flags = Flags_;
	});
	GlyphBuf = $pkg.GlyphBuf = $newType(0, $kindStruct, "truetype.GlyphBuf", true, "github.com/golang/freetype/truetype", true, function(AdvanceWidth_, Bounds_, Points_, Unhinted_, InFontUnits_, Ends_, font_, scale_, hinting_, hinter_, phantomPoints_, pp1x_, metricsSet_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceWidth = 0;
			this.Bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			this.Points = sliceType$3.nil;
			this.Unhinted = sliceType$3.nil;
			this.InFontUnits = sliceType$3.nil;
			this.Ends = sliceType$2.nil;
			this.font = ptrType$1.nil;
			this.scale = 0;
			this.hinting = 0;
			this.hinter = new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil);
			this.phantomPoints = arrayType$7.zero();
			this.pp1x = 0;
			this.metricsSet = false;
			this.tmp = sliceType$3.nil;
			return;
		}
		this.AdvanceWidth = AdvanceWidth_;
		this.Bounds = Bounds_;
		this.Points = Points_;
		this.Unhinted = Unhinted_;
		this.InFontUnits = InFontUnits_;
		this.Ends = Ends_;
		this.font = font_;
		this.scale = scale_;
		this.hinting = hinting_;
		this.hinter = hinter_;
		this.phantomPoints = phantomPoints_;
		this.pp1x = pp1x_;
		this.metricsSet = metricsSet_;
		this.tmp = tmp_;
	});
	pointType = $pkg.pointType = $newType(4, $kindUint32, "truetype.pointType", true, "github.com/golang/freetype/truetype", false, null);
	callStackEntry = $pkg.callStackEntry = $newType(0, $kindStruct, "truetype.callStackEntry", true, "github.com/golang/freetype/truetype", false, function(program_, pc_, loopCount_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.program = sliceType$6.nil;
			this.pc = 0;
			this.loopCount = 0;
			return;
		}
		this.program = program_;
		this.pc = pc_;
		this.loopCount = loopCount_;
	});
	hinter = $pkg.hinter = $newType(0, $kindStruct, "truetype.hinter", true, "github.com/golang/freetype/truetype", false, function(stack_, store_, functions_, font_, scale_, gs_, defaultGS_, points_, ends_, scaledCVTInitialized_, scaledCVT_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.stack = sliceType$4.nil;
			this.store = sliceType$4.nil;
			this.functions = false;
			this.font = ptrType$1.nil;
			this.scale = 0;
			this.gs = new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
			this.defaultGS = new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false);
			this.points = arrayType$6.zero();
			this.ends = sliceType$2.nil;
			this.scaledCVTInitialized = false;
			this.scaledCVT = sliceType$5.nil;
			return;
		}
		this.stack = stack_;
		this.store = store_;
		this.functions = functions_;
		this.font = font_;
		this.scale = scale_;
		this.gs = gs_;
		this.defaultGS = defaultGS_;
		this.points = points_;
		this.ends = ends_;
		this.scaledCVTInitialized = scaledCVTInitialized_;
		this.scaledCVT = scaledCVT_;
	});
	graphicsState = $pkg.graphicsState = $newType(0, $kindStruct, "truetype.graphicsState", true, "github.com/golang/freetype/truetype", false, function(pv_, fv_, dv_, rp_, zp_, controlValueCutIn_, singleWidthCutIn_, singleWidth_, deltaBase_, deltaShift_, minDist_, loop_, roundPeriod_, roundPhase_, roundThreshold_, roundSuper45_, autoFlip_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pv = arrayType.zero();
			this.fv = arrayType.zero();
			this.dv = arrayType.zero();
			this.rp = arrayType$1.zero();
			this.zp = arrayType$1.zero();
			this.controlValueCutIn = 0;
			this.singleWidthCutIn = 0;
			this.singleWidth = 0;
			this.deltaBase = 0;
			this.deltaShift = 0;
			this.minDist = 0;
			this.loop = 0;
			this.roundPeriod = 0;
			this.roundPhase = 0;
			this.roundThreshold = 0;
			this.roundSuper45 = false;
			this.autoFlip = false;
			return;
		}
		this.pv = pv_;
		this.fv = fv_;
		this.dv = dv_;
		this.rp = rp_;
		this.zp = zp_;
		this.controlValueCutIn = controlValueCutIn_;
		this.singleWidthCutIn = singleWidthCutIn_;
		this.singleWidth = singleWidth_;
		this.deltaBase = deltaBase_;
		this.deltaShift = deltaShift_;
		this.minDist = minDist_;
		this.loop = loop_;
		this.roundPeriod = roundPeriod_;
		this.roundPhase = roundPhase_;
		this.roundThreshold = roundThreshold_;
		this.roundSuper45 = roundSuper45_;
		this.autoFlip = autoFlip_;
	});
	f2dot14 = $pkg.f2dot14 = $newType(2, $kindInt16, "truetype.f2dot14", true, "github.com/golang/freetype/truetype", false, null);
	Index = $pkg.Index = $newType(2, $kindUint16, "truetype.Index", true, "github.com/golang/freetype/truetype", true, null);
	NameID = $pkg.NameID = $newType(2, $kindUint16, "truetype.NameID", true, "github.com/golang/freetype/truetype", true, null);
	HMetric = $pkg.HMetric = $newType(0, $kindStruct, "truetype.HMetric", true, "github.com/golang/freetype/truetype", true, function(AdvanceWidth_, LeftSideBearing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceWidth = 0;
			this.LeftSideBearing = 0;
			return;
		}
		this.AdvanceWidth = AdvanceWidth_;
		this.LeftSideBearing = LeftSideBearing_;
	});
	VMetric = $pkg.VMetric = $newType(0, $kindStruct, "truetype.VMetric", true, "github.com/golang/freetype/truetype", true, function(AdvanceHeight_, TopSideBearing_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AdvanceHeight = 0;
			this.TopSideBearing = 0;
			return;
		}
		this.AdvanceHeight = AdvanceHeight_;
		this.TopSideBearing = TopSideBearing_;
	});
	FormatError = $pkg.FormatError = $newType(8, $kindString, "truetype.FormatError", true, "github.com/golang/freetype/truetype", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "truetype.UnsupportedError", true, "github.com/golang/freetype/truetype", true, null);
	cm = $pkg.cm = $newType(0, $kindStruct, "truetype.cm", true, "github.com/golang/freetype/truetype", false, function(start_, end_, delta_, offset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.start = 0;
			this.end = 0;
			this.delta = 0;
			this.offset = 0;
			return;
		}
		this.start = start_;
		this.end = end_;
		this.delta = delta_;
		this.offset = offset_;
	});
	Font = $pkg.Font = $newType(0, $kindStruct, "truetype.Font", true, "github.com/golang/freetype/truetype", true, function(cmap_, cvt_, fpgm_, glyf_, hdmx_, head_, hhea_, hmtx_, kern_, loca_, maxp_, name_, os2_, prep_, vmtx_, cmapIndexes_, cm_, locaOffsetFormat_, nGlyph_, nHMetric_, nKern_, fUnitsPerEm_, ascent_, descent_, bounds_, maxTwilightPoints_, maxStorage_, maxFunctionDefs_, maxStackElements_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.cmap = sliceType$6.nil;
			this.cvt = sliceType$6.nil;
			this.fpgm = sliceType$6.nil;
			this.glyf = sliceType$6.nil;
			this.hdmx = sliceType$6.nil;
			this.head = sliceType$6.nil;
			this.hhea = sliceType$6.nil;
			this.hmtx = sliceType$6.nil;
			this.kern = sliceType$6.nil;
			this.loca = sliceType$6.nil;
			this.maxp = sliceType$6.nil;
			this.name = sliceType$6.nil;
			this.os2 = sliceType$6.nil;
			this.prep = sliceType$6.nil;
			this.vmtx = sliceType$6.nil;
			this.cmapIndexes = sliceType$6.nil;
			this.cm = sliceType$8.nil;
			this.locaOffsetFormat = 0;
			this.nGlyph = 0;
			this.nHMetric = 0;
			this.nKern = 0;
			this.fUnitsPerEm = 0;
			this.ascent = 0;
			this.descent = 0;
			this.bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			this.maxTwilightPoints = 0;
			this.maxStorage = 0;
			this.maxFunctionDefs = 0;
			this.maxStackElements = 0;
			return;
		}
		this.cmap = cmap_;
		this.cvt = cvt_;
		this.fpgm = fpgm_;
		this.glyf = glyf_;
		this.hdmx = hdmx_;
		this.head = head_;
		this.hhea = hhea_;
		this.hmtx = hmtx_;
		this.kern = kern_;
		this.loca = loca_;
		this.maxp = maxp_;
		this.name = name_;
		this.os2 = os2_;
		this.prep = prep_;
		this.vmtx = vmtx_;
		this.cmapIndexes = cmapIndexes_;
		this.cm = cm_;
		this.locaOffsetFormat = locaOffsetFormat_;
		this.nGlyph = nGlyph_;
		this.nHMetric = nHMetric_;
		this.nKern = nKern_;
		this.fUnitsPerEm = fUnitsPerEm_;
		this.ascent = ascent_;
		this.descent = descent_;
		this.bounds = bounds_;
		this.maxTwilightPoints = maxTwilightPoints_;
		this.maxStorage = maxStorage_;
		this.maxFunctionDefs = maxFunctionDefs_;
		this.maxStackElements = maxStackElements_;
	});
	arrayType = $arrayType(f2dot14, 2);
	arrayType$1 = $arrayType($Int32, 3);
	ptrType = $ptrType(Options);
	ptrType$1 = $ptrType(Font);
	ptrType$2 = $ptrType(image.Alpha);
	sliceType = $sliceType(glyphCacheEntry);
	sliceType$1 = $sliceType(raster.cell);
	sliceType$2 = $sliceType($Int);
	arrayType$2 = $arrayType(raster.cell, 256);
	arrayType$3 = $arrayType($Int, 64);
	arrayType$4 = $arrayType(raster.Span, 64);
	sliceType$3 = $sliceType(Point);
	sliceType$4 = $sliceType($Int32);
	arrayType$5 = $arrayType(sliceType$3, 3);
	arrayType$6 = $arrayType(arrayType$5, 2);
	sliceType$5 = $sliceType(fixed.Int26_6);
	arrayType$7 = $arrayType(Point, 4);
	arrayType$8 = $arrayType(indexCacheEntry, 256);
	sliceType$6 = $sliceType($Uint8);
	arrayType$9 = $arrayType($Int16, 4);
	arrayType$10 = $arrayType(callStackEntry, 32);
	ptrType$3 = $ptrType(Point);
	sliceType$7 = $sliceType($emptyInterface);
	sliceType$8 = $sliceType(cm);
	ptrType$4 = $ptrType(face);
	sliceType$9 = $sliceType(raster.Span);
	ptrType$5 = $ptrType(GlyphBuf);
	ptrType$6 = $ptrType(hinter);
	mapType = $mapType($Int32, sliceType$6);
	powerOf2 = function(i) {
		var i;
		return !((i === 0)) && (((i & ((i - 1 >> 0)))) === 0);
	};
	Options.ptr.prototype.size = function() {
		var o;
		o = this;
		if (!(o === ptrType.nil) && o.Size > 0) {
			return o.Size;
		}
		return 12;
	};
	Options.prototype.size = function() { return this.$val.size(); };
	Options.ptr.prototype.dpi = function() {
		var o;
		o = this;
		if (!(o === ptrType.nil) && o.DPI > 0) {
			return o.DPI;
		}
		return 72;
	};
	Options.prototype.dpi = function() { return this.$val.dpi(); };
	Options.ptr.prototype.hinting = function() {
		var _1, o;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.Hinting;
			if ((_1 === (1)) || (_1 === (2))) {
				return 2;
			}
		}
		return 0;
	};
	Options.prototype.hinting = function() { return this.$val.hinting(); };
	Options.ptr.prototype.glyphCacheEntries = function() {
		var o;
		o = this;
		if (!(o === ptrType.nil) && powerOf2(o.GlyphCacheEntries)) {
			return o.GlyphCacheEntries;
		}
		return 512;
	};
	Options.prototype.glyphCacheEntries = function() { return this.$val.glyphCacheEntries(); };
	Options.ptr.prototype.subPixelsX = function() {
		var _1, _tuple, _tuple$1, halfQuantum, mask, o, value;
		value = 0;
		halfQuantum = 0;
		mask = 0;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.SubPixelsX;
			if ((_1 === (1)) || (_1 === (2)) || (_1 === (4)) || (_1 === (8)) || (_1 === (16)) || (_1 === (32)) || (_1 === (64))) {
				_tuple = subPixels(o.SubPixelsX);
				value = _tuple[0];
				halfQuantum = _tuple[1];
				mask = _tuple[2];
				return [value, halfQuantum, mask];
			}
		}
		_tuple$1 = subPixels(4);
		value = _tuple$1[0];
		halfQuantum = _tuple$1[1];
		mask = _tuple$1[2];
		return [value, halfQuantum, mask];
	};
	Options.prototype.subPixelsX = function() { return this.$val.subPixelsX(); };
	Options.ptr.prototype.subPixelsY = function() {
		var _1, _tuple, _tuple$1, halfQuantum, mask, o, value;
		value = 0;
		halfQuantum = 0;
		mask = 0;
		o = this;
		if (!(o === ptrType.nil)) {
			_1 = o.SubPixelsX;
			if ((_1 === (1)) || (_1 === (2)) || (_1 === (4)) || (_1 === (8)) || (_1 === (16)) || (_1 === (32)) || (_1 === (64))) {
				_tuple = subPixels(o.SubPixelsX);
				value = _tuple[0];
				halfQuantum = _tuple[1];
				mask = _tuple[2];
				return [value, halfQuantum, mask];
			}
		}
		_tuple$1 = subPixels(1);
		value = _tuple$1[0];
		halfQuantum = _tuple$1[1];
		mask = _tuple$1[2];
		return [value, halfQuantum, mask];
	};
	Options.prototype.subPixelsY = function() { return this.$val.subPixelsY(); };
	subPixels = function(q) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, bias, mask, q, value;
		value = 0;
		bias = 0;
		mask = 0;
		_tmp = ((q >>> 0));
		_tmp$1 = (_q = 32 / ((q >> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		_tmp$2 = (_q$1 = -64 / ((q >> 0)), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		value = _tmp;
		bias = _tmp$1;
		mask = _tmp$2;
		return [value, bias, mask];
	};
	NewFace = function(f, opts) {
		var _i, _i$1, _ref, _ref$1, _tuple, _tuple$1, a, b, f, i, i$1, opts, x, x$1, x$2, xmax, xmin, ymax, ymin;
		a = new face.ptr(f, opts.hinting(), ((0.5 + (opts.size() * opts.dpi() * 64 / 72) >> 0)), 0, 0, 0, 0, 0, 0, ptrType$2.nil, $makeSlice(sliceType, opts.glyphCacheEntries()), new raster.Rasterizer.ptr(false, 0, 0, 0, 0, 0, new fixed.Point26_6.ptr(0, 0), 0, 0, 0, 0, sliceType$1.nil, sliceType$2.nil, arrayType$2.zero(), arrayType$3.zero(), arrayType$4.zero()), $ifaceNil, 0, 0, 0, new GlyphBuf.ptr(0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil, ptrType$1.nil, 0, 0, new hinter.ptr(sliceType$4.nil, sliceType$4.nil, false, ptrType$1.nil, 0, new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), new graphicsState.ptr(arrayType.zero(), arrayType.zero(), arrayType.zero(), arrayType$1.zero(), arrayType$1.zero(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, false), arrayType$6.zero(), sliceType$2.nil, false, sliceType$5.nil), arrayType$7.zero(), 0, false, sliceType$3.nil), arrayType$8.zero());
		_tuple = opts.subPixelsX();
		a.subPixelX = _tuple[0];
		a.subPixelBiasX = _tuple[1];
		a.subPixelMaskX = _tuple[2];
		_tuple$1 = opts.subPixelsY();
		a.subPixelY = _tuple$1[0];
		a.subPixelBiasY = _tuple$1[1];
		a.subPixelMaskY = _tuple$1[2];
		_ref = a.glyphCache;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			(x = a.glyphCache, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).key.fy = 255;
			_i++;
		}
		_ref$1 = a.indexCache;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < 256)) { break; }
			i$1 = _i$1;
			(x$1 = a.indexCache, ((i$1 < 0 || i$1 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i$1])).rune = -1;
			_i$1++;
		}
		b = $clone(f.Bounds(a.scale), fixed.Rectangle26_6);
		xmin = ((b.Min.X >> 0)) >> 6 >> 0;
		ymin = -((b.Max.Y >> 0)) >> 6 >> 0;
		xmax = (((b.Max.X + 63 >> 0) >> 0)) >> 6 >> 0;
		ymax = -(((b.Min.Y - 63 >> 0) >> 0)) >> 6 >> 0;
		a.maxw = xmax - xmin >> 0;
		a.maxh = ymax - ymin >> 0;
		a.masks = image.NewAlpha($clone(image.Rect(0, 0, a.maxw, $imul(a.maxh, a.glyphCache.$length)), image.Rectangle));
		a.r.SetBounds(a.maxw, a.maxh);
		a.p = (x$2 = new facePainter.ptr(a), new x$2.constructor.elem(x$2));
		return a;
	};
	$pkg.NewFace = NewFace;
	face.ptr.prototype.index = function(r) {
		var a, c, i, r, x, x$1;
		a = this;
		c = (x = a.indexCache, x$1 = r & 255, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
		if (c.rune === r) {
			return c.index;
		}
		i = a.f.Index(r);
		c.rune = r;
		c.index = i;
		return i;
	};
	face.prototype.index = function(r) { return this.$val.index(r); };
	face.ptr.prototype.Close = function() {
		var a;
		a = this;
		return $ifaceNil;
	};
	face.prototype.Close = function() { return this.$val.Close(); };
	face.ptr.prototype.Metrics = function() {
		var a, fupe, scale;
		a = this;
		scale = (a.scale);
		fupe = (a.f.FUnitsPerEm());
		return new font.Metrics.ptr(a.scale, ((math.Ceil(scale * (a.f.ascent) / fupe) >> 0)), ((math.Ceil(scale * (-a.f.descent) / fupe) >> 0)));
	};
	face.prototype.Metrics = function() { return this.$val.Metrics(); };
	face.ptr.prototype.Kern = function(r0, r1) {
		var a, i0, i1, kern, r0, r1;
		a = this;
		i0 = a.index(r0);
		i1 = a.index(r1);
		kern = a.f.Kern(a.scale, i0, i1);
		if (!((a.hinting === 0))) {
			kern = (((kern + 32 >> 0)) & ~63) >> 0;
		}
		return kern;
	};
	face.prototype.Kern = function(r0, r1) { return this.$val.Kern(r0, r1); };
	face.ptr.prototype.Glyph = function(dot, r) {
		var _q, _q$1, _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, advance, cIndex, dot, dotX, dotY, dr, fx, fy, index, ix, iy, k, mask, maskp, ok, ok$1, r, v, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; advance = $f.advance; cIndex = $f.cIndex; dot = $f.dot; dotX = $f.dotX; dotY = $f.dotY; dr = $f.dr; fx = $f.fx; fy = $f.fy; index = $f.index; ix = $f.ix; iy = $f.iy; k = $f.k; mask = $f.mask; maskp = $f.maskp; ok = $f.ok; ok$1 = $f.ok$1; r = $f.r; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dr = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		mask = $ifaceNil;
		maskp = new image.Point.ptr(0, 0);
		advance = 0;
		ok = false;
		a = this;
		dotX = ((dot.X + a.subPixelBiasX >> 0)) & a.subPixelMaskX;
		dotY = ((dot.Y + a.subPixelBiasY >> 0)) & a.subPixelMaskY;
		_tmp = (((dotX >> 6 >> 0) >> 0));
		_tmp$1 = dotX & 63;
		ix = _tmp;
		fx = _tmp$1;
		_tmp$2 = (((dotY >> 6 >> 0) >> 0));
		_tmp$3 = dotY & 63;
		iy = _tmp$2;
		fy = _tmp$3;
		index = a.index(r);
		cIndex = ((index >>> 0));
		cIndex = ($imul(cIndex, a.subPixelX) >>> 0) - (((_q = fx / a.subPixelMaskX, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		cIndex = ($imul(cIndex, a.subPixelY) >>> 0) - (((_q$1 = fy / a.subPixelMaskY, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0)) >>> 0;
		cIndex = (cIndex & ((((a.glyphCache.$length - 1 >> 0) >>> 0)))) >>> 0;
		a.paintOffset = $imul(a.maxh, ((cIndex >> 0)));
		k = new glyphCacheKey.ptr(index, ((fx << 24 >>> 24)), ((fy << 24 >>> 24)));
		v = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
		/* */ if (!($equal((x = a.glyphCache, ((cIndex < 0 || cIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cIndex])).key, k, glyphCacheKey))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($equal((x = a.glyphCache, ((cIndex < 0 || cIndex >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + cIndex])).key, k, glyphCacheKey))) { */ case 1:
			ok$1 = false;
			_r = a.rasterize(index, fx, fy); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			glyphCacheVal.copy(v, _tuple[0]);
			ok$1 = _tuple[1];
			if (!ok$1) {
				_tmp$4 = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
				_tmp$5 = $ifaceNil;
				_tmp$6 = new image.Point.ptr(0, 0);
				_tmp$7 = 0;
				_tmp$8 = false;
				image.Rectangle.copy(dr, _tmp$4);
				mask = _tmp$5;
				image.Point.copy(maskp, _tmp$6);
				advance = _tmp$7;
				ok = _tmp$8;
				$s = -1; return [dr, mask, maskp, advance, ok];
			}
			glyphCacheEntry.copy((x$1 = a.glyphCache, ((cIndex < 0 || cIndex >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + cIndex])), new glyphCacheEntry.ptr($clone(k, glyphCacheKey), $clone(v, glyphCacheVal)));
			$s = 3; continue;
		/* } else { */ case 2:
			glyphCacheVal.copy(v, (x$2 = a.glyphCache, ((cIndex < 0 || cIndex >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + cIndex])).val);
		/* } */ case 3:
		image.Point.copy(dr.Min, new image.Point.ptr(ix + v.offset.X >> 0, iy + v.offset.Y >> 0));
		image.Point.copy(dr.Max, new image.Point.ptr(dr.Min.X + v.gw >> 0, dr.Min.Y + v.gh >> 0));
		_tmp$9 = $clone(dr, image.Rectangle);
		_tmp$10 = a.masks;
		_tmp$11 = new image.Point.ptr(0, a.paintOffset);
		_tmp$12 = v.advanceWidth;
		_tmp$13 = true;
		image.Rectangle.copy(dr, _tmp$9);
		mask = _tmp$10;
		image.Point.copy(maskp, _tmp$11);
		advance = _tmp$12;
		ok = _tmp$13;
		$s = -1; return [dr, mask, maskp, advance, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: face.ptr.prototype.Glyph }; } $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.advance = advance; $f.cIndex = cIndex; $f.dot = dot; $f.dotX = dotX; $f.dotY = dotY; $f.dr = dr; $f.fx = fx; $f.fy = fy; $f.index = index; $f.ix = ix; $f.iy = iy; $f.k = k; $f.mask = mask; $f.maskp = maskp; $f.ok = ok; $f.ok$1 = ok$1; $f.r = r; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	face.prototype.Glyph = function(dot, r) { return this.$val.Glyph(dot, r); };
	face.ptr.prototype.GlyphBounds = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, a, advance, bounds, err, ok, r, xmax, xmin, ymax, ymin;
		bounds = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
		advance = 0;
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, a.index(r), a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			_tmp$1 = 0;
			_tmp$2 = false;
			fixed.Rectangle26_6.copy(bounds, _tmp);
			advance = _tmp$1;
			ok = _tmp$2;
			return [bounds, advance, ok];
		}
		xmin = a.glyphBuf.Bounds.Min.X;
		ymin = -a.glyphBuf.Bounds.Max.Y;
		xmax = a.glyphBuf.Bounds.Max.X;
		ymax = -a.glyphBuf.Bounds.Min.Y;
		if (xmin > xmax || ymin > ymax) {
			_tmp$3 = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0));
			_tmp$4 = 0;
			_tmp$5 = false;
			fixed.Rectangle26_6.copy(bounds, _tmp$3);
			advance = _tmp$4;
			ok = _tmp$5;
			return [bounds, advance, ok];
		}
		_tmp$6 = new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(xmin, ymin), new fixed.Point26_6.ptr(xmax, ymax));
		_tmp$7 = a.glyphBuf.AdvanceWidth;
		_tmp$8 = true;
		fixed.Rectangle26_6.copy(bounds, _tmp$6);
		advance = _tmp$7;
		ok = _tmp$8;
		return [bounds, advance, ok];
	};
	face.prototype.GlyphBounds = function(r) { return this.$val.GlyphBounds(r); };
	face.ptr.prototype.GlyphAdvance = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, a, advance, err, ok, r;
		advance = 0;
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, a.index(r), a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = false;
			advance = _tmp;
			ok = _tmp$1;
			return [advance, ok];
		}
		_tmp$2 = a.glyphBuf.AdvanceWidth;
		_tmp$3 = true;
		advance = _tmp$2;
		ok = _tmp$3;
		return [advance, ok];
	};
	face.prototype.GlyphAdvance = function(r) { return this.$val.GlyphAdvance(r); };
	face.ptr.prototype.rasterize = function(index, fx, fy) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, e0, e1, err, fx, fy, index, ok, pixOffset, v, xmax, xmin, ymax, ymin, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; a = $f.a; e0 = $f.e0; e1 = $f.e1; err = $f.err; fx = $f.fx; fy = $f.fy; index = $f.index; ok = $f.ok; pixOffset = $f.pixOffset; v = $f.v; xmax = $f.xmax; xmin = $f.xmin; ymax = $f.ymax; ymin = $f.ymin; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		v = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
		ok = false;
		a = this;
		err = a.glyphBuf.Load(a.f, a.scale, index, a.hinting);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			_tmp$1 = false;
			glyphCacheVal.copy(v, _tmp);
			ok = _tmp$1;
			$s = -1; return [v, ok];
		}
		xmin = (((fx + a.glyphBuf.Bounds.Min.X >> 0) >> 0)) >> 6 >> 0;
		ymin = (((fy - a.glyphBuf.Bounds.Max.Y >> 0) >> 0)) >> 6 >> 0;
		xmax = ((((fx + a.glyphBuf.Bounds.Max.X >> 0) + 63 >> 0) >> 0)) >> 6 >> 0;
		ymax = ((((fy - a.glyphBuf.Bounds.Min.Y >> 0) + 63 >> 0) >> 0)) >> 6 >> 0;
		if (xmin > xmax || ymin > ymax) {
			_tmp$2 = new glyphCacheVal.ptr(0, new image.Point.ptr(0, 0), 0, 0);
			_tmp$3 = false;
			glyphCacheVal.copy(v, _tmp$2);
			ok = _tmp$3;
			$s = -1; return [v, ok];
		}
		fx = fx - ((((xmin << 6 >> 0) >> 0))) >> 0;
		fy = fy - ((((ymin << 6 >> 0) >> 0))) >> 0;
		a.r.Clear();
		pixOffset = $imul(a.paintOffset, a.maxw);
		clear($subslice(a.masks.Pix, pixOffset, (pixOffset + ($imul(a.maxw, a.maxh)) >> 0)));
		e0 = 0;
		_ref = a.glyphBuf.Ends;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			e1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			a.drawContour($subslice(a.glyphBuf.Points, e0, e1), fx, fy);
			e0 = e1;
			_i++;
		}
		$r = a.r.Rasterize(a.p); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tmp$4 = new glyphCacheVal.ptr(a.glyphBuf.AdvanceWidth, new image.Point.ptr(xmin, ymin), xmax - xmin >> 0, ymax - ymin >> 0);
		_tmp$5 = true;
		glyphCacheVal.copy(v, _tmp$4);
		ok = _tmp$5;
		$s = -1; return [v, ok];
		/* */ } return; } if ($f === undefined) { $f = { $blk: face.ptr.prototype.rasterize }; } $f._i = _i; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f.a = a; $f.e0 = e0; $f.e1 = e1; $f.err = err; $f.fx = fx; $f.fy = fy; $f.index = index; $f.ok = ok; $f.pixOffset = pixOffset; $f.v = v; $f.xmax = xmax; $f.xmin = xmin; $f.ymax = ymax; $f.ymin = ymin; $f.$s = $s; $f.$r = $r; return $f;
	};
	face.prototype.rasterize = function(index, fx, fy) { return this.$val.rasterize(index, fx, fy); };
	clear = function(pix) {
		var _i, _ref, i, pix;
		_ref = pix;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + i] = 0);
			_i++;
		}
	};
	face.ptr.prototype.drawContour = function(ps, dx, dy) {
		var _i, _q, _q$1, _q$2, _q$3, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, a, dx, dy, last, mid, on, on0, others, p, ps, q, q0, start, x, x$1, x$2;
		a = this;
		if (ps.$length === 0) {
			return;
		}
		start = new fixed.Point26_6.ptr(dx + (0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).X >> 0, dy - (0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).Y >> 0);
		others = sliceType$3.nil;
		if (!(((((0 >= ps.$length ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + 0]).Flags & 1) >>> 0) === 0))) {
			others = $subslice(ps, 1);
		} else {
			last = new fixed.Point26_6.ptr(dx + (x = ps.$length - 1 >> 0, ((x < 0 || x >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x])).X >> 0, dy - (x$1 = ps.$length - 1 >> 0, ((x$1 < 0 || x$1 >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x$1])).Y >> 0);
			if (!(((((x$2 = ps.$length - 1 >> 0, ((x$2 < 0 || x$2 >= ps.$length) ? ($throwRuntimeError("index out of range"), undefined) : ps.$array[ps.$offset + x$2])).Flags & 1) >>> 0) === 0))) {
				fixed.Point26_6.copy(start, last);
				others = $subslice(ps, 0, (ps.$length - 1 >> 0));
			} else {
				fixed.Point26_6.copy(start, new fixed.Point26_6.ptr((_q = ((start.X + last.X >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (_q$1 = ((start.Y + last.Y >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))));
				others = ps;
			}
		}
		a.r.Start($clone(start, fixed.Point26_6));
		_tmp = $clone(start, fixed.Point26_6);
		_tmp$1 = true;
		q0 = $clone(_tmp, fixed.Point26_6);
		on0 = _tmp$1;
		_ref = others;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			p = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), Point);
			q = new fixed.Point26_6.ptr(dx + p.X >> 0, dy - p.Y >> 0);
			on = !((((p.Flags & 1) >>> 0) === 0));
			if (on) {
				if (on0) {
					a.r.Add1($clone(q, fixed.Point26_6));
				} else {
					a.r.Add2($clone(q0, fixed.Point26_6), $clone(q, fixed.Point26_6));
				}
			} else {
				if (on0) {
				} else {
					mid = new fixed.Point26_6.ptr((_q$2 = ((q0.X + q.X >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), (_q$3 = ((q0.Y + q.Y >> 0)) / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")));
					a.r.Add2($clone(q0, fixed.Point26_6), $clone(mid, fixed.Point26_6));
				}
			}
			_tmp$2 = $clone(q, fixed.Point26_6);
			_tmp$3 = on;
			fixed.Point26_6.copy(q0, _tmp$2);
			on0 = _tmp$3;
			_i++;
		}
		if (on0) {
			a.r.Add1($clone(start, fixed.Point26_6));
		} else {
			a.r.Add2($clone(q0, fixed.Point26_6), $clone(start, fixed.Point26_6));
		}
	};
	face.prototype.drawContour = function(ps, dx, dy) { return this.$val.drawContour(ps, dx, dy); };
	facePainter.ptr.prototype.Paint = function(ss, done) {
		var _i, _i$1, _ref, _ref$1, b, base, color, done, i, m, p, p$1, s, ss;
		p = this;
		m = p.a.masks;
		b = $clone(m.Bounds(), image.Rectangle);
		b.Min.Y = p.a.paintOffset;
		b.Max.Y = p.a.paintOffset + p.a.maxh >> 0;
		_ref = ss;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), raster.Span);
			s.Y = s.Y + (p.a.paintOffset) >> 0;
			if (s.Y < b.Min.Y) {
				_i++;
				continue;
			}
			if (s.Y >= b.Max.Y) {
				return;
			}
			if (s.X0 < b.Min.X) {
				s.X0 = b.Min.X;
			}
			if (s.X1 > b.Max.X) {
				s.X1 = b.Max.X;
			}
			if (s.X0 >= s.X1) {
				_i++;
				continue;
			}
			base = ($imul(((s.Y - m.Rect.Min.Y >> 0)), m.Stride)) - m.Rect.Min.X >> 0;
			p$1 = $subslice(m.Pix, (base + s.X0 >> 0), (base + s.X1 >> 0));
			color = (((s.Alpha >>> 8 >>> 0) << 24 >>> 24));
			_ref$1 = p$1;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i = _i$1;
				((i < 0 || i >= p$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : p$1.$array[p$1.$offset + i] = color);
				_i$1++;
			}
			_i++;
		}
	};
	facePainter.prototype.Paint = function(ss, done) { return this.$val.Paint(ss, done); };
	GlyphBuf.ptr.prototype.Load = function(f, scale, i, h) {
		var _i, _i$1, _ref, _ref$1, advanceWidth, err, err$1, f, g, h, hdmx, i, i$1, n, p, p$1, pp1x, scale, x, x$1, x$2, x$3;
		g = this;
		g.Points = $subslice(g.Points, 0, 0);
		g.Unhinted = $subslice(g.Unhinted, 0, 0);
		g.InFontUnits = $subslice(g.InFontUnits, 0, 0);
		g.Ends = $subslice(g.Ends, 0, 0);
		g.font = f;
		g.hinting = h;
		g.scale = scale;
		g.pp1x = 0;
		arrayType$7.copy(g.phantomPoints, arrayType$7.zero());
		g.metricsSet = false;
		if (!((h === 0))) {
			err = g.hinter.init(f, scale);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		err$1 = g.load(0, i, true);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		pp1x = g.pp1x;
		if (!((h === 0))) {
			pp1x = g.phantomPoints[0].X;
		}
		if (!((pp1x === 0))) {
			_ref = g.Points;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i$1 = _i;
				(x$1 = g.Points, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).X = (x = g.Points, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1])).X - (pp1x) >> 0;
				_i++;
			}
		}
		advanceWidth = g.phantomPoints[1].X - g.phantomPoints[0].X >> 0;
		if (!((h === 0))) {
			if (f.hdmx.$length >= 8) {
				n = u32(f.hdmx, 4);
				if (n > (3 + ((i >>> 0)) >>> 0)) {
					hdmx = $subslice(f.hdmx, 8);
					while (true) {
						if (!(((hdmx.$length >>> 0)) >= n)) { break; }
						if ((((0 >= hdmx.$length ? ($throwRuntimeError("index out of range"), undefined) : hdmx.$array[hdmx.$offset + 0]) >> 0)) === (scale >> 6 >> 0)) {
							advanceWidth = (((x$2 = 2 + i << 16 >>> 16, ((x$2 < 0 || x$2 >= hdmx.$length) ? ($throwRuntimeError("index out of range"), undefined) : hdmx.$array[hdmx.$offset + x$2])) >> 0)) << 6 >> 0;
							break;
						}
						hdmx = $subslice(hdmx, n);
					}
				}
			}
			advanceWidth = (((advanceWidth + 32 >> 0)) & ~63) >> 0;
		}
		g.AdvanceWidth = advanceWidth;
		if (g.Points.$length === 0) {
			fixed.Rectangle26_6.copy(g.Bounds, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)));
		} else {
			p = $clone((x$3 = g.Points, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])), Point);
			g.Bounds.Min.X = p.X;
			g.Bounds.Max.X = p.X;
			g.Bounds.Min.Y = p.Y;
			g.Bounds.Max.Y = p.Y;
			_ref$1 = $subslice(g.Points, 1);
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				p$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), Point);
				if (g.Bounds.Min.X > p$1.X) {
					g.Bounds.Min.X = p$1.X;
				} else if (g.Bounds.Max.X < p$1.X) {
					g.Bounds.Max.X = p$1.X;
				}
				if (g.Bounds.Min.Y > p$1.Y) {
					g.Bounds.Min.Y = p$1.Y;
				} else if (g.Bounds.Max.Y < p$1.Y) {
					g.Bounds.Max.Y = p$1.Y;
				}
				_i$1++;
			}
			if (!((h === 0))) {
				g.Bounds.Min.X = (g.Bounds.Min.X & ~(63)) >> 0;
				g.Bounds.Min.Y = (g.Bounds.Min.Y & ~(63)) >> 0;
				g.Bounds.Max.X = g.Bounds.Max.X + (63) >> 0;
				g.Bounds.Max.X = (g.Bounds.Max.X & ~(63)) >> 0;
				g.Bounds.Max.Y = g.Bounds.Max.Y + (63) >> 0;
				g.Bounds.Max.Y = (g.Bounds.Max.Y & ~(63)) >> 0;
			}
		}
		return $ifaceNil;
	};
	GlyphBuf.prototype.Load = function(f, scale, i, h) { return this.$val.Load(f, scale, i, h); };
	GlyphBuf.ptr.prototype.load = function(recursion, i, useMyMetrics) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, boundsXMin, boundsYMax, err, err$1, err$2, g, g0, g1, glyf, i, i$1, ne, ne0, np0, pp1x, program, recursion, uhm, useMyMetrics, uvm, x, x$1, x$2, x$3;
		err = $ifaceNil;
		g = this;
		if (recursion >= 32) {
			err = new UnsupportedError("excessive compound glyph recursion");
			return err;
		}
		_tmp = 0;
		_tmp$1 = 0;
		g0 = _tmp;
		g1 = _tmp$1;
		if (g.font.locaOffsetFormat === 1) {
			g0 = $imul(2, ((u16(g.font.loca, $imul(2, ((i >> 0)))) >>> 0))) >>> 0;
			g1 = $imul(2, ((u16(g.font.loca, ($imul(2, ((i >> 0)))) + 2 >> 0) >>> 0))) >>> 0;
		} else {
			g0 = u32(g.font.loca, $imul(4, ((i >> 0))));
			g1 = u32(g.font.loca, ($imul(4, ((i >> 0)))) + 4 >> 0);
		}
		_tmp$2 = (sliceType$6.nil);
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		glyf = _tmp$2;
		ne = _tmp$3;
		boundsXMin = _tmp$4;
		boundsYMax = _tmp$5;
		if ((g0 + 10 >>> 0) <= g1) {
			glyf = $subslice(g.font.glyf, g0, g1);
			ne = ((((u16(glyf, 0) << 16 >> 16)) >> 0));
			boundsXMin = ((((u16(glyf, 2) << 16 >> 16)) >> 0));
			boundsYMax = ((((u16(glyf, 8) << 16 >> 16)) >> 0));
		}
		_tmp$6 = $clone(g.font.unscaledHMetric(i), HMetric);
		_tmp$7 = 0;
		uhm = $clone(_tmp$6, HMetric);
		pp1x = _tmp$7;
		uvm = $clone(g.font.unscaledVMetric(i, boundsYMax), VMetric);
		arrayType$7.copy(g.phantomPoints, $toNativeArray($kindStruct, [new Point.ptr(boundsXMin - uhm.LeftSideBearing >> 0, 0, 0), new Point.ptr((boundsXMin - uhm.LeftSideBearing >> 0) + uhm.AdvanceWidth >> 0, 0, 0), new Point.ptr((_q = uhm.AdvanceWidth / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), boundsYMax + uvm.TopSideBearing >> 0, 0), new Point.ptr((_q$1 = uhm.AdvanceWidth / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), (boundsYMax + uvm.TopSideBearing >> 0) - uvm.AdvanceHeight >> 0, 0)]));
		if (glyf.$length === 0) {
			g.addPhantomsAndScale(g.Points.$length, g.Points.$length, true, true);
			$copySlice(new sliceType$3(g.phantomPoints), $subslice(g.Points, (g.Points.$length - 4 >> 0)));
			g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
			err = $ifaceNil;
			return err;
		}
		if (ne < 0) {
			if (!((ne === -1))) {
				err = new UnsupportedError("negative number of contours");
				return err;
			}
			pp1x = g.font.scale($imul(g.scale, ((boundsXMin - uhm.LeftSideBearing >> 0))));
			err$1 = g.loadCompound(recursion, $clone(uhm, HMetric), i, glyf, useMyMetrics);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			}
		} else {
			_tmp$8 = g.Points.$length;
			_tmp$9 = g.Ends.$length;
			np0 = _tmp$8;
			ne0 = _tmp$9;
			program = g.loadSimple(glyf, ne);
			g.addPhantomsAndScale(np0, np0, true, true);
			pp1x = (x = g.Points, x$1 = g.Points.$length - 4 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).X;
			if (!((g.hinting === 0))) {
				if (!((program.$length === 0))) {
					err$2 = g.hinter.run(program, $subslice(g.Points, np0), $subslice(g.Unhinted, np0), $subslice(g.InFontUnits, np0), $subslice(g.Ends, ne0));
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						err = err$2;
						return err;
					}
				}
				g.InFontUnits = $subslice(g.InFontUnits, 0, (g.InFontUnits.$length - 4 >> 0));
				g.Unhinted = $subslice(g.Unhinted, 0, (g.Unhinted.$length - 4 >> 0));
			}
			if (useMyMetrics) {
				$copySlice(new sliceType$3(g.phantomPoints), $subslice(g.Points, (g.Points.$length - 4 >> 0)));
			}
			g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
			if (!((np0 === 0))) {
				i$1 = ne0;
				while (true) {
					if (!(i$1 < g.Ends.$length)) { break; }
					(x$3 = g.Ends, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1] = ((x$2 = g.Ends, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1])) + (np0) >> 0)));
					i$1 = i$1 + (1) >> 0;
				}
			}
		}
		if (useMyMetrics && !g.metricsSet) {
			g.metricsSet = true;
			g.pp1x = pp1x;
		}
		err = $ifaceNil;
		return err;
	};
	GlyphBuf.prototype.load = function(recursion, i, useMyMetrics) { return this.$val.load(recursion, i, useMyMetrics); };
	GlyphBuf.ptr.prototype.loadSimple = function(glyf, ne) {
		var c, count, dx, dy, f, f$1, g, glyf, i, i$1, i$2, i$3, instrLen, ne, np0, np1, offset, program, x, x$1, x$2, x$3, x$4, x$5, x$6, y;
		program = sliceType$6.nil;
		g = this;
		offset = 10;
		i = 0;
		while (true) {
			if (!(i < ne)) { break; }
			g.Ends = $append(g.Ends, 1 + ((u16(glyf, offset) >> 0)) >> 0);
			offset = offset + (2) >> 0;
			i = i + (1) >> 0;
		}
		instrLen = ((u16(glyf, offset) >> 0));
		offset = offset + (2) >> 0;
		program = $subslice(glyf, offset, (offset + instrLen >> 0));
		offset = offset + (instrLen) >> 0;
		if (ne === 0) {
			program = program;
			return program;
		}
		np0 = g.Points.$length;
		np1 = np0 + ((x = g.Ends, x$1 = g.Ends.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))) >> 0;
		i$1 = np0;
		while (true) {
			if (!(i$1 < np1)) { break; }
			c = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) >>> 0));
			offset = offset + (1) >> 0;
			g.Points = $append(g.Points, new Point.ptr(0, 0, c));
			i$1 = i$1 + (1) >> 0;
			if (!((((c & 8) >>> 0) === 0))) {
				count = ((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]);
				offset = offset + (1) >> 0;
				while (true) {
					if (!(count > 0)) { break; }
					g.Points = $append(g.Points, new Point.ptr(0, 0, c));
					i$1 = i$1 + (1) >> 0;
					count = count - (1) << 24 >>> 24;
				}
			}
		}
		x$2 = 0;
		i$2 = np0;
		while (true) {
			if (!(i$2 < np1)) { break; }
			f = (x$3 = g.Points, ((i$2 < 0 || i$2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$2])).Flags;
			if (!((((f & 2) >>> 0) === 0))) {
				dx = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) << 16 >> 16));
				offset = offset + (1) >> 0;
				if (((f & 16) >>> 0) === 0) {
					x$2 = x$2 - (dx) << 16 >> 16;
				} else {
					x$2 = x$2 + (dx) << 16 >> 16;
				}
			} else if (((f & 16) >>> 0) === 0) {
				x$2 = x$2 + (((u16(glyf, offset) << 16 >> 16))) << 16 >> 16;
				offset = offset + (2) >> 0;
			}
			(x$4 = g.Points, ((i$2 < 0 || i$2 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$2])).X = ((x$2 >> 0));
			i$2 = i$2 + (1) >> 0;
		}
		y = 0;
		i$3 = np0;
		while (true) {
			if (!(i$3 < np1)) { break; }
			f$1 = (x$5 = g.Points, ((i$3 < 0 || i$3 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$3])).Flags;
			if (!((((f$1 & 4) >>> 0) === 0))) {
				dy = ((((offset < 0 || offset >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + offset]) << 16 >> 16));
				offset = offset + (1) >> 0;
				if (((f$1 & 32) >>> 0) === 0) {
					y = y - (dy) << 16 >> 16;
				} else {
					y = y + (dy) << 16 >> 16;
				}
			} else if (((f$1 & 32) >>> 0) === 0) {
				y = y + (((u16(glyf, offset) << 16 >> 16))) << 16 >> 16;
				offset = offset + (2) >> 0;
			}
			(x$6 = g.Points, ((i$3 < 0 || i$3 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$3])).Y = ((y >> 0));
			i$3 = i$3 + (1) >> 0;
		}
		program = program;
		return program;
	};
	GlyphBuf.prototype.loadSimple = function(glyf, ne) { return this.$val.loadSimple(glyf, ne); };
	GlyphBuf.ptr.prototype.loadCompound = function(recursion, uhm, i, glyf, useMyMetrics) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, component, componentUMM, dx, dy, ends, err, err$1, flags, g, glyf, hasTransform, i, i$1, i$2, instrLen, j, j$1, j$2, ne0, newX, newY, np0, np0$1, offset, p, p$1, points, program, recursion, savedPP, transform, uhm, useMyMetrics, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		g = this;
		_tmp = g.Points.$length;
		_tmp$1 = g.Ends.$length;
		np0 = _tmp;
		ne0 = _tmp$1;
		offset = 10;
		while (true) {
			flags = u16(glyf, offset);
			component = ((u16(glyf, offset + 2 >> 0) << 16 >>> 16));
			_tmp$2 = 0;
			_tmp$3 = 0;
			_tmp$4 = arrayType$9.zero();
			_tmp$5 = false;
			dx = _tmp$2;
			dy = _tmp$3;
			transform = $clone(_tmp$4, arrayType$9);
			hasTransform = _tmp$5;
			if (!((((flags & 1) >>> 0) === 0))) {
				dx = ((((u16(glyf, offset + 4 >> 0) << 16 >> 16)) >> 0));
				dy = ((((u16(glyf, offset + 6 >> 0) << 16 >> 16)) >> 0));
				offset = offset + (8) >> 0;
			} else {
				dx = (((((((x = offset + 4 >> 0, ((x < 0 || x >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + x])) << 24 >> 24)) << 16 >> 16)) >> 0));
				dy = (((((((x$1 = offset + 5 >> 0, ((x$1 < 0 || x$1 >= glyf.$length) ? ($throwRuntimeError("index out of range"), undefined) : glyf.$array[glyf.$offset + x$1])) << 24 >> 24)) << 16 >> 16)) >> 0));
				offset = offset + (6) >> 0;
			}
			if (((flags & 2) >>> 0) === 0) {
				return new UnsupportedError("compound glyph transform vector");
			}
			if (!((((flags & 200) >>> 0) === 0))) {
				hasTransform = true;
				if (!((((flags & 8) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[3] = transform[0];
					offset = offset + (2) >> 0;
				} else if (!((((flags & 64) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[3] = ((u16(glyf, offset + 2 >> 0) << 16 >> 16));
					offset = offset + (4) >> 0;
				} else if (!((((flags & 128) >>> 0) === 0))) {
					transform[0] = ((u16(glyf, offset + 0 >> 0) << 16 >> 16));
					transform[1] = ((u16(glyf, offset + 2 >> 0) << 16 >> 16));
					transform[2] = ((u16(glyf, offset + 4 >> 0) << 16 >> 16));
					transform[3] = ((u16(glyf, offset + 6 >> 0) << 16 >> 16));
					offset = offset + (8) >> 0;
				}
			}
			savedPP = $clone(g.phantomPoints, arrayType$7);
			np0$1 = g.Points.$length;
			componentUMM = useMyMetrics && (!((((flags & 512) >>> 0) === 0)));
			err = g.load(recursion + 1 >>> 0, component, componentUMM);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			if (((flags & 512) >>> 0) === 0) {
				arrayType$7.copy(g.phantomPoints, savedPP);
			}
			if (hasTransform) {
				j = np0$1;
				while (true) {
					if (!(j < g.Points.$length)) { break; }
					p = (x$2 = g.Points, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j]));
					newX = (0 + (((x$3 = $shiftRightInt64(((x$4 = $mul64((new $Int64(0, p.X)), (new $Int64(0, transform[0]))), new $Int64(x$4.$high + 0, x$4.$low + 8192))), 14), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0)) >> 0) + (((x$5 = $shiftRightInt64(((x$6 = $mul64((new $Int64(0, p.Y)), (new $Int64(0, transform[2]))), new $Int64(x$6.$high + 0, x$6.$low + 8192))), 14), x$5.$low + ((x$5.$high >> 31) * 4294967296)) >> 0)) >> 0;
					newY = (0 + (((x$7 = $shiftRightInt64(((x$8 = $mul64((new $Int64(0, p.X)), (new $Int64(0, transform[1]))), new $Int64(x$8.$high + 0, x$8.$low + 8192))), 14), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0)) >> 0) + (((x$9 = $shiftRightInt64(((x$10 = $mul64((new $Int64(0, p.Y)), (new $Int64(0, transform[3]))), new $Int64(x$10.$high + 0, x$10.$low + 8192))), 14), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0)) >> 0;
					_tmp$6 = newX;
					_tmp$7 = newY;
					p.X = _tmp$6;
					p.Y = _tmp$7;
					j = j + (1) >> 0;
				}
			}
			dx = g.font.scale($imul(g.scale, dx));
			dy = g.font.scale($imul(g.scale, dy));
			if (!((((flags & 4) >>> 0) === 0))) {
				dx = (((dx + 32 >> 0)) & ~63) >> 0;
				dy = (((dy + 32 >> 0)) & ~63) >> 0;
			}
			j$1 = np0$1;
			while (true) {
				if (!(j$1 < g.Points.$length)) { break; }
				p$1 = (x$11 = g.Points, ((j$1 < 0 || j$1 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + j$1]));
				p$1.X = p$1.X + (dx) >> 0;
				p$1.Y = p$1.Y + (dy) >> 0;
				j$1 = j$1 + (1) >> 0;
			}
			if (((flags & 32) >>> 0) === 0) {
				break;
			}
		}
		instrLen = 0;
		if (!((g.hinting === 0)) && (offset + 2 >> 0) <= glyf.$length) {
			instrLen = ((u16(glyf, offset) >> 0));
			offset = offset + (2) >> 0;
		}
		g.addPhantomsAndScale(np0, g.Points.$length, false, instrLen > 0);
		_tmp$8 = $subslice(g.Points, np0);
		_tmp$9 = $subslice(g.Ends, ne0);
		points = _tmp$8;
		ends = _tmp$9;
		g.Points = $subslice(g.Points, 0, (g.Points.$length - 4 >> 0));
		_ref = points;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j$2 = _i;
			((j$2 < 0 || j$2 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + j$2]).Flags = (((j$2 < 0 || j$2 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + j$2]).Flags & ~(192)) >>> 0;
			_i++;
		}
		if (instrLen === 0) {
			if (!g.metricsSet) {
				$copySlice(new sliceType$3(g.phantomPoints), $subslice(points, (points.$length - 4 >> 0)));
			}
			return $ifaceNil;
		}
		program = $subslice(glyf, offset, (offset + instrLen >> 0));
		if (!((np0 === 0))) {
			_ref$1 = ends;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				((i$1 < 0 || i$1 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$1] = (((i$1 < 0 || i$1 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$1]) - (np0) >> 0));
				_i$1++;
			}
		}
		g.tmp = $appendSlice($subslice(g.tmp, 0, 0), points);
		err$1 = g.hinter.run(program, points, g.tmp, g.tmp, ends);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		if (!((np0 === 0))) {
			_ref$2 = ends;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				i$2 = _i$2;
				((i$2 < 0 || i$2 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$2] = (((i$2 < 0 || i$2 >= ends.$length) ? ($throwRuntimeError("index out of range"), undefined) : ends.$array[ends.$offset + i$2]) + (np0) >> 0));
				_i$2++;
			}
		}
		if (!g.metricsSet) {
			$copySlice(new sliceType$3(g.phantomPoints), $subslice(points, (points.$length - 4 >> 0)));
		}
		return $ifaceNil;
	};
	GlyphBuf.prototype.loadCompound = function(recursion, uhm, i, glyf, useMyMetrics) { return this.$val.loadCompound(recursion, uhm, i, glyf, useMyMetrics); };
	GlyphBuf.ptr.prototype.addPhantomsAndScale = function(np0, np1, simple, adjust) {
		var adjust, dx, g, i, i$1, np0, np1, p, p$1, pp1x, simple, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		g = this;
		g.Points = $appendSlice(g.Points, new sliceType$3(g.phantomPoints));
		if (simple && !((g.hinting === 0))) {
			g.InFontUnits = $appendSlice(g.InFontUnits, $subslice(g.Points, np1));
		}
		i = np1;
		while (true) {
			if (!(i < g.Points.$length)) { break; }
			p = (x = g.Points, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
			p.X = g.font.scale($imul(g.scale, p.X));
			p.Y = g.font.scale($imul(g.scale, p.Y));
			i = i + (1) >> 0;
		}
		if (g.hinting === 0) {
			return;
		}
		if (adjust) {
			pp1x = (x$1 = g.Points, x$2 = g.Points.$length - 4 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])).X;
			dx = (((((pp1x + 32 >> 0)) & ~63) >> 0)) - pp1x >> 0;
			if (!((dx === 0))) {
				i$1 = np0;
				while (true) {
					if (!(i$1 < g.Points.$length)) { break; }
					(x$4 = g.Points, ((i$1 < 0 || i$1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$1])).X = (x$3 = g.Points, ((i$1 < 0 || i$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$1])).X + (dx) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
			}
		}
		if (simple) {
			g.Unhinted = $appendSlice(g.Unhinted, $subslice(g.Points, np1));
		}
		p$1 = (x$5 = g.Points, x$6 = g.Points.$length - 3 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
		p$1.X = (((p$1.X + 32 >> 0)) & ~63) >> 0;
		p$1 = (x$7 = g.Points, x$8 = g.Points.$length - 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
		p$1.Y = (((p$1.Y + 32 >> 0)) & ~63) >> 0;
	};
	GlyphBuf.prototype.addPhantomsAndScale = function(np0, np1, simple, adjust) { return this.$val.addPhantomsAndScale(np0, np1, simple, adjust); };
	resetTwilightPoints = function(f, p) {
		var _i, _ref, f, i, n, p;
		n = ((f.maxTwilightPoints >> 0)) + 4 >> 0;
		if (n <= p.$capacity) {
			p = $subslice(p, 0, n);
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				Point.copy(((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]), new Point.ptr(0, 0, 0));
				_i++;
			}
		} else {
			p = $makeSlice(sliceType$3, n);
		}
		return p;
	};
	hinter.ptr.prototype.init = function(f, scale) {
		var _entry, _i, _keys, _ref, _tmp, _tmp$1, err, err$1, f, h, k, rescale, scale, x, x$1;
		h = this;
		h.points[0][0] = resetTwilightPoints(f, h.points[0][0]);
		h.points[0][1] = resetTwilightPoints(f, h.points[0][1]);
		h.points[0][2] = resetTwilightPoints(f, h.points[0][2]);
		rescale = !((h.scale === scale));
		if (!(h.font === f)) {
			_tmp = f;
			_tmp$1 = true;
			h.font = _tmp;
			rescale = _tmp$1;
			if (h.functions === false) {
				h.functions = {};
			} else {
				_ref = h.functions;
				_i = 0;
				_keys = $keys(_ref);
				while (true) {
					if (!(_i < _keys.length)) { break; }
					_entry = _ref[_keys[_i]];
					if (_entry === undefined) {
						_i++;
						continue;
					}
					k = _entry.k;
					delete h.functions[$Int32.keyFor(k)];
					_i++;
				}
			}
			x = ((f.maxStackElements >> 0));
			if (x > h.stack.$length) {
				x = x + (255) >> 0;
				x = (x & ~(255)) >> 0;
				h.stack = $makeSlice(sliceType$4, x);
			}
			x$1 = ((f.maxStorage >> 0));
			if (x$1 > h.store.$length) {
				x$1 = x$1 + (15) >> 0;
				x$1 = (x$1 & ~(15)) >> 0;
				h.store = $makeSlice(sliceType$4, x$1);
			}
			if (!((f.fpgm.$length === 0))) {
				err = h.run(f.fpgm, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
		}
		if (rescale) {
			h.scale = scale;
			h.scaledCVTInitialized = false;
			graphicsState.copy(h.defaultGS, globalDefaultGS);
			if (!((f.prep.$length === 0))) {
				err$1 = h.run(f.prep, sliceType$3.nil, sliceType$3.nil, sliceType$3.nil, sliceType$2.nil);
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return err$1;
				}
				graphicsState.copy(h.defaultGS, h.gs);
				arrayType.copy(h.defaultGS.pv, globalDefaultGS.pv);
				arrayType.copy(h.defaultGS.fv, globalDefaultGS.fv);
				arrayType.copy(h.defaultGS.dv, globalDefaultGS.dv);
				arrayType$1.copy(h.defaultGS.rp, globalDefaultGS.rp);
				arrayType$1.copy(h.defaultGS.zp, globalDefaultGS.zp);
				h.defaultGS.loop = globalDefaultGS.loop;
			}
		}
		return $ifaceNil;
	};
	hinter.prototype.init = function(f, scale) { return this.$val.init(f, scale); };
	hinter.ptr.prototype.run = function(program, pCurrent, pUnhinted, pInFontUnits, ends) {
		var _1, _2, _3, _4, _5, _entry, _i, _index, _index$1, _index$2, _index$3, _index$4, _key, _q, _q$1, _q$2, _q$3, _q$4, _q$5, _q$6, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, a, a0, a1, absDisc, absDotP, b, b0, b1, c, c$1, callStack, callStackTop, contour, curDist, curDist$1, curDist$2, curP, curRange, curTouched, cvtDist, d, d$1, d$2, d$3, d$4, d$5, dax, day, dbx, dby, depth, discriminant, distance, distance$1, distance$2, distance$3, distance$4, dotProduct$1, dx, dx$1, dx$2, dy, dy$1, dy$2, end, ends, f, firstTouched, h, i, i$1, i$10, i$11, i$12, i$13, i$14, i$15, i$16, i$2, i$3, i$4, i$5, i$6, i$7, i$8, i$9, iupY, j, j$1, j$2, j0, j1, limit, mask, move, n, newDist, ok, ok$1, ok$2, ok$3, ok$4, ok$5, oldDist, oldDist$1, oldDist$2, oldDist$3, oldP, oldRange, opcode, p, p$1, p$10, p$11, p$12, p$13, p$14, p$15, p$16, p$17, p$18, p$2, p$3, p$4, p$5, p$6, p$7, p$8, p$9, p0, p0$1, p1, p1$1, p1$2, p2, pCurrent, pInFontUnits, pUnhinted, pc, pointType$1, points, points$1, ppem, prevEnd, program, pt, pt$1, q, q$1, q$2, q$3, q$4, ref, ref$1, ref$2, ref$3, res, rx, ry, scale, startPC, steps, top, twilight, v, v$1, val, width, x, x$1, x$10, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$11, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$12, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127, x$128, x$129, x$13, x$130, x$131, x$132, x$133, x$134, x$135, x$136, x$137, x$138, x$139, x$14, x$140, x$141, x$142, x$143, x$144, x$145, x$146, x$147, x$148, x$149, x$15, x$150, x$151, x$152, x$153, x$154, x$155, x$156, x$157, x$158, x$159, x$16, x$160, x$161, x$162, x$163, x$164, x$165, x$166, x$167, x$168, x$169, x$17, x$170, x$171, x$172, x$173, x$174, x$175, x$176, x$177, x$178, x$179, x$18, x$180, x$181, x$182, x$183, x$184, x$185, x$186, x$187, x$188, x$189, x$19, x$190, x$191, x$192, x$193, x$194, x$195, x$196, x$197, x$198, x$199, x$2, x$20, x$200, x$201, x$202, x$203, x$204, x$205, x$206, x$207, x$208, x$209, x$21, x$210, x$211, x$212, x$213, x$214, x$215, x$216, x$217, x$218, x$219, x$22, x$220, x$221, x$222, x$223, x$224, x$225, x$226, x$227, x$228, x$229, x$23, x$230, x$231, x$232, x$233, x$234, x$235, x$236, x$237, x$238, x$239, x$24, x$240, x$241, x$242, x$243, x$244, x$245, x$246, x$247, x$248, x$249, x$25, x$250, x$251, x$252, x$253, x$254, x$255, x$256, x$257, x$258, x$259, x$26, x$260, x$261, x$262, x$263, x$264, x$265, x$266, x$267, x$268, x$269, x$27, x$270, x$271, x$272, x$273, x$274, x$275, x$276, x$277, x$278, x$279, x$28, x$280, x$281, x$282, x$283, x$284, x$285, x$286, x$287, x$288, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$8, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$9, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, y, zonePointer, zonePointer$1, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		h = this;
		graphicsState.copy(h.gs, h.defaultGS);
		h.points[1][0] = pCurrent;
		h.points[1][1] = pUnhinted;
		h.points[1][2] = pInFontUnits;
		h.ends = ends;
		if (program.$length > 50000) {
			$s = -1; return errors.New("truetype: hinting: too many instructions");
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		steps = _tmp;
		pc = _tmp$1;
		top = _tmp$2;
		opcode = 0;
		callStack = arrayType$10.zero();
		callStackTop = 0;
		/* while (true) { */ case 1:
			/* if (!(0 <= pc && pc < program.$length)) { break; } */ if(!(0 <= pc && pc < program.$length)) { $s = 2; continue; }
			steps = steps + (1) >> 0;
			if (steps === 100000) {
				$s = -1; return errors.New("truetype: hinting: too many steps");
			}
			opcode = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
			if (top < ((((opcode < 0 || opcode >= popCount.length) ? ($throwRuntimeError("index out of range"), undefined) : popCount[opcode]) >> 0))) {
				$s = -1; return errors.New("truetype: hinting: stack underflow");
			}
				_1 = opcode;
				/* */ if (_1 === (0)) { $s = 4; continue; }
				/* */ if (_1 === (1)) { $s = 5; continue; }
				/* */ if (_1 === (2)) { $s = 6; continue; }
				/* */ if (_1 === (3)) { $s = 7; continue; }
				/* */ if (_1 === (4)) { $s = 8; continue; }
				/* */ if (_1 === (5)) { $s = 9; continue; }
				/* */ if ((_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { $s = 10; continue; }
				/* */ if (_1 === (10)) { $s = 11; continue; }
				/* */ if (_1 === (11)) { $s = 12; continue; }
				/* */ if (_1 === (12)) { $s = 13; continue; }
				/* */ if (_1 === (13)) { $s = 14; continue; }
				/* */ if (_1 === (14)) { $s = 15; continue; }
				/* */ if (_1 === (15)) { $s = 16; continue; }
				/* */ if ((_1 === (16)) || (_1 === (17)) || (_1 === (18))) { $s = 17; continue; }
				/* */ if ((_1 === (19)) || (_1 === (20)) || (_1 === (21))) { $s = 18; continue; }
				/* */ if (_1 === (22)) { $s = 19; continue; }
				/* */ if (_1 === (23)) { $s = 20; continue; }
				/* */ if (_1 === (24)) { $s = 21; continue; }
				/* */ if (_1 === (25)) { $s = 22; continue; }
				/* */ if (_1 === (26)) { $s = 23; continue; }
				/* */ if (_1 === (27)) { $s = 24; continue; }
				/* */ if (_1 === (28)) { $s = 25; continue; }
				/* */ if (_1 === (29)) { $s = 26; continue; }
				/* */ if (_1 === (30)) { $s = 27; continue; }
				/* */ if (_1 === (31)) { $s = 28; continue; }
				/* */ if (_1 === (32)) { $s = 29; continue; }
				/* */ if (_1 === (33)) { $s = 30; continue; }
				/* */ if (_1 === (34)) { $s = 31; continue; }
				/* */ if (_1 === (35)) { $s = 32; continue; }
				/* */ if (_1 === (36)) { $s = 33; continue; }
				/* */ if ((_1 === (37)) || (_1 === (38))) { $s = 34; continue; }
				/* */ if (_1 === (39)) { $s = 35; continue; }
				/* */ if (_1 === (41)) { $s = 36; continue; }
				/* */ if ((_1 === (42)) || (_1 === (43))) { $s = 37; continue; }
				/* */ if (_1 === (44)) { $s = 38; continue; }
				/* */ if (_1 === (45)) { $s = 39; continue; }
				/* */ if ((_1 === (46)) || (_1 === (47))) { $s = 40; continue; }
				/* */ if ((_1 === (48)) || (_1 === (49))) { $s = 41; continue; }
				/* */ if ((_1 === (50)) || (_1 === (51))) { $s = 42; continue; }
				/* */ if ((_1 === (52)) || (_1 === (53))) { $s = 43; continue; }
				/* */ if ((_1 === (54)) || (_1 === (55))) { $s = 44; continue; }
				/* */ if (_1 === (56)) { $s = 45; continue; }
				/* */ if (_1 === (57)) { $s = 46; continue; }
				/* */ if ((_1 === (58)) || (_1 === (59))) { $s = 47; continue; }
				/* */ if (_1 === (60)) { $s = 48; continue; }
				/* */ if (_1 === (61)) { $s = 49; continue; }
				/* */ if ((_1 === (62)) || (_1 === (63))) { $s = 50; continue; }
				/* */ if (_1 === (64)) { $s = 51; continue; }
				/* */ if (_1 === (65)) { $s = 52; continue; }
				/* */ if (_1 === (66)) { $s = 53; continue; }
				/* */ if (_1 === (67)) { $s = 54; continue; }
				/* */ if (_1 === (68)) { $s = 55; continue; }
				/* */ if (_1 === (69)) { $s = 56; continue; }
				/* */ if ((_1 === (70)) || (_1 === (71))) { $s = 57; continue; }
				/* */ if (_1 === (72)) { $s = 58; continue; }
				/* */ if ((_1 === (73)) || (_1 === (74))) { $s = 59; continue; }
				/* */ if ((_1 === (75)) || (_1 === (76))) { $s = 60; continue; }
				/* */ if ((_1 === (77)) || (_1 === (78))) { $s = 61; continue; }
				/* */ if (_1 === (79)) { $s = 62; continue; }
				/* */ if (_1 === (80)) { $s = 63; continue; }
				/* */ if (_1 === (81)) { $s = 64; continue; }
				/* */ if (_1 === (82)) { $s = 65; continue; }
				/* */ if (_1 === (83)) { $s = 66; continue; }
				/* */ if (_1 === (84)) { $s = 67; continue; }
				/* */ if (_1 === (85)) { $s = 68; continue; }
				/* */ if ((_1 === (86)) || (_1 === (87))) { $s = 69; continue; }
				/* */ if (_1 === (88)) { $s = 70; continue; }
				/* */ if (_1 === (89)) { $s = 71; continue; }
				/* */ if (_1 === (90)) { $s = 72; continue; }
				/* */ if (_1 === (91)) { $s = 73; continue; }
				/* */ if (_1 === (92)) { $s = 74; continue; }
				/* */ if (_1 === (93)) { $s = 75; continue; }
				/* */ if (_1 === (94)) { $s = 76; continue; }
				/* */ if (_1 === (95)) { $s = 77; continue; }
				/* */ if (_1 === (96)) { $s = 78; continue; }
				/* */ if (_1 === (97)) { $s = 79; continue; }
				/* */ if (_1 === (98)) { $s = 80; continue; }
				/* */ if (_1 === (99)) { $s = 81; continue; }
				/* */ if (_1 === (100)) { $s = 82; continue; }
				/* */ if (_1 === (101)) { $s = 83; continue; }
				/* */ if (_1 === (102)) { $s = 84; continue; }
				/* */ if (_1 === (103)) { $s = 85; continue; }
				/* */ if ((_1 === (104)) || (_1 === (105)) || (_1 === (106)) || (_1 === (107))) { $s = 86; continue; }
				/* */ if ((_1 === (108)) || (_1 === (109)) || (_1 === (110)) || (_1 === (111))) { $s = 87; continue; }
				/* */ if (_1 === (112)) { $s = 88; continue; }
				/* */ if ((_1 === (113)) || (_1 === (114)) || (_1 === (115)) || (_1 === (116)) || (_1 === (117))) { $s = 89; continue; }
				/* */ if ((_1 === (118)) || (_1 === (119))) { $s = 90; continue; }
				/* */ if (_1 === (120)) { $s = 91; continue; }
				/* */ if (_1 === (121)) { $s = 92; continue; }
				/* */ if (_1 === (122)) { $s = 93; continue; }
				/* */ if (_1 === (124)) { $s = 94; continue; }
				/* */ if (_1 === (125)) { $s = 95; continue; }
				/* */ if ((_1 === (126)) || (_1 === (127))) { $s = 96; continue; }
				/* */ if (_1 === (128)) { $s = 97; continue; }
				/* */ if ((_1 === (129)) || (_1 === (130))) { $s = 98; continue; }
				/* */ if (_1 === (133)) { $s = 99; continue; }
				/* */ if ((_1 === (134)) || (_1 === (135))) { $s = 100; continue; }
				/* */ if (_1 === (136)) { $s = 101; continue; }
				/* */ if (_1 === (137)) { $s = 102; continue; }
				/* */ if (_1 === (138)) { $s = 103; continue; }
				/* */ if (_1 === (139)) { $s = 104; continue; }
				/* */ if (_1 === (140)) { $s = 105; continue; }
				/* */ if (_1 === (141)) { $s = 106; continue; }
				/* */ if (_1 === (142)) { $s = 107; continue; }
				/* */ $s = 108; continue;
				/* if (_1 === (0)) { */ case 4:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (1)) { */ case 5:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if (_1 === (2)) { */ case 6:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [0, 16384]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (3)) { */ case 7:
					arrayType.copy(h.gs.pv, $toNativeArray($kindInt16, [16384, 0]));
					arrayType.copy(h.gs.dv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if (_1 === (4)) { */ case 8:
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [0, 16384]));
					$s = 109; continue;
				/* } else if (_1 === (5)) { */ case 9:
					arrayType.copy(h.gs.fv, $toNativeArray($kindInt16, [16384, 0]));
					$s = 109; continue;
				/* } else if ((_1 === (6)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9))) { */ case 10:
					top = top - (2) >> 0;
					p1 = h.point(0, 0, (x = h.stack, x$1 = top + 0 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
					p2 = h.point(0, 0, (x$2 = h.stack, x$3 = top + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])));
					if (p1 === ptrType$3.nil || p2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					dx = (((p1.X - p2.X >> 0) << 16 >> 16));
					dy = (((p1.Y - p2.Y >> 0) << 16 >> 16));
					if ((dx === 0) && (dy === 0)) {
						dx = 16384;
					} else if (!((((opcode & 1) >>> 0) === 0))) {
						_tmp$3 = -dy;
						_tmp$4 = dx;
						dx = _tmp$3;
						dy = _tmp$4;
					}
					v = $clone(normalize(dx, dy), arrayType);
					if (opcode < 8) {
						arrayType.copy(h.gs.pv, v);
						arrayType.copy(h.gs.dv, v);
					} else {
						arrayType.copy(h.gs.fv, v);
					}
					$s = 109; continue;
				/* } else if (_1 === (10)) { */ case 11:
					top = top - (2) >> 0;
					arrayType.copy(h.gs.pv, normalize((((x$4 = h.stack, ((top < 0 || top >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + top])) << 16 >> 16)), (((x$5 = h.stack, x$6 = top + 1 >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6])) << 16 >> 16))));
					arrayType.copy(h.gs.dv, h.gs.pv);
					$s = 109; continue;
				/* } else if (_1 === (11)) { */ case 12:
					top = top - (2) >> 0;
					arrayType.copy(h.gs.fv, normalize((((x$7 = h.stack, ((top < 0 || top >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + top])) << 16 >> 16)), (((x$8 = h.stack, x$9 = top + 1 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])) << 16 >> 16))));
					$s = 109; continue;
				/* } else if (_1 === (12)) { */ case 13:
					if ((top + 1 >> 0) >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$10 = h.stack, x$11 = top + 0 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = ((h.gs.pv[0] >> 0))));
					(x$12 = h.stack, x$13 = top + 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13] = ((h.gs.pv[1] >> 0))));
					top = top + (2) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (13)) { */ case 14:
					if ((top + 1 >> 0) >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$14 = h.stack, x$15 = top + 0 >> 0, ((x$15 < 0 || x$15 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + x$15] = ((h.gs.fv[0] >> 0))));
					(x$16 = h.stack, x$17 = top + 1 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17] = ((h.gs.fv[1] >> 0))));
					top = top + (2) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (14)) { */ case 15:
					arrayType.copy(h.gs.fv, h.gs.pv);
					$s = 109; continue;
				/* } else if (_1 === (15)) { */ case 16:
					top = top - (5) >> 0;
					p = h.point(2, 0, (x$18 = h.stack, x$19 = top + 0 >> 0, ((x$19 < 0 || x$19 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + x$19])));
					a0 = h.point(1, 0, (x$20 = h.stack, x$21 = top + 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21])));
					a1 = h.point(1, 0, (x$22 = h.stack, x$23 = top + 2 >> 0, ((x$23 < 0 || x$23 >= x$22.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$22.$array[x$22.$offset + x$23])));
					b0 = h.point(0, 0, (x$24 = h.stack, x$25 = top + 3 >> 0, ((x$25 < 0 || x$25 >= x$24.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$24.$array[x$24.$offset + x$25])));
					b1 = h.point(0, 0, (x$26 = h.stack, x$27 = top + 4 >> 0, ((x$27 < 0 || x$27 >= x$26.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$26.$array[x$26.$offset + x$27])));
					if (p === ptrType$3.nil || a0 === ptrType$3.nil || a1 === ptrType$3.nil || b0 === ptrType$3.nil || b1 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					dbx = b1.X - b0.X >> 0;
					dby = b1.Y - b0.Y >> 0;
					dax = a1.X - a0.X >> 0;
					day = a1.Y - a0.Y >> 0;
					dx$1 = b0.X - a0.X >> 0;
					dy$1 = b0.Y - a0.Y >> 0;
					discriminant = (x$28 = mulDiv((new $Int64(0, dax)), (new $Int64(0, -dby)), new $Int64(0, 64)), x$29 = mulDiv((new $Int64(0, day)), (new $Int64(0, dbx)), new $Int64(0, 64)), new $Int64(x$28.$high + x$29.$high, x$28.$low + x$29.$low));
					dotProduct$1 = (x$30 = mulDiv((new $Int64(0, dax)), (new $Int64(0, dbx)), new $Int64(0, 64)), x$31 = mulDiv((new $Int64(0, day)), (new $Int64(0, dby)), new $Int64(0, 64)), new $Int64(x$30.$high + x$31.$high, x$30.$low + x$31.$low));
					_tmp$5 = discriminant;
					_tmp$6 = dotProduct$1;
					absDisc = _tmp$5;
					absDotP = _tmp$6;
					if ((absDisc.$high < 0 || (absDisc.$high === 0 && absDisc.$low < 0))) {
						absDisc = new $Int64(-absDisc.$high, -absDisc.$low);
					}
					if ((absDotP.$high < 0 || (absDotP.$high === 0 && absDotP.$low < 0))) {
						absDotP = new $Int64(-absDotP.$high, -absDotP.$low);
					}
					if ((x$32 = $mul64(new $Int64(0, 19), absDisc), (x$32.$high > absDotP.$high || (x$32.$high === absDotP.$high && x$32.$low > absDotP.$low)))) {
						val = (x$33 = mulDiv((new $Int64(0, dx$1)), (new $Int64(0, -dby)), new $Int64(0, 64)), x$34 = mulDiv((new $Int64(0, dy$1)), (new $Int64(0, dbx)), new $Int64(0, 64)), new $Int64(x$33.$high + x$34.$high, x$33.$low + x$34.$low));
						rx = mulDiv(val, (new $Int64(0, dax)), discriminant);
						ry = mulDiv(val, (new $Int64(0, day)), discriminant);
						p.X = a0.X + (((rx.$low + ((rx.$high >> 31) * 4294967296)) >> 0)) >> 0;
						p.Y = a0.Y + (((ry.$low + ((ry.$high >> 31) * 4294967296)) >> 0)) >> 0;
					} else {
						p.X = (_q = ((((a0.X + a1.X >> 0) + b0.X >> 0) + b1.X >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
						p.Y = (_q$1 = ((((a0.Y + a1.Y >> 0) + b0.Y >> 0) + b1.Y >> 0)) / 4, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					p.Flags = (p.Flags | (192)) >>> 0;
					$s = 109; continue;
				/* } else if ((_1 === (16)) || (_1 === (17)) || (_1 === (18))) { */ case 17:
					top = top - (1) >> 0;
					(x$36 = h.gs.rp, x$37 = opcode - 16 << 24 >>> 24, ((x$37 < 0 || x$37 >= x$36.length) ? ($throwRuntimeError("index out of range"), undefined) : x$36[x$37] = (x$35 = h.stack, ((top < 0 || top >= x$35.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$35.$array[x$35.$offset + top]))));
					$s = 109; continue;
				/* } else if ((_1 === (19)) || (_1 === (20)) || (_1 === (21))) { */ case 18:
					top = top - (1) >> 0;
					(x$39 = h.gs.zp, x$40 = opcode - 19 << 24 >>> 24, ((x$40 < 0 || x$40 >= x$39.length) ? ($throwRuntimeError("index out of range"), undefined) : x$39[x$40] = (x$38 = h.stack, ((top < 0 || top >= x$38.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$38.$array[x$38.$offset + top]))));
					$s = 109; continue;
				/* } else if (_1 === (22)) { */ case 19:
					top = top - (1) >> 0;
					h.gs.zp[0] = (x$41 = h.stack, ((top < 0 || top >= x$41.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$41.$array[x$41.$offset + top]));
					h.gs.zp[1] = (x$42 = h.stack, ((top < 0 || top >= x$42.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$42.$array[x$42.$offset + top]));
					h.gs.zp[2] = (x$43 = h.stack, ((top < 0 || top >= x$43.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$43.$array[x$43.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (23)) { */ case 20:
					top = top - (1) >> 0;
					if ((x$44 = h.stack, ((top < 0 || top >= x$44.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$44.$array[x$44.$offset + top])) < 0) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					h.gs.loop = (x$45 = h.stack, ((top < 0 || top >= x$45.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$45.$array[x$45.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (24)) { */ case 21:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 32;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (25)) { */ case 22:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 32;
					h.gs.roundThreshold = 32;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (26)) { */ case 23:
					top = top - (1) >> 0;
					h.gs.minDist = (((x$46 = h.stack, ((top < 0 || top >= x$46.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$46.$array[x$46.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (27)) { */ case 24:
					opcode = 1;
					/* goto ifelse */ $s = 110; continue;
					$s = 109; continue;
				/* } else if (_1 === (28)) { */ case 25:
					top = top - (1) >> 0;
					pc = pc + ((((x$47 = h.stack, ((top < 0 || top >= x$47.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$47.$array[x$47.$offset + top])) >> 0))) >> 0;
					/* continue; */ $s = 1; continue;
					$s = 109; continue;
				/* } else if (_1 === (29)) { */ case 26:
					top = top - (1) >> 0;
					h.gs.controlValueCutIn = (((x$48 = h.stack, ((top < 0 || top >= x$48.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$48.$array[x$48.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (30)) { */ case 27:
					top = top - (1) >> 0;
					h.gs.singleWidthCutIn = (((x$49 = h.stack, ((top < 0 || top >= x$49.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$49.$array[x$49.$offset + top])) >> 0));
					$s = 109; continue;
				/* } else if (_1 === (31)) { */ case 28:
					top = top - (1) >> 0;
					h.gs.singleWidth = h.font.scale($imul(h.scale, (((x$50 = h.stack, ((top < 0 || top >= x$50.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$50.$array[x$50.$offset + top])) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (32)) { */ case 29:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$53 = h.stack, ((top < 0 || top >= x$53.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$53.$array[x$53.$offset + top] = (x$51 = h.stack, x$52 = top - 1 >> 0, ((x$52 < 0 || x$52 >= x$51.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$51.$array[x$51.$offset + x$52]))));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (33)) { */ case 30:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (34)) { */ case 31:
					top = 0;
					$s = 109; continue;
				/* } else if (_1 === (35)) { */ case 32:
					_tmp$7 = (x$54 = h.stack, x$55 = top - 2 >> 0, ((x$55 < 0 || x$55 >= x$54.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$54.$array[x$54.$offset + x$55]));
					_tmp$8 = (x$56 = h.stack, x$57 = top - 1 >> 0, ((x$57 < 0 || x$57 >= x$56.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$56.$array[x$56.$offset + x$57]));
					(x$58 = h.stack, x$59 = top - 1 >> 0, ((x$59 < 0 || x$59 >= x$58.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$58.$array[x$58.$offset + x$59] = _tmp$7));
					(x$60 = h.stack, x$61 = top - 2 >> 0, ((x$61 < 0 || x$61 >= x$60.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$60.$array[x$60.$offset + x$61] = _tmp$8));
					$s = 109; continue;
				/* } else if (_1 === (36)) { */ case 33:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$62 = h.stack, ((top < 0 || top >= x$62.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$62.$array[x$62.$offset + top] = ((top >> 0))));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (37)) || (_1 === (38))) { */ case 34:
					x$65 = (((x$63 = h.stack, x$64 = top - 1 >> 0, ((x$64 < 0 || x$64 >= x$63.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$63.$array[x$63.$offset + x$64])) >> 0));
					if (x$65 <= 0 || x$65 >= top) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$68 = h.stack, x$69 = top - 1 >> 0, ((x$69 < 0 || x$69 >= x$68.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$68.$array[x$68.$offset + x$69] = (x$66 = h.stack, x$67 = (top - 1 >> 0) - x$65 >> 0, ((x$67 < 0 || x$67 >= x$66.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$66.$array[x$66.$offset + x$67]))));
					if (opcode === 38) {
						$copySlice($subslice(h.stack, ((top - 1 >> 0) - x$65 >> 0), (top - 1 >> 0)), $subslice(h.stack, (top - x$65 >> 0), top));
						top = top - (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (39)) { */ case 35:
					top = top - (2) >> 0;
					p$1 = h.point(1, 0, (x$70 = h.stack, ((top < 0 || top >= x$70.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$70.$array[x$70.$offset + top])));
					q = h.point(0, 0, (x$71 = h.stack, x$72 = top + 1 >> 0, ((x$72 < 0 || x$72 >= x$71.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$71.$array[x$71.$offset + x$72])));
					if (p$1 === ptrType$3.nil || q === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					d = (_q$2 = dotProduct(((q.X - p$1.X >> 0)), ((q.Y - p$1.Y >> 0)), $clone(h.gs.pv, arrayType)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
					h.move(p$1, d, true);
					h.move(q, -d, true);
					$s = 109; continue;
				/* } else if (_1 === (41)) { */ case 36:
					top = top - (1) >> 0;
					p$2 = h.point(0, 0, (x$73 = h.stack, ((top < 0 || top >= x$73.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$73.$array[x$73.$offset + top])));
					if (p$2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					p$2.Flags = (p$2.Flags & ~(192)) >>> 0;
					$s = 109; continue;
				/* } else if ((_1 === (42)) || (_1 === (43))) { */ case 37:
					if (callStackTop >= 32) {
						$s = -1; return errors.New("truetype: hinting: call stack overflow");
					}
					top = top - (1) >> 0;
					_tuple = (_entry = h.functions[$Int32.keyFor((x$74 = h.stack, ((top < 0 || top >= x$74.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$74.$array[x$74.$offset + top])))], _entry !== undefined ? [_entry.v, true] : [sliceType$6.nil, false]);
					f = _tuple[0];
					ok = _tuple[1];
					if (!ok) {
						$s = -1; return errors.New("truetype: hinting: undefined function");
					}
					callStackEntry.copy(((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]), new callStackEntry.ptr(program, pc, 1));
					if (opcode === 42) {
						top = top - (1) >> 0;
						if ((x$75 = h.stack, ((top < 0 || top >= x$75.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$75.$array[x$75.$offset + top])) === 0) {
							/* break; */ $s = 3; continue;
						}
						((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount = (x$76 = h.stack, ((top < 0 || top >= x$76.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$76.$array[x$76.$offset + top]));
					}
					callStackTop = callStackTop + (1) >> 0;
					_tmp$9 = f;
					_tmp$10 = 0;
					program = _tmp$9;
					pc = _tmp$10;
					/* continue; */ $s = 1; continue;
					$s = 109; continue;
				/* } else if (_1 === (44)) { */ case 38:
					startPC = pc + 1 >> 0;
					fdefloop:
					while (true) {
						pc = pc + (1) >> 0;
						if (pc >= program.$length) {
							$s = -1; return errors.New("truetype: hinting: unbalanced FDEF");
						}
						_2 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
						if (_2 === (44)) {
							$s = -1; return errors.New("truetype: hinting: nested FDEF");
						} else if (_2 === (45)) {
							top = top - (1) >> 0;
							_key = (x$77 = h.stack, ((top < 0 || top >= x$77.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$77.$array[x$77.$offset + top])); (h.functions || $throwRuntimeError("assignment to entry in nil map"))[$Int32.keyFor(_key)] = { k: _key, v: $subslice(program, startPC, (pc + 1 >> 0)) };
							break fdefloop;
						} else {
							ok$1 = false;
							_tuple$1 = skipInstructionPayload(program, pc);
							pc = _tuple$1[0];
							ok$1 = _tuple$1[1];
							if (!ok$1) {
								$s = -1; return errors.New("truetype: hinting: unbalanced FDEF");
							}
						}
					}
					$s = 109; continue;
				/* } else if (_1 === (45)) { */ case 39:
					if (callStackTop === 0) {
						$s = -1; return errors.New("truetype: hinting: call stack underflow");
					}
					callStackTop = callStackTop - (1) >> 0;
					((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount - (1) >> 0;
					if (!((((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).loopCount === 0))) {
						callStackTop = callStackTop + (1) >> 0;
						pc = 0;
						/* continue; */ $s = 1; continue;
					}
					_tmp$11 = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).program;
					_tmp$12 = ((callStackTop < 0 || callStackTop >= callStack.length) ? ($throwRuntimeError("index out of range"), undefined) : callStack[callStackTop]).pc;
					program = _tmp$11;
					pc = _tmp$12;
					$s = 109; continue;
				/* } else if ((_1 === (46)) || (_1 === (47))) { */ case 40:
					top = top - (1) >> 0;
					i = (x$78 = h.stack, ((top < 0 || top >= x$78.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$78.$array[x$78.$offset + top]));
					p$3 = h.point(0, 0, i);
					if (p$3 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					distance = 0;
					if (opcode === 47) {
						distance = dotProduct(p$3.X, p$3.Y, $clone(h.gs.pv, arrayType));
						distance = h.round(distance) - distance >> 0;
					}
					h.move(p$3, distance, true);
					h.gs.rp[0] = i;
					h.gs.rp[1] = i;
					$s = 109; continue;
				/* } else if ((_1 === (48)) || (_1 === (49))) { */ case 41:
					_tmp$13 = opcode === 48;
					_tmp$14 = 64;
					iupY = _tmp$13;
					mask = _tmp$14;
					if (iupY) {
						mask = 128;
					}
					prevEnd = 0;
					_ref = h.ends;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						end = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						i$1 = prevEnd;
						while (true) {
							if (!(i$1 < end)) { break; }
							while (true) {
								if (!(i$1 < end && ((((x$79 = h.points[1][0], ((i$1 < 0 || i$1 >= x$79.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$79.$array[x$79.$offset + i$1])).Flags & mask) >>> 0) === 0))) { break; }
								i$1 = i$1 + (1) >> 0;
							}
							if (i$1 === end) {
								break;
							}
							_tmp$15 = i$1;
							_tmp$16 = i$1;
							firstTouched = _tmp$15;
							curTouched = _tmp$16;
							i$1 = i$1 + (1) >> 0;
							while (true) {
								if (!(i$1 < end)) { break; }
								if (!(((((x$80 = h.points[1][0], ((i$1 < 0 || i$1 >= x$80.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$80.$array[x$80.$offset + i$1])).Flags & mask) >>> 0) === 0))) {
									h.iupInterp(iupY, curTouched + 1 >> 0, i$1 - 1 >> 0, curTouched, i$1);
									curTouched = i$1;
								}
								i$1 = i$1 + (1) >> 0;
							}
							if (curTouched === firstTouched) {
								h.iupShift(iupY, prevEnd, end, curTouched);
							} else {
								h.iupInterp(iupY, curTouched + 1 >> 0, end - 1 >> 0, curTouched, firstTouched);
								if (firstTouched > 0) {
									h.iupInterp(iupY, prevEnd, firstTouched - 1 >> 0, curTouched, firstTouched);
								}
							}
							i$1 = i$1 + (1) >> 0;
						}
						prevEnd = end;
						_i++;
					}
					$s = 109; continue;
				/* } else if ((_1 === (50)) || (_1 === (51))) { */ case 42:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					_tuple$2 = h.displacement(((opcode & 1) >>> 0) === 0);
					d$1 = _tuple$2[2];
					ok$2 = _tuple$2[3];
					if (!ok$2) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$4 = h.point(2, 0, (x$81 = h.stack, ((top < 0 || top >= x$81.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$81.$array[x$81.$offset + top])));
						if (p$4 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$4, d$1, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (52)) || (_1 === (53))) { */ case 43:
					top = top - (1) >> 0;
					_tuple$3 = h.displacement(((opcode & 1) >>> 0) === 0);
					zonePointer = _tuple$3[0];
					i$2 = _tuple$3[1];
					d$2 = _tuple$3[2];
					ok$3 = _tuple$3[3];
					if (!ok$3) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					if (h.gs.zp[2] === 0) {
						$s = -1; return errors.New("hinting: unimplemented SHC instruction");
					}
					contour = (x$82 = h.stack, ((top < 0 || top >= x$82.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$82.$array[x$82.$offset + top]));
					if (contour < 0 || ends.$length <= ((contour >> 0))) {
						$s = -1; return errors.New("truetype: hinting: contour out of range");
					}
					_tmp$17 = 0;
					_tmp$18 = (((x$83 = h.ends, ((contour < 0 || contour >= x$83.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$83.$array[x$83.$offset + contour])) >> 0));
					j0 = _tmp$17;
					j1 = _tmp$18;
					if (contour > 0) {
						j0 = (((x$84 = h.ends, x$85 = contour - 1 >> 0, ((x$85 < 0 || x$85 >= x$84.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$84.$array[x$84.$offset + x$85])) >> 0));
					}
					move = !(((x$86 = h.gs.zp, ((zonePointer < 0 || zonePointer >= x$86.length) ? ($throwRuntimeError("index out of range"), undefined) : x$86[zonePointer])) === h.gs.zp[2]));
					j = j0;
					while (true) {
						if (!(j < j1)) { break; }
						if (move || !((j === i$2))) {
							h.move(h.point(2, 0, j), d$2, true);
						}
						j = j + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if ((_1 === (54)) || (_1 === (55))) { */ case 44:
					top = top - (1) >> 0;
					_tuple$4 = h.displacement(((opcode & 1) >>> 0) === 0);
					zonePointer$1 = _tuple$4[0];
					i$3 = _tuple$4[1];
					d$3 = _tuple$4[2];
					ok$4 = _tuple$4[3];
					if (!ok$4) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					limit = (((x$87 = h.points, x$88 = h.gs.zp[2], ((x$88 < 0 || x$88 >= x$87.length) ? ($throwRuntimeError("index out of range"), undefined) : x$87[x$88]))[0].$length >> 0));
					if (h.gs.zp[2] === 1) {
						limit = limit - (4) >> 0;
					}
					j$1 = 0;
					while (true) {
						if (!(j$1 < limit)) { break; }
						if (!((i$3 === j$1)) || !(((x$89 = h.gs.zp, ((zonePointer$1 < 0 || zonePointer$1 >= x$89.length) ? ($throwRuntimeError("index out of range"), undefined) : x$89[zonePointer$1])) === h.gs.zp[2]))) {
							h.move(h.point(2, 0, j$1), d$3, false);
						}
						j$1 = j$1 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (56)) { */ case 45:
					top = top - (1) >> 0;
					d$4 = (((x$90 = h.stack, ((top < 0 || top >= x$90.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$90.$array[x$90.$offset + top])) >> 0));
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$5 = h.point(2, 0, (x$91 = h.stack, ((top < 0 || top >= x$91.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$91.$array[x$91.$offset + top])));
						if (p$5 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$5, d$4, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if (_1 === (57)) { */ case 46:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					pointType$1 = 2;
					twilight = (h.gs.zp[0] === 0) || (h.gs.zp[1] === 0) || (h.gs.zp[2] === 0);
					if (twilight) {
						pointType$1 = 1;
					}
					p$6 = h.point(1, pointType$1, h.gs.rp[2]);
					oldP = h.point(0, pointType$1, h.gs.rp[1]);
					oldRange = dotProduct(p$6.X - oldP.X >> 0, p$6.Y - oldP.Y >> 0, $clone(h.gs.dv, arrayType));
					p$6 = h.point(1, 0, h.gs.rp[2]);
					curP = h.point(0, 0, h.gs.rp[1]);
					curRange = dotProduct(p$6.X - curP.X >> 0, p$6.Y - curP.Y >> 0, $clone(h.gs.pv, arrayType));
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						i$4 = (x$92 = h.stack, ((top < 0 || top >= x$92.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$92.$array[x$92.$offset + top]));
						p$6 = h.point(2, pointType$1, i$4);
						oldDist = dotProduct(p$6.X - oldP.X >> 0, p$6.Y - oldP.Y >> 0, $clone(h.gs.dv, arrayType));
						p$6 = h.point(2, 0, i$4);
						curDist = dotProduct(p$6.X - curP.X >> 0, p$6.Y - curP.Y >> 0, $clone(h.gs.pv, arrayType));
						newDist = 0;
						if (!((oldDist === 0))) {
							if (!((oldRange === 0))) {
								newDist = (((x$93 = mulDiv((new $Int64(0, oldDist)), (new $Int64(0, curRange)), (new $Int64(0, oldRange))), x$93.$low + ((x$93.$high >> 31) * 4294967296)) >> 0));
							} else {
								newDist = -oldDist;
							}
						}
						h.move(p$6, newDist - curDist >> 0, true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (58)) || (_1 === (59))) { */ case 47:
					top = top - (2) >> 0;
					i$5 = (x$94 = h.stack, ((top < 0 || top >= x$94.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$94.$array[x$94.$offset + top]));
					distance$1 = (((x$95 = h.stack, x$96 = top + 1 >> 0, ((x$96 < 0 || x$96 >= x$95.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$95.$array[x$95.$offset + x$96])) >> 0));
					ref = h.point(0, 0, h.gs.rp[0]);
					p$7 = h.point(1, 0, i$5);
					if (ref === ptrType$3.nil || p$7 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					curDist$1 = dotProduct(p$7.X - ref.X >> 0, p$7.Y - ref.Y >> 0, $clone(h.gs.pv, arrayType));
					if (opcode === 59) {
						h.gs.rp[0] = i$5;
					}
					h.gs.rp[1] = h.gs.rp[0];
					h.gs.rp[2] = i$5;
					h.move(p$7, distance$1 - curDist$1 >> 0, true);
					$s = 109; continue;
				/* } else if (_1 === (60)) { */ case 48:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					ref$1 = h.point(0, 0, h.gs.rp[0]);
					if (ref$1 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						p$8 = h.point(1, 0, (x$97 = h.stack, ((top < 0 || top >= x$97.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$97.$array[x$97.$offset + top])));
						if (p$8 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						h.move(p$8, -dotProduct(p$8.X - ref$1.X >> 0, p$8.Y - ref$1.Y >> 0, $clone(h.gs.pv, arrayType)), true);
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if (_1 === (61)) { */ case 49:
					h.gs.roundPeriod = 32;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 16;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if ((_1 === (62)) || (_1 === (63))) { */ case 50:
					top = top - (2) >> 0;
					i$6 = (x$98 = h.stack, ((top < 0 || top >= x$98.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$98.$array[x$98.$offset + top]));
					distance$2 = h.getScaledCVT((x$99 = h.stack, x$100 = top + 1 >> 0, ((x$100 < 0 || x$100 >= x$99.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$99.$array[x$99.$offset + x$100])));
					if (h.gs.zp[0] === 0) {
						p$9 = h.point(0, 1, i$6);
						q$1 = h.point(0, 0, i$6);
						p$9.X = (((x$101 = $shiftRightInt64(($mul64((new $Int64(0, distance$2)), (new $Int64(0, h.gs.fv[0])))), 14), x$101.$low + ((x$101.$high >> 31) * 4294967296)) >> 0));
						p$9.Y = (((x$102 = $shiftRightInt64(($mul64((new $Int64(0, distance$2)), (new $Int64(0, h.gs.fv[1])))), 14), x$102.$low + ((x$102.$high >> 31) * 4294967296)) >> 0));
						Point.copy(q$1, p$9);
					}
					p$10 = h.point(0, 0, i$6);
					oldDist$1 = dotProduct(p$10.X, p$10.Y, $clone(h.gs.pv, arrayType));
					if (opcode === 63) {
						if (fabs(distance$2 - oldDist$1 >> 0) > h.gs.controlValueCutIn) {
							distance$2 = oldDist$1;
						}
						distance$2 = h.round(distance$2);
					}
					h.move(p$10, distance$2 - oldDist$1 >> 0, true);
					h.gs.rp[0] = i$6;
					h.gs.rp[1] = i$6;
					$s = 109; continue;
				/* } else if (_1 === (64)) { */ case 51:
					opcode = 0;
					/* goto push */ $s = 111; continue;
					$s = 109; continue;
				/* } else if (_1 === (65)) { */ case 52:
					opcode = 128;
					/* goto push */ $s = 111; continue;
					$s = 109; continue;
				/* } else if (_1 === (66)) { */ case 53:
					top = top - (2) >> 0;
					i$7 = (((x$103 = h.stack, ((top < 0 || top >= x$103.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$103.$array[x$103.$offset + top])) >> 0));
					if (i$7 < 0 || h.store.$length <= i$7) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$106 = h.store, ((i$7 < 0 || i$7 >= x$106.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$106.$array[x$106.$offset + i$7] = (x$104 = h.stack, x$105 = top + 1 >> 0, ((x$105 < 0 || x$105 >= x$104.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$104.$array[x$104.$offset + x$105]))));
					$s = 109; continue;
				/* } else if (_1 === (67)) { */ case 54:
					i$8 = (((x$107 = h.stack, x$108 = top - 1 >> 0, ((x$108 < 0 || x$108 >= x$107.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$107.$array[x$107.$offset + x$108])) >> 0));
					if (i$8 < 0 || h.store.$length <= i$8) {
						$s = -1; return errors.New("truetype: hinting: invalid data");
					}
					(x$110 = h.stack, x$111 = top - 1 >> 0, ((x$111 < 0 || x$111 >= x$110.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$110.$array[x$110.$offset + x$111] = (x$109 = h.store, ((i$8 < 0 || i$8 >= x$109.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$109.$array[x$109.$offset + i$8]))));
					$s = 109; continue;
				/* } else if (_1 === (68)) { */ case 55:
					top = top - (2) >> 0;
					h.setScaledCVT((x$112 = h.stack, ((top < 0 || top >= x$112.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$112.$array[x$112.$offset + top])), (((x$113 = h.stack, x$114 = top + 1 >> 0, ((x$114 < 0 || x$114 >= x$113.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$113.$array[x$113.$offset + x$114])) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (69)) { */ case 56:
					(x$117 = h.stack, x$118 = top - 1 >> 0, ((x$118 < 0 || x$118 >= x$117.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$117.$array[x$117.$offset + x$118] = ((h.getScaledCVT((x$115 = h.stack, x$116 = top - 1 >> 0, ((x$116 < 0 || x$116 >= x$115.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$115.$array[x$115.$offset + x$116]))) >> 0))));
					$s = 109; continue;
				/* } else if ((_1 === (70)) || (_1 === (71))) { */ case 57:
					i$9 = (x$119 = h.stack, x$120 = top - 1 >> 0, ((x$120 < 0 || x$120 >= x$119.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$119.$array[x$119.$offset + x$120]));
					if (opcode === 70) {
						p$11 = h.point(2, 0, i$9);
						(x$121 = h.stack, x$122 = top - 1 >> 0, ((x$122 < 0 || x$122 >= x$121.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$121.$array[x$121.$offset + x$122] = ((dotProduct(p$11.X, p$11.Y, $clone(h.gs.pv, arrayType)) >> 0))));
					} else {
						p$12 = h.point(2, 1, i$9);
						(x$123 = h.stack, x$124 = top - 1 >> 0, ((x$124 < 0 || x$124 >= x$123.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$123.$array[x$123.$offset + x$124] = ((dotProduct(p$12.X, p$12.Y, $clone(h.gs.dv, arrayType)) >> 0))));
					}
					$s = 109; continue;
				/* } else if (_1 === (72)) { */ case 58:
					top = top - (2) >> 0;
					i$10 = (x$125 = h.stack, ((top < 0 || top >= x$125.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$125.$array[x$125.$offset + top]));
					p$13 = h.point(2, 0, i$10);
					if (p$13 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					c = dotProduct(p$13.X, p$13.Y, $clone(h.gs.pv, arrayType));
					h.move(p$13, (((x$126 = h.stack, x$127 = top + 1 >> 0, ((x$127 < 0 || x$127 >= x$126.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$126.$array[x$126.$offset + x$127])) >> 0)) - c >> 0, true);
					if (!((h.gs.zp[2] === 0))) {
						/* break; */ $s = 3; continue;
					}
					q$2 = h.point(2, 1, i$10);
					if (q$2 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					q$2.X = p$13.X;
					q$2.Y = p$13.Y;
					$s = 109; continue;
				/* } else if ((_1 === (73)) || (_1 === (74))) { */ case 59:
					top = top - (1) >> 0;
					_tmp$19 = 0;
					_tmp$20 = arrayType.zero();
					_tmp$21 = false;
					pt = _tmp$19;
					v$1 = $clone(_tmp$20, arrayType);
					scale = _tmp$21;
					if (opcode === 73) {
						pt = 0;
						arrayType.copy(v$1, h.gs.pv);
					} else if ((h.gs.zp[0] === 0) || (h.gs.zp[1] === 0)) {
						pt = 1;
						arrayType.copy(v$1, h.gs.dv);
					} else {
						pt = 2;
						arrayType.copy(v$1, h.gs.dv);
						scale = true;
					}
					p$14 = h.point(0, pt, (x$128 = h.stack, x$129 = top - 1 >> 0, ((x$129 < 0 || x$129 >= x$128.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$128.$array[x$128.$offset + x$129])));
					q$3 = h.point(1, pt, (x$130 = h.stack, ((top < 0 || top >= x$130.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$130.$array[x$130.$offset + top])));
					if (p$14 === ptrType$3.nil || q$3 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					d$5 = ((dotProduct(p$14.X - q$3.X >> 0, p$14.Y - q$3.Y >> 0, $clone(v$1, arrayType)) >> 0));
					if (scale) {
						d$5 = (((x$131 = $div64((new $Int64(0, ($imul(d$5, ((h.scale >> 0)))))), (new $Int64(0, h.font.fUnitsPerEm)), false), x$131.$low + ((x$131.$high >> 31) * 4294967296)) >> 0));
					}
					(x$132 = h.stack, x$133 = top - 1 >> 0, ((x$133 < 0 || x$133 >= x$132.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$132.$array[x$132.$offset + x$133] = d$5));
					$s = 109; continue;
				/* } else if ((_1 === (75)) || (_1 === (76))) { */ case 60:
					if (top >= h.stack.$length) {
						$s = -1; return errors.New("truetype: hinting: stack overflow");
					}
					(x$134 = h.stack, ((top < 0 || top >= x$134.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$134.$array[x$134.$offset + top] = (((h.scale >> 0)) >> 6 >> 0)));
					top = top + (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (77)) || (_1 === (78))) { */ case 61:
					h.gs.autoFlip = opcode === 77;
					$s = 109; continue;
				/* } else if (_1 === (79)) { */ case 62:
					$s = 109; continue;
				/* } else if (_1 === (80)) { */ case 63:
					top = top - (1) >> 0;
					(x$138 = h.stack, x$139 = top - 1 >> 0, ((x$139 < 0 || x$139 >= x$138.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$138.$array[x$138.$offset + x$139] = bool2int32((x$135 = h.stack, x$136 = top - 1 >> 0, ((x$136 < 0 || x$136 >= x$135.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$135.$array[x$135.$offset + x$136])) < (x$137 = h.stack, ((top < 0 || top >= x$137.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$137.$array[x$137.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (81)) { */ case 64:
					top = top - (1) >> 0;
					(x$143 = h.stack, x$144 = top - 1 >> 0, ((x$144 < 0 || x$144 >= x$143.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$143.$array[x$143.$offset + x$144] = bool2int32((x$140 = h.stack, x$141 = top - 1 >> 0, ((x$141 < 0 || x$141 >= x$140.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$140.$array[x$140.$offset + x$141])) <= (x$142 = h.stack, ((top < 0 || top >= x$142.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$142.$array[x$142.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (82)) { */ case 65:
					top = top - (1) >> 0;
					(x$148 = h.stack, x$149 = top - 1 >> 0, ((x$149 < 0 || x$149 >= x$148.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$148.$array[x$148.$offset + x$149] = bool2int32((x$145 = h.stack, x$146 = top - 1 >> 0, ((x$146 < 0 || x$146 >= x$145.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$145.$array[x$145.$offset + x$146])) > (x$147 = h.stack, ((top < 0 || top >= x$147.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$147.$array[x$147.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (83)) { */ case 66:
					top = top - (1) >> 0;
					(x$153 = h.stack, x$154 = top - 1 >> 0, ((x$154 < 0 || x$154 >= x$153.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$153.$array[x$153.$offset + x$154] = bool2int32((x$150 = h.stack, x$151 = top - 1 >> 0, ((x$151 < 0 || x$151 >= x$150.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$150.$array[x$150.$offset + x$151])) >= (x$152 = h.stack, ((top < 0 || top >= x$152.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$152.$array[x$152.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (84)) { */ case 67:
					top = top - (1) >> 0;
					(x$158 = h.stack, x$159 = top - 1 >> 0, ((x$159 < 0 || x$159 >= x$158.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$158.$array[x$158.$offset + x$159] = bool2int32((x$155 = h.stack, x$156 = top - 1 >> 0, ((x$156 < 0 || x$156 >= x$155.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$155.$array[x$155.$offset + x$156])) === (x$157 = h.stack, ((top < 0 || top >= x$157.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$157.$array[x$157.$offset + top])))));
					$s = 109; continue;
				/* } else if (_1 === (85)) { */ case 68:
					top = top - (1) >> 0;
					(x$163 = h.stack, x$164 = top - 1 >> 0, ((x$164 < 0 || x$164 >= x$163.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$163.$array[x$163.$offset + x$164] = bool2int32(!(((x$160 = h.stack, x$161 = top - 1 >> 0, ((x$161 < 0 || x$161 >= x$160.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$160.$array[x$160.$offset + x$161])) === (x$162 = h.stack, ((top < 0 || top >= x$162.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$162.$array[x$162.$offset + top])))))));
					$s = 109; continue;
				/* } else if ((_1 === (86)) || (_1 === (87))) { */ case 69:
					i$11 = h.round((((x$165 = h.stack, x$166 = top - 1 >> 0, ((x$166 < 0 || x$166 >= x$165.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$165.$array[x$165.$offset + x$166])) >> 0))) >> 6 >> 0;
					(x$167 = h.stack, x$168 = top - 1 >> 0, ((x$168 < 0 || x$168 >= x$167.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$167.$array[x$167.$offset + x$168] = (((((i$11 & 1) >> 0)) ^ (((opcode - 86 << 24 >>> 24) >> 0))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (88)) { */ case 70:
					top = top - (1) >> 0;
					/* */ if ((x$169 = h.stack, ((top < 0 || top >= x$169.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$169.$array[x$169.$offset + top])) === 0) { $s = 112; continue; }
					/* */ $s = 113; continue;
					/* if ((x$169 = h.stack, ((top < 0 || top >= x$169.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$169.$array[x$169.$offset + top])) === 0) { */ case 112:
						opcode = 0;
						/* goto ifelse */ $s = 110; continue;
					/* } */ case 113:
					$s = 109; continue;
				/* } else if (_1 === (89)) { */ case 71:
					$s = 109; continue;
				/* } else if (_1 === (90)) { */ case 72:
					top = top - (1) >> 0;
					(x$173 = h.stack, x$174 = top - 1 >> 0, ((x$174 < 0 || x$174 >= x$173.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$173.$array[x$173.$offset + x$174] = bool2int32(!(((x$170 = h.stack, x$171 = top - 1 >> 0, ((x$171 < 0 || x$171 >= x$170.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$170.$array[x$170.$offset + x$171])) === 0)) && !(((x$172 = h.stack, ((top < 0 || top >= x$172.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$172.$array[x$172.$offset + top])) === 0)))));
					$s = 109; continue;
				/* } else if (_1 === (91)) { */ case 73:
					top = top - (1) >> 0;
					(x$178 = h.stack, x$179 = top - 1 >> 0, ((x$179 < 0 || x$179 >= x$178.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$178.$array[x$178.$offset + x$179] = bool2int32(!((((x$175 = h.stack, x$176 = top - 1 >> 0, ((x$176 < 0 || x$176 >= x$175.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$175.$array[x$175.$offset + x$176])) | (x$177 = h.stack, ((top < 0 || top >= x$177.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$177.$array[x$177.$offset + top]))) === 0)))));
					$s = 109; continue;
				/* } else if (_1 === (92)) { */ case 74:
					(x$182 = h.stack, x$183 = top - 1 >> 0, ((x$183 < 0 || x$183 >= x$182.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$182.$array[x$182.$offset + x$183] = bool2int32((x$180 = h.stack, x$181 = top - 1 >> 0, ((x$181 < 0 || x$181 >= x$180.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$180.$array[x$180.$offset + x$181])) === 0)));
					$s = 109; continue;
				/* } else if (_1 === (93)) { */ case 75:
					/* goto delta */ $s = 114; continue;
					$s = 109; continue;
				/* } else if (_1 === (94)) { */ case 76:
					top = top - (1) >> 0;
					h.gs.deltaBase = (x$184 = h.stack, ((top < 0 || top >= x$184.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$184.$array[x$184.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (95)) { */ case 77:
					top = top - (1) >> 0;
					h.gs.deltaShift = (x$185 = h.stack, ((top < 0 || top >= x$185.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$185.$array[x$185.$offset + top]));
					$s = 109; continue;
				/* } else if (_1 === (96)) { */ case 78:
					top = top - (1) >> 0;
					_index = top - 1 >> 0;
					(x$188 = h.stack, ((_index < 0 || _index >= x$188.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$188.$array[x$188.$offset + _index] = ((x$186 = h.stack, ((_index < 0 || _index >= x$186.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$186.$array[x$186.$offset + _index])) + ((x$187 = h.stack, ((top < 0 || top >= x$187.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$187.$array[x$187.$offset + top]))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (97)) { */ case 79:
					top = top - (1) >> 0;
					_index$1 = top - 1 >> 0;
					(x$191 = h.stack, ((_index$1 < 0 || _index$1 >= x$191.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$191.$array[x$191.$offset + _index$1] = ((x$189 = h.stack, ((_index$1 < 0 || _index$1 >= x$189.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$189.$array[x$189.$offset + _index$1])) - ((x$190 = h.stack, ((top < 0 || top >= x$190.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$190.$array[x$190.$offset + top]))) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (98)) { */ case 80:
					top = top - (1) >> 0;
					if ((x$192 = h.stack, ((top < 0 || top >= x$192.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$192.$array[x$192.$offset + top])) === 0) {
						$s = -1; return errors.New("truetype: hinting: division by zero");
					}
					(x$196 = h.stack, x$197 = top - 1 >> 0, ((x$197 < 0 || x$197 >= x$196.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$196.$array[x$196.$offset + x$197] = ((fdiv((((x$193 = h.stack, x$194 = top - 1 >> 0, ((x$194 < 0 || x$194 >= x$193.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$193.$array[x$193.$offset + x$194])) >> 0)), (((x$195 = h.stack, ((top < 0 || top >= x$195.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$195.$array[x$195.$offset + top])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (99)) { */ case 81:
					top = top - (1) >> 0;
					(x$201 = h.stack, x$202 = top - 1 >> 0, ((x$202 < 0 || x$202 >= x$201.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$201.$array[x$201.$offset + x$202] = ((fmul((((x$198 = h.stack, x$199 = top - 1 >> 0, ((x$199 < 0 || x$199 >= x$198.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$198.$array[x$198.$offset + x$199])) >> 0)), (((x$200 = h.stack, ((top < 0 || top >= x$200.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$200.$array[x$200.$offset + top])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if (_1 === (100)) { */ case 82:
					if ((x$203 = h.stack, x$204 = top - 1 >> 0, ((x$204 < 0 || x$204 >= x$203.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$203.$array[x$203.$offset + x$204])) < 0) {
						(x$207 = h.stack, x$208 = top - 1 >> 0, ((x$208 < 0 || x$208 >= x$207.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$207.$array[x$207.$offset + x$208] = -(x$205 = h.stack, x$206 = top - 1 >> 0, ((x$206 < 0 || x$206 >= x$205.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$205.$array[x$205.$offset + x$206]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (101)) { */ case 83:
					(x$211 = h.stack, x$212 = top - 1 >> 0, ((x$212 < 0 || x$212 >= x$211.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$211.$array[x$211.$offset + x$212] = -(x$209 = h.stack, x$210 = top - 1 >> 0, ((x$210 < 0 || x$210 >= x$209.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$209.$array[x$209.$offset + x$210]))));
					$s = 109; continue;
				/* } else if (_1 === (102)) { */ case 84:
					_index$2 = top - 1 >> 0;
					(x$214 = h.stack, ((_index$2 < 0 || _index$2 >= x$214.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$214.$array[x$214.$offset + _index$2] = (((x$213 = h.stack, ((_index$2 < 0 || _index$2 >= x$213.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$213.$array[x$213.$offset + _index$2])) & ~(63)) >> 0)));
					$s = 109; continue;
				/* } else if (_1 === (103)) { */ case 85:
					_index$3 = top - 1 >> 0;
					(x$216 = h.stack, ((_index$3 < 0 || _index$3 >= x$216.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$216.$array[x$216.$offset + _index$3] = ((x$215 = h.stack, ((_index$3 < 0 || _index$3 >= x$215.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$215.$array[x$215.$offset + _index$3])) + (63) >> 0)));
					_index$4 = top - 1 >> 0;
					(x$218 = h.stack, ((_index$4 < 0 || _index$4 >= x$218.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$218.$array[x$218.$offset + _index$4] = (((x$217 = h.stack, ((_index$4 < 0 || _index$4 >= x$217.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$217.$array[x$217.$offset + _index$4])) & ~(63)) >> 0)));
					$s = 109; continue;
				/* } else if ((_1 === (104)) || (_1 === (105)) || (_1 === (106)) || (_1 === (107))) { */ case 86:
					(x$221 = h.stack, x$222 = top - 1 >> 0, ((x$222 < 0 || x$222 >= x$221.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$221.$array[x$221.$offset + x$222] = ((h.round((((x$219 = h.stack, x$220 = top - 1 >> 0, ((x$220 < 0 || x$220 >= x$219.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$219.$array[x$219.$offset + x$220])) >> 0))) >> 0))));
					$s = 109; continue;
				/* } else if ((_1 === (108)) || (_1 === (109)) || (_1 === (110)) || (_1 === (111))) { */ case 87:
					$s = 109; continue;
				/* } else if (_1 === (112)) { */ case 88:
					top = top - (2) >> 0;
					h.setScaledCVT((x$223 = h.stack, ((top < 0 || top >= x$223.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$223.$array[x$223.$offset + top])), h.font.scale($imul(h.scale, (((x$224 = h.stack, x$225 = top + 1 >> 0, ((x$225 < 0 || x$225 >= x$224.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$224.$array[x$224.$offset + x$225])) >> 0)))));
					$s = 109; continue;
				/* } else if ((_1 === (113)) || (_1 === (114)) || (_1 === (115)) || (_1 === (116)) || (_1 === (117))) { */ case 89:
					/* goto delta */ $s = 114; continue;
					$s = 109; continue;
				/* } else if ((_1 === (118)) || (_1 === (119))) { */ case 90:
					top = top - (1) >> 0;
					_3 = (((x$226 = h.stack, ((top < 0 || top >= x$226.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$226.$array[x$226.$offset + top])) >> 6 >> 0)) & 3;
					if (_3 === (0)) {
						h.gs.roundPeriod = 32;
					} else if ((_3 === (1)) || (_3 === (3))) {
						h.gs.roundPeriod = 64;
					} else if (_3 === (2)) {
						h.gs.roundPeriod = 128;
					}
					h.gs.roundSuper45 = opcode === 119;
					if (h.gs.roundSuper45) {
						h.gs.roundPeriod = $imul(h.gs.roundPeriod, (46341));
						h.gs.roundPeriod = (_q$3 = h.gs.roundPeriod / (65536), (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					h.gs.roundPhase = (_q$4 = ($imul(h.gs.roundPeriod, ((((((x$227 = h.stack, ((top < 0 || top >= x$227.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$227.$array[x$227.$offset + top])) >> 4 >> 0)) & 3) >> 0)))) / 4, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero"));
					x$229 = (x$228 = h.stack, ((top < 0 || top >= x$228.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$228.$array[x$228.$offset + top])) & 15;
					if (!((x$229 === 0))) {
						h.gs.roundThreshold = (_q$5 = ($imul(h.gs.roundPeriod, (((x$229 - 4 >> 0) >> 0)))) / 8, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero"));
					} else {
						h.gs.roundThreshold = h.gs.roundPeriod - 1 >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (120)) { */ case 91:
					top = top - (2) >> 0;
					if (!(((x$230 = h.stack, x$231 = top + 1 >> 0, ((x$231 < 0 || x$231 >= x$230.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$230.$array[x$230.$offset + x$231])) === 0))) {
						pc = pc + ((((x$232 = h.stack, ((top < 0 || top >= x$232.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$232.$array[x$232.$offset + top])) >> 0))) >> 0;
						/* continue; */ $s = 1; continue;
					}
					$s = 109; continue;
				/* } else if (_1 === (121)) { */ case 92:
					top = top - (2) >> 0;
					if ((x$233 = h.stack, x$234 = top + 1 >> 0, ((x$234 < 0 || x$234 >= x$233.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$233.$array[x$233.$offset + x$234])) === 0) {
						pc = pc + ((((x$235 = h.stack, ((top < 0 || top >= x$235.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$235.$array[x$235.$offset + top])) >> 0))) >> 0;
						/* continue; */ $s = 1; continue;
					}
					$s = 109; continue;
				/* } else if (_1 === (122)) { */ case 93:
					h.gs.roundPeriod = 0;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 0;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (124)) { */ case 94:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 63;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if (_1 === (125)) { */ case 95:
					h.gs.roundPeriod = 64;
					h.gs.roundPhase = 0;
					h.gs.roundThreshold = 0;
					h.gs.roundSuper45 = false;
					$s = 109; continue;
				/* } else if ((_1 === (126)) || (_1 === (127))) { */ case 96:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (128)) { */ case 97:
					if (top < ((h.gs.loop >> 0))) {
						$s = -1; return errors.New("truetype: hinting: stack underflow");
					}
					points = h.points[1][0];
					while (true) {
						if (!(!((h.gs.loop === 0)))) { break; }
						top = top - (1) >> 0;
						i$12 = (x$236 = h.stack, ((top < 0 || top >= x$236.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$236.$array[x$236.$offset + top]));
						if (i$12 < 0 || points.$length <= ((i$12 >> 0))) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						((i$12 < 0 || i$12 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i$12]).Flags = (((i$12 < 0 || i$12 >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i$12]).Flags ^ (1)) >>> 0;
						h.gs.loop = h.gs.loop - (1) >> 0;
					}
					h.gs.loop = 1;
					$s = 109; continue;
				/* } else if ((_1 === (129)) || (_1 === (130))) { */ case 98:
					top = top - (2) >> 0;
					_tmp$22 = (x$237 = h.stack, ((top < 0 || top >= x$237.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$237.$array[x$237.$offset + top]));
					_tmp$23 = (x$238 = h.stack, x$239 = top + 1 >> 0, ((x$239 < 0 || x$239 >= x$238.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$238.$array[x$238.$offset + x$239]));
					_tmp$24 = h.points[1][0];
					i$13 = _tmp$22;
					j$2 = _tmp$23;
					points$1 = _tmp$24;
					if (i$13 < 0 || points$1.$length <= ((i$13 >> 0)) || j$2 < 0 || points$1.$length <= ((j$2 >> 0))) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					while (true) {
						if (!(i$13 <= j$2)) { break; }
						if (opcode === 129) {
							((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags = (((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags | (1)) >>> 0;
						} else {
							((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags = (((i$13 < 0 || i$13 >= points$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : points$1.$array[points$1.$offset + i$13]).Flags & ~(1)) >>> 0;
						}
						i$13 = i$13 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (133)) { */ case 99:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if ((_1 === (134)) || (_1 === (135))) { */ case 100:
					top = top - (2) >> 0;
					i$14 = 0;
					while (true) {
						if (!(i$14 < 2)) { break; }
						pt$1 = 1;
						if (!((i$14 === 0))) {
							pt$1 = 0;
						}
						p$15 = h.point(1, pt$1, (x$240 = h.stack, ((top < 0 || top >= x$240.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$240.$array[x$240.$offset + top])));
						q$4 = h.point(2, pt$1, (x$241 = h.stack, x$242 = top + 1 >> 0, ((x$242 < 0 || x$242 >= x$241.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$241.$array[x$241.$offset + x$242])));
						if (p$15 === ptrType$3.nil || q$4 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						dx$2 = (((p$15.X - q$4.X >> 0) << 16 >> 16));
						dy$2 = (((p$15.Y - q$4.Y >> 0) << 16 >> 16));
						if ((dx$2 === 0) && (dy$2 === 0)) {
							dx$2 = 16384;
						} else if (!((((opcode & 1) >>> 0) === 0))) {
							_tmp$25 = -dy$2;
							_tmp$26 = dx$2;
							dx$2 = _tmp$25;
							dy$2 = _tmp$26;
						}
						if (i$14 === 0) {
							arrayType.copy(h.gs.dv, normalize(dx$2, dy$2));
						} else {
							arrayType.copy(h.gs.pv, normalize(dx$2, dy$2));
						}
						i$14 = i$14 + (1) >> 0;
					}
					$s = 109; continue;
				/* } else if (_1 === (136)) { */ case 101:
					res = 0;
					if (!((((x$243 = h.stack, x$244 = top - 1 >> 0, ((x$244 < 0 || x$244 >= x$243.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$243.$array[x$243.$offset + x$244])) & 1) === 0))) {
						res = res | (35);
					}
					if (!((((x$245 = h.stack, x$246 = top - 1 >> 0, ((x$246 < 0 || x$246 >= x$245.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$245.$array[x$245.$offset + x$246])) & 32) === 0))) {
						res = res | (4096);
					}
					(x$247 = h.stack, x$248 = top - 1 >> 0, ((x$248 < 0 || x$248 >= x$247.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$247.$array[x$247.$offset + x$248] = res));
					$s = 109; continue;
				/* } else if (_1 === (137)) { */ case 102:
					$s = -1; return errors.New("truetype: hinting: unsupported IDEF instruction");
				/* } else if (_1 === (138)) { */ case 103:
					_tmp$27 = (x$249 = h.stack, x$250 = top - 3 >> 0, ((x$250 < 0 || x$250 >= x$249.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$249.$array[x$249.$offset + x$250]));
					_tmp$28 = (x$251 = h.stack, x$252 = top - 2 >> 0, ((x$252 < 0 || x$252 >= x$251.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$251.$array[x$251.$offset + x$252]));
					_tmp$29 = (x$253 = h.stack, x$254 = top - 1 >> 0, ((x$254 < 0 || x$254 >= x$253.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$253.$array[x$253.$offset + x$254]));
					(x$255 = h.stack, x$256 = top - 1 >> 0, ((x$256 < 0 || x$256 >= x$255.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$255.$array[x$255.$offset + x$256] = _tmp$27));
					(x$257 = h.stack, x$258 = top - 3 >> 0, ((x$258 < 0 || x$258 >= x$257.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$257.$array[x$257.$offset + x$258] = _tmp$28));
					(x$259 = h.stack, x$260 = top - 2 >> 0, ((x$260 < 0 || x$260 >= x$259.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$259.$array[x$259.$offset + x$260] = _tmp$29));
					$s = 109; continue;
				/* } else if (_1 === (139)) { */ case 104:
					top = top - (1) >> 0;
					if ((x$261 = h.stack, x$262 = top - 1 >> 0, ((x$262 < 0 || x$262 >= x$261.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$261.$array[x$261.$offset + x$262])) < (x$263 = h.stack, ((top < 0 || top >= x$263.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$263.$array[x$263.$offset + top]))) {
						(x$265 = h.stack, x$266 = top - 1 >> 0, ((x$266 < 0 || x$266 >= x$265.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$265.$array[x$265.$offset + x$266] = (x$264 = h.stack, ((top < 0 || top >= x$264.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$264.$array[x$264.$offset + top]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (140)) { */ case 105:
					top = top - (1) >> 0;
					if ((x$267 = h.stack, x$268 = top - 1 >> 0, ((x$268 < 0 || x$268 >= x$267.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$267.$array[x$267.$offset + x$268])) > (x$269 = h.stack, ((top < 0 || top >= x$269.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$269.$array[x$269.$offset + top]))) {
						(x$271 = h.stack, x$272 = top - 1 >> 0, ((x$272 < 0 || x$272 >= x$271.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$271.$array[x$271.$offset + x$272] = (x$270 = h.stack, ((top < 0 || top >= x$270.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$270.$array[x$270.$offset + top]))));
					}
					$s = 109; continue;
				/* } else if (_1 === (141)) { */ case 106:
					top = top - (1) >> 0;
					$s = 109; continue;
				/* } else if (_1 === (142)) { */ case 107:
					top = top - (2) >> 0;
					$s = 109; continue;
				/* } else { */ case 108:
					if (opcode < 176) {
						$s = -1; return errors.New("truetype: hinting: unrecognized instruction");
					}
					/* */ if (opcode < 192) { $s = 115; continue; }
					/* */ $s = 116; continue;
					/* if (opcode < 192) { */ case 115:
						if (opcode < 184) {
							opcode = opcode - (175) << 24 >>> 24;
						} else {
							opcode = opcode - (55) << 24 >>> 24;
						}
						/* goto push */ $s = 111; continue;
					/* } */ case 116:
					if (opcode < 224) {
						top = top - (1) >> 0;
						i$15 = (x$273 = h.stack, ((top < 0 || top >= x$273.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$273.$array[x$273.$offset + top]));
						ref$2 = h.point(0, 0, h.gs.rp[0]);
						p$16 = h.point(1, 0, i$15);
						if (ref$2 === ptrType$3.nil || p$16 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						oldDist$2 = 0;
						if ((h.gs.zp[0] === 0) || (h.gs.zp[1] === 0)) {
							p0 = h.point(1, 1, i$15);
							p1$1 = h.point(0, 1, h.gs.rp[0]);
							oldDist$2 = dotProduct(p0.X - p1$1.X >> 0, p0.Y - p1$1.Y >> 0, $clone(h.gs.dv, arrayType));
						} else {
							p0$1 = h.point(1, 2, i$15);
							p1$2 = h.point(0, 2, h.gs.rp[0]);
							oldDist$2 = dotProduct(p0$1.X - p1$2.X >> 0, p0$1.Y - p1$2.Y >> 0, $clone(h.gs.dv, arrayType));
							oldDist$2 = h.font.scale($imul(h.scale, oldDist$2));
						}
						x$274 = fabs(oldDist$2 - h.gs.singleWidth >> 0);
						if (x$274 < h.gs.singleWidthCutIn) {
							if (oldDist$2 >= 0) {
								oldDist$2 = h.gs.singleWidth;
							} else {
								oldDist$2 = -h.gs.singleWidth;
							}
						}
						distance$3 = oldDist$2;
						if (!((((opcode & 4) >>> 0) === 0))) {
							distance$3 = h.round(oldDist$2);
						}
						if (!((((opcode & 8) >>> 0) === 0))) {
							if (oldDist$2 >= 0) {
								if (distance$3 < h.gs.minDist) {
									distance$3 = h.gs.minDist;
								}
							} else {
								if (distance$3 > -h.gs.minDist) {
									distance$3 = -h.gs.minDist;
								}
							}
						}
						h.gs.rp[1] = h.gs.rp[0];
						h.gs.rp[2] = i$15;
						if (!((((opcode & 16) >>> 0) === 0))) {
							h.gs.rp[0] = i$15;
						}
						oldDist$2 = dotProduct(p$16.X - ref$2.X >> 0, p$16.Y - ref$2.Y >> 0, $clone(h.gs.pv, arrayType));
						h.move(p$16, distance$3 - oldDist$2 >> 0, true);
					} else {
						top = top - (2) >> 0;
						i$16 = (x$275 = h.stack, ((top < 0 || top >= x$275.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$275.$array[x$275.$offset + top]));
						cvtDist = h.getScaledCVT((x$276 = h.stack, x$277 = top + 1 >> 0, ((x$277 < 0 || x$277 >= x$276.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$276.$array[x$276.$offset + x$277])));
						if (fabs(cvtDist - h.gs.singleWidth >> 0) < h.gs.singleWidthCutIn) {
							if (cvtDist >= 0) {
								cvtDist = h.gs.singleWidth;
							} else {
								cvtDist = -h.gs.singleWidth;
							}
						}
						if (h.gs.zp[1] === 0) {
							$s = -1; return errors.New("truetype: hinting: unimplemented twilight point adjustment");
						}
						ref$3 = h.point(0, 1, h.gs.rp[0]);
						p$17 = h.point(1, 1, i$16);
						if (ref$3 === ptrType$3.nil || p$17 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						oldDist$3 = dotProduct(p$17.X - ref$3.X >> 0, p$17.Y - ref$3.Y >> 0, $clone(h.gs.dv, arrayType));
						ref$3 = h.point(0, 0, h.gs.rp[0]);
						p$17 = h.point(1, 0, i$16);
						if (ref$3 === ptrType$3.nil || p$17 === ptrType$3.nil) {
							$s = -1; return errors.New("truetype: hinting: point out of range");
						}
						curDist$2 = dotProduct(p$17.X - ref$3.X >> 0, p$17.Y - ref$3.Y >> 0, $clone(h.gs.pv, arrayType));
						if (h.gs.autoFlip && ((oldDist$3 ^ cvtDist) >> 0) < 0) {
							cvtDist = -cvtDist;
						}
						distance$4 = cvtDist;
						if (!((((opcode & 4) >>> 0) === 0))) {
							if (((h.gs.zp[0] === h.gs.zp[1])) && (fabs(cvtDist - oldDist$3 >> 0) > h.gs.controlValueCutIn)) {
								distance$4 = oldDist$3;
							}
							distance$4 = h.round(distance$4);
						}
						if (!((((opcode & 8) >>> 0) === 0))) {
							if (oldDist$3 >= 0) {
								if (distance$4 < h.gs.minDist) {
									distance$4 = h.gs.minDist;
								}
							} else {
								if (distance$4 > -h.gs.minDist) {
									distance$4 = -h.gs.minDist;
								}
							}
						}
						h.gs.rp[1] = h.gs.rp[0];
						h.gs.rp[2] = i$16;
						if (!((((opcode & 16) >>> 0) === 0))) {
							h.gs.rp[0] = i$16;
						}
						h.move(p$17, distance$4 - curDist$2 >> 0, true);
					}
				/* } */ case 109:
			case 3:
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
			/* ifelse: */ case 110:
			depth = 0;
			ifelseloop:
			while (true) {
				pc = pc + (1) >> 0;
				if (pc >= program.$length) {
					$s = -1; return errors.New("truetype: hinting: unbalanced IF or ELSE");
				}
				_4 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
				if (_4 === (88)) {
					depth = depth + (1) >> 0;
				} else if (_4 === (27)) {
					if ((depth === 0) && (opcode === 0)) {
						break ifelseloop;
					}
				} else if (_4 === (89)) {
					depth = depth - (1) >> 0;
					if (depth < 0) {
						break ifelseloop;
					}
				} else {
					ok$5 = false;
					_tuple$5 = skipInstructionPayload(program, pc);
					pc = _tuple$5[0];
					ok$5 = _tuple$5[1];
					if (!ok$5) {
						$s = -1; return errors.New("truetype: hinting: unbalanced IF or ELSE");
					}
				}
			}
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
			/* push: */ case 111:
			width = 1;
			if (!((((opcode & 128) >>> 0) === 0))) {
				opcode = (opcode & ~(128)) << 24 >>> 24;
				width = 2;
			}
			if (opcode === 0) {
				pc = pc + (1) >> 0;
				if (pc >= program.$length) {
					$s = -1; return errors.New("truetype: hinting: insufficient data");
				}
				opcode = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
			}
			pc = pc + (1) >> 0;
			if ((top + ((opcode >> 0)) >> 0) > h.stack.$length) {
				$s = -1; return errors.New("truetype: hinting: stack overflow");
			}
			if ((pc + ($imul(width, ((opcode >> 0)))) >> 0) > program.$length) {
				$s = -1; return errors.New("truetype: hinting: insufficient data");
			}
			while (true) {
				if (!(opcode > 0)) { break; }
				if (width === 1) {
					(x$278 = h.stack, ((top < 0 || top >= x$278.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$278.$array[x$278.$offset + top] = ((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))));
				} else {
					(x$280 = h.stack, ((top < 0 || top >= x$280.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$280.$array[x$280.$offset + top] = ((((((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) << 24 >> 24)) >> 0)) << 8 >> 0) | (((x$279 = pc + 1 >> 0, ((x$279 < 0 || x$279 >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + x$279])) >> 0)))));
				}
				top = top + (1) >> 0;
				pc = pc + (width) >> 0;
				opcode = opcode - (1) << 24 >>> 24;
			}
			/* continue; */ $s = 1; continue;
			/* delta: */ case 114:
			if (opcode >= 115 && !h.scaledCVTInitialized) {
				h.initializeScaledCVT();
			}
			top = top - (1) >> 0;
			n = (x$281 = h.stack, ((top < 0 || top >= x$281.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$281.$array[x$281.$offset + top]));
			if (((top >> 0)) < ($imul(2, n))) {
				$s = -1; return errors.New("truetype: hinting: stack underflow");
			}
			while (true) {
				if (!(n > 0)) { break; }
				top = top - (2) >> 0;
				b = (x$282 = h.stack, ((top < 0 || top >= x$282.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$282.$array[x$282.$offset + top]));
				c$1 = ((b & 240)) >> 4 >> 0;
				_5 = opcode;
				if ((_5 === (113)) || (_5 === (116))) {
					c$1 = c$1 + (16) >> 0;
				} else if ((_5 === (114)) || (_5 === (117))) {
					c$1 = c$1 + (32) >> 0;
				}
				c$1 = c$1 + (h.gs.deltaBase) >> 0;
				ppem = ((((h.scale >> 0)) + 32 >> 0)) >> 6 >> 0;
				if (!((ppem === c$1))) {
					n = n - (1) >> 0;
					continue;
				}
				b = ((b & 15)) - 8 >> 0;
				if (b >= 0) {
					b = b + (1) >> 0;
				}
				b = (_q$6 = ($imul(b, 64)) / (((y = ((h.gs.deltaShift >>> 0)), y < 32 ? (1 << y) : 0) >> 0)), (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (opcode >= 115) {
					a = (x$283 = h.stack, x$284 = top + 1 >> 0, ((x$284 < 0 || x$284 >= x$283.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$283.$array[x$283.$offset + x$284]));
					if (a < 0 || h.scaledCVT.$length <= ((a >> 0))) {
						$s = -1; return errors.New("truetype: hinting: index out of range");
					}
					(x$286 = h.scaledCVT, ((a < 0 || a >= x$286.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$286.$array[x$286.$offset + a] = ((x$285 = h.scaledCVT, ((a < 0 || a >= x$285.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$285.$array[x$285.$offset + a])) + (((b >> 0))) >> 0)));
				} else {
					p$18 = h.point(0, 0, (x$287 = h.stack, x$288 = top + 1 >> 0, ((x$288 < 0 || x$288 >= x$287.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$287.$array[x$287.$offset + x$288])));
					if (p$18 === ptrType$3.nil) {
						$s = -1; return errors.New("truetype: hinting: point out of range");
					}
					h.move(p$18, ((b >> 0)), true);
				}
				n = n - (1) >> 0;
			}
			pc = pc + (1) >> 0;
			/* continue; */ $s = 1; continue;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; }
	};
	hinter.prototype.run = function(program, pCurrent, pUnhinted, pInFontUnits, ends) { return this.$val.run(program, pCurrent, pUnhinted, pInFontUnits, ends); };
	hinter.ptr.prototype.initializeScaledCVT = function() {
		var _i, _q, _q$1, _ref, h, i, n, unscaled, x, x$1, x$2, x$3, x$4;
		h = this;
		h.scaledCVTInitialized = true;
		n = (_q = h.font.cvt.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (n <= h.scaledCVT.$capacity) {
			h.scaledCVT = $subslice(h.scaledCVT, 0, n);
		} else {
			if (n < 32) {
				n = 32;
			}
			h.scaledCVT = $makeSlice(sliceType$5, (_q$1 = h.font.cvt.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), n);
		}
		_ref = h.scaledCVT;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			unscaled = (((((x = h.font.cvt, x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$2 = h.font.cvt, x$3 = ($imul(2, i)) + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])) << 16 >>> 16))) >>> 0;
			(x$4 = h.scaledCVT, ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i] = h.font.scale($imul(h.scale, ((((unscaled << 16 >> 16)) >> 0))))));
			_i++;
		}
	};
	hinter.prototype.initializeScaledCVT = function() { return this.$val.initializeScaledCVT(); };
	hinter.ptr.prototype.getScaledCVT = function(i) {
		var h, i, x;
		h = this;
		if (!h.scaledCVTInitialized) {
			h.initializeScaledCVT();
		}
		if (i < 0 || h.scaledCVT.$length <= ((i >> 0))) {
			return 0;
		}
		return (x = h.scaledCVT, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]));
	};
	hinter.prototype.getScaledCVT = function(i) { return this.$val.getScaledCVT(i); };
	hinter.ptr.prototype.setScaledCVT = function(i, v) {
		var h, i, v, x;
		h = this;
		if (!h.scaledCVTInitialized) {
			h.initializeScaledCVT();
		}
		if (i < 0 || h.scaledCVT.$length <= ((i >> 0))) {
			return;
		}
		(x = h.scaledCVT, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = v));
	};
	hinter.prototype.setScaledCVT = function(i, v) { return this.$val.setScaledCVT(i, v); };
	hinter.ptr.prototype.point = function(zonePointer, pt, i) {
		var h, i, points, pt, x, x$1, x$2, x$3, zonePointer;
		h = this;
		points = (x = (x$1 = h.points, x$2 = (x$3 = h.gs.zp, ((zonePointer < 0 || zonePointer >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[zonePointer])), ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), ((pt < 0 || pt >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[pt]));
		if (i < 0 || points.$length <= ((i >> 0))) {
			return ptrType$3.nil;
		}
		return ((i < 0 || i >= points.$length) ? ($throwRuntimeError("index out of range"), undefined) : points.$array[points.$offset + i]);
	};
	hinter.prototype.point = function(zonePointer, pt, i) { return this.$val.point(zonePointer, pt, i); };
	hinter.ptr.prototype.move = function(p, distance, touch) {
		var distance, fvDotPv, fvx, fvy, h, p, pvx, pvy, touch, x, x$1, x$2, x$3;
		h = this;
		fvx = (new $Int64(0, h.gs.fv[0]));
		pvx = (new $Int64(0, h.gs.pv[0]));
		if ((fvx.$high === 0 && fvx.$low === 16384) && (pvx.$high === 0 && pvx.$low === 16384)) {
			p.X = p.X + ((distance)) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (64)) >>> 0;
			}
			return;
		}
		fvy = (new $Int64(0, h.gs.fv[1]));
		pvy = (new $Int64(0, h.gs.pv[1]));
		if ((fvy.$high === 0 && fvy.$low === 16384) && (pvy.$high === 0 && pvy.$low === 16384)) {
			p.Y = p.Y + ((distance)) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (128)) >>> 0;
			}
			return;
		}
		fvDotPv = $shiftRightInt64(((x = $mul64(fvx, pvx), x$1 = $mul64(fvy, pvy), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low))), 14);
		if (!((fvx.$high === 0 && fvx.$low === 0))) {
			p.X = p.X + ((((x$2 = mulDiv(fvx, (new $Int64(0, distance)), fvDotPv), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0))) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (64)) >>> 0;
			}
		}
		if (!((fvy.$high === 0 && fvy.$low === 0))) {
			p.Y = p.Y + ((((x$3 = mulDiv(fvy, (new $Int64(0, distance)), fvDotPv), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0))) >> 0;
			if (touch) {
				p.Flags = (p.Flags | (128)) >>> 0;
			}
		}
	};
	hinter.prototype.move = function(p, distance, touch) { return this.$val.move(p, distance, touch); };
	hinter.ptr.prototype.iupInterp = function(interpY, p1, p2, ref1, ref2) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, delta1, delta2, h, i, i$1, ifu1, ifu2, ifuXY, interpY, numer, p1, p2, ref1, ref2, scale, scaleOK, unh1, unh2, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9, xy;
		h = this;
		if (p1 > p2) {
			return;
		}
		if (ref1 >= h.points[1][0].$length || ref2 >= h.points[1][0].$length) {
			return;
		}
		_tmp = 0;
		_tmp$1 = 0;
		ifu1 = _tmp;
		ifu2 = _tmp$1;
		if (interpY) {
			ifu1 = (x = h.points[1][2], ((ref1 < 0 || ref1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ref1])).Y;
			ifu2 = (x$1 = h.points[1][2], ((ref2 < 0 || ref2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ref2])).Y;
		} else {
			ifu1 = (x$2 = h.points[1][2], ((ref1 < 0 || ref1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ref1])).X;
			ifu2 = (x$3 = h.points[1][2], ((ref2 < 0 || ref2 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + ref2])).X;
		}
		if (ifu1 > ifu2) {
			_tmp$2 = ifu2;
			_tmp$3 = ifu1;
			ifu1 = _tmp$2;
			ifu2 = _tmp$3;
			_tmp$4 = ref2;
			_tmp$5 = ref1;
			ref1 = _tmp$4;
			ref2 = _tmp$5;
		}
		_tmp$6 = 0;
		_tmp$7 = 0;
		_tmp$8 = 0;
		_tmp$9 = 0;
		unh1 = _tmp$6;
		unh2 = _tmp$7;
		delta1 = _tmp$8;
		delta2 = _tmp$9;
		if (interpY) {
			unh1 = (x$4 = h.points[1][1], ((ref1 < 0 || ref1 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + ref1])).Y;
			unh2 = (x$5 = h.points[1][1], ((ref2 < 0 || ref2 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + ref2])).Y;
			delta1 = (x$6 = h.points[1][0], ((ref1 < 0 || ref1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + ref1])).Y - unh1 >> 0;
			delta2 = (x$7 = h.points[1][0], ((ref2 < 0 || ref2 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + ref2])).Y - unh2 >> 0;
		} else {
			unh1 = (x$8 = h.points[1][1], ((ref1 < 0 || ref1 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + ref1])).X;
			unh2 = (x$9 = h.points[1][1], ((ref2 < 0 || ref2 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + ref2])).X;
			delta1 = (x$10 = h.points[1][0], ((ref1 < 0 || ref1 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + ref1])).X - unh1 >> 0;
			delta2 = (x$11 = h.points[1][0], ((ref2 < 0 || ref2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + ref2])).X - unh2 >> 0;
		}
		_tmp$10 = 0;
		_tmp$11 = 0;
		xy = _tmp$10;
		ifuXY = _tmp$11;
		if (ifu1 === ifu2) {
			i = p1;
			while (true) {
				if (!(i <= p2)) { break; }
				if (interpY) {
					xy = (x$12 = h.points[1][1], ((i < 0 || i >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + i])).Y;
				} else {
					xy = (x$13 = h.points[1][1], ((i < 0 || i >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + i])).X;
				}
				if (xy <= unh1) {
					xy = xy + (delta1) >> 0;
				} else {
					xy = xy + (delta2) >> 0;
				}
				if (interpY) {
					(x$14 = h.points[1][0], ((i < 0 || i >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + i])).Y = xy;
				} else {
					(x$15 = h.points[1][0], ((i < 0 || i >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + i])).X = xy;
				}
				i = i + (1) >> 0;
			}
			return;
		}
		_tmp$12 = new $Int64(0, 0);
		_tmp$13 = false;
		scale = _tmp$12;
		scaleOK = _tmp$13;
		i$1 = p1;
		while (true) {
			if (!(i$1 <= p2)) { break; }
			if (interpY) {
				xy = (x$16 = h.points[1][1], ((i$1 < 0 || i$1 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i$1])).Y;
				ifuXY = (x$17 = h.points[1][2], ((i$1 < 0 || i$1 >= x$17.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + i$1])).Y;
			} else {
				xy = (x$18 = h.points[1][1], ((i$1 < 0 || i$1 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + i$1])).X;
				ifuXY = (x$19 = h.points[1][2], ((i$1 < 0 || i$1 >= x$19.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$19.$array[x$19.$offset + i$1])).X;
			}
			if (xy <= unh1) {
				xy = xy + (delta1) >> 0;
			} else if (xy >= unh2) {
				xy = xy + (delta2) >> 0;
			} else {
				if (!scaleOK) {
					scaleOK = true;
					scale = mulDiv((new $Int64(0, (((unh2 + delta2 >> 0) - unh1 >> 0) - delta1 >> 0))), new $Int64(0, 65536), (new $Int64(0, (ifu2 - ifu1 >> 0))));
				}
				numer = $mul64((new $Int64(0, (ifuXY - ifu1 >> 0))), scale);
				if ((numer.$high > 0 || (numer.$high === 0 && numer.$low >= 0))) {
					numer = (x$20 = new $Int64(0, 32768), new $Int64(numer.$high + x$20.$high, numer.$low + x$20.$low));
				} else {
					numer = (x$21 = new $Int64(0, 32768), new $Int64(numer.$high - x$21.$high, numer.$low - x$21.$low));
				}
				xy = (unh1 + delta1 >> 0) + (((x$22 = $div64(numer, new $Int64(0, 65536), false), x$22.$low + ((x$22.$high >> 31) * 4294967296)) >> 0)) >> 0;
			}
			if (interpY) {
				(x$23 = h.points[1][0], ((i$1 < 0 || i$1 >= x$23.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$23.$array[x$23.$offset + i$1])).Y = xy;
			} else {
				(x$24 = h.points[1][0], ((i$1 < 0 || i$1 >= x$24.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$24.$array[x$24.$offset + i$1])).X = xy;
			}
			i$1 = i$1 + (1) >> 0;
		}
	};
	hinter.prototype.iupInterp = function(interpY, p1, p2, ref1, ref2) { return this.$val.iupInterp(interpY, p1, p2, ref1, ref2); };
	hinter.ptr.prototype.iupShift = function(interpY, p1, p2, p) {
		var delta, h, i, interpY, p, p1, p2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		h = this;
		delta = 0;
		if (interpY) {
			delta = (x = h.points[1][0], ((p < 0 || p >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + p])).Y - (x$1 = h.points[1][1], ((p < 0 || p >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + p])).Y >> 0;
		} else {
			delta = (x$2 = h.points[1][0], ((p < 0 || p >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + p])).X - (x$3 = h.points[1][1], ((p < 0 || p >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + p])).X >> 0;
		}
		if (delta === 0) {
			return;
		}
		i = p1;
		while (true) {
			if (!(i < p2)) { break; }
			if (i === p) {
				i = i + (1) >> 0;
				continue;
			}
			if (interpY) {
				(x$5 = h.points[1][0], ((i < 0 || i >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i])).Y = (x$4 = h.points[1][0], ((i < 0 || i >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i])).Y + (delta) >> 0;
			} else {
				(x$7 = h.points[1][0], ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i])).X = (x$6 = h.points[1][0], ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i])).X + (delta) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	hinter.prototype.iupShift = function(interpY, p1, p2, p) { return this.$val.iupShift(interpY, p1, p2, p); };
	hinter.ptr.prototype.displacement = function(useZP1) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, d, h, i, ok, p, q, useZP1, zonePointer;
		zonePointer = 0;
		i = 0;
		d = 0;
		ok = false;
		h = this;
		_tmp = 0;
		_tmp$1 = h.gs.rp[1];
		zonePointer = _tmp;
		i = _tmp$1;
		if (useZP1) {
			_tmp$2 = 1;
			_tmp$3 = h.gs.rp[2];
			zonePointer = _tmp$2;
			i = _tmp$3;
		}
		p = h.point(zonePointer, 0, i);
		q = h.point(zonePointer, 1, i);
		if (p === ptrType$3.nil || q === ptrType$3.nil) {
			_tmp$4 = 0;
			_tmp$5 = 0;
			_tmp$6 = 0;
			_tmp$7 = false;
			zonePointer = _tmp$4;
			i = _tmp$5;
			d = _tmp$6;
			ok = _tmp$7;
			return [zonePointer, i, d, ok];
		}
		d = dotProduct(p.X - q.X >> 0, p.Y - q.Y >> 0, $clone(h.gs.pv, arrayType));
		_tmp$8 = zonePointer;
		_tmp$9 = i;
		_tmp$10 = d;
		_tmp$11 = true;
		zonePointer = _tmp$8;
		i = _tmp$9;
		d = _tmp$10;
		ok = _tmp$11;
		return [zonePointer, i, d, ok];
	};
	hinter.prototype.displacement = function(useZP1) { return this.$val.displacement(useZP1); };
	skipInstructionPayload = function(program, pc) {
		var _1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, newPC, ok, pc, program;
		newPC = 0;
		ok = false;
		_1 = ((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]);
		if (_1 === (64)) {
			pc = pc + (1) >> 0;
			if (pc >= program.$length) {
				_tmp = 0;
				_tmp$1 = false;
				newPC = _tmp;
				ok = _tmp$1;
				return [newPC, ok];
			}
			pc = pc + (((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))) >> 0;
		} else if (_1 === (65)) {
			pc = pc + (1) >> 0;
			if (pc >= program.$length) {
				_tmp$2 = 0;
				_tmp$3 = false;
				newPC = _tmp$2;
				ok = _tmp$3;
				return [newPC, ok];
			}
			pc = pc + (($imul(2, ((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) >> 0))))) >> 0;
		} else if ((_1 === (176)) || (_1 === (177)) || (_1 === (178)) || (_1 === (179)) || (_1 === (180)) || (_1 === (181)) || (_1 === (182)) || (_1 === (183))) {
			pc = pc + ((((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) - 175 << 24 >>> 24) >> 0))) >> 0;
		} else if ((_1 === (184)) || (_1 === (185)) || (_1 === (186)) || (_1 === (187)) || (_1 === (188)) || (_1 === (189)) || (_1 === (190)) || (_1 === (191))) {
			pc = pc + (($imul(2, (((((pc < 0 || pc >= program.$length) ? ($throwRuntimeError("index out of range"), undefined) : program.$array[program.$offset + pc]) - 183 << 24 >>> 24) >> 0))))) >> 0;
		}
		_tmp$4 = pc;
		_tmp$5 = true;
		newPC = _tmp$4;
		ok = _tmp$5;
		return [newPC, ok];
	};
	normalize = function(x, y) {
		var _tmp, _tmp$1, fx, fy, l, x, y;
		_tmp = (x);
		_tmp$1 = (y);
		fx = _tmp;
		fy = _tmp$1;
		l = 16384 / math.Hypot(fx, fy);
		fx = fx * (l);
		if (fx >= 0) {
			fx = fx + (0.5);
		} else {
			fx = fx - (0.5);
		}
		fy = fy * (l);
		if (fy >= 0) {
			fy = fy + (0.5);
		} else {
			fy = fy - (0.5);
		}
		return $toNativeArray($kindInt16, [((fx >> 0)), ((fy >> 0))]);
	};
	fabs = function(x) {
		var x;
		if (x < 0) {
			return -x;
		}
		return x;
	};
	fdiv = function(x, y) {
		var x, x$1, y;
		return (((x$1 = $div64(($shiftLeft64((new $Int64(0, x)), 6)), (new $Int64(0, y)), false), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	fmul = function(x, y) {
		var x, x$1, x$2, y;
		return (((x$1 = $shiftRightInt64(((x$2 = $mul64((new $Int64(0, x)), (new $Int64(0, y))), new $Int64(x$2.$high + 0, x$2.$low + 32))), 6), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
	};
	dotProduct = function(x, y, q) {
		var hi, hi1, hi2, l, lo, lo1, lo2, m, q, s, x, y;
		l = ((($imul(((((x >> 0)) & 65535)), ((q[0] >> 0)))) >>> 0));
		m = $imul(((((x >> 0)) >> 16 >> 0)), ((q[0] >> 0)));
		lo1 = l + ((((m >>> 0)) << 16 >>> 0)) >>> 0;
		hi1 = (((m >> 16 >> 0)) + ((((l >> 0)) >> 31 >> 0)) >> 0) + bool2int32(lo1 < l) >> 0;
		l = ((($imul(((((y >> 0)) & 65535)), ((q[1] >> 0)))) >>> 0));
		m = $imul(((((y >> 0)) >> 16 >> 0)), ((q[1] >> 0)));
		lo2 = l + ((((m >>> 0)) << 16 >>> 0)) >>> 0;
		hi2 = (((m >> 16 >> 0)) + ((((l >> 0)) >> 31 >> 0)) >> 0) + bool2int32(lo2 < l) >> 0;
		lo = lo1 + lo2 >>> 0;
		hi = (hi1 + hi2 >> 0) + bool2int32(lo < lo1) >> 0;
		s = hi >> 31 >> 0;
		l = lo + ((s >>> 0)) >>> 0;
		hi = hi + ((s + bool2int32(l < lo) >> 0)) >> 0;
		lo = l;
		l = lo + 8192 >>> 0;
		hi = hi + (bool2int32(l < lo)) >> 0;
		return ((((((((hi >>> 0)) << 18 >>> 0)) | ((l >>> 14 >>> 0))) >>> 0) >> 0));
	};
	mulDiv = function(x, y, z) {
		var _tmp, _tmp$1, x, x$1, x$2, xy, y, z;
		xy = $mul64(x, y);
		if ((z.$high < 0 || (z.$high === 0 && z.$low < 0))) {
			_tmp = new $Int64(-xy.$high, -xy.$low);
			_tmp$1 = new $Int64(-z.$high, -z.$low);
			xy = _tmp;
			z = _tmp$1;
		}
		if ((xy.$high > 0 || (xy.$high === 0 && xy.$low >= 0))) {
			xy = (x$1 = $div64(z, new $Int64(0, 2), false), new $Int64(xy.$high + x$1.$high, xy.$low + x$1.$low));
		} else {
			xy = (x$2 = $div64(z, new $Int64(0, 2), false), new $Int64(xy.$high - x$2.$high, xy.$low - x$2.$low));
		}
		return $div64(xy, z, false);
	};
	hinter.ptr.prototype.round = function(x) {
		var _q, _q$1, h, ret, ret$1, x;
		h = this;
		if (h.gs.roundPeriod === 0) {
			return x;
		}
		if (x >= 0) {
			ret = (x - h.gs.roundPhase >> 0) + h.gs.roundThreshold >> 0;
			if (h.gs.roundSuper45) {
				ret = (_q = ret / (h.gs.roundPeriod), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				ret = $imul(ret, (h.gs.roundPeriod));
			} else {
				ret = ret & (-h.gs.roundPeriod);
			}
			if (!((x === 0)) && ret < 0) {
				ret = 0;
			}
			return ret + h.gs.roundPhase >> 0;
		}
		ret$1 = (-x - h.gs.roundPhase >> 0) + h.gs.roundThreshold >> 0;
		if (h.gs.roundSuper45) {
			ret$1 = (_q$1 = ret$1 / (h.gs.roundPeriod), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			ret$1 = $imul(ret$1, (h.gs.roundPeriod));
		} else {
			ret$1 = ret$1 & (-h.gs.roundPeriod);
		}
		if (ret$1 < 0) {
			ret$1 = 0;
		}
		return -ret$1 - h.gs.roundPhase >> 0;
	};
	hinter.prototype.round = function(x) { return this.$val.round(x); };
	bool2int32 = function(b) {
		var b;
		if (b) {
			return 1;
		}
		return 0;
	};
	FormatError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "freetype: invalid TrueType format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "freetype: unsupported TrueType feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	u32 = function(b, i) {
		var b, i, x, x$1, x$2;
		return ((((((((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) >>> 0)) << 24 >>> 0) | ((((x = i + 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) >>> 0)) << 16 >>> 0)) >>> 0) | ((((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$1])) >>> 0)) << 8 >>> 0)) >>> 0) | (((x$2 = i + 3 >> 0, ((x$2 < 0 || x$2 >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x$2])) >>> 0))) >>> 0;
	};
	u16 = function(b, i) {
		var b, i, x;
		return ((((((i < 0 || i >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + i]) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x = i + 1 >> 0, ((x < 0 || x >= b.$length) ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + x])) << 16 >>> 16))) >>> 0;
	};
	readTable = function(ttf, offsetLength) {
		var _r, _r$1, _r$2, end, length, offset, offsetLength, ttf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; end = $f.end; length = $f.length; offset = $f.offset; offsetLength = $f.offsetLength; ttf = $f.ttf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		offset = ((u32(offsetLength, 0) >> 0));
		/* */ if (offset < 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (offset < 0) { */ case 1:
			_r = fmt.Sprintf("offset too large: %d", new sliceType$7([new $Uint32(((offset >>> 0)))])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r))];
		/* } */ case 2:
		length = ((u32(offsetLength, 4) >> 0));
		/* */ if (length < 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (length < 0) { */ case 4:
			_r$1 = fmt.Sprintf("length too large: %d", new sliceType$7([new $Uint32(((length >>> 0)))])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r$1))];
		/* } */ case 5:
		end = offset + length >> 0;
		/* */ if (end < 0 || end > ttf.$length) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (end < 0 || end > ttf.$length) { */ case 7:
			_r$2 = fmt.Sprintf("offset + length too large: %d", new sliceType$7([new $Uint32((((offset >>> 0)) + ((length >>> 0)) >>> 0))])); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return [sliceType$6.nil, new FormatError((_r$2))];
		/* } */ case 8:
		$s = -1; return [$subslice(ttf, offset, end), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readTable }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.end = end; $f.length = length; $f.offset = offset; $f.offsetLength = offsetLength; $f.ttf = ttf; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseSubtables = function(table, name, offset, size, pred) {
		var _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _v, bestOffset, bestPID, i, nSubtables, name, offset, ok, pidPsid, pred, retErr, size, table, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _v = $f._v; bestOffset = $f.bestOffset; bestPID = $f.bestPID; i = $f.i; nSubtables = $f.nSubtables; name = $f.name; offset = $f.offset; ok = $f.ok; pidPsid = $f.pidPsid; pred = $f.pred; retErr = $f.retErr; size = $f.size; table = $f.table; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		bestOffset = 0;
		bestPID = 0;
		retErr = $ifaceNil;
		if (table.$length < 4) {
			_tmp = 0;
			_tmp$1 = 0;
			_tmp$2 = new FormatError((name + " too short"));
			bestOffset = _tmp;
			bestPID = _tmp$1;
			retErr = _tmp$2;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		nSubtables = ((u16(table, 2) >> 0));
		if (table.$length < (($imul(size, nSubtables)) + offset >> 0)) {
			_tmp$3 = 0;
			_tmp$4 = 0;
			_tmp$5 = new FormatError((name + " too short"));
			bestOffset = _tmp$3;
			bestPID = _tmp$4;
			retErr = _tmp$5;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		ok = false;
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < nSubtables)) { break; } */ if(!(i < nSubtables)) { $s = 2; continue; }
			if (!(!(pred === $throwNilPointerError))) { _v = false; $s = 5; continue s; }
			_r = pred($subslice(table, offset)); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_v = !_r; case 5:
			/* */ if (_v) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_v) { */ case 3:
				_tmp$6 = i + 1 >> 0;
				_tmp$7 = offset + size >> 0;
				i = _tmp$6;
				offset = _tmp$7;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			pidPsid = u32(table, offset);
			if ((pidPsid === 3) || (pidPsid === 4)) {
				_tmp$8 = offset;
				_tmp$9 = pidPsid >>> 16 >>> 0;
				_tmp$10 = true;
				bestOffset = _tmp$8;
				bestPID = _tmp$9;
				ok = _tmp$10;
				/* break; */ $s = 2; continue;
			} else if ((pidPsid === 196608) || (pidPsid === 196609) || (pidPsid === 196618)) {
				_tmp$11 = offset;
				_tmp$12 = pidPsid >>> 16 >>> 0;
				_tmp$13 = true;
				bestOffset = _tmp$11;
				bestPID = _tmp$12;
				ok = _tmp$13;
			}
			_tmp$14 = i + 1 >> 0;
			_tmp$15 = offset + size >> 0;
			i = _tmp$14;
			offset = _tmp$15;
		/* } */ $s = 1; continue; case 2:
		if (!ok) {
			_tmp$16 = 0;
			_tmp$17 = 0;
			_tmp$18 = new UnsupportedError((name + " encoding"));
			bestOffset = _tmp$16;
			bestPID = _tmp$17;
			retErr = _tmp$18;
			$s = -1; return [bestOffset, bestPID, retErr];
		}
		_tmp$19 = bestOffset;
		_tmp$20 = bestPID;
		_tmp$21 = $ifaceNil;
		bestOffset = _tmp$19;
		bestPID = _tmp$20;
		retErr = _tmp$21;
		$s = -1; return [bestOffset, bestPID, retErr];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseSubtables }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._v = _v; $f.bestOffset = bestOffset; $f.bestPID = bestPID; $f.i = i; $f.nSubtables = nSubtables; $f.name = name; $f.offset = offset; $f.ok = ok; $f.pidPsid = pidPsid; $f.pred = pred; $f.retErr = retErr; $f.size = size; $f.table = table; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.ptr.prototype.parseCmap = function() {
		var _1, _q, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, cmapFormat, err, f, i, i$1, i$2, i$3, i$4, language, language$1, length, nGroups, offset, segCount, segCountX2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; cmapFormat = $f.cmapFormat; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; language = $f.language; language$1 = $f.language$1; length = $f.length; nGroups = $f.nGroups; offset = $f.offset; segCount = $f.segCount; segCountX2 = $f.segCountX2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = parseSubtables(f.cmap, "cmap", 4, 8, $throwNilPointerError); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		offset = _tuple[0];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		offset = ((u32(f.cmap, offset + 4 >> 0) >> 0));
		if (offset <= 0 || offset > f.cmap.$length) {
			$s = -1; return new FormatError("bad cmap offset");
		}
		cmapFormat = u16(f.cmap, offset);
			_1 = cmapFormat;
			/* */ if (_1 === (4)) { $s = 3; continue; }
			/* */ if (_1 === (12)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === (4)) { */ case 3:
				language = u16(f.cmap, offset + 4 >> 0);
				/* */ if (!((language === 0))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (!((language === 0))) { */ case 6:
					_r$1 = fmt.Sprintf("language: %d", new sliceType$7([new $Uint16(language)])); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					$s = -1; return new UnsupportedError((_r$1));
				/* } */ case 7:
				segCountX2 = ((u16(f.cmap, offset + 6 >> 0) >> 0));
				/* */ if ((_r$2 = segCountX2 % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 1) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((_r$2 = segCountX2 % 2, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 1) { */ case 9:
					_r$3 = fmt.Sprintf("bad segCountX2: %d", new sliceType$7([new $Int(segCountX2)])); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					$s = -1; return new FormatError((_r$3));
				/* } */ case 10:
				segCount = (_q = segCountX2 / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				offset = offset + (14) >> 0;
				f.cm = $makeSlice(sliceType$8, segCount);
				i = 0;
				while (true) {
					if (!(i < segCount)) { break; }
					(x = f.cm, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).end = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i = i + (1) >> 0;
				}
				offset = offset + (2) >> 0;
				i$1 = 0;
				while (true) {
					if (!(i$1 < segCount)) { break; }
					(x$1 = f.cm, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1])).start = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$1 = i$1 + (1) >> 0;
				}
				i$2 = 0;
				while (true) {
					if (!(i$2 < segCount)) { break; }
					(x$2 = f.cm, ((i$2 < 0 || i$2 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$2])).delta = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$2 = i$2 + (1) >> 0;
				}
				i$3 = 0;
				while (true) {
					if (!(i$3 < segCount)) { break; }
					(x$3 = f.cm, ((i$3 < 0 || i$3 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i$3])).offset = ((u16(f.cmap, offset) >>> 0));
					offset = offset + (2) >> 0;
					i$3 = i$3 + (1) >> 0;
				}
				f.cmapIndexes = $subslice(f.cmap, offset);
				$s = -1; return $ifaceNil;
			/* } else if (_1 === (12)) { */ case 4:
				/* */ if (!((u16(f.cmap, offset + 2 >> 0) === 0))) { $s = 12; continue; }
				/* */ $s = 13; continue;
				/* if (!((u16(f.cmap, offset + 2 >> 0) === 0))) { */ case 12:
					_r$4 = fmt.Sprintf("cmap format: % x", new sliceType$7([$subslice(f.cmap, offset, (offset + 4 >> 0))])); /* */ $s = 14; case 14: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return new FormatError((_r$4));
				/* } */ case 13:
				length = u32(f.cmap, offset + 4 >> 0);
				language$1 = u32(f.cmap, offset + 8 >> 0);
				/* */ if (!((language$1 === 0))) { $s = 15; continue; }
				/* */ $s = 16; continue;
				/* if (!((language$1 === 0))) { */ case 15:
					_r$5 = fmt.Sprintf("language: %d", new sliceType$7([new $Uint32(language$1)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					$s = -1; return new UnsupportedError((_r$5));
				/* } */ case 16:
				nGroups = u32(f.cmap, offset + 12 >> 0);
				if (!((length === (($imul(12, nGroups) >>> 0) + 16 >>> 0)))) {
					$s = -1; return new FormatError("inconsistent cmap length");
				}
				offset = offset + (16) >> 0;
				f.cm = $makeSlice(sliceType$8, nGroups);
				i$4 = 0;
				while (true) {
					if (!(i$4 < nGroups)) { break; }
					(x$4 = f.cm, ((i$4 < 0 || i$4 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + i$4])).start = u32(f.cmap, offset + 0 >> 0);
					(x$5 = f.cm, ((i$4 < 0 || i$4 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + i$4])).end = u32(f.cmap, offset + 4 >> 0);
					(x$7 = f.cm, ((i$4 < 0 || i$4 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i$4])).delta = u32(f.cmap, offset + 8 >> 0) - (x$6 = f.cm, ((i$4 < 0 || i$4 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$4])).start >>> 0;
					offset = offset + (12) >> 0;
					i$4 = i$4 + (1) >>> 0;
				}
				$s = -1; return $ifaceNil;
			/* } */ case 5:
		case 2:
		_r$6 = fmt.Sprintf("cmap format: %d", new sliceType$7([new $Uint16(cmapFormat)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return new UnsupportedError((_r$6));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseCmap }; } $f._1 = _1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f.cmapFormat = cmapFormat; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.language = language; $f.language$1 = language$1; $f.length = length; $f.nGroups = nGroups; $f.offset = offset; $f.segCount = segCount; $f.segCountX2 = segCountX2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseCmap = function() { return this.$val.parseCmap(); };
	Font.ptr.prototype.parseHead = function() {
		var _1, _r, _r$1, f, i, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; i = $f.i; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.head.$length === 54))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.head.$length === 54))) { */ case 1:
			_r = fmt.Sprintf("bad head length: %d", new sliceType$7([new $Int(f.head.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.fUnitsPerEm = ((u16(f.head, 18) >> 0));
		f.bounds.Min.X = ((((u16(f.head, 36) << 16 >> 16)) >> 0));
		f.bounds.Min.Y = ((((u16(f.head, 38) << 16 >> 16)) >> 0));
		f.bounds.Max.X = ((((u16(f.head, 40) << 16 >> 16)) >> 0));
		f.bounds.Max.Y = ((((u16(f.head, 42) << 16 >> 16)) >> 0));
			i = u16(f.head, 50);
			_1 = i;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === (0)) { */ case 5:
				f.locaOffsetFormat = 1;
				$s = 8; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.locaOffsetFormat = 2;
				$s = 8; continue;
			/* } else { */ case 7:
				_r$1 = fmt.Sprintf("bad indexToLocFormat: %d", new sliceType$7([new $Uint16(i)])); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return new FormatError((_r$1));
			/* } */ case 8:
		case 4:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseHead }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.i = i; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseHead = function() { return this.$val.parseHead(); };
	Font.ptr.prototype.parseHhea = function() {
		var _r, _r$1, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.hhea.$length === 36))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.hhea.$length === 36))) { */ case 1:
			_r = fmt.Sprintf("bad hhea length: %d", new sliceType$7([new $Int(f.hhea.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.ascent = ((((u16(f.hhea, 4) << 16 >> 16)) >> 0));
		f.descent = ((((u16(f.hhea, 6) << 16 >> 16)) >> 0));
		f.nHMetric = ((u16(f.hhea, 34) >> 0));
		/* */ if (!(((($imul(4, f.nHMetric)) + ($imul(2, ((f.nGlyph - f.nHMetric >> 0)))) >> 0) === f.hmtx.$length))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!(((($imul(4, f.nHMetric)) + ($imul(2, ((f.nGlyph - f.nHMetric >> 0)))) >> 0) === f.hmtx.$length))) { */ case 4:
			_r$1 = fmt.Sprintf("bad hmtx length: %d", new sliceType$7([new $Int(f.hmtx.$length)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r$1));
		/* } */ case 5:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseHhea }; } $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseHhea = function() { return this.$val.parseHhea(); };
	Font.ptr.prototype.parseKern = function() {
		var _r, _r$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, coverage, f, length, n, offset, version, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; coverage = $f.coverage; f = $f.f; length = $f.length; n = $f.n; offset = $f.offset; version = $f.version; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		if (f.kern.$length === 0) {
			if (!((f.nKern === 0))) {
				$s = -1; return new FormatError("bad kern table length");
			}
			$s = -1; return $ifaceNil;
		}
		if (f.kern.$length < 18) {
			$s = -1; return new FormatError("kern data too short");
		}
		_tmp = u16(f.kern, 0);
		_tmp$1 = 2;
		version = _tmp;
		offset = _tmp$1;
		/* */ if (!((version === 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((version === 0))) { */ case 1:
			_r = fmt.Sprintf("kern version: %d", new sliceType$7([new $Uint16(version)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r));
		/* } */ case 2:
		_tmp$2 = u16(f.kern, offset);
		_tmp$3 = offset + 2 >> 0;
		n = _tmp$2;
		offset = _tmp$3;
		if (n === 0) {
			$s = -1; return new UnsupportedError("kern nTables: 0");
		}
		offset = offset + (2) >> 0;
		_tmp$4 = ((u16(f.kern, offset) >> 0));
		_tmp$5 = offset + 2 >> 0;
		length = _tmp$4;
		offset = _tmp$5;
		_tmp$6 = u16(f.kern, offset);
		_tmp$7 = offset + 2 >> 0;
		coverage = _tmp$6;
		offset = _tmp$7;
		/* */ if (!((coverage === 1))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((coverage === 1))) { */ case 4:
			_r$1 = fmt.Sprintf("kern coverage: 0x%04x", new sliceType$7([new $Uint16(coverage)])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r$1));
		/* } */ case 5:
		_tmp$8 = ((u16(f.kern, offset) >> 0));
		_tmp$9 = offset + 2 >> 0;
		f.nKern = _tmp$8;
		offset = _tmp$9;
		if (!((($imul(6, f.nKern)) === (length - 14 >> 0)))) {
			$s = -1; return new FormatError("bad kern table length");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseKern }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.coverage = coverage; $f.f = f; $f.length = length; $f.n = n; $f.offset = offset; $f.version = version; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseKern = function() { return this.$val.parseKern(); };
	Font.ptr.prototype.parseMaxp = function() {
		var _r, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* */ if (!((f.maxp.$length === 32))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((f.maxp.$length === 32))) { */ case 1:
			_r = fmt.Sprintf("bad maxp length: %d", new sliceType$7([new $Int(f.maxp.$length)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r));
		/* } */ case 2:
		f.nGlyph = ((u16(f.maxp, 4) >> 0));
		f.maxTwilightPoints = u16(f.maxp, 16);
		f.maxStorage = u16(f.maxp, 18);
		f.maxFunctionDefs = u16(f.maxp, 20);
		f.maxStackElements = u16(f.maxp, 24);
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.parseMaxp }; } $f._r = _r; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.parseMaxp = function() { return this.$val.parseMaxp(); };
	Font.ptr.prototype.scale = function(x) {
		var _q, _q$1, _q$2, f, x;
		f = this;
		if (x >= 0) {
			x = x + ((_q = ((f.fUnitsPerEm >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		} else {
			x = x - ((_q$1 = ((f.fUnitsPerEm >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"))) >> 0;
		}
		return (_q$2 = x / ((f.fUnitsPerEm >> 0)), (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Font.prototype.scale = function(x) { return this.$val.scale(x); };
	Font.ptr.prototype.Bounds = function(scale) {
		var b, f, scale;
		f = this;
		b = $clone(f.bounds, fixed.Rectangle26_6);
		b.Min.X = f.scale($imul(scale, b.Min.X));
		b.Min.Y = f.scale($imul(scale, b.Min.Y));
		b.Max.X = f.scale($imul(scale, b.Max.X));
		b.Max.Y = f.scale($imul(scale, b.Max.Y));
		return b;
	};
	Font.prototype.Bounds = function(scale) { return this.$val.Bounds(scale); };
	Font.ptr.prototype.FUnitsPerEm = function() {
		var f;
		f = this;
		return f.fUnitsPerEm;
	};
	Font.prototype.FUnitsPerEm = function() { return this.$val.FUnitsPerEm(); };
	Font.ptr.prototype.Index = function(x) {
		var _q, _tmp, _tmp$1, c, cm$1, f, h, i, j, offset, x, x$1;
		f = this;
		c = ((x >>> 0));
		_tmp = 0;
		_tmp$1 = f.cm.$length;
		i = _tmp;
		j = _tmp$1;
		while (true) {
			if (!(i < j)) { break; }
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cm$1 = (x$1 = f.cm, ((h < 0 || h >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + h]));
			if (c < cm$1.start) {
				j = h;
			} else if (cm$1.end < c) {
				i = h + 1 >> 0;
			} else if (cm$1.offset === 0) {
				return (((c + cm$1.delta >>> 0) << 16 >>> 16));
			} else {
				offset = ((cm$1.offset >> 0)) + ($imul(2, (((h - f.cm.$length >> 0) + (((c - cm$1.start >>> 0) >> 0)) >> 0)))) >> 0;
				return ((u16(f.cmapIndexes, offset) << 16 >>> 16));
			}
		}
		return 0;
	};
	Font.prototype.Index = function(x) { return this.$val.Index(x); };
	Font.ptr.prototype.Name = function(id) {
		var _i, _i$1, _q, _r, _ref, _ref$1, _tmp, _tmp$1, _tuple, c, dst, err, f, i, i$1, id, length, offset, platformID, src, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _q = $f._q; _r = $f._r; _ref = $f._ref; _ref$1 = $f._ref$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; c = $f.c; dst = $f.dst; err = $f.err; f = $f.f; i = $f.i; i$1 = $f.i$1; id = $f.id; length = $f.length; offset = $f.offset; platformID = $f.platformID; src = $f.src; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		id = [id];
		f = this;
		_r = parseSubtables(f.name, "name", 6, 12, (function(id) { return function(b) {
			var b;
			return ((u16(b, 6) << 16 >>> 16)) === id[0];
		}; })(id)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		platformID = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return "";
		}
		_tmp = u16(f.name, 4) + u16(f.name, x + 10 >> 0) << 16 >>> 16;
		_tmp$1 = u16(f.name, x + 8 >> 0);
		offset = _tmp;
		length = _tmp$1;
		src = $subslice(f.name, offset, (offset + length << 16 >>> 16));
		dst = sliceType$6.nil;
		if (!((platformID === 1))) {
			if (!(((src.$length & 1) === 0))) {
				$s = -1; return "";
			}
			dst = $makeSlice(sliceType$6, (_q = src.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = dst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				((i < 0 || i >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i] = printable(u16(src, $imul(2, i))));
				_i++;
			}
		} else {
			dst = $makeSlice(sliceType$6, src.$length);
			_ref$1 = src;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				((i$1 < 0 || i$1 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + i$1] = printable(((c << 16 >>> 16))));
				_i$1++;
			}
		}
		$s = -1; return ($bytesToString(dst));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.Name }; } $f._i = _i; $f._i$1 = _i$1; $f._q = _q; $f._r = _r; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.c = c; $f.dst = dst; $f.err = err; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.id = id; $f.length = length; $f.offset = offset; $f.platformID = platformID; $f.src = src; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.Name = function(id) { return this.$val.Name(id); };
	printable = function(r) {
		var r;
		if (32 <= r && r < 127) {
			return ((r << 24 >>> 24));
		}
		return 63;
	};
	Font.ptr.prototype.unscaledHMetric = function(i) {
		var f, h, i, j, p;
		h = new HMetric.ptr(0, 0);
		f = this;
		j = ((i >> 0));
		if (j < 0 || f.nGlyph <= j) {
			HMetric.copy(h, new HMetric.ptr(0, 0));
			return h;
		}
		if (j >= f.nHMetric) {
			p = $imul(4, ((f.nHMetric - 1 >> 0)));
			HMetric.copy(h, new HMetric.ptr(((u16(f.hmtx, p) >> 0)), ((((u16(f.hmtx, (p + ($imul(2, ((j - f.nHMetric >> 0)))) >> 0) + 4 >> 0) << 16 >> 16)) >> 0))));
			return h;
		}
		HMetric.copy(h, new HMetric.ptr(((u16(f.hmtx, $imul(4, j)) >> 0)), ((((u16(f.hmtx, ($imul(4, j)) + 2 >> 0) << 16 >> 16)) >> 0))));
		return h;
	};
	Font.prototype.unscaledHMetric = function(i) { return this.$val.unscaledHMetric(i); };
	Font.ptr.prototype.HMetric = function(scale, i) {
		var f, h, i, scale;
		f = this;
		h = $clone(f.unscaledHMetric(i), HMetric);
		h.AdvanceWidth = f.scale($imul(scale, h.AdvanceWidth));
		h.LeftSideBearing = f.scale($imul(scale, h.LeftSideBearing));
		return h;
	};
	Font.prototype.HMetric = function(scale, i) { return this.$val.HMetric(scale, i); };
	Font.ptr.prototype.unscaledVMetric = function(i, yMax) {
		var f, i, j, sTypoAscender, sTypoDescender, v, yMax;
		v = new VMetric.ptr(0, 0);
		f = this;
		j = ((i >> 0));
		if (j < 0 || f.nGlyph <= j) {
			VMetric.copy(v, new VMetric.ptr(0, 0));
			return v;
		}
		if ((($imul(4, j)) + 4 >> 0) <= f.vmtx.$length) {
			VMetric.copy(v, new VMetric.ptr(((u16(f.vmtx, $imul(4, j)) >> 0)), ((((u16(f.vmtx, ($imul(4, j)) + 2 >> 0) << 16 >> 16)) >> 0))));
			return v;
		}
		if (f.os2.$length >= 72) {
			sTypoAscender = ((((u16(f.os2, 68) << 16 >> 16)) >> 0));
			sTypoDescender = ((((u16(f.os2, 70) << 16 >> 16)) >> 0));
			VMetric.copy(v, new VMetric.ptr(sTypoAscender - sTypoDescender >> 0, sTypoAscender - yMax >> 0));
			return v;
		}
		VMetric.copy(v, new VMetric.ptr(((f.fUnitsPerEm >> 0)), 0));
		return v;
	};
	Font.prototype.unscaledVMetric = function(i, yMax) { return this.$val.unscaledVMetric(i, yMax); };
	Font.ptr.prototype.VMetric = function(scale, i) {
		var f, i, scale, v;
		f = this;
		v = $clone(f.unscaledVMetric(i, 0), VMetric);
		v.AdvanceHeight = f.scale($imul(scale, v.AdvanceHeight));
		v.TopSideBearing = f.scale($imul(scale, v.TopSideBearing));
		return v;
	};
	Font.prototype.VMetric = function(scale, i) { return this.$val.VMetric(scale, i); };
	Font.ptr.prototype.Kern = function(scale, i0, i1) {
		var _q, _tmp, _tmp$1, f, g, hi, i, i0, i1, ig, lo, scale;
		f = this;
		if (f.nKern === 0) {
			return 0;
		}
		g = ((((i0 >>> 0)) << 16 >>> 0) | ((i1 >>> 0))) >>> 0;
		_tmp = 0;
		_tmp$1 = f.nKern;
		lo = _tmp;
		hi = _tmp$1;
		while (true) {
			if (!(lo < hi)) { break; }
			i = (_q = ((lo + hi >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			ig = u32(f.kern, 18 + ($imul(6, i)) >> 0);
			if (ig < g) {
				lo = i + 1 >> 0;
			} else if (ig > g) {
				hi = i;
			} else {
				return f.scale($imul(scale, ((((u16(f.kern, 22 + ($imul(6, i)) >> 0) << 16 >> 16)) >> 0))));
			}
		}
		return 0;
	};
	Font.prototype.Kern = function(scale, i0, i1) { return this.$val.Kern(scale, i0, i1); };
	Parse = function(ttf) {
		var _r, _tuple, err, font$1, ttf, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; font$1 = $f.font$1; ttf = $f.ttf; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		font$1 = ptrType$1.nil;
		err = $ifaceNil;
		_r = parse(ttf, 0); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		font$1 = _tuple[0];
		err = _tuple[1];
		$s = -1; return [font$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.font$1 = font$1; $f.ttf = ttf; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parse = function(ttf, offset) {
		var _1, _2, _q, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$2, _r$20, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, err, f, font$1, i, magic, n, numFonts, offset, offset$1, originalOffset, ttcVersion, ttf, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$2 = $f._r$2; _r$20 = $f._r$20; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$10 = $f._tuple$10; _tuple$11 = $f._tuple$11; _tuple$12 = $f._tuple$12; _tuple$13 = $f._tuple$13; _tuple$14 = $f._tuple$14; _tuple$15 = $f._tuple$15; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; err = $f.err; f = $f.f; font$1 = $f.font$1; i = $f.i; magic = $f.magic; n = $f.n; numFonts = $f.numFonts; offset = $f.offset; offset$1 = $f.offset$1; originalOffset = $f.originalOffset; ttcVersion = $f.ttcVersion; ttf = $f.ttf; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		font$1 = ptrType$1.nil;
		err = $ifaceNil;
		if ((ttf.$length - offset >> 0) < 12) {
			err = new FormatError("TTF data is too short");
			$s = -1; return [font$1, err];
		}
		originalOffset = offset;
		_tmp = u32(ttf, offset);
		_tmp$1 = offset + 4 >> 0;
		magic = _tmp;
		offset = _tmp$1;
			_1 = magic;
			/* */ if (_1 === (65536)) { $s = 2; continue; }
			/* */ if (_1 === (1953784678)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (65536)) { */ case 2:
				$s = 5; continue;
			/* } else if (_1 === (1953784678)) { */ case 3:
				if (!((originalOffset === 0))) {
					err = new FormatError("recursive TTC");
					$s = -1; return [font$1, err];
				}
				_tmp$2 = u32(ttf, offset);
				_tmp$3 = offset + 4 >> 0;
				ttcVersion = _tmp$2;
				offset$1 = _tmp$3;
				if (!((ttcVersion === 65536)) && !((ttcVersion === 131072))) {
					err = new FormatError("bad TTC version");
					$s = -1; return [font$1, err];
				}
				_tmp$4 = ((u32(ttf, offset$1) >> 0));
				_tmp$5 = offset$1 + 4 >> 0;
				numFonts = _tmp$4;
				offset$1 = _tmp$5;
				if (numFonts <= 0) {
					err = new FormatError("bad number of TTC fonts");
					$s = -1; return [font$1, err];
				}
				if ((_q = $subslice(ttf, offset$1).$length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) < numFonts) {
					err = new FormatError("TTC offset table is too short");
					$s = -1; return [font$1, err];
				}
				offset$1 = ((u32(ttf, offset$1) >> 0));
				if (offset$1 <= 0 || offset$1 > ttf.$length) {
					err = new FormatError("bad TTC offset");
					$s = -1; return [font$1, err];
				}
				_r = parse(ttf, offset$1); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				font$1 = _tuple[0];
				err = _tuple[1];
				$s = -1; return [font$1, err];
			/* } else { */ case 4:
				err = new FormatError("bad TTF version");
				$s = -1; return [font$1, err];
			/* } */ case 5:
		case 1:
		_tmp$6 = ((u16(ttf, offset) >> 0));
		_tmp$7 = offset + 2 >> 0;
		n = _tmp$6;
		offset = _tmp$7;
		offset = offset + (6) >> 0;
		if (ttf.$length < (($imul(16, n)) + offset >> 0)) {
			err = new FormatError("TTF data is too short");
			$s = -1; return [font$1, err];
		}
		f = new Font.ptr(sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$6.nil, sliceType$8.nil, 0, 0, 0, 0, 0, 0, 0, new fixed.Rectangle26_6.ptr(new fixed.Point26_6.ptr(0, 0), new fixed.Point26_6.ptr(0, 0)), 0, 0, 0, 0);
		i = 0;
		/* while (true) { */ case 7:
			/* if (!(i < n)) { break; } */ if(!(i < n)) { $s = 8; continue; }
			x = ($imul(16, i)) + offset >> 0;
				_2 = ($bytesToString($subslice(ttf, x, (x + 4 >> 0))));
				/* */ if (_2 === ("cmap")) { $s = 10; continue; }
				/* */ if (_2 === ("cvt ")) { $s = 11; continue; }
				/* */ if (_2 === ("fpgm")) { $s = 12; continue; }
				/* */ if (_2 === ("glyf")) { $s = 13; continue; }
				/* */ if (_2 === ("hdmx")) { $s = 14; continue; }
				/* */ if (_2 === ("head")) { $s = 15; continue; }
				/* */ if (_2 === ("hhea")) { $s = 16; continue; }
				/* */ if (_2 === ("hmtx")) { $s = 17; continue; }
				/* */ if (_2 === ("kern")) { $s = 18; continue; }
				/* */ if (_2 === ("loca")) { $s = 19; continue; }
				/* */ if (_2 === ("maxp")) { $s = 20; continue; }
				/* */ if (_2 === ("name")) { $s = 21; continue; }
				/* */ if (_2 === ("OS/2")) { $s = 22; continue; }
				/* */ if (_2 === ("prep")) { $s = 23; continue; }
				/* */ if (_2 === ("vmtx")) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_2 === ("cmap")) { */ case 10:
					_r$1 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 26; case 26: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$1 = _r$1;
					f.cmap = _tuple$1[0];
					err = _tuple$1[1];
					$s = 25; continue;
				/* } else if (_2 === ("cvt ")) { */ case 11:
					_r$2 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 27; case 27: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					f.cvt = _tuple$2[0];
					err = _tuple$2[1];
					$s = 25; continue;
				/* } else if (_2 === ("fpgm")) { */ case 12:
					_r$3 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 28; case 28: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					f.fpgm = _tuple$3[0];
					err = _tuple$3[1];
					$s = 25; continue;
				/* } else if (_2 === ("glyf")) { */ case 13:
					_r$4 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 29; case 29: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$4 = _r$4;
					f.glyf = _tuple$4[0];
					err = _tuple$4[1];
					$s = 25; continue;
				/* } else if (_2 === ("hdmx")) { */ case 14:
					_r$5 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 30; case 30: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$5 = _r$5;
					f.hdmx = _tuple$5[0];
					err = _tuple$5[1];
					$s = 25; continue;
				/* } else if (_2 === ("head")) { */ case 15:
					_r$6 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 31; case 31: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$6 = _r$6;
					f.head = _tuple$6[0];
					err = _tuple$6[1];
					$s = 25; continue;
				/* } else if (_2 === ("hhea")) { */ case 16:
					_r$7 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 32; case 32: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
					_tuple$7 = _r$7;
					f.hhea = _tuple$7[0];
					err = _tuple$7[1];
					$s = 25; continue;
				/* } else if (_2 === ("hmtx")) { */ case 17:
					_r$8 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 33; case 33: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_tuple$8 = _r$8;
					f.hmtx = _tuple$8[0];
					err = _tuple$8[1];
					$s = 25; continue;
				/* } else if (_2 === ("kern")) { */ case 18:
					_r$9 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 34; case 34: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_tuple$9 = _r$9;
					f.kern = _tuple$9[0];
					err = _tuple$9[1];
					$s = 25; continue;
				/* } else if (_2 === ("loca")) { */ case 19:
					_r$10 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 35; case 35: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_tuple$10 = _r$10;
					f.loca = _tuple$10[0];
					err = _tuple$10[1];
					$s = 25; continue;
				/* } else if (_2 === ("maxp")) { */ case 20:
					_r$11 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 36; case 36: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					_tuple$11 = _r$11;
					f.maxp = _tuple$11[0];
					err = _tuple$11[1];
					$s = 25; continue;
				/* } else if (_2 === ("name")) { */ case 21:
					_r$12 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 37; case 37: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$12 = _r$12;
					f.name = _tuple$12[0];
					err = _tuple$12[1];
					$s = 25; continue;
				/* } else if (_2 === ("OS/2")) { */ case 22:
					_r$13 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 38; case 38: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					_tuple$13 = _r$13;
					f.os2 = _tuple$13[0];
					err = _tuple$13[1];
					$s = 25; continue;
				/* } else if (_2 === ("prep")) { */ case 23:
					_r$14 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 39; case 39: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					_tuple$14 = _r$14;
					f.prep = _tuple$14[0];
					err = _tuple$14[1];
					$s = 25; continue;
				/* } else if (_2 === ("vmtx")) { */ case 24:
					_r$15 = readTable(ttf, $subslice(ttf, (x + 8 >> 0), (x + 16 >> 0))); /* */ $s = 40; case 40: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					_tuple$15 = _r$15;
					f.vmtx = _tuple$15[0];
					err = _tuple$15[1];
				/* } */ case 25:
			case 9:
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [font$1, err];
			}
			i = i + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		_r$16 = f.parseHead(); /* */ $s = 41; case 41: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
		err = _r$16;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$17 = f.parseMaxp(); /* */ $s = 42; case 42: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
		err = _r$17;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$18 = f.parseCmap(); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
		err = _r$18;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$19 = f.parseKern(); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
		err = _r$19;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		_r$20 = f.parseHhea(); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
		err = _r$20;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [font$1, err];
		}
		font$1 = f;
		$s = -1; return [font$1, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parse }; } $f._1 = _1; $f._2 = _2; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$2 = _r$2; $f._r$20 = _r$20; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$10 = _tuple$10; $f._tuple$11 = _tuple$11; $f._tuple$12 = _tuple$12; $f._tuple$13 = _tuple$13; $f._tuple$14 = _tuple$14; $f._tuple$15 = _tuple$15; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.err = err; $f.f = f; $f.font$1 = font$1; $f.i = i; $f.magic = magic; $f.n = n; $f.numFonts = numFonts; $f.offset = offset; $f.offset$1 = offset$1; $f.originalOffset = originalOffset; $f.ttcVersion = ttcVersion; $f.ttf = ttf; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	ptrType.methods = [{prop: "size", name: "size", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Float64], false)}, {prop: "dpi", name: "dpi", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Float64], false)}, {prop: "hinting", name: "hinting", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [font.Hinting], false)}, {prop: "glyphCacheEntries", name: "glyphCacheEntries", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Int], false)}, {prop: "subPixelsX", name: "subPixelsX", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Uint32, fixed.Int26_6, fixed.Int26_6], false)}, {prop: "subPixelsY", name: "subPixelsY", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$Uint32, fixed.Int26_6, fixed.Int26_6], false)}];
	ptrType$4.methods = [{prop: "index", name: "index", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32], [Index], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Metrics", name: "Metrics", pkg: "", typ: $funcType([], [font.Metrics], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([$Int32, $Int32], [fixed.Int26_6], false)}, {prop: "Glyph", name: "Glyph", pkg: "", typ: $funcType([fixed.Point26_6, $Int32], [image.Rectangle, image.Image, image.Point, fixed.Int26_6, $Bool], false)}, {prop: "GlyphBounds", name: "GlyphBounds", pkg: "", typ: $funcType([$Int32], [fixed.Rectangle26_6, fixed.Int26_6, $Bool], false)}, {prop: "GlyphAdvance", name: "GlyphAdvance", pkg: "", typ: $funcType([$Int32], [fixed.Int26_6, $Bool], false)}, {prop: "rasterize", name: "rasterize", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index, fixed.Int26_6, fixed.Int26_6], [glyphCacheVal, $Bool], false)}, {prop: "drawContour", name: "drawContour", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$3, fixed.Int26_6, fixed.Int26_6], [], false)}];
	facePainter.methods = [{prop: "Paint", name: "Paint", pkg: "", typ: $funcType([sliceType$9, $Bool], [], false)}];
	ptrType$5.methods = [{prop: "Load", name: "Load", pkg: "", typ: $funcType([ptrType$1, fixed.Int26_6, Index, font.Hinting], [$error], false)}, {prop: "load", name: "load", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, Index, $Bool], [$error], false)}, {prop: "loadSimple", name: "loadSimple", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$6, $Int], [sliceType$6], false)}, {prop: "loadCompound", name: "loadCompound", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, HMetric, Index, sliceType$6, $Bool], [$error], false)}, {prop: "addPhantomsAndScale", name: "addPhantomsAndScale", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int, $Int, $Bool, $Bool], [], false)}];
	ptrType$6.methods = [{prop: "init", name: "init", pkg: "github.com/golang/freetype/truetype", typ: $funcType([ptrType$1, fixed.Int26_6], [$error], false)}, {prop: "run", name: "run", pkg: "github.com/golang/freetype/truetype", typ: $funcType([sliceType$6, sliceType$3, sliceType$3, sliceType$3, sliceType$2], [$error], false)}, {prop: "initializeScaledCVT", name: "initializeScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [], false)}, {prop: "getScaledCVT", name: "getScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32], [fixed.Int26_6], false)}, {prop: "setScaledCVT", name: "setScaledCVT", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Int32, fixed.Int26_6], [], false)}, {prop: "point", name: "point", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Uint32, pointType, $Int32], [ptrType$3], false)}, {prop: "move", name: "move", pkg: "github.com/golang/freetype/truetype", typ: $funcType([ptrType$3, fixed.Int26_6, $Bool], [], false)}, {prop: "iupInterp", name: "iupInterp", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool, $Int, $Int, $Int, $Int], [], false)}, {prop: "iupShift", name: "iupShift", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool, $Int, $Int, $Int], [], false)}, {prop: "displacement", name: "displacement", pkg: "github.com/golang/freetype/truetype", typ: $funcType([$Bool], [$Uint32, $Int32, fixed.Int26_6, $Bool], false)}, {prop: "round", name: "round", pkg: "github.com/golang/freetype/truetype", typ: $funcType([fixed.Int26_6], [fixed.Int26_6], false)}];
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "parseCmap", name: "parseCmap", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseHead", name: "parseHead", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseHhea", name: "parseHhea", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseKern", name: "parseKern", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "parseMaxp", name: "parseMaxp", pkg: "github.com/golang/freetype/truetype", typ: $funcType([], [$error], false)}, {prop: "scale", name: "scale", pkg: "github.com/golang/freetype/truetype", typ: $funcType([fixed.Int26_6], [fixed.Int26_6], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([fixed.Int26_6], [fixed.Rectangle26_6], false)}, {prop: "FUnitsPerEm", name: "FUnitsPerEm", pkg: "", typ: $funcType([], [$Int32], false)}, {prop: "Index", name: "Index", pkg: "", typ: $funcType([$Int32], [Index], false)}, {prop: "Name", name: "Name", pkg: "", typ: $funcType([NameID], [$String], false)}, {prop: "unscaledHMetric", name: "unscaledHMetric", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index], [HMetric], false)}, {prop: "HMetric", name: "HMetric", pkg: "", typ: $funcType([fixed.Int26_6, Index], [HMetric], false)}, {prop: "unscaledVMetric", name: "unscaledVMetric", pkg: "github.com/golang/freetype/truetype", typ: $funcType([Index, fixed.Int26_6], [VMetric], false)}, {prop: "VMetric", name: "VMetric", pkg: "", typ: $funcType([fixed.Int26_6, Index], [VMetric], false)}, {prop: "Kern", name: "Kern", pkg: "", typ: $funcType([fixed.Int26_6, Index, Index], [fixed.Int26_6], false)}];
	Options.init("", [{prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "DPI", name: "DPI", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "Hinting", name: "Hinting", anonymous: false, exported: true, typ: font.Hinting, tag: ""}, {prop: "GlyphCacheEntries", name: "GlyphCacheEntries", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "SubPixelsX", name: "SubPixelsX", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "SubPixelsY", name: "SubPixelsY", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	glyphCacheEntry.init("github.com/golang/freetype/truetype", [{prop: "key", name: "key", anonymous: false, exported: false, typ: glyphCacheKey, tag: ""}, {prop: "val", name: "val", anonymous: false, exported: false, typ: glyphCacheVal, tag: ""}]);
	glyphCacheKey.init("github.com/golang/freetype/truetype", [{prop: "index", name: "index", anonymous: false, exported: false, typ: Index, tag: ""}, {prop: "fx", name: "fx", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "fy", name: "fy", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	glyphCacheVal.init("github.com/golang/freetype/truetype", [{prop: "advanceWidth", name: "advanceWidth", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: image.Point, tag: ""}, {prop: "gw", name: "gw", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "gh", name: "gh", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	indexCacheEntry.init("github.com/golang/freetype/truetype", [{prop: "rune", name: "rune", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "index", name: "index", anonymous: false, exported: false, typ: Index, tag: ""}]);
	face.init("github.com/golang/freetype/truetype", [{prop: "f", name: "f", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "hinting", name: "hinting", anonymous: false, exported: false, typ: font.Hinting, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelX", name: "subPixelX", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "subPixelBiasX", name: "subPixelBiasX", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelMaskX", name: "subPixelMaskX", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelY", name: "subPixelY", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "subPixelBiasY", name: "subPixelBiasY", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "subPixelMaskY", name: "subPixelMaskY", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "masks", name: "masks", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "glyphCache", name: "glyphCache", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: raster.Rasterizer, tag: ""}, {prop: "p", name: "p", anonymous: false, exported: false, typ: raster.Painter, tag: ""}, {prop: "paintOffset", name: "paintOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxw", name: "maxw", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxh", name: "maxh", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "glyphBuf", name: "glyphBuf", anonymous: false, exported: false, typ: GlyphBuf, tag: ""}, {prop: "indexCache", name: "indexCache", anonymous: false, exported: false, typ: arrayType$8, tag: ""}]);
	facePainter.init("github.com/golang/freetype/truetype", [{prop: "a", name: "a", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	Point.init("", [{prop: "X", name: "X", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Y", name: "Y", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: $Uint32, tag: ""}]);
	GlyphBuf.init("github.com/golang/freetype/truetype", [{prop: "AdvanceWidth", name: "AdvanceWidth", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "Bounds", name: "Bounds", anonymous: false, exported: true, typ: fixed.Rectangle26_6, tag: ""}, {prop: "Points", name: "Points", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "Unhinted", name: "Unhinted", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "InFontUnits", name: "InFontUnits", anonymous: false, exported: true, typ: sliceType$3, tag: ""}, {prop: "Ends", name: "Ends", anonymous: false, exported: true, typ: sliceType$2, tag: ""}, {prop: "font", name: "font", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "hinting", name: "hinting", anonymous: false, exported: false, typ: font.Hinting, tag: ""}, {prop: "hinter", name: "hinter", anonymous: false, exported: false, typ: hinter, tag: ""}, {prop: "phantomPoints", name: "phantomPoints", anonymous: false, exported: false, typ: arrayType$7, tag: ""}, {prop: "pp1x", name: "pp1x", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "metricsSet", name: "metricsSet", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: sliceType$3, tag: ""}]);
	callStackEntry.init("github.com/golang/freetype/truetype", [{prop: "program", name: "program", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "pc", name: "pc", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "loopCount", name: "loopCount", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	hinter.init("github.com/golang/freetype/truetype", [{prop: "stack", name: "stack", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "store", name: "store", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "functions", name: "functions", anonymous: false, exported: false, typ: mapType, tag: ""}, {prop: "font", name: "font", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "scale", name: "scale", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "gs", name: "gs", anonymous: false, exported: false, typ: graphicsState, tag: ""}, {prop: "defaultGS", name: "defaultGS", anonymous: false, exported: false, typ: graphicsState, tag: ""}, {prop: "points", name: "points", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "ends", name: "ends", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "scaledCVTInitialized", name: "scaledCVTInitialized", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "scaledCVT", name: "scaledCVT", anonymous: false, exported: false, typ: sliceType$5, tag: ""}]);
	graphicsState.init("github.com/golang/freetype/truetype", [{prop: "pv", name: "pv", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "fv", name: "fv", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "dv", name: "dv", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "rp", name: "rp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "zp", name: "zp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "controlValueCutIn", name: "controlValueCutIn", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "singleWidthCutIn", name: "singleWidthCutIn", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "singleWidth", name: "singleWidth", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "deltaBase", name: "deltaBase", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "deltaShift", name: "deltaShift", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "minDist", name: "minDist", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "loop", name: "loop", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "roundPeriod", name: "roundPeriod", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundPhase", name: "roundPhase", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundThreshold", name: "roundThreshold", anonymous: false, exported: false, typ: fixed.Int26_6, tag: ""}, {prop: "roundSuper45", name: "roundSuper45", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "autoFlip", name: "autoFlip", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	HMetric.init("", [{prop: "AdvanceWidth", name: "AdvanceWidth", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "LeftSideBearing", name: "LeftSideBearing", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}]);
	VMetric.init("", [{prop: "AdvanceHeight", name: "AdvanceHeight", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}, {prop: "TopSideBearing", name: "TopSideBearing", anonymous: false, exported: true, typ: fixed.Int26_6, tag: ""}]);
	cm.init("github.com/golang/freetype/truetype", [{prop: "start", name: "start", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "end", name: "end", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "delta", name: "delta", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "offset", name: "offset", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Font.init("github.com/golang/freetype/truetype", [{prop: "cmap", name: "cmap", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "cvt", name: "cvt", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "fpgm", name: "fpgm", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "glyf", name: "glyf", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "hdmx", name: "hdmx", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "head", name: "head", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "hhea", name: "hhea", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "hmtx", name: "hmtx", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "kern", name: "kern", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "loca", name: "loca", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "maxp", name: "maxp", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "name", name: "name", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "os2", name: "os2", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "prep", name: "prep", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "vmtx", name: "vmtx", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "cmapIndexes", name: "cmapIndexes", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "cm", name: "cm", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "locaOffsetFormat", name: "locaOffsetFormat", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nGlyph", name: "nGlyph", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nHMetric", name: "nHMetric", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nKern", name: "nKern", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "fUnitsPerEm", name: "fUnitsPerEm", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "ascent", name: "ascent", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "descent", name: "descent", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "bounds", name: "bounds", anonymous: false, exported: false, typ: fixed.Rectangle26_6, tag: ""}, {prop: "maxTwilightPoints", name: "maxTwilightPoints", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "maxStorage", name: "maxStorage", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "maxFunctionDefs", name: "maxFunctionDefs", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "maxStackElements", name: "maxStackElements", anonymous: false, exported: false, typ: $Uint16, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = raster.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		globalDefaultGS = new graphicsState.ptr($toNativeArray($kindInt16, [16384, 0]), $toNativeArray($kindInt16, [16384, 0]), $toNativeArray($kindInt16, [16384, 0]), arrayType$1.zero(), $toNativeArray($kindInt32, [1, 1, 1]), 68, 0, 0, 9, 3, 64, 1, 64, 0, 32, false, true);
		popCount = $toNativeArray($kindUint8, [0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 5, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 2, 0, 1, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 1, 0, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0, 0, 1, 1, 0, 2, 2, 0, 0, 1, 2, 2, 1, 1, 3, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/oakerr"] = (function() {
	var $pkg = {}, $init, strconv;
	strconv = $packages["strconv"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = strconv.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["math/bits"] = (function() {
	var $pkg = {}, $init, rev8tab, Reverse8, Reverse16;
	Reverse8 = function(x) {
		var x;
		return ((x < 0 || x >= rev8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : rev8tab[x]);
	};
	$pkg.Reverse8 = Reverse8;
	Reverse16 = function(x) {
		var x, x$1, x$2;
		return ((((x$1 = x >>> 8 << 16 >>> 16, ((x$1 < 0 || x$1 >= rev8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : rev8tab[x$1])) << 16 >>> 16)) | ((((x$2 = (x & 255) >>> 0, ((x$2 < 0 || x$2 >= rev8tab.length) ? ($throwRuntimeError("index out of range"), undefined) : rev8tab[x$2])) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	$pkg.Reverse16 = Reverse16;
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rev8tab = $toNativeArray($kindUint8, [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/flate"] = (function() {
	var $pkg = {}, $init, bufio, fmt, io, math, bits, sort, strconv, sync, dictDecoder, huffmanBitWriter, hcode, huffmanEncoder, literalNode, levelInfo, byLiteral, byFreq, CorruptInputError, InternalError, Resetter, huffmanDecoder, Reader, decompressor, token, ptrType, arrayType, sliceType, sliceType$1, sliceType$4, sliceType$5, ptrType$3, arrayType$5, arrayType$6, sliceType$7, sliceType$8, sliceType$9, arrayType$7, arrayType$8, arrayType$9, arrayType$10, ptrType$7, ptrType$8, arrayType$11, ptrType$9, sliceType$10, ptrType$10, arrayType$12, arrayType$13, ptrType$11, arrayType$14, ptrType$12, arrayType$15, ptrType$13, ptrType$14, funcType$3, huffOffset, fixedLiteralEncoding, fixedOffsetEncoding, fixedOnce, fixedHuffmanDecoder, fixedHuffmanDecoder$24ptr, codeOrder, newHuffmanBitWriter, init, maxNode, newHuffmanEncoder, generateFixedLiteralEncoding, generateFixedOffsetEncoding, reverseBits, makeReader, fixedHuffmanDecoderInit, NewReader, NewReaderDict;
	bufio = $packages["bufio"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	math = $packages["math"];
	bits = $packages["math/bits"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	dictDecoder = $pkg.dictDecoder = $newType(0, $kindStruct, "flate.dictDecoder", true, "compress/flate", false, function(hist_, wrPos_, rdPos_, full_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.hist = sliceType$4.nil;
			this.wrPos = 0;
			this.rdPos = 0;
			this.full = false;
			return;
		}
		this.hist = hist_;
		this.wrPos = wrPos_;
		this.rdPos = rdPos_;
		this.full = full_;
	});
	huffmanBitWriter = $pkg.huffmanBitWriter = $newType(0, $kindStruct, "flate.huffmanBitWriter", true, "compress/flate", false, function(writer_, bits_, nbits_, bytes_, codegenFreq_, nbytes_, literalFreq_, offsetFreq_, codegen_, literalEncoding_, offsetEncoding_, codegenEncoding_, err_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.writer = $ifaceNil;
			this.bits = new $Uint64(0, 0);
			this.nbits = 0;
			this.bytes = arrayType$5.zero();
			this.codegenFreq = arrayType$6.zero();
			this.nbytes = 0;
			this.literalFreq = sliceType$7.nil;
			this.offsetFreq = sliceType$7.nil;
			this.codegen = sliceType$4.nil;
			this.literalEncoding = ptrType.nil;
			this.offsetEncoding = ptrType.nil;
			this.codegenEncoding = ptrType.nil;
			this.err = $ifaceNil;
			return;
		}
		this.writer = writer_;
		this.bits = bits_;
		this.nbits = nbits_;
		this.bytes = bytes_;
		this.codegenFreq = codegenFreq_;
		this.nbytes = nbytes_;
		this.literalFreq = literalFreq_;
		this.offsetFreq = offsetFreq_;
		this.codegen = codegen_;
		this.literalEncoding = literalEncoding_;
		this.offsetEncoding = offsetEncoding_;
		this.codegenEncoding = codegenEncoding_;
		this.err = err_;
	});
	hcode = $pkg.hcode = $newType(0, $kindStruct, "flate.hcode", true, "compress/flate", false, function(code_, len_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.code = 0;
			this.len = 0;
			return;
		}
		this.code = code_;
		this.len = len_;
	});
	huffmanEncoder = $pkg.huffmanEncoder = $newType(0, $kindStruct, "flate.huffmanEncoder", true, "compress/flate", false, function(codes_, freqcache_, bitCount_, lns_, lfs_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.codes = sliceType$8.nil;
			this.freqcache = sliceType$9.nil;
			this.bitCount = arrayType$7.zero();
			this.lns = byLiteral.nil;
			this.lfs = byFreq.nil;
			return;
		}
		this.codes = codes_;
		this.freqcache = freqcache_;
		this.bitCount = bitCount_;
		this.lns = lns_;
		this.lfs = lfs_;
	});
	literalNode = $pkg.literalNode = $newType(0, $kindStruct, "flate.literalNode", true, "compress/flate", false, function(literal_, freq_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.literal = 0;
			this.freq = 0;
			return;
		}
		this.literal = literal_;
		this.freq = freq_;
	});
	levelInfo = $pkg.levelInfo = $newType(0, $kindStruct, "flate.levelInfo", true, "compress/flate", false, function(level_, lastFreq_, nextCharFreq_, nextPairFreq_, needed_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.level = 0;
			this.lastFreq = 0;
			this.nextCharFreq = 0;
			this.nextPairFreq = 0;
			this.needed = 0;
			return;
		}
		this.level = level_;
		this.lastFreq = lastFreq_;
		this.nextCharFreq = nextCharFreq_;
		this.nextPairFreq = nextPairFreq_;
		this.needed = needed_;
	});
	byLiteral = $pkg.byLiteral = $newType(12, $kindSlice, "flate.byLiteral", true, "compress/flate", false, null);
	byFreq = $pkg.byFreq = $newType(12, $kindSlice, "flate.byFreq", true, "compress/flate", false, null);
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "flate.CorruptInputError", true, "compress/flate", true, null);
	InternalError = $pkg.InternalError = $newType(8, $kindString, "flate.InternalError", true, "compress/flate", true, null);
	Resetter = $pkg.Resetter = $newType(8, $kindInterface, "flate.Resetter", true, "compress/flate", true, null);
	huffmanDecoder = $pkg.huffmanDecoder = $newType(0, $kindStruct, "flate.huffmanDecoder", true, "compress/flate", false, function(min_, chunks_, links_, linkMask_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.min = 0;
			this.chunks = arrayType.zero();
			this.links = sliceType$1.nil;
			this.linkMask = 0;
			return;
		}
		this.min = min_;
		this.chunks = chunks_;
		this.links = links_;
		this.linkMask = linkMask_;
	});
	Reader = $pkg.Reader = $newType(8, $kindInterface, "flate.Reader", true, "compress/flate", true, null);
	decompressor = $pkg.decompressor = $newType(0, $kindStruct, "flate.decompressor", true, "compress/flate", false, function(r_, roffset_, b_, nb_, h1_, h2_, bits_, codebits_, dict_, buf_, step_, stepState_, final$12_, err_, toRead_, hl_, hd_, copyLen_, copyDist_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.roffset = new $Int64(0, 0);
			this.b = 0;
			this.nb = 0;
			this.h1 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.h2 = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
			this.bits = ptrType$11.nil;
			this.codebits = ptrType$12.nil;
			this.dict = new dictDecoder.ptr(sliceType$4.nil, 0, 0, false);
			this.buf = arrayType$15.zero();
			this.step = $throwNilPointerError;
			this.stepState = 0;
			this.final$12 = false;
			this.err = $ifaceNil;
			this.toRead = sliceType$4.nil;
			this.hl = ptrType$9.nil;
			this.hd = ptrType$9.nil;
			this.copyLen = 0;
			this.copyDist = 0;
			return;
		}
		this.r = r_;
		this.roffset = roffset_;
		this.b = b_;
		this.nb = nb_;
		this.h1 = h1_;
		this.h2 = h2_;
		this.bits = bits_;
		this.codebits = codebits_;
		this.dict = dict_;
		this.buf = buf_;
		this.step = step_;
		this.stepState = stepState_;
		this.final$12 = final$12_;
		this.err = err_;
		this.toRead = toRead_;
		this.hl = hl_;
		this.hd = hd_;
		this.copyLen = copyLen_;
		this.copyDist = copyDist_;
	});
	token = $pkg.token = $newType(4, $kindUint32, "flate.token", true, "compress/flate", false, null);
	ptrType = $ptrType(huffmanEncoder);
	arrayType = $arrayType($Uint32, 512);
	sliceType = $sliceType($Uint32);
	sliceType$1 = $sliceType(sliceType);
	sliceType$4 = $sliceType($Uint8);
	sliceType$5 = $sliceType(token);
	ptrType$3 = $ptrType(huffmanBitWriter);
	arrayType$5 = $arrayType($Uint8, 248);
	arrayType$6 = $arrayType($Int32, 19);
	sliceType$7 = $sliceType($Int32);
	sliceType$8 = $sliceType(hcode);
	sliceType$9 = $sliceType(literalNode);
	arrayType$7 = $arrayType($Int32, 17);
	arrayType$8 = $arrayType(levelInfo, 16);
	arrayType$9 = $arrayType($Int32, 16);
	arrayType$10 = $arrayType(arrayType$9, 16);
	ptrType$7 = $ptrType(byLiteral);
	ptrType$8 = $ptrType(byFreq);
	arrayType$11 = $arrayType($Int, 16);
	ptrType$9 = $ptrType(huffmanDecoder);
	sliceType$10 = $sliceType($Int);
	ptrType$10 = $ptrType(decompressor);
	arrayType$12 = $arrayType($Int, 288);
	arrayType$13 = $arrayType($Int, 316);
	ptrType$11 = $ptrType(arrayType$13);
	arrayType$14 = $arrayType($Int, 19);
	ptrType$12 = $ptrType(arrayType$14);
	arrayType$15 = $arrayType($Uint8, 4);
	ptrType$13 = $ptrType(dictDecoder);
	ptrType$14 = $ptrType(hcode);
	funcType$3 = $funcType([ptrType$10], [], false);
	dictDecoder.ptr.prototype.init = function(size, dict) {
		var dd, dict, size;
		dd = this;
		dictDecoder.copy(dd, new dictDecoder.ptr(dd.hist, 0, 0, false));
		if (dd.hist.$capacity < size) {
			dd.hist = $makeSlice(sliceType$4, size);
		}
		dd.hist = $subslice(dd.hist, 0, size);
		if (dict.$length > dd.hist.$length) {
			dict = $subslice(dict, (dict.$length - dd.hist.$length >> 0));
		}
		dd.wrPos = $copySlice(dd.hist, dict);
		if (dd.wrPos === dd.hist.$length) {
			dd.wrPos = 0;
			dd.full = true;
		}
		dd.rdPos = dd.wrPos;
	};
	dictDecoder.prototype.init = function(size, dict) { return this.$val.init(size, dict); };
	dictDecoder.ptr.prototype.histSize = function() {
		var dd;
		dd = this;
		if (dd.full) {
			return dd.hist.$length;
		}
		return dd.wrPos;
	};
	dictDecoder.prototype.histSize = function() { return this.$val.histSize(); };
	dictDecoder.ptr.prototype.availRead = function() {
		var dd;
		dd = this;
		return dd.wrPos - dd.rdPos >> 0;
	};
	dictDecoder.prototype.availRead = function() { return this.$val.availRead(); };
	dictDecoder.ptr.prototype.availWrite = function() {
		var dd;
		dd = this;
		return dd.hist.$length - dd.wrPos >> 0;
	};
	dictDecoder.prototype.availWrite = function() { return this.$val.availWrite(); };
	dictDecoder.ptr.prototype.writeSlice = function() {
		var dd;
		dd = this;
		return $subslice(dd.hist, dd.wrPos);
	};
	dictDecoder.prototype.writeSlice = function() { return this.$val.writeSlice(); };
	dictDecoder.ptr.prototype.writeMark = function(cnt) {
		var cnt, dd;
		dd = this;
		dd.wrPos = dd.wrPos + (cnt) >> 0;
	};
	dictDecoder.prototype.writeMark = function(cnt) { return this.$val.writeMark(cnt); };
	dictDecoder.ptr.prototype.writeByte = function(c) {
		var c, dd, x, x$1;
		dd = this;
		(x = dd.hist, x$1 = dd.wrPos, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1] = c));
		dd.wrPos = dd.wrPos + (1) >> 0;
	};
	dictDecoder.prototype.writeByte = function(c) { return this.$val.writeByte(c); };
	dictDecoder.ptr.prototype.writeCopy = function(dist, length) {
		var dd, dist, dstBase, dstPos, endPos, length, srcPos;
		dd = this;
		dstBase = dd.wrPos;
		dstPos = dstBase;
		srcPos = dstPos - dist >> 0;
		endPos = dstPos + length >> 0;
		if (endPos > dd.hist.$length) {
			endPos = dd.hist.$length;
		}
		if (srcPos < 0) {
			srcPos = srcPos + (dd.hist.$length) >> 0;
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos))) >> 0;
			srcPos = 0;
		}
		while (true) {
			if (!(dstPos < endPos)) { break; }
			dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		}
		dd.wrPos = dstPos;
		return dstPos - dstBase >> 0;
	};
	dictDecoder.prototype.writeCopy = function(dist, length) { return this.$val.writeCopy(dist, length); };
	dictDecoder.ptr.prototype.tryWriteCopy = function(dist, length) {
		var dd, dist, dstBase, dstPos, endPos, length, srcPos, $s;
		/* */ $s = 0; s: while (true) { switch ($s) { case 0:
		dd = this;
		dstPos = dd.wrPos;
		endPos = dstPos + length >> 0;
		if (dstPos < dist || endPos > dd.hist.$length) {
			$s = -1; return 0;
		}
		dstBase = dstPos;
		srcPos = dstPos - dist >> 0;
		/* loop: */ case 1:
		dstPos = dstPos + ($copySlice($subslice(dd.hist, dstPos, endPos), $subslice(dd.hist, srcPos, dstPos))) >> 0;
		/* */ if (dstPos < endPos) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (dstPos < endPos) { */ case 2:
			/* goto loop */ $s = 1; continue;
		/* } */ case 3:
		dd.wrPos = dstPos;
		$s = -1; return dstPos - dstBase >> 0;
		/* */ } return; }
	};
	dictDecoder.prototype.tryWriteCopy = function(dist, length) { return this.$val.tryWriteCopy(dist, length); };
	dictDecoder.ptr.prototype.readFlush = function() {
		var _tmp, _tmp$1, dd, toRead;
		dd = this;
		toRead = $subslice(dd.hist, dd.rdPos, dd.wrPos);
		dd.rdPos = dd.wrPos;
		if (dd.wrPos === dd.hist.$length) {
			_tmp = 0;
			_tmp$1 = 0;
			dd.wrPos = _tmp;
			dd.rdPos = _tmp$1;
			dd.full = true;
		}
		return toRead;
	};
	dictDecoder.prototype.readFlush = function() { return this.$val.readFlush(); };
	newHuffmanBitWriter = function(w) {
		var w;
		return new huffmanBitWriter.ptr(w, new $Uint64(0, 0), 0, arrayType$5.zero(), arrayType$6.zero(), 0, $makeSlice(sliceType$7, 286), $makeSlice(sliceType$7, 30), $makeSlice(sliceType$4, 317), newHuffmanEncoder(286), newHuffmanEncoder(30), newHuffmanEncoder(19), $ifaceNil);
	};
	init = function() {
		var w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		w = newHuffmanBitWriter($ifaceNil);
		(x = w.offsetFreq, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0] = 1));
		huffOffset = newHuffmanEncoder(30);
		$r = huffOffset.generate(w.offsetFreq, 15); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: init }; } $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	hcode.ptr.prototype.set = function(code, length) {
		var code, h, length;
		h = this;
		h.len = length;
		h.code = code;
	};
	hcode.prototype.set = function(code, length) { return this.$val.set(code, length); };
	maxNode = function() {
		return new literalNode.ptr(65535, 2147483647);
	};
	newHuffmanEncoder = function(size) {
		var size;
		return new huffmanEncoder.ptr($makeSlice(sliceType$8, size), sliceType$9.nil, arrayType$7.zero(), byLiteral.nil, byFreq.nil);
	};
	generateFixedLiteralEncoding = function() {
		var bits$1, ch, codes, h, size;
		h = newHuffmanEncoder(286);
		codes = h.codes;
		ch = 0;
		ch = 0;
		while (true) {
			if (!(ch < 286)) { break; }
			bits$1 = 0;
			size = 0;
			switch (0) { default:
				if (ch < 144) {
					bits$1 = ch + 48 << 16 >>> 16;
					size = 8;
					break;
				} else if (ch < 256) {
					bits$1 = (ch + 400 << 16 >>> 16) - 144 << 16 >>> 16;
					size = 9;
					break;
				} else if (ch < 280) {
					bits$1 = ch - 256 << 16 >>> 16;
					size = 7;
					break;
				} else {
					bits$1 = (ch + 192 << 16 >>> 16) - 280 << 16 >>> 16;
					size = 8;
				}
			}
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(bits$1, ((size << 24 >>> 24))), size));
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	generateFixedOffsetEncoding = function() {
		var _i, _ref, ch, codes, h;
		h = newHuffmanEncoder(30);
		codes = h.codes;
		_ref = codes;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ch = _i;
			hcode.copy(((ch < 0 || ch >= codes.$length) ? ($throwRuntimeError("index out of range"), undefined) : codes.$array[codes.$offset + ch]), new hcode.ptr(reverseBits(((ch << 16 >>> 16)), 5), 5));
			_i++;
		}
		return h;
	};
	huffmanEncoder.ptr.prototype.bitCounts = function(list, maxBits) {
		var bitCount, bits$1, counts, h, l, leafCounts, level, level$1, level$2, levels$1, list, maxBits, n, n$1, prevFreq, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		h = this;
		if (maxBits >= 16) {
			$panic(new $String("flate: maxBits too large"));
		}
		n = ((list.$length >> 0));
		list = $subslice(list, 0, (n + 1 >> 0));
		literalNode.copy(((n < 0 || n >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n]), maxNode());
		if (maxBits > (n - 1 >> 0)) {
			maxBits = n - 1 >> 0;
		}
		levels$1 = arrayType$8.zero();
		leafCounts = arrayType$10.zero();
		level = 1;
		while (true) {
			if (!(level <= maxBits)) { break; }
			levelInfo.copy(((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]), new levelInfo.ptr(level, (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq, (2 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 2]).freq, (0 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 0]).freq + (1 >= list.$length ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + 1]).freq >> 0, 0));
			(x = ((level < 0 || level >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level]), ((level < 0 || level >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[level] = 2));
			if (level === 1) {
				((level < 0 || level >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level]).nextPairFreq = 2147483647;
			}
			level = level + (1) >> 0;
		}
		((maxBits < 0 || maxBits >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[maxBits]).needed = ($imul(2, n)) - 4 >> 0;
		level$1 = maxBits;
		while (true) {
			l = ((level$1 < 0 || level$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[level$1]);
			if ((l.nextPairFreq === 2147483647) && (l.nextCharFreq === 2147483647)) {
				l.needed = 0;
				(x$1 = level$1 + 1 >> 0, ((x$1 < 0 || x$1 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$1])).nextPairFreq = 2147483647;
				level$1 = level$1 + (1) >> 0;
				continue;
			}
			prevFreq = l.lastFreq;
			if (l.nextCharFreq < l.nextPairFreq) {
				n$1 = (x$2 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[level$1])) + 1 >> 0;
				l.lastFreq = l.nextCharFreq;
				(x$3 = ((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1]), ((level$1 < 0 || level$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[level$1] = n$1));
				l.nextCharFreq = ((n$1 < 0 || n$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + n$1]).freq;
			} else {
				l.lastFreq = l.nextPairFreq;
				$copySlice($subslice(new sliceType$7(((level$1 < 0 || level$1 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[level$1])), 0, level$1), $subslice(new sliceType$7((x$4 = level$1 - 1 >> 0, ((x$4 < 0 || x$4 >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[x$4]))), 0, level$1));
				(x$5 = l.level - 1 >> 0, ((x$5 < 0 || x$5 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$5])).needed = 2;
			}
			l.needed = l.needed - (1) >> 0;
			if (l.needed === 0) {
				if (l.level === maxBits) {
					break;
				}
				(x$6 = l.level + 1 >> 0, ((x$6 < 0 || x$6 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$6])).nextPairFreq = prevFreq + l.lastFreq >> 0;
				level$1 = level$1 + (1) >> 0;
			} else {
				while (true) {
					if (!((x$7 = level$1 - 1 >> 0, ((x$7 < 0 || x$7 >= levels$1.length) ? ($throwRuntimeError("index out of range"), undefined) : levels$1[x$7])).needed > 0)) { break; }
					level$1 = level$1 - (1) >> 0;
				}
			}
		}
		if (!(((x$8 = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]), ((maxBits < 0 || maxBits >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[maxBits])) === n))) {
			$panic(new $String("leafCounts[maxBits][maxBits] != n"));
		}
		bitCount = $subslice(new sliceType$7(h.bitCount), 0, (maxBits + 1 >> 0));
		bits$1 = 1;
		counts = ((maxBits < 0 || maxBits >= leafCounts.length) ? ($throwRuntimeError("index out of range"), undefined) : leafCounts[maxBits]);
		level$2 = maxBits;
		while (true) {
			if (!(level$2 > 0)) { break; }
			((bits$1 < 0 || bits$1 >= bitCount.$length) ? ($throwRuntimeError("index out of range"), undefined) : bitCount.$array[bitCount.$offset + bits$1] = ((counts.nilCheck, ((level$2 < 0 || level$2 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[level$2])) - (x$9 = level$2 - 1 >> 0, (counts.nilCheck, ((x$9 < 0 || x$9 >= counts.length) ? ($throwRuntimeError("index out of range"), undefined) : counts[x$9]))) >> 0));
			bits$1 = bits$1 + (1) >> 0;
			level$2 = level$2 - (1) >> 0;
		}
		return bitCount;
	};
	huffmanEncoder.prototype.bitCounts = function(list, maxBits) { return this.$val.bitCounts(list, maxBits); };
	huffmanEncoder.ptr.prototype.assignEncodingAndSize = function(bitCount, list) {
		var _i, _i$1, _ref, _ref$1, bitCount, bits$1, chunk, code, h, list, n, node, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; bits$1 = $f.bits$1; chunk = $f.chunk; code = $f.code; h = $f.h; list = $f.list; n = $f.n; node = $f.node; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		code = 0;
		_ref = bitCount;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			n = _i;
			bits$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			code = (y = (1), y < 32 ? (code << y) : 0) << 16 >>> 16;
			/* */ if ((n === 0) || (bits$1 === 0)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((n === 0) || (bits$1 === 0)) { */ case 3:
				_i++;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			chunk = $subslice(list, (list.$length - ((bits$1 >> 0)) >> 0));
			$r = (h.$ptr_lns || (h.$ptr_lns = new ptrType$7(function() { return this.$target.lns; }, function($v) { this.$target.lns = $v; }, h))).sort(chunk); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_ref$1 = chunk;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				hcode.copy((x = h.codes, x$1 = node.literal, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])), new hcode.ptr(reverseBits(code, ((n << 24 >>> 24))), ((n << 16 >>> 16))));
				code = code + (1) << 16 >>> 16;
				_i$1++;
			}
			list = $subslice(list, 0, (list.$length - ((bits$1 >> 0)) >> 0));
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.assignEncodingAndSize }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.bits$1 = bits$1; $f.chunk = chunk; $f.code = code; $f.h = h; $f.list = list; $f.n = n; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.assignEncodingAndSize = function(bitCount, list) { return this.$val.assignEncodingAndSize(bitCount, list); };
	huffmanEncoder.ptr.prototype.generate = function(freq, maxBits) {
		var _i, _i$1, _ref, _ref$1, bitCount, count, f, freq, h, i, i$1, list, maxBits, node, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _ref = $f._ref; _ref$1 = $f._ref$1; bitCount = $f.bitCount; count = $f.count; f = $f.f; freq = $f.freq; h = $f.h; i = $f.i; i$1 = $f.i$1; list = $f.list; maxBits = $f.maxBits; node = $f.node; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		h = this;
		if (h.freqcache === sliceType$9.nil) {
			h.freqcache = $makeSlice(sliceType$9, 287);
		}
		list = $subslice(h.freqcache, 0, (freq.$length + 1 >> 0));
		count = 0;
		_ref = freq;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			f = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!((f === 0))) {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(((i << 16 >>> 16)), f));
				count = count + (1) >> 0;
			} else {
				literalNode.copy(((count < 0 || count >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + count]), new literalNode.ptr(0, 0));
				(x = h.codes, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).len = 0;
			}
			_i++;
		}
		literalNode.copy((x$1 = freq.$length, ((x$1 < 0 || x$1 >= list.$length) ? ($throwRuntimeError("index out of range"), undefined) : list.$array[list.$offset + x$1])), new literalNode.ptr(0, 0));
		list = $subslice(list, 0, count);
		if (count <= 2) {
			_ref$1 = list;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				node = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), literalNode);
				(x$2 = h.codes, x$3 = node.literal, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).set(((i$1 << 16 >>> 16)), 1);
				_i$1++;
			}
			$s = -1; return;
		}
		$r = (h.$ptr_lfs || (h.$ptr_lfs = new ptrType$8(function() { return this.$target.lfs; }, function($v) { this.$target.lfs = $v; }, h))).sort(list); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		bitCount = h.bitCounts(list, maxBits);
		$r = h.assignEncodingAndSize(bitCount, list); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: huffmanEncoder.ptr.prototype.generate }; } $f._i = _i; $f._i$1 = _i$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f.bitCount = bitCount; $f.count = count; $f.f = f; $f.freq = freq; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.list = list; $f.maxBits = maxBits; $f.node = node; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	huffmanEncoder.prototype.generate = function(freq, maxBits) { return this.$val.generate(freq, maxBits); };
	$ptrType(byLiteral).prototype.sort = function(a) {
		var a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set(($subslice(new byLiteral(a.$array), a.$offset, a.$offset + a.$length)));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byLiteral).prototype.sort }; } $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byLiteral.prototype.Len = function() {
		var s;
		s = this;
		return s.$length;
	};
	$ptrType(byLiteral).prototype.Len = function() { return this.$get().Len(); };
	byLiteral.prototype.Less = function(i, j) {
		var i, j, s;
		s = this;
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
	};
	$ptrType(byLiteral).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byLiteral.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byLiteral).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	$ptrType(byFreq).prototype.sort = function(a) {
		var a, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; a = $f.a; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.$set(($subslice(new byFreq(a.$array), a.$offset, a.$offset + a.$length)));
		$r = sort.Sort(s); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $ptrType(byFreq).prototype.sort }; } $f.a = a; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	byFreq.prototype.Len = function() {
		var s;
		s = this;
		return s.$length;
	};
	$ptrType(byFreq).prototype.Len = function() { return this.$get().Len(); };
	byFreq.prototype.Less = function(i, j) {
		var i, j, s;
		s = this;
		if (((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq === ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq) {
			return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).literal < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).literal;
		}
		return ((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]).freq < ((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]).freq;
	};
	$ptrType(byFreq).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byFreq.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, s;
		s = this;
		_tmp = $clone(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), literalNode);
		_tmp$1 = $clone(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), literalNode);
		literalNode.copy(((i < 0 || i >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + i]), _tmp);
		literalNode.copy(((j < 0 || j >= s.$length) ? ($throwRuntimeError("index out of range"), undefined) : s.$array[s.$offset + j]), _tmp$1);
	};
	$ptrType(byFreq).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	reverseBits = function(number, bitLength) {
		var bitLength, number, y;
		return bits.Reverse16((y = ((16 - bitLength << 24 >>> 24)), y < 32 ? (number << y) : 0) << 16 >>> 16);
	};
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "flate: corrupt input before offset " + strconv.FormatInt((new $Int64(e.$high, e.$low)), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	InternalError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "flate: internal error: " + (e);
	};
	$ptrType(InternalError).prototype.Error = function() { return new InternalError(this.$get()).Error(); };
	huffmanDecoder.ptr.prototype.init = function(bits$1) {
		var _i, _i$1, _i$2, _i$3, _i$4, _r, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, bits$1, chunk, chunk$1, chunk$2, code, code$1, count, h, i, i$1, i$2, j, j$1, link, linktab, linktab$1, max, min, n, n$1, nextcode, numLinks, off, off$1, off$2, reverse, reverse$1, value, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, y$1, y$2, y$3, y$4;
		h = this;
		if (!((h.min === 0))) {
			huffmanDecoder.copy(h, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0));
		}
		count = arrayType$11.zero();
		_tmp = 0;
		_tmp$1 = 0;
		min = _tmp;
		max = _tmp$1;
		_ref = bits$1;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			n = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (n === 0) {
				_i++;
				continue;
			}
			if ((min === 0) || n < min) {
				min = n;
			}
			if (n > max) {
				max = n;
			}
			((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n] = (((n < 0 || n >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[n]) + (1) >> 0));
			_i++;
		}
		if (max === 0) {
			return true;
		}
		code = 0;
		nextcode = arrayType$11.zero();
		i = min;
		while (true) {
			if (!(i <= max)) { break; }
			code = (y = (1), y < 32 ? (code << y) : 0) >> 0;
			((i < 0 || i >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[i] = code);
			code = code + (((i < 0 || i >= count.length) ? ($throwRuntimeError("index out of range"), undefined) : count[i])) >> 0;
			i = i + (1) >> 0;
		}
		if (!((code === ((y$1 = ((max >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >> 0))) && !((code === 1) && (max === 1))) {
			return false;
		}
		h.min = min;
		if (max > 9) {
			numLinks = (y$2 = ((((max >>> 0)) - 9 >>> 0)), y$2 < 32 ? (1 << y$2) : 0) >> 0;
			h.linkMask = (((numLinks - 1 >> 0) >>> 0));
			link = nextcode[10] >> 1 >> 0;
			h.links = $makeSlice(sliceType$1, (512 - link >> 0));
			j = ((link >>> 0));
			while (true) {
				if (!(j < 512)) { break; }
				reverse = ((bits.Reverse16(((j << 16 >>> 16))) >> 0));
				reverse = (reverse >> $min((7), 31)) >> 0;
				off = j - ((link >>> 0)) >>> 0;
				if (false && !(((x = h.chunks, ((reverse < 0 || reverse >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[reverse])) === 0))) {
					$panic(new $String("impossible: overwriting existing chunk"));
				}
				(x$1 = h.chunks, ((reverse < 0 || reverse >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[reverse] = (((((off << 4 >>> 0) | 10) >>> 0) >>> 0))));
				(x$2 = h.links, ((off < 0 || off >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + off] = $makeSlice(sliceType, numLinks)));
				j = j + (1) >>> 0;
			}
		}
		_ref$1 = bits$1;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			n$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (n$1 === 0) {
				_i$1++;
				continue;
			}
			code$1 = ((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]);
			((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1] = (((n$1 < 0 || n$1 >= nextcode.length) ? ($throwRuntimeError("index out of range"), undefined) : nextcode[n$1]) + (1) >> 0));
			chunk = ((((i$1 << 4 >> 0) | n$1) >>> 0));
			reverse$1 = ((bits.Reverse16(((code$1 << 16 >>> 16))) >> 0));
			reverse$1 = (reverse$1 >> $min(((((16 - n$1 >> 0) >>> 0))), 31)) >> 0;
			if (n$1 <= 9) {
				off$1 = reverse$1;
				while (true) {
					if (!(off$1 < 512)) { break; }
					if (false && !(((x$3 = h.chunks, ((off$1 < 0 || off$1 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[off$1])) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					(x$4 = h.chunks, ((off$1 < 0 || off$1 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[off$1] = chunk));
					off$1 = off$1 + (((y$3 = ((n$1 >>> 0)), y$3 < 32 ? (1 << y$3) : 0) >> 0)) >> 0;
				}
			} else {
				j$1 = reverse$1 & 511;
				if (false && !(((((x$5 = h.chunks, ((j$1 < 0 || j$1 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[j$1])) & 15) >>> 0) === 10))) {
					$panic(new $String("impossible: not an indirect chunk"));
				}
				value = (x$6 = h.chunks, ((j$1 < 0 || j$1 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[j$1])) >>> 4 >>> 0;
				linktab = (x$7 = h.links, ((value < 0 || value >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + value]));
				reverse$1 = (reverse$1 >> $min((9), 31)) >> 0;
				off$2 = reverse$1;
				while (true) {
					if (!(off$2 < linktab.$length)) { break; }
					if (false && !((((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2]) === 0))) {
						$panic(new $String("impossible: overwriting existing chunk"));
					}
					((off$2 < 0 || off$2 >= linktab.$length) ? ($throwRuntimeError("index out of range"), undefined) : linktab.$array[linktab.$offset + off$2] = chunk);
					off$2 = off$2 + (((y$4 = (((n$1 - 9 >> 0) >>> 0)), y$4 < 32 ? (1 << y$4) : 0) >> 0)) >> 0;
				}
			}
			_i$1++;
		}
		if (false) {
			_ref$2 = h.chunks;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 512)) { break; }
				i$2 = _i$2;
				chunk$1 = ((_i$2 < 0 || _i$2 >= _ref$2.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2[_i$2]);
				if (chunk$1 === 0) {
					if ((code === 1) && ((_r = i$2 % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1)) {
						_i$2++;
						continue;
					}
					$panic(new $String("impossible: missing chunk"));
				}
				_i$2++;
			}
			_ref$3 = h.links;
			_i$3 = 0;
			while (true) {
				if (!(_i$3 < _ref$3.$length)) { break; }
				linktab$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$3.$array[_ref$3.$offset + _i$3]);
				_ref$4 = linktab$1;
				_i$4 = 0;
				while (true) {
					if (!(_i$4 < _ref$4.$length)) { break; }
					chunk$2 = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$4.$array[_ref$4.$offset + _i$4]);
					if (chunk$2 === 0) {
						$panic(new $String("impossible: missing chunk"));
					}
					_i$4++;
				}
				_i$3++;
			}
		}
		return true;
	};
	huffmanDecoder.prototype.init = function(bits$1) { return this.$val.init(bits$1); };
	decompressor.ptr.prototype.nextBlock = function() {
		var _1, _r, _r$1, f, typ, x, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; f = $f.f; typ = $f.typ; x = $f.x; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			f.err = _r;
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return;
			}
		/* } */ $s = 1; continue; case 2:
		f.final$12 = ((f.b & 1) >>> 0) === 1;
		f.b = (y = (1), y < 32 ? (f.b >>> y) : 0) >>> 0;
		typ = (f.b & 3) >>> 0;
		f.b = (y$1 = (2), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		f.nb = f.nb - (3) >>> 0;
			_1 = typ;
			/* */ if (_1 === (0)) { $s = 5; continue; }
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (2)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (_1 === (0)) { */ case 5:
				$r = f.dataBlock(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (1)) { */ case 6:
				f.hl = fixedHuffmanDecoder;
				f.hd = ptrType$9.nil;
				$r = f.huffmanBlock(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else if (_1 === (2)) { */ case 7:
				_r$1 = f.readHuffman(); /* */ $s = 12; case 12: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				f.err = _r$1;
				if (!($interfaceIsEqual(f.err, $ifaceNil))) {
					/* break; */ $s = 4; continue;
				}
				f.hl = f.h1;
				f.hd = f.h2;
				$r = f.huffmanBlock(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 9; continue;
			/* } else { */ case 8:
				f.err = ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
			/* } */ case 9:
		case 4:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.nextBlock }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.f = f; $f.typ = typ; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.nextBlock = function() { return this.$val.nextBlock(); };
	decompressor.ptr.prototype.Read = function(b) {
		var b, f, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; f = $f.f; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			if (f.toRead.$length > 0) {
				n = $copySlice(b, f.toRead);
				f.toRead = $subslice(f.toRead, n);
				if (f.toRead.$length === 0) {
					$s = -1; return [n, f.err];
				}
				$s = -1; return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(f.err, $ifaceNil))) {
				$s = -1; return [0, f.err];
			}
			$r = f.step(f); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			if (!($interfaceIsEqual(f.err, $ifaceNil)) && (f.toRead.$length === 0)) {
				f.toRead = f.dict.readFlush();
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.Read }; } $f.b = b; $f.f = f; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.Read = function(b) { return this.$val.Read(b); };
	decompressor.ptr.prototype.Close = function() {
		var f;
		f = this;
		if ($interfaceIsEqual(f.err, io.EOF)) {
			return $ifaceNil;
		}
		return f.err;
	};
	decompressor.prototype.Close = function() { return this.$val.Close(); };
	decompressor.ptr.prototype.readHuffman = function() {
		var _1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, b, err, err$1, err$2, err$3, f, i, i$1, i$2, j, n, nb, nclen, ndist, nlit, rep, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, y$4, y$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; b = $f.b; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; f = $f.f; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; n = $f.n; nb = $f.nb; nclen = $f.nclen; ndist = $f.ndist; nlit = $f.nlit; rep = $f.rep; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		/* while (true) { */ case 1:
			/* if (!(f.nb < 14)) { break; } */ if(!(f.nb < 14)) { $s = 2; continue; }
			_r = f.moreBits(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		nlit = ((((f.b & 31) >>> 0) >> 0)) + 257 >> 0;
		if (nlit > 286) {
			$s = -1; return ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
		}
		f.b = (y = (5), y < 32 ? (f.b >>> y) : 0) >>> 0;
		ndist = ((((f.b & 31) >>> 0) >> 0)) + 1 >> 0;
		if (ndist > 30) {
			$s = -1; return ((x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low)));
		}
		f.b = (y$1 = (5), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
		nclen = ((((f.b & 15) >>> 0) >> 0)) + 4 >> 0;
		f.b = (y$2 = (4), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
		f.nb = f.nb - (14) >>> 0;
		i = 0;
		/* while (true) { */ case 4:
			/* if (!(i < nclen)) { break; } */ if(!(i < nclen)) { $s = 5; continue; }
			/* while (true) { */ case 6:
				/* if (!(f.nb < 3)) { break; } */ if(!(f.nb < 3)) { $s = 7; continue; }
				_r$1 = f.moreBits(); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
			/* } */ $s = 6; continue; case 7:
			(x$2 = f.codebits, x$3 = ((i < 0 || i >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i]), x$2.nilCheck, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = ((((f.b & 7) >>> 0) >> 0))));
			f.b = (y$3 = (3), y$3 < 32 ? (f.b >>> y$3) : 0) >>> 0;
			f.nb = f.nb - (3) >>> 0;
			i = i + (1) >> 0;
		/* } */ $s = 4; continue; case 5:
		i$1 = nclen;
		while (true) {
			if (!(i$1 < 19)) { break; }
			(x$4 = f.codebits, x$5 = ((i$1 < 0 || i$1 >= codeOrder.length) ? ($throwRuntimeError("index out of range"), undefined) : codeOrder[i$1]), x$4.nilCheck, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = 0));
			i$1 = i$1 + (1) >> 0;
		}
		if (!f.h1.init($subslice(new sliceType$10(f.codebits), 0))) {
			$s = -1; return ((x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low)));
		}
		_tmp = 0;
		_tmp$1 = nlit + ndist >> 0;
		i$2 = _tmp;
		n = _tmp$1;
		/* while (true) { */ case 9:
			/* if (!(i$2 < n)) { break; } */ if(!(i$2 < n)) { $s = 10; continue; }
			_r$2 = f.huffSym(f.h1); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple = _r$2;
			x$7 = _tuple[0];
			err$2 = _tuple[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return err$2;
			}
			/* */ if (x$7 < 16) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (x$7 < 16) { */ case 12:
				(x$8 = f.bits, x$8.nilCheck, ((i$2 < 0 || i$2 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[i$2] = x$7));
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 9; continue;
			/* } */ case 13:
			rep = 0;
			nb = 0;
			b = 0;
			_1 = x$7;
			if (_1 === (16)) {
				rep = 3;
				nb = 2;
				if (i$2 === 0) {
					$s = -1; return ((x$9 = f.roffset, new CorruptInputError(x$9.$high, x$9.$low)));
				}
				b = (x$10 = f.bits, x$11 = i$2 - 1 >> 0, (x$10.nilCheck, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11])));
			} else if (_1 === (17)) {
				rep = 3;
				nb = 3;
				b = 0;
			} else if (_1 === (18)) {
				rep = 11;
				nb = 7;
				b = 0;
			} else {
				$s = -1; return new InternalError("unexpected length code");
			}
			/* while (true) { */ case 14:
				/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 15; continue; }
				_r$3 = f.moreBits(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				err$3 = _r$3;
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					$s = -1; return err$3;
				}
			/* } */ $s = 14; continue; case 15:
			rep = rep + (((((f.b & ((((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0))) >> 0;
			f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
			f.nb = f.nb - (nb) >>> 0;
			if ((i$2 + rep >> 0) > n) {
				$s = -1; return ((x$12 = f.roffset, new CorruptInputError(x$12.$high, x$12.$low)));
			}
			j = 0;
			while (true) {
				if (!(j < rep)) { break; }
				(x$13 = f.bits, x$13.nilCheck, ((i$2 < 0 || i$2 >= x$13.length) ? ($throwRuntimeError("index out of range"), undefined) : x$13[i$2] = b));
				i$2 = i$2 + (1) >> 0;
				j = j + (1) >> 0;
			}
		/* } */ $s = 9; continue; case 10:
		if (!f.h1.init($subslice(new sliceType$10(f.bits), 0, nlit)) || !f.h2.init($subslice(new sliceType$10(f.bits), nlit, (nlit + ndist >> 0)))) {
			$s = -1; return ((x$14 = f.roffset, new CorruptInputError(x$14.$high, x$14.$low)));
		}
		if (f.h1.min < (x$15 = f.bits, (x$15.nilCheck, x$15[256]))) {
			f.h1.min = (x$16 = f.bits, (x$16.nilCheck, x$16[256]));
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.readHuffman }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.f = f; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.n = n; $f.nb = nb; $f.nclen = nclen; $f.ndist = ndist; $f.nlit = nlit; $f.rep = rep; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.readHuffman = function() { return this.$val.readHuffman(); };
	decompressor.ptr.prototype.huffmanBlock = function() {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tuple, _tuple$1, cnt, dist, err, extra, f, length, n, nb, v, x, x$1, x$2, y, y$1, y$2, y$3, y$4, y$5, y$6, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cnt = $f.cnt; dist = $f.dist; err = $f.err; extra = $f.extra; f = $f.f; length = $f.length; n = $f.n; nb = $f.nb; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
			_1 = f.stepState;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (_1 === (0)) { */ case 2:
				/* goto readLiteral */ $s = 5; continue;
				$s = 4; continue;
			/* } else if (_1 === (1)) { */ case 3:
				/* goto copyHistory */ $s = 6; continue;
			/* } */ case 4:
		case 1:
		/* readLiteral: */ case 5:
		_r = f.huffSym(f.hl); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		v = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			f.err = err;
			$s = -1; return;
		}
		n = 0;
		length = 0;
			/* */ if (v < 256) { $s = 9; continue; }
			/* */ if ((v === 256)) { $s = 10; continue; }
			/* */ if (v < 265) { $s = 11; continue; }
			/* */ if (v < 269) { $s = 12; continue; }
			/* */ if (v < 273) { $s = 13; continue; }
			/* */ if (v < 277) { $s = 14; continue; }
			/* */ if (v < 281) { $s = 15; continue; }
			/* */ if (v < 285) { $s = 16; continue; }
			/* */ if (v < 286) { $s = 17; continue; }
			/* */ $s = 18; continue;
			/* if (v < 256) { */ case 9:
				f.dict.writeByte(((v << 24 >>> 24)));
				if (f.dict.availWrite() === 0) {
					f.toRead = f.dict.readFlush();
					f.step = $methodExpr(ptrType$10, "huffmanBlock");
					f.stepState = 0;
					$s = -1; return;
				}
				/* goto readLiteral */ $s = 5; continue;
				$s = 19; continue;
			/* } else if ((v === 256)) { */ case 10:
				f.finishBlock();
				$s = -1; return;
			/* } else if (v < 265) { */ case 11:
				length = v - 254 >> 0;
				n = 0;
				$s = 19; continue;
			/* } else if (v < 269) { */ case 12:
				length = ($imul(v, 2)) - 519 >> 0;
				n = 1;
				$s = 19; continue;
			/* } else if (v < 273) { */ case 13:
				length = ($imul(v, 4)) - 1057 >> 0;
				n = 2;
				$s = 19; continue;
			/* } else if (v < 277) { */ case 14:
				length = ($imul(v, 8)) - 2149 >> 0;
				n = 3;
				$s = 19; continue;
			/* } else if (v < 281) { */ case 15:
				length = ($imul(v, 16)) - 4365 >> 0;
				n = 4;
				$s = 19; continue;
			/* } else if (v < 285) { */ case 16:
				length = ($imul(v, 32)) - 8861 >> 0;
				n = 5;
				$s = 19; continue;
			/* } else if (v < 286) { */ case 17:
				length = 258;
				n = 0;
				$s = 19; continue;
			/* } else { */ case 18:
				f.err = ((x = f.roffset, new CorruptInputError(x.$high, x.$low)));
				$s = -1; return;
			/* } */ case 19:
		case 8:
		/* */ if (n > 0) { $s = 20; continue; }
		/* */ $s = 21; continue;
		/* if (n > 0) { */ case 20:
			/* while (true) { */ case 22:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 23; continue; }
				_r$1 = f.moreBits(); /* */ $s = 24; case 24: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err = _r$1;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 22; continue; case 23:
			length = length + (((((f.b & ((((y = n, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0))) >> 0;
			f.b = (y$1 = (n), y$1 < 32 ? (f.b >>> y$1) : 0) >>> 0;
			f.nb = f.nb - (n) >>> 0;
		/* } */ case 21:
		dist = 0;
		/* */ if (f.hd === ptrType$9.nil) { $s = 25; continue; }
		/* */ $s = 26; continue;
		/* if (f.hd === ptrType$9.nil) { */ case 25:
			/* while (true) { */ case 28:
				/* if (!(f.nb < 5)) { break; } */ if(!(f.nb < 5)) { $s = 29; continue; }
				_r$2 = f.moreBits(); /* */ $s = 30; case 30: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				err = _r$2;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					f.err = err;
					$s = -1; return;
				}
			/* } */ $s = 28; continue; case 29:
			dist = ((bits.Reverse8((((((f.b & 31) >>> 0) << 3 >>> 0) << 24 >>> 24))) >> 0));
			f.b = (y$2 = (5), y$2 < 32 ? (f.b >>> y$2) : 0) >>> 0;
			f.nb = f.nb - (5) >>> 0;
			$s = 27; continue;
		/* } else { */ case 26:
			_r$3 = f.huffSym(f.hd); /* */ $s = 31; case 31: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			dist = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				f.err = err;
				$s = -1; return;
			}
		/* } */ case 27:
			/* */ if (dist < 4) { $s = 33; continue; }
			/* */ if (dist < 30) { $s = 34; continue; }
			/* */ $s = 35; continue;
			/* if (dist < 4) { */ case 33:
				dist = dist + (1) >> 0;
				$s = 36; continue;
			/* } else if (dist < 30) { */ case 34:
				nb = (((dist - 2 >> 0) >>> 0)) >>> 1 >>> 0;
				extra = (y$3 = nb, y$3 < 32 ? (((dist & 1)) << y$3) : 0) >> 0;
				/* while (true) { */ case 37:
					/* if (!(f.nb < nb)) { break; } */ if(!(f.nb < nb)) { $s = 38; continue; }
					_r$4 = f.moreBits(); /* */ $s = 39; case 39: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					err = _r$4;
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						f.err = err;
						$s = -1; return;
					}
				/* } */ $s = 37; continue; case 38:
				extra = extra | (((((f.b & ((((y$4 = nb, y$4 < 32 ? (1 << y$4) : 0) >>> 0) - 1 >>> 0))) >>> 0) >> 0)));
				f.b = (y$5 = (nb), y$5 < 32 ? (f.b >>> y$5) : 0) >>> 0;
				f.nb = f.nb - (nb) >>> 0;
				dist = (((y$6 = ((nb + 1 >>> 0)), y$6 < 32 ? (1 << y$6) : 0) >> 0) + 1 >> 0) + extra >> 0;
				$s = 36; continue;
			/* } else { */ case 35:
				f.err = ((x$1 = f.roffset, new CorruptInputError(x$1.$high, x$1.$low)));
				$s = -1; return;
			/* } */ case 36:
		case 32:
		if (dist > f.dict.histSize()) {
			f.err = ((x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low)));
			$s = -1; return;
		}
		_tmp = length;
		_tmp$1 = dist;
		f.copyLen = _tmp;
		f.copyDist = _tmp$1;
		/* goto copyHistory */ $s = 6; continue;
		/* copyHistory: */ case 6:
		cnt = f.dict.tryWriteCopy(f.copyDist, f.copyLen);
		if (cnt === 0) {
			cnt = f.dict.writeCopy(f.copyDist, f.copyLen);
		}
		f.copyLen = f.copyLen - (cnt) >> 0;
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "huffmanBlock");
			f.stepState = 1;
			$s = -1; return;
		}
		/* goto readLiteral */ $s = 5; continue;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffmanBlock }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cnt = cnt; $f.dist = dist; $f.err = err; $f.extra = extra; $f.f = f; $f.length = length; $f.n = n; $f.nb = nb; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffmanBlock = function() { return this.$val.huffmanBlock(); };
	decompressor.ptr.prototype.dataBlock = function() {
		var _r, _tuple, err, f, n, nn, nr, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; f = $f.f; n = $f.n; nn = $f.nn; nr = $f.nr; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		f.nb = 0;
		f.b = 0;
		_r = io.ReadFull(f.r, $subslice(new sliceType$4(f.buf), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		nr = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = (new $Int64(0, nr)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		n = ((f.buf[0] >> 0)) | (((f.buf[1] >> 0)) << 8 >> 0);
		nn = ((f.buf[2] >> 0)) | (((f.buf[3] >> 0)) << 8 >> 0);
		if (!((((nn << 16 >>> 16)) === (((~n >> 0) << 16 >>> 16))))) {
			f.err = ((x$2 = f.roffset, new CorruptInputError(x$2.$high, x$2.$low)));
			$s = -1; return;
		}
		if (n === 0) {
			f.toRead = f.dict.readFlush();
			f.finishBlock();
			$s = -1; return;
		}
		f.copyLen = n;
		$r = f.copyData(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.dataBlock }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.f = f; $f.n = n; $f.nn = nn; $f.nr = nr; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.dataBlock = function() { return this.$val.dataBlock(); };
	decompressor.ptr.prototype.copyData = function() {
		var _r, _tuple, buf, cnt, err, f, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; buf = $f.buf; cnt = $f.cnt; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		buf = f.dict.writeSlice();
		if (buf.$length > f.copyLen) {
			buf = $subslice(buf, 0, f.copyLen);
		}
		_r = io.ReadFull(f.r, buf); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		cnt = _tuple[0];
		err = _tuple[1];
		f.roffset = (x = f.roffset, x$1 = (new $Int64(0, cnt)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.copyLen = f.copyLen - (cnt) >> 0;
		f.dict.writeMark(cnt);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			f.err = err;
			$s = -1; return;
		}
		if ((f.dict.availWrite() === 0) || f.copyLen > 0) {
			f.toRead = f.dict.readFlush();
			f.step = $methodExpr(ptrType$10, "copyData");
			$s = -1; return;
		}
		f.finishBlock();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.copyData }; } $f._r = _r; $f._tuple = _tuple; $f.buf = buf; $f.cnt = cnt; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.copyData = function() { return this.$val.copyData(); };
	decompressor.ptr.prototype.finishBlock = function() {
		var f;
		f = this;
		if (f.final$12) {
			if (f.dict.availRead() > 0) {
				f.toRead = f.dict.readFlush();
			}
			f.err = io.EOF;
		}
		f.step = $methodExpr(ptrType$10, "nextBlock");
	};
	decompressor.prototype.finishBlock = function() { return this.$val.finishBlock(); };
	decompressor.ptr.prototype.moreBits = function() {
		var _r, _tuple, c, err, f, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; c = $f.c; err = $f.err; f = $f.f; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r = f.r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		c = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return err;
		}
		f.roffset = (x = f.roffset, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		f.b = (f.b | (((y = f.nb, y < 32 ? (((c >>> 0)) << y) : 0) >>> 0))) >>> 0;
		f.nb = f.nb + (8) >>> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.moreBits }; } $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.err = err; $f.f = f; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.moreBits = function() { return this.$val.moreBits(); };
	decompressor.ptr.prototype.huffSym = function(h) {
		var _r, chunk, err, f, h, n, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; chunk = $f.chunk; err = $f.err; f = $f.f; h = $f.h; n = $f.n; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		n = ((h.min >>> 0));
		/* while (true) { */ case 1:
			/* while (true) { */ case 3:
				/* if (!(f.nb < n)) { break; } */ if(!(f.nb < n)) { $s = 4; continue; }
				_r = f.moreBits(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				err = _r;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [0, err];
				}
			/* } */ $s = 3; continue; case 4:
			chunk = (x = h.chunks, x$1 = (f.b & 511) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			n = ((((chunk & 15) >>> 0) >>> 0));
			if (n > 9) {
				chunk = (x$2 = (x$3 = h.links, x$4 = chunk >>> 4 >>> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4])), x$5 = (((f.b >>> 9 >>> 0)) & h.linkMask) >>> 0, ((x$5 < 0 || x$5 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$5]));
				n = ((((chunk & 15) >>> 0) >>> 0));
			}
			if (n <= f.nb) {
				if (n === 0) {
					f.err = ((x$6 = f.roffset, new CorruptInputError(x$6.$high, x$6.$low)));
					$s = -1; return [0, f.err];
				}
				f.b = (y = (n), y < 32 ? (f.b >>> y) : 0) >>> 0;
				f.nb = f.nb - (n) >>> 0;
				$s = -1; return [(((chunk >>> 4 >>> 0) >> 0)), $ifaceNil];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decompressor.ptr.prototype.huffSym }; } $f._r = _r; $f.chunk = chunk; $f.err = err; $f.f = f; $f.h = h; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.prototype.huffSym = function(h) { return this.$val.huffSym(h); };
	makeReader = function(r) {
		var _tuple, ok, r, rr;
		_tuple = $assertType(r, Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return rr;
		}
		return bufio.NewReader(r);
	};
	fixedHuffmanDecoderInit = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fixedOnce.Do((function() {
			var bits$1, i, i$1, i$2, i$3;
			bits$1 = arrayType$12.zero();
			i = 0;
			while (true) {
				if (!(i < 144)) { break; }
				((i < 0 || i >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i] = 8);
				i = i + (1) >> 0;
			}
			i$1 = 144;
			while (true) {
				if (!(i$1 < 256)) { break; }
				((i$1 < 0 || i$1 >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i$1] = 9);
				i$1 = i$1 + (1) >> 0;
			}
			i$2 = 256;
			while (true) {
				if (!(i$2 < 280)) { break; }
				((i$2 < 0 || i$2 >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i$2] = 7);
				i$2 = i$2 + (1) >> 0;
			}
			i$3 = 280;
			while (true) {
				if (!(i$3 < 288)) { break; }
				((i$3 < 0 || i$3 >= bits$1.length) ? ($throwRuntimeError("index out of range"), undefined) : bits$1[i$3] = 8);
				i$3 = i$3 + (1) >> 0;
			}
			fixedHuffmanDecoder.init(new sliceType$10(bits$1));
		})); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: fixedHuffmanDecoderInit }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	decompressor.ptr.prototype.Reset = function(r, dict) {
		var dict, f, r;
		f = this;
		decompressor.copy(f, new decompressor.ptr(makeReader(r), new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), f.bits, f.codebits, $clone(f.dict, dictDecoder), arrayType$15.zero(), $methodExpr(ptrType$10, "nextBlock"), 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0));
		f.dict.init(32768, dict);
		return $ifaceNil;
	};
	decompressor.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	NewReader = function(r) {
		var f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, sliceType$4.nil);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var dict, f, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; dict = $f.dict; f = $f.f; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = [f];
		$r = fixedHuffmanDecoderInit(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		f[0] = new decompressor.ptr($ifaceNil, new $Int64(0, 0), 0, 0, new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0), ptrType$11.nil, ptrType$12.nil, new dictDecoder.ptr(sliceType$4.nil, 0, 0, false), arrayType$15.zero(), $throwNilPointerError, 0, false, $ifaceNil, sliceType$4.nil, ptrType$9.nil, ptrType$9.nil, 0, 0);
		f[0].r = makeReader(r);
		f[0].bits = arrayType$13.zero();
		f[0].codebits = arrayType$14.zero();
		f[0].step = $methodExpr(ptrType$10, "nextBlock");
		f[0].dict.init(32768, dict);
		$s = -1; return f[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f.dict = dict; $f.f = f; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	ptrType$13.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([$Int, sliceType$4], [], false)}, {prop: "histSize", name: "histSize", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availRead", name: "availRead", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "availWrite", name: "availWrite", pkg: "compress/flate", typ: $funcType([], [$Int], false)}, {prop: "writeSlice", name: "writeSlice", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}, {prop: "writeMark", name: "writeMark", pkg: "compress/flate", typ: $funcType([$Int], [], false)}, {prop: "writeByte", name: "writeByte", pkg: "compress/flate", typ: $funcType([$Uint8], [], false)}, {prop: "writeCopy", name: "writeCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "tryWriteCopy", name: "tryWriteCopy", pkg: "compress/flate", typ: $funcType([$Int, $Int], [$Int], false)}, {prop: "readFlush", name: "readFlush", pkg: "compress/flate", typ: $funcType([], [sliceType$4], false)}];
	ptrType$3.methods = [{prop: "reset", name: "reset", pkg: "compress/flate", typ: $funcType([io.Writer], [], false)}, {prop: "flush", name: "flush", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "write", name: "write", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "writeBits", name: "writeBits", pkg: "compress/flate", typ: $funcType([$Int32, $Uint], [], false)}, {prop: "writeBytes", name: "writeBytes", pkg: "compress/flate", typ: $funcType([sliceType$4], [], false)}, {prop: "generateCodegen", name: "generateCodegen", pkg: "compress/flate", typ: $funcType([$Int, $Int, ptrType, ptrType], [], false)}, {prop: "dynamicSize", name: "dynamicSize", pkg: "compress/flate", typ: $funcType([ptrType, ptrType, $Int], [$Int, $Int], false)}, {prop: "fixedSize", name: "fixedSize", pkg: "compress/flate", typ: $funcType([$Int], [$Int], false)}, {prop: "storedSize", name: "storedSize", pkg: "compress/flate", typ: $funcType([sliceType$4], [$Int, $Bool], false)}, {prop: "writeCode", name: "writeCode", pkg: "compress/flate", typ: $funcType([hcode], [], false)}, {prop: "writeDynamicHeader", name: "writeDynamicHeader", pkg: "compress/flate", typ: $funcType([$Int, $Int, $Int, $Bool], [], false)}, {prop: "writeStoredHeader", name: "writeStoredHeader", pkg: "compress/flate", typ: $funcType([$Int, $Bool], [], false)}, {prop: "writeFixedHeader", name: "writeFixedHeader", pkg: "compress/flate", typ: $funcType([$Bool], [], false)}, {prop: "writeBlock", name: "writeBlock", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "writeBlockDynamic", name: "writeBlockDynamic", pkg: "compress/flate", typ: $funcType([sliceType$5, $Bool, sliceType$4], [], false)}, {prop: "indexTokens", name: "indexTokens", pkg: "compress/flate", typ: $funcType([sliceType$5], [$Int, $Int], false)}, {prop: "writeTokens", name: "writeTokens", pkg: "compress/flate", typ: $funcType([sliceType$5, sliceType$8, sliceType$8], [], false)}, {prop: "writeBlockHuff", name: "writeBlockHuff", pkg: "compress/flate", typ: $funcType([$Bool, sliceType$4], [], false)}];
	ptrType$14.methods = [{prop: "set", name: "set", pkg: "compress/flate", typ: $funcType([$Uint16, $Uint16], [], false)}];
	ptrType.methods = [{prop: "bitLength", name: "bitLength", pkg: "compress/flate", typ: $funcType([sliceType$7], [$Int], false)}, {prop: "bitCounts", name: "bitCounts", pkg: "compress/flate", typ: $funcType([sliceType$9, $Int32], [sliceType$7], false)}, {prop: "assignEncodingAndSize", name: "assignEncodingAndSize", pkg: "compress/flate", typ: $funcType([sliceType$7, sliceType$9], [], false)}, {prop: "generate", name: "generate", pkg: "compress/flate", typ: $funcType([sliceType$7, $Int32], [], false)}];
	byLiteral.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$7.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	byFreq.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$8.methods = [{prop: "sort", name: "sort", pkg: "compress/flate", typ: $funcType([sliceType$9], [], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	InternalError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "init", name: "init", pkg: "compress/flate", typ: $funcType([sliceType$10], [$Bool], false)}];
	ptrType$10.methods = [{prop: "nextBlock", name: "nextBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "readHuffman", name: "readHuffman", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffmanBlock", name: "huffmanBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "dataBlock", name: "dataBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "copyData", name: "copyData", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "finishBlock", name: "finishBlock", pkg: "compress/flate", typ: $funcType([], [], false)}, {prop: "moreBits", name: "moreBits", pkg: "compress/flate", typ: $funcType([], [$error], false)}, {prop: "huffSym", name: "huffSym", pkg: "compress/flate", typ: $funcType([ptrType$9], [$Int, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}];
	token.methods = [{prop: "literal", name: "literal", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "offset", name: "offset", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}, {prop: "length", name: "length", pkg: "compress/flate", typ: $funcType([], [$Uint32], false)}];
	dictDecoder.init("compress/flate", [{prop: "hist", name: "hist", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "wrPos", name: "wrPos", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "rdPos", name: "rdPos", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "full", name: "full", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	huffmanBitWriter.init("compress/flate", [{prop: "writer", name: "writer", anonymous: false, exported: false, typ: io.Writer, tag: ""}, {prop: "bits", name: "bits", anonymous: false, exported: false, typ: $Uint64, tag: ""}, {prop: "nbits", name: "nbits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "codegenFreq", name: "codegenFreq", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "nbytes", name: "nbytes", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "literalFreq", name: "literalFreq", anonymous: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "offsetFreq", name: "offsetFreq", anonymous: false, exported: false, typ: sliceType$7, tag: ""}, {prop: "codegen", name: "codegen", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "literalEncoding", name: "literalEncoding", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "offsetEncoding", name: "offsetEncoding", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "codegenEncoding", name: "codegenEncoding", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}]);
	hcode.init("compress/flate", [{prop: "code", name: "code", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "len", name: "len", anonymous: false, exported: false, typ: $Uint16, tag: ""}]);
	huffmanEncoder.init("compress/flate", [{prop: "codes", name: "codes", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "freqcache", name: "freqcache", anonymous: false, exported: false, typ: sliceType$9, tag: ""}, {prop: "bitCount", name: "bitCount", anonymous: false, exported: false, typ: arrayType$7, tag: ""}, {prop: "lns", name: "lns", anonymous: false, exported: false, typ: byLiteral, tag: ""}, {prop: "lfs", name: "lfs", anonymous: false, exported: false, typ: byFreq, tag: ""}]);
	literalNode.init("compress/flate", [{prop: "literal", name: "literal", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "freq", name: "freq", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	levelInfo.init("compress/flate", [{prop: "level", name: "level", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "lastFreq", name: "lastFreq", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "nextCharFreq", name: "nextCharFreq", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "nextPairFreq", name: "nextPairFreq", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "needed", name: "needed", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	byLiteral.init(literalNode);
	byFreq.init(literalNode);
	Resetter.init([{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType$4], [$error], false)}]);
	huffmanDecoder.init("compress/flate", [{prop: "min", name: "min", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "chunks", name: "chunks", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "links", name: "links", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "linkMask", name: "linkMask", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	Reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$4], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decompressor.init("compress/flate", [{prop: "r", name: "r", anonymous: false, exported: false, typ: Reader, tag: ""}, {prop: "roffset", name: "roffset", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "nb", name: "nb", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "h1", name: "h1", anonymous: false, exported: false, typ: huffmanDecoder, tag: ""}, {prop: "h2", name: "h2", anonymous: false, exported: false, typ: huffmanDecoder, tag: ""}, {prop: "bits", name: "bits", anonymous: false, exported: false, typ: ptrType$11, tag: ""}, {prop: "codebits", name: "codebits", anonymous: false, exported: false, typ: ptrType$12, tag: ""}, {prop: "dict", name: "dict", anonymous: false, exported: false, typ: dictDecoder, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: arrayType$15, tag: ""}, {prop: "step", name: "step", anonymous: false, exported: false, typ: funcType$3, tag: ""}, {prop: "stepState", name: "stepState", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "final$12", name: "final", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "toRead", name: "toRead", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "hl", name: "hl", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "hd", name: "hd", anonymous: false, exported: false, typ: ptrType$9, tag: ""}, {prop: "copyLen", name: "copyLen", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "copyDist", name: "copyDist", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bits.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		huffOffset = ptrType.nil;
		fixedOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		fixedHuffmanDecoder = new huffmanDecoder.ptr(0, arrayType.zero(), sliceType$1.nil, 0);
		fixedOffsetEncoding = generateFixedOffsetEncoding();
		fixedLiteralEncoding = generateFixedLiteralEncoding();
		codeOrder = $toNativeArray($kindInt, [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
		$r = init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, $init, errors, io, math, reflect, littleEndian, bigEndian, sliceType, overflow;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	littleEndian = $pkg.littleEndian = $newType(0, $kindStruct, "binary.littleEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	bigEndian = $pkg.bigEndian = $newType(0, $kindStruct, "binary.bigEndian", true, "encoding/binary", false, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	sliceType = $sliceType($Uint8);
	littleEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	littleEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	littleEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	littleEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	littleEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	littleEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (((v >>> 24 >>> 0) << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	littleEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), x$7 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	littleEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	littleEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = ((v.$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
	};
	littleEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	littleEndian.ptr.prototype.String = function() {
		return "LittleEndian";
	};
	littleEndian.prototype.String = function() { return this.$val.String(); };
	littleEndian.ptr.prototype.GoString = function() {
		return "binary.LittleEndian";
	};
	littleEndian.prototype.GoString = function() { return this.$val.GoString(); };
	bigEndian.ptr.prototype.Uint16 = function(b) {
		var b;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		return ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) << 16 >>> 16)) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) << 16 >>> 16)) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.ptr.prototype.PutUint16 = function(b, v) {
		var b, v;
		$unused((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 8 << 16 >>> 16) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.ptr.prototype.Uint32 = function(b) {
		var b;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		return ((((((((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]) >>> 0)) | ((((2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]) >>> 0)) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.ptr.prototype.PutUint32 = function(b, v) {
		var b, v;
		$unused((3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (((v >>> 24 >>> 0) << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (((v >>> 16 >>> 0) << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (((v >>> 8 >>> 0) << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = ((v << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.ptr.prototype.Uint64 = function(b) {
		var b, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = (new $Uint64(0, (7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]))), x$7 = $shiftLeft64((new $Uint64(0, (6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6]))), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64((new $Uint64(0, (5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5]))), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64((new $Uint64(0, (4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4]))), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64((new $Uint64(0, (3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3]))), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64((new $Uint64(0, (2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2]))), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64((new $Uint64(0, (1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1]))), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64((new $Uint64(0, (0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0]))), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.ptr.prototype.PutUint64 = function(b, v) {
		var b, v;
		$unused((7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7]));
		(0 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 0] = (($shiftRightUint64(v, 56).$low << 24 >>> 24)));
		(1 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 1] = (($shiftRightUint64(v, 48).$low << 24 >>> 24)));
		(2 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 2] = (($shiftRightUint64(v, 40).$low << 24 >>> 24)));
		(3 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 3] = (($shiftRightUint64(v, 32).$low << 24 >>> 24)));
		(4 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 4] = (($shiftRightUint64(v, 24).$low << 24 >>> 24)));
		(5 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 5] = (($shiftRightUint64(v, 16).$low << 24 >>> 24)));
		(6 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 6] = (($shiftRightUint64(v, 8).$low << 24 >>> 24)));
		(7 >= b.$length ? ($throwRuntimeError("index out of range"), undefined) : b.$array[b.$offset + 7] = ((v.$low << 24 >>> 24)));
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	littleEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	bigEndian.methods = [{prop: "Uint16", name: "Uint16", pkg: "", typ: $funcType([sliceType], [$Uint16], false)}, {prop: "PutUint16", name: "PutUint16", pkg: "", typ: $funcType([sliceType, $Uint16], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", typ: $funcType([sliceType], [$Uint32], false)}, {prop: "PutUint32", name: "PutUint32", pkg: "", typ: $funcType([sliceType, $Uint32], [], false)}, {prop: "Uint64", name: "Uint64", pkg: "", typ: $funcType([sliceType], [$Uint64], false)}, {prop: "PutUint64", name: "PutUint64", pkg: "", typ: $funcType([sliceType, $Uint64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "GoString", name: "GoString", pkg: "", typ: $funcType([], [$String], false)}];
	littleEndian.init("", []);
	bigEndian.init("", []);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = errors.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = reflect.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.LittleEndian = new littleEndian.ptr();
		$pkg.BigEndian = new bigEndian.ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, $init, io, Hash32, sliceType;
	io = $packages["io"];
	Hash32 = $pkg.Hash32 = $newType(8, $kindInterface, "hash.Hash32", true, "hash", true, null);
	sliceType = $sliceType($Uint8);
	Hash32.init([{prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = io.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/crc32"] = (function() {
	var $pkg = {}, $init, hash, sync, Table, digest, slicing8Table, ptrType, ptrType$1, arrayType, arrayType$1, sliceType, ptrType$2, castagnoliTable, updateCastagnoli, ieeeTable8, ieeeArchImpl, updateIEEE, ieeeOnce, ieeeInit, New, NewIEEE, Update, ChecksumIEEE, simpleMakeTable, simplePopulateTable, simpleUpdate, slicingMakeTable, slicingUpdate, archAvailableIEEE, archInitIEEE, archUpdateIEEE;
	hash = $packages["hash"];
	sync = $packages["sync"];
	Table = $pkg.Table = $newType(1024, $kindArray, "crc32.Table", true, "hash/crc32", true, null);
	digest = $pkg.digest = $newType(0, $kindStruct, "crc32.digest", true, "hash/crc32", false, function(crc_, tab_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.crc = 0;
			this.tab = ptrType.nil;
			return;
		}
		this.crc = crc_;
		this.tab = tab_;
	});
	slicing8Table = $pkg.slicing8Table = $newType(8192, $kindArray, "crc32.slicing8Table", true, "hash/crc32", false, null);
	ptrType = $ptrType(Table);
	ptrType$1 = $ptrType(slicing8Table);
	arrayType = $arrayType($Uint32, 256);
	arrayType$1 = $arrayType(Table, 8);
	sliceType = $sliceType($Uint8);
	ptrType$2 = $ptrType(digest);
	ieeeInit = function() {
		ieeeArchImpl = archAvailableIEEE();
		if (ieeeArchImpl) {
			archInitIEEE();
			updateIEEE = archUpdateIEEE;
		} else {
			ieeeTable8 = slicingMakeTable(3988292384);
			updateIEEE = (function(crc, p) {
				var crc, p;
				return slicingUpdate(crc, ieeeTable8, p);
			});
		}
	};
	New = function(tab) {
		var tab, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; tab = $f.tab; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($equal(tab, $pkg.IEEETable, Table)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($equal(tab, $pkg.IEEETable, Table)) { */ case 1:
			$r = ieeeOnce.Do(ieeeInit); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$s = -1; return new digest.ptr(0, tab);
		/* */ } return; } if ($f === undefined) { $f = { $blk: New }; } $f.tab = tab; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.New = New;
	NewIEEE = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = New($pkg.IEEETable); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewIEEE }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewIEEE = NewIEEE;
	digest.ptr.prototype.Size = function() {
		var d;
		d = this;
		return 4;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 1;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.crc = 0;
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	Update = function(crc, tab, p) {
		var _1, _r, _r$1, crc, p, tab, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; crc = $f.crc; p = $f.p; tab = $f.tab; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = tab;
			/* */ if ($equal(_1, (castagnoliTable), Table)) { $s = 2; continue; }
			/* */ if ($equal(_1, ($pkg.IEEETable), Table)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($equal(_1, (castagnoliTable), Table)) { */ case 2:
				_r = updateCastagnoli(crc, p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } else if ($equal(_1, ($pkg.IEEETable), Table)) { */ case 3:
				$r = ieeeOnce.Do(ieeeInit); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = updateIEEE(crc, p); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
			/* } else { */ case 4:
				$s = -1; return simpleUpdate(crc, tab, p);
			/* } */ case 5:
		case 1:
		$s = -1; return 0;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Update }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f.crc = crc; $f.p = p; $f.tab = tab; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Update = Update;
	digest.ptr.prototype.Write = function(p) {
		var _1, _r, _r$1, _tmp, _tmp$1, d, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; d = $f.d; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		d = this;
			_1 = d.tab;
			/* */ if ($equal(_1, (castagnoliTable), Table)) { $s = 2; continue; }
			/* */ if ($equal(_1, ($pkg.IEEETable), Table)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ($equal(_1, (castagnoliTable), Table)) { */ case 2:
				_r = updateCastagnoli(d.crc, p); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				d.crc = _r;
				$s = 5; continue;
			/* } else if ($equal(_1, ($pkg.IEEETable), Table)) { */ case 3:
				_r$1 = updateIEEE(d.crc, p); /* */ $s = 7; case 7: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				d.crc = _r$1;
				$s = 5; continue;
			/* } else { */ case 4:
				d.crc = simpleUpdate(d.crc, d.tab, p);
			/* } */ case 5:
		case 1:
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		n = _tmp;
		err = _tmp$1;
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: digest.ptr.prototype.Write }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.d = d; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.ptr.prototype.Sum32 = function() {
		var d;
		d = this;
		return d.crc;
	};
	digest.prototype.Sum32 = function() { return this.$val.Sum32(); };
	digest.ptr.prototype.Sum = function(in$1) {
		var d, in$1, s;
		d = this;
		s = d.Sum32();
		return $append(in$1, (((s >>> 24 >>> 0) << 24 >>> 24)), (((s >>> 16 >>> 0) << 24 >>> 24)), (((s >>> 8 >>> 0) << 24 >>> 24)), ((s << 24 >>> 24)));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	ChecksumIEEE = function(data) {
		var _r, data, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; data = $f.data; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = ieeeOnce.Do(ieeeInit); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = updateIEEE(0, data); /* */ $s = 2; case 2: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChecksumIEEE }; } $f._r = _r; $f.data = data; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ChecksumIEEE = ChecksumIEEE;
	simpleMakeTable = function(poly) {
		var poly, t;
		t = arrayType.zero();
		simplePopulateTable(poly, t);
		return t;
	};
	simplePopulateTable = function(poly, t) {
		var crc, i, j, poly, t, y;
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = ((i >>> 0));
			j = 0;
			while (true) {
				if (!(j < 8)) { break; }
				if (((crc & 1) >>> 0) === 1) {
					crc = (((crc >>> 1 >>> 0)) ^ poly) >>> 0;
				} else {
					crc = (y = (1), y < 32 ? (crc >>> y) : 0) >>> 0;
				}
				j = j + (1) >> 0;
			}
			t.nilCheck, ((i < 0 || i >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[i] = crc);
			i = i + (1) >> 0;
		}
	};
	simpleUpdate = function(crc, tab, p) {
		var _i, _ref, crc, p, tab, v, x;
		crc = ~crc >>> 0;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			crc = ((x = (((crc << 24 >>> 24)) ^ v) << 24 >>> 24, (tab.nilCheck, ((x < 0 || x >= tab.length) ? ($throwRuntimeError("index out of range"), undefined) : tab[x]))) ^ ((crc >>> 8 >>> 0))) >>> 0;
			_i++;
		}
		return ~crc >>> 0;
	};
	slicingMakeTable = function(poly) {
		var crc, i, j, poly, t, x, x$1, x$2, x$3;
		t = arrayType$1.zero();
		simplePopulateTable(poly, (t.nilCheck, t[0]));
		i = 0;
		while (true) {
			if (!(i < 256)) { break; }
			crc = (x = (t.nilCheck, t[0]), ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i]));
			j = 1;
			while (true) {
				if (!(j < 8)) { break; }
				crc = ((x$1 = (t.nilCheck, t[0]), x$2 = (crc & 255) >>> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])) ^ ((crc >>> 8 >>> 0))) >>> 0;
				(x$3 = (t.nilCheck, ((j < 0 || j >= t.length) ? ($throwRuntimeError("index out of range"), undefined) : t[j])), ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i] = crc));
				j = j + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return t;
	};
	slicingUpdate = function(crc, tab, p) {
		var crc, p, tab, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if (p.$length >= 16) {
			crc = ~crc >>> 0;
			while (true) {
				if (!(p.$length > 8)) { break; }
				crc = (crc ^ ((((((((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0)) | ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0)) << 8 >>> 0)) >>> 0) | ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0)) << 16 >>> 0)) >>> 0) | ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0)) << 24 >>> 0)) >>> 0))) >>> 0;
				crc = ((((((((((((((x = (tab.nilCheck, tab[0]), x$1 = (7 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 7]), ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1])) ^ (x$2 = (tab.nilCheck, tab[1]), x$3 = (6 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 6]), ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3]))) >>> 0) ^ (x$4 = (tab.nilCheck, tab[2]), x$5 = (5 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 5]), ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5]))) >>> 0) ^ (x$6 = (tab.nilCheck, tab[3]), x$7 = (4 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 4]), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7]))) >>> 0) ^ (x$8 = (tab.nilCheck, tab[4]), x$9 = crc >>> 24 >>> 0, ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9]))) >>> 0) ^ (x$10 = (tab.nilCheck, tab[5]), x$11 = (((crc >>> 16 >>> 0)) & 255) >>> 0, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11]))) >>> 0) ^ (x$12 = (tab.nilCheck, tab[6]), x$13 = (((crc >>> 8 >>> 0)) & 255) >>> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13]))) >>> 0) ^ (x$14 = (tab.nilCheck, tab[7]), x$15 = (crc & 255) >>> 0, ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15]))) >>> 0;
				p = $subslice(p, 8);
			}
			crc = ~crc >>> 0;
		}
		if (p.$length === 0) {
			return crc;
		}
		return simpleUpdate(crc, (tab.nilCheck, tab[0]), p);
	};
	archAvailableIEEE = function() {
		return false;
	};
	archInitIEEE = function() {
		$panic(new $String("not available"));
	};
	archUpdateIEEE = function(crc, p) {
		var crc, p;
		$panic(new $String("not available"));
	};
	ptrType$2.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	Table.init($Uint32, 256);
	digest.init("hash/crc32", [{prop: "crc", name: "crc", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tab", name: "tab", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	slicing8Table.init(Table, 8);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		castagnoliTable = ptrType.nil;
		updateCastagnoli = $throwNilPointerError;
		ieeeTable8 = ptrType$1.nil;
		ieeeArchImpl = false;
		updateIEEE = $throwNilPointerError;
		ieeeOnce = new sync.Once.ptr(new sync.Mutex.ptr(0, 0), 0);
		$pkg.IEEETable = simpleMakeTable(3988292384);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/gzip"] = (function() {
	var $pkg = {}, $init, bufio, flate, binary, errors, fmt, crc32, io, time, Header, Reader, sliceType, ptrType, arrayType, ptrType$1, sliceType$1, le, noEOF, NewReader;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	binary = $packages["encoding/binary"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	crc32 = $packages["hash/crc32"];
	io = $packages["io"];
	time = $packages["time"];
	Header = $pkg.Header = $newType(0, $kindStruct, "gzip.Header", true, "compress/gzip", true, function(Comment_, Extra_, ModTime_, Name_, OS_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Comment = "";
			this.Extra = sliceType.nil;
			this.ModTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil);
			this.Name = "";
			this.OS = 0;
			return;
		}
		this.Comment = Comment_;
		this.Extra = Extra_;
		this.ModTime = ModTime_;
		this.Name = Name_;
		this.OS = OS_;
	});
	Reader = $pkg.Reader = $newType(0, $kindStruct, "gzip.Reader", true, "compress/gzip", true, function(Header_, r_, decompressor_, digest_, size_, buf_, err_, multistream_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Header = new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), "", 0);
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = 0;
			this.size = 0;
			this.buf = arrayType.zero();
			this.err = $ifaceNil;
			this.multistream = false;
			return;
		}
		this.Header = Header_;
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.size = size_;
		this.buf = buf_;
		this.err = err_;
		this.multistream = multistream_;
	});
	sliceType = $sliceType($Uint8);
	ptrType = $ptrType(time.Location);
	arrayType = $arrayType($Uint8, 512);
	ptrType$1 = $ptrType(Reader);
	sliceType$1 = $sliceType($Int32);
	noEOF = function(err) {
		var err;
		if ($interfaceIsEqual(err, io.EOF)) {
			return io.ErrUnexpectedEOF;
		}
		return err;
	};
	NewReader = function(r) {
		var _r, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new Reader.ptr(new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), "", 0), $ifaceNil, $ifaceNil, 0, 0, arrayType.zero(), $ifaceNil, false);
		_r = z.Reset(r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$1.nil, err];
		}
		$s = -1; return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f._r = _r; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	Reader.ptr.prototype.Reset = function(r) {
		var _r, _tuple, _tuple$1, ok, r, rr, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; ok = $f.ok; r = $f.r; rr = $f.rr; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		Reader.copy(z, new Reader.ptr(new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), "", 0), $ifaceNil, z.decompressor, 0, 0, arrayType.zero(), $ifaceNil, true));
		_tuple = $assertType(r, flate.Reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			z.r = rr;
		} else {
			z.r = bufio.NewReader(r);
		}
		_r = z.readHeader(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		Header.copy(z.Header, _tuple$1[0]);
		z.err = _tuple$1[1];
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Reset }; } $f._r = _r; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.ok = ok; $f.r = r; $f.rr = rr; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.ptr.prototype.Multistream = function(ok) {
		var ok, z;
		z = this;
		z.multistream = ok;
	};
	Reader.prototype.Multistream = function(ok) { return this.$val.Multistream(ok); };
	Reader.ptr.prototype.readString = function() {
		var _i, _r, _r$1, _ref, _tuple, err, i, needConv, s, v, x, x$1, x$2, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tuple = $f._tuple; err = $f.err; i = $f.i; needConv = $f.needConv; s = $f.s; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		err = $ifaceNil;
		needConv = false;
		i = 0;
		/* while (true) { */ case 1:
			if (i >= 512) {
				$s = -1; return ["", $pkg.ErrHeader];
			}
			_r = z.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			(x = z.buf, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i] = _tuple[0]));
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return ["", err];
			}
			if ((x$1 = z.buf, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])) > 127) {
				needConv = true;
			}
			/* */ if ((x$2 = z.buf, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) === 0) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((x$2 = z.buf, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) === 0) { */ case 4:
				_r$1 = crc32.Update(z.digest, crc32.IEEETable, $subslice(new sliceType(z.buf), 0, (i + 1 >> 0))); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				z.digest = _r$1;
				if (needConv) {
					s = $makeSlice(sliceType$1, 0, i);
					_ref = $subslice(new sliceType(z.buf), 0, i);
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
						s = $append(s, ((v >> 0)));
						_i++;
					}
					$s = -1; return [($runesToString(s)), $ifaceNil];
				}
				$s = -1; return [($bytesToString($subslice(new sliceType(z.buf), 0, i))), $ifaceNil];
			/* } */ case 5:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return ["", $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readString }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.needConv = needConv; $f.s = s; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readString = function() { return this.$val.readString(); };
	Reader.ptr.prototype.readHeader = function() {
		var _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, data, digest, err, flg, hdr, s, t, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; data = $f.data; digest = $f.digest; err = $f.err; flg = $f.flg; hdr = $f.hdr; s = $f.s; t = $f.t; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		hdr = new Header.ptr("", sliceType.nil, new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType.nil), "", 0);
		err = $ifaceNil;
		z = this;
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 10)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $clone(hdr, Header);
			_tmp$1 = err;
			Header.copy(hdr, _tmp);
			err = _tmp$1;
			$s = -1; return [hdr, err];
		}
		if (!((z.buf[0] === 31)) || !((z.buf[1] === 139)) || !((z.buf[2] === 8))) {
			_tmp$2 = $clone(hdr, Header);
			_tmp$3 = $pkg.ErrHeader;
			Header.copy(hdr, _tmp$2);
			err = _tmp$3;
			$s = -1; return [hdr, err];
		}
		flg = z.buf[3];
		t = (new $Int64(0, $clone(le, binary.littleEndian).Uint32($subslice(new sliceType(z.buf), 4, 8))));
		if ((t.$high > 0 || (t.$high === 0 && t.$low > 0))) {
			time.Time.copy(hdr.ModTime, time.Unix(t, new $Int64(0, 0)));
		}
		hdr.OS = z.buf[9];
		_r$1 = crc32.ChecksumIEEE($subslice(new sliceType(z.buf), 0, 10)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.digest = _r$1;
		/* */ if (!((((flg & 4) >>> 0) === 0))) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (!((((flg & 4) >>> 0) === 0))) { */ case 3:
			_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$1 = _r$2;
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = $clone(hdr, Header);
				_tmp$5 = noEOF(err);
				Header.copy(hdr, _tmp$4);
				err = _tmp$5;
				$s = -1; return [hdr, err];
			}
			_r$3 = crc32.Update(z.digest, crc32.IEEETable, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			z.digest = _r$3;
			data = $makeSlice(sliceType, $clone(le, binary.littleEndian).Uint16($subslice(new sliceType(z.buf), 0, 2)));
			_r$4 = io.ReadFull(z.r, data); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$2 = _r$4;
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = $clone(hdr, Header);
				_tmp$7 = noEOF(err);
				Header.copy(hdr, _tmp$6);
				err = _tmp$7;
				$s = -1; return [hdr, err];
			}
			_r$5 = crc32.Update(z.digest, crc32.IEEETable, data); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			z.digest = _r$5;
			hdr.Extra = data;
		/* } */ case 4:
		s = "";
		/* */ if (!((((flg & 8) >>> 0) === 0))) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (!((((flg & 8) >>> 0) === 0))) { */ case 9:
			_r$6 = z.readString(); /* */ $s = 11; case 11: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$3 = _r$6;
			s = _tuple$3[0];
			err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$8 = $clone(hdr, Header);
				_tmp$9 = err;
				Header.copy(hdr, _tmp$8);
				err = _tmp$9;
				$s = -1; return [hdr, err];
			}
			hdr.Name = s;
		/* } */ case 10:
		/* */ if (!((((flg & 16) >>> 0) === 0))) { $s = 12; continue; }
		/* */ $s = 13; continue;
		/* if (!((((flg & 16) >>> 0) === 0))) { */ case 12:
			_r$7 = z.readString(); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			_tuple$4 = _r$7;
			s = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = $clone(hdr, Header);
				_tmp$11 = err;
				Header.copy(hdr, _tmp$10);
				err = _tmp$11;
				$s = -1; return [hdr, err];
			}
			hdr.Comment = s;
		/* } */ case 13:
		/* */ if (!((((flg & 2) >>> 0) === 0))) { $s = 15; continue; }
		/* */ $s = 16; continue;
		/* if (!((((flg & 2) >>> 0) === 0))) { */ case 15:
			_r$8 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 2)); /* */ $s = 17; case 17: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$5 = _r$8;
			err = _tuple$5[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$12 = $clone(hdr, Header);
				_tmp$13 = noEOF(err);
				Header.copy(hdr, _tmp$12);
				err = _tmp$13;
				$s = -1; return [hdr, err];
			}
			digest = $clone(le, binary.littleEndian).Uint16($subslice(new sliceType(z.buf), 0, 2));
			if (!((digest === ((z.digest << 16 >>> 16))))) {
				_tmp$14 = $clone(hdr, Header);
				_tmp$15 = $pkg.ErrHeader;
				Header.copy(hdr, _tmp$14);
				err = _tmp$15;
				$s = -1; return [hdr, err];
			}
		/* } */ case 16:
		z.digest = 0;
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 18:
			_r$9 = flate.NewReader(z.r); /* */ $s = 21; case 21: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			z.decompressor = _r$9;
			$s = 20; continue;
		/* } else { */ case 19:
			_r$10 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, sliceType.nil); /* */ $s = 22; case 22: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_r$10;
		/* } */ case 20:
		_tmp$16 = $clone(hdr, Header);
		_tmp$17 = $ifaceNil;
		Header.copy(hdr, _tmp$16);
		err = _tmp$17;
		$s = -1; return [hdr, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.readHeader }; } $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.data = data; $f.digest = digest; $f.err = err; $f.flg = flg; $f.hdr = hdr; $f.s = s; $f.t = t; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.readHeader = function() { return this.$val.readHeader(); };
	Reader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _r$2, _r$3, _r$4, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, digest, err, err$1, n, p, size, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; digest = $f.digest; err = $f.err; err$1 = $f.err$1; n = $f.n; p = $f.p; size = $f.size; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		n = 0;
		err = $ifaceNil;
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			_tmp = 0;
			_tmp$1 = z.err;
			n = _tmp;
			err = _tmp$1;
			$s = -1; return [n, err];
		}
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		z.err = _tuple[1];
		_r$1 = crc32.Update(z.digest, crc32.IEEETable, $subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		z.digest = _r$1;
		z.size = z.size + (((n >>> 0))) >>> 0;
		if (!($interfaceIsEqual(z.err, io.EOF))) {
			_tmp$2 = n;
			_tmp$3 = z.err;
			n = _tmp$2;
			err = _tmp$3;
			$s = -1; return [n, err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.buf), 0, 8)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			z.err = noEOF(err$1);
			_tmp$4 = n;
			_tmp$5 = z.err;
			n = _tmp$4;
			err = _tmp$5;
			$s = -1; return [n, err];
		}
		digest = $clone(le, binary.littleEndian).Uint32($subslice(new sliceType(z.buf), 0, 4));
		size = $clone(le, binary.littleEndian).Uint32($subslice(new sliceType(z.buf), 4, 8));
		if (!((digest === z.digest)) || !((size === z.size))) {
			z.err = $pkg.ErrChecksum;
			_tmp$6 = n;
			_tmp$7 = z.err;
			n = _tmp$6;
			err = _tmp$7;
			$s = -1; return [n, err];
		}
		_tmp$8 = 0;
		_tmp$9 = 0;
		z.digest = _tmp$8;
		z.size = _tmp$9;
		if (!z.multistream) {
			_tmp$10 = n;
			_tmp$11 = io.EOF;
			n = _tmp$10;
			err = _tmp$11;
			$s = -1; return [n, err];
		}
		z.err = $ifaceNil;
		_r$3 = z.readHeader(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$2 = _r$3;
		z.err = _tuple$2[1];
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			_tmp$12 = n;
			_tmp$13 = z.err;
			n = _tmp$12;
			err = _tmp$13;
			$s = -1; return [n, err];
		}
		if (n > 0) {
			_tmp$14 = n;
			_tmp$15 = $ifaceNil;
			n = _tmp$14;
			err = _tmp$15;
			$s = -1; return [n, err];
		}
		_r$4 = z.Read(p); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_tuple$3 = _r$4;
		n = _tuple$3[0];
		err = _tuple$3[1];
		$s = -1; return [n, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.digest = digest; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.p = p; $f.size = size; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.ptr.prototype.Close = function() {
		var _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Reader.ptr.prototype.Close }; } $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	Reader.prototype.Close = function() { return this.$val.Close(); };
	ptrType$1.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader], [$error], false)}, {prop: "Multistream", name: "Multistream", pkg: "", typ: $funcType([$Bool], [], false)}, {prop: "readString", name: "readString", pkg: "compress/gzip", typ: $funcType([], [$String, $error], false)}, {prop: "readHeader", name: "readHeader", pkg: "compress/gzip", typ: $funcType([], [Header, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	Header.init("", [{prop: "Comment", name: "Comment", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Extra", name: "Extra", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "ModTime", name: "ModTime", anonymous: false, exported: true, typ: time.Time, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "OS", name: "OS", anonymous: false, exported: true, typ: $Uint8, tag: ""}]);
	Reader.init("compress/gzip", [{prop: "Header", name: "Header", anonymous: true, exported: true, typ: Header, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", anonymous: false, exported: false, typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "buf", name: "buf", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "multistream", name: "multistream", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("gzip: invalid checksum");
		$pkg.ErrHeader = errors.New("gzip: invalid header");
		le = $clone(binary.LittleEndian, binary.littleEndian);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/render/internal/fonts"] = (function() {
	var $pkg = {}, $init, bytes, gzip, fmt, io, ioutil, os, filepath, strings, time, asset, bindataFileInfo, sliceType, sliceType$1, arrayType, ptrType, ptrType$1, _default_assetsFontLuxisrTtf, _bindata, bindataRead, default_assetsFontLuxisrTtfBytes, default_assetsFontLuxisrTtf, Asset;
	bytes = $packages["bytes"];
	gzip = $packages["compress/gzip"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	strings = $packages["strings"];
	time = $packages["time"];
	asset = $pkg.asset = $newType(0, $kindStruct, "fonts.asset", true, "github.com/oakmound/oak/render/internal/fonts", false, function(bytes_, info_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.bytes = sliceType.nil;
			this.info = $ifaceNil;
			return;
		}
		this.bytes = bytes_;
		this.info = info_;
	});
	bindataFileInfo = $pkg.bindataFileInfo = $newType(0, $kindStruct, "fonts.bindataFileInfo", true, "github.com/oakmound/oak/render/internal/fonts", false, function(name_, size_, mode_, modTime_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.name = "";
			this.size = new $Int64(0, 0);
			this.mode = 0;
			this.modTime = new time.Time.ptr(new $Uint64(0, 0), new $Int64(0, 0), ptrType$1.nil);
			return;
		}
		this.name = name_;
		this.size = size_;
		this.mode = mode_;
		this.modTime = modTime_;
	});
	sliceType = $sliceType($Uint8);
	sliceType$1 = $sliceType($emptyInterface);
	arrayType = $arrayType($Uint8, 64);
	ptrType = $ptrType(asset);
	ptrType$1 = $ptrType(time.Location);
	bindataRead = function(data, name) {
		var _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, buf, clErr, data, err, gz, name, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; buf = $f.buf; clErr = $f.clErr; data = $f.data; err = $f.err; gz = $f.gz; name = $f.name; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		buf = [buf];
		_r = gzip.NewReader(bytes.NewBuffer(data)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		gz = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("Read %q: %v", new sliceType$1([new $String(name), err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [sliceType.nil, _r$1];
		/* } */ case 3:
		buf[0] = new bytes.Buffer.ptr(sliceType.nil, 0, 0, arrayType.zero());
		_r$2 = io.Copy(buf[0], gz); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err = _tuple$1[1];
		_r$3 = gz.Close(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		clErr = _r$3;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 7:
			_r$4 = fmt.Errorf("Read %q: %v", new sliceType$1([new $String(name), err])); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			$s = -1; return [sliceType.nil, _r$4];
		/* } */ case 8:
		if (!($interfaceIsEqual(clErr, $ifaceNil))) {
			$s = -1; return [sliceType.nil, err];
		}
		$s = -1; return [buf[0].Bytes(), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: bindataRead }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.buf = buf; $f.clErr = clErr; $f.data = data; $f.err = err; $f.gz = gz; $f.name = name; $f.$s = $s; $f.$r = $r; return $f;
	};
	bindataFileInfo.ptr.prototype.Name = function() {
		var fi;
		fi = this;
		return fi.name;
	};
	bindataFileInfo.prototype.Name = function() { return this.$val.Name(); };
	bindataFileInfo.ptr.prototype.Size = function() {
		var fi;
		fi = this;
		return fi.size;
	};
	bindataFileInfo.prototype.Size = function() { return this.$val.Size(); };
	bindataFileInfo.ptr.prototype.Mode = function() {
		var fi;
		fi = this;
		return fi.mode;
	};
	bindataFileInfo.prototype.Mode = function() { return this.$val.Mode(); };
	bindataFileInfo.ptr.prototype.ModTime = function() {
		var fi;
		fi = this;
		return fi.modTime;
	};
	bindataFileInfo.prototype.ModTime = function() { return this.$val.ModTime(); };
	bindataFileInfo.ptr.prototype.IsDir = function() {
		var fi;
		fi = this;
		return false;
	};
	bindataFileInfo.prototype.IsDir = function() { return this.$val.IsDir(); };
	bindataFileInfo.ptr.prototype.Sys = function() {
		var fi;
		fi = this;
		return $ifaceNil;
	};
	bindataFileInfo.prototype.Sys = function() { return this.$val.Sys(); };
	default_assetsFontLuxisrTtfBytes = function() {
		var _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = bindataRead(_default_assetsFontLuxisrTtf, "default_assets/font/luxisr.ttf"); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: default_assetsFontLuxisrTtfBytes }; } $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	default_assetsFontLuxisrTtf = function() {
		var _r, _tuple, a, bytes$1, err, info, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; a = $f.a; bytes$1 = $f.bytes$1; err = $f.err; info = $f.info; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = default_assetsFontLuxisrTtfBytes(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		bytes$1 = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType.nil, err];
		}
		info = new bindataFileInfo.ptr("default_assets/font/luxisr.ttf", new $Int64(0, 67548), 438, $clone(time.Unix(new $Int64(0, 1500258634), new $Int64(0, 0)), time.Time));
		a = new asset.ptr(bytes$1, new info.constructor.elem(info));
		$s = -1; return [a, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: default_assetsFontLuxisrTtf }; } $f._r = _r; $f._tuple = _tuple; $f.a = a; $f.bytes$1 = bytes$1; $f.err = err; $f.info = info; $f.$s = $s; $f.$r = $r; return $f;
	};
	Asset = function(name) {
		var _entry, _r, _r$1, _r$2, _tuple, _tuple$1, a, cannonicalName, err, f, name, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; cannonicalName = $f.cannonicalName; err = $f.err; f = $f.f; name = $f.name; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		cannonicalName = strings.Replace(name, "\\", "/", -1);
		_tuple = (_entry = _bindata[$String.keyFor(cannonicalName)], _entry !== undefined ? [_entry.v, true] : [$throwNilPointerError, false]);
		f = _tuple[0];
		ok = _tuple[1];
		/* */ if (ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (ok) { */ case 1:
			_r = f(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple$1 = _r;
			a = _tuple$1[0];
			err = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				_r$1 = fmt.Errorf("Asset %s can't read by error: %v", new sliceType$1([new $String(name), err])); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return [sliceType.nil, _r$1];
			/* } */ case 5:
			$s = -1; return [a.bytes, $ifaceNil];
		/* } */ case 2:
		_r$2 = fmt.Errorf("Asset %s not found", new sliceType$1([new $String(name)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		$s = -1; return [sliceType.nil, _r$2];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Asset }; } $f._entry = _entry; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.cannonicalName = cannonicalName; $f.err = err; $f.f = f; $f.name = name; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Asset = Asset;
	bindataFileInfo.methods = [{prop: "Name", name: "Name", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int64], false)}, {prop: "Mode", name: "Mode", pkg: "", typ: $funcType([], [os.FileMode], false)}, {prop: "ModTime", name: "ModTime", pkg: "", typ: $funcType([], [time.Time], false)}, {prop: "IsDir", name: "IsDir", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Sys", name: "Sys", pkg: "", typ: $funcType([], [$emptyInterface], false)}];
	asset.init("github.com/oakmound/oak/render/internal/fonts", [{prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "info", name: "info", anonymous: false, exported: false, typ: os.FileInfo, tag: ""}]);
	bindataFileInfo.init("github.com/oakmound/oak/render/internal/fonts", [{prop: "name", name: "name", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Int64, tag: ""}, {prop: "mode", name: "mode", anonymous: false, exported: false, typ: os.FileMode, tag: ""}, {prop: "modTime", name: "modTime", anonymous: false, exported: false, typ: time.Time, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gzip.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = ioutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = os.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_default_assetsFontLuxisrTtf = (new sliceType($stringToBytes("\x1F\x8B\b\x00\x00\x00\x00\x00\x00\xFF\xEC\xFDy|SU\xFA?\x80?\xCF9w\xC9\x9E\xDC&i\xBA7i\xBA\xA7K\xDAta-\x81\x96\xAD\x80P\x90\x16T\xD6\xB2#\x82,\n\x94M\x14\xC5\x05\xDC\xAA(\x82\xA2\b\xCC\xA8(3\xA2\x8E\xCA\f\xA8)V\x1D\xF7\xAD\xCA\x88\xE3\xA8\xE3\xCC88\xEA82Bs\xFB{\x9Ds\x934-E\x99\xD7\xF7\xF3\xFB\xFD\xF5\xAB\xB6\xA4'\xE9\xBD\xE7<\xE79\xCF\xFA~\x9E\v\b\x00\n\x02\b`\x1B?\xA9\xB4|\xCE\xBC\x99\x0E\x00L\x03\x80\x99\xCDKf-\xAB\x7F#w\x1E\x00\xAE\x03\x10R\x9A\xAFZ\xE9N\xF8\xD0\xF2\x02\x80x\x0F\x00\\6o\xD9\xFC%\xF7\x16>q\t\x80\xF8\x03\x00,\x98?k\xC52p\x81\x1E@\xBA\f\x00l\xF3/_3\xEF\xDB\x8E\xAEO\x00\xA4\xCB\x01^\xCFZ0w\xD6\x9C\xF7}\xFB\xB7\x00\xBC{\x1B\x00T-X0w\x96\xC5+\r\x01x\xB7\x1D\x00\xB2\x17,Y\xB9z\xFE\x92\xEB>\x04x\xF7\x9F\x00R\xDA\xE2\xB9\xCB\xAF\xF8\xF7\xFC\xFFt\x01|\xAC\x03p]u\xF9\xD2\xE6Y\x0F\x1F\xFEh\"\xC0w\x9B\x00\xA8m\xC9\xAC\xD5\xCB\xF4\xBF\xC2&\x80\x1F\xD8\xF5\xDCW\xCCZ2\xF7\xFE\xE3\x89U\x00?\x1C\x02\x10\xFE\xB5l\xE9\x8A\x95\xF5\xCFlp\x02\xFC\xB4\x07@\xFEf\xD9\xF2\xB9\xCB\x86\xDC\x9D2\x18\x10\xD9\xE7\rW-\x98;Ki5u\x00\xE2.v\xFF\xAB\x96\xAC\\\xBD?u\xF8\x9B\x80x\x8C\xDD\x1F\b\xDD\x8A\xB7\x81\b \xEE\x14\x03\x00\x98\xAA\xFDK\xDF\x06\x00\xD0\x011J\x10\xFB\x92!\xEEkX\xEE(7\x04\xC1}\x96Hu\xEAep@\xBE\x15\x0F\x01\xC0\x9D\xD0\xFB\x8Bp\xFA\x038\x80\xB2W\x98\x02\x80\x12D\x06\x01\x90\xF2\xCF\xF4\xFCB\x00*\x88\x92\xAC\xD3\x1B\x8C&\xB3\xC5jS\x12\xEC\x0Eg\xA2+)9%5-=#\xD3\xED\xC9\xF2f\xE7\xE4\xE6\xE5\x17\x14\xFA\x8A\x8AKJ\xFDe\xE5\x81\x8A\xCA\xAA\xEA~\xFD\x07\f\x1C4\xB8fHp\xE8\xB0\xDA\xBA\xE1#F\x8E\x1A]?f\xEC\xB8\x8B\xC6Oh\x988\xE9\xE2\xC9\x8DMS\xA6^r\xE9e\xD3\xA6\xCF\x989\vf7\xCF\x99;o\xFE\x82\x85\x8B\x16_\xBE\xE4\x8A\xA5\xCB\xAE\\\xBEb\xE5\xAA\xAB\xAE^\xBDfm\xCB\xBA\xF5\x1B6n\xBAf\xF3\xB5\xD7m\xB9\xFE\x86\xAD7\xDEt\xF3-\xDB\xB6\xC3m\xB7\xB3\x95\xDD\xBD\x83\xCFn\xF7\xFD\xB0\xE7\xC1\x87\xF6>\f\xFB\x01~\xFD\xC8\xA3\x8F\x1D|\xFC\x89C\xBF\xF9\xED\x93\x87\x9Fz\xFA\x99\xDF\xC1s\xCF\x1F\xF9\xFD\x1F\x8E\x1E{\xE1\xC5\x97Bm\xC7_n\x7F\xE5\xD5\xD7\xFE\xF8\xFA\x1Bo\xBE\xF5\xF6;\xEF\xBE\xF7\xFE\x07\x1Fv|\xF4\xF1\x89?}r\xF2\xD3?\x7F\x06\x02[8\x04!\xC8\xA8\x0F\x1B`\x13n\xC4;H*y\x99\xBCB>\xA1\xB9t\x03\xBD\xC1\xEDtg\xB8\xB3\xDC\xB9n\xBF{\x80\xBB\xC6]\xE7~\xCC\x93\xE5)\xC9J\xC8rf%g\xB5\xFD\x83|K\xBE\x15~\xFC\xC3Y\xD2\xD5\xC5x\x036\xC1\x1E\xBC\x83$\x91\xE3\xE4\x15\xD2\x11\xB9\x82\xCD\x9D\xE4v\xF3+\xF4\xEF\xE3\n\xF8-\xF2+`WW\xD7\xE70\x1B\xA0\xCB\xD15\x15@U\x00\xD4\xF1\xE1\xFF\x86\xBF\xD5\xB6\xE3\xCF[\xFE|\xF7\x9F\xB7|6\xE4\xCF\xAB\xFF\x9C\xFB\xE9\xA2?O\xF8t\xC9\xA7\x8BO>r\xF2\x88\xEB\x1A\xDBQe\x93\xE1e\xF1hd;\x07\xF1\xCD\xFBQ\xFB\xE6\xAF\xCF\x10\x81\xD8\xCE\xE1\x89\xBE\xBE>\x87\xBDp\x1Dl\x81\xDF\xC3\xDD\xF0\x05\\\x0F\xDB\xE1f\xD8\r\xBF\x86\x87\xE1K\xB8\t\xFE\n\xD7\xC2\x9D\xF0\x15\xFC\r\xB6\xC1\x0E\xD8\n\x7F\x87\x93\xF0\x0F\xB8\x1F\x1E\x81\xAF\xE1\x9Fp\n\x1E\x82\x83\xF0\n\xBC\f\x8F\xC3lh\x86\xDB`\x0E\xBC\x06s\xA1\x1D^\x857\xE1\x8F\xF0:\xBC\x01\xDF\xC0<x\x17\xDE\x82\xB7\xE1\t\x98\x0F\xFF\x82\xDB\xE1\x03x\x0F\xDE\x87\x05\xF0-|\x077\xC2\"X\b\x8Ba\t\\\x0EW\xC0\x1EX\nW\xC22X\x0E+`\x15\xAC\x84\xAB\xE0j\xF8\x1EV\xC3ZX\x03-\xB0\x1E\xD6\xC1\xEF\xE0A\xD8\xC8v\r\xAE\x81\x7F\xC3\x0F\xF0\x1C\xFC\x07~\x84\xD3\xF0_\xF8\t\xCE\xC0Y\xE8\x840\xA8\xD0\x85\x80\x88\x04)\n(\xA2\x842\xEAP\x8F\x064\xA2\t\xCDhA+\xDAP\xC1\x04\xB4\xA3\x03\x9D\x98\x88.L\xC2dL\xC1TL\xC3t\xCC\xC0Lt\xA3\x07\xB3\xD0\x8B\xD9\x98\x03\x1Fb.\xE6a>\x16`!\xFA\xB0\b\x8B\xB1\x04K\xD1\x8FeX\x8E\x01\xAC\xC0J\xAC\xC2j\xEC\x87\xFDq\x00\x0E\xC4A8\x18kp\b\x06q(\x0E\xC3Z\xAC\xC3\xE1p\b~\x83#p$\x8E\xC2\xD1X\x8Fcp,\x8E\xC3\x8Bp<N\xC0\x06\x9C\x88\x93\xF0b\x9C\x8C\x8D\xD8\x84Sp*^\x82\x97\xE2e8\r\xA7\xE3\f\x9C\x89\xB3p66\xE3\x1C\x9C\x8B\xF3p>.\xC0\x85\xF0<.\xC2\xC5x9.\xC1+p).\x83\x0E\xF8\fN\xC0\x9F\xE0\x13\xF83|\x04\x9F\xE2j\\\x83k\xE1\xB7\xF0$\xB6\xC0\xD3\xF0\f\x84p\x1D\x1C\x86\xA7\xA0\r6\xC3\x8Bp\x03\x80\xD8.\xD4\x00\xA8\x00!h\x87\xF5p\x17\x9C\x86\xF7\xE1n\x98\v!x\f\x9E\x82\xDDp%,\x81-\xB0\x06\x16\xC0,\xB8\t\x12\xE1\x19\xB8\x05\xFE\f\xCF\xC1\x1B\xB0\x07\x1E\x85\x1B\xA0\t\xDE\x81\x03p\x1F|\x0E\x0F\xC0\xD5p\x0F\xDC\x05/\xC1\x8D\xF0:L\x85}A\xAB\xC5l2\x1A\xF4:Y\x12\x05J\x10\x8A\\\xA5\x83\x8A\x8B\xD8\xB7\x92\xD0\x9F\xFDp\xF5/.\xB2\xB9\xC2\x83\xD8\xCF\x1F\xF8\xCFO\xF8\xCF\xF7\xD8\xCFpq\x91\xED\x87\xE2\"\xDB'\xC5E\xB6\xF7\x8A\x8BB\xC5E\xC7\x8A\x8B h`\xF2\v\t\xA1\x14\x12\x87\f\x192$\xB1\x18\x00(\x13\x93`\x03\xEC\xEA\x02\n\x04\xFA3q&\xB6\x03\x05\x19\xBCA\x9B(\x11\x14d\n\xA2@\xA8$#\x94\x0E\xFA\xD3 \xF6\x1D{\x11P<J\x9E\xE2Q\xFA\xE3\xCB\xFD\xD5G\xC5\xF63\xFD\xFA\x8B\x8Dg\x1E\x01\x02\xCF\x01\xE0F~%=\x8C\tV\xE9D\"1\xA1APD@\xC1\x1F\xD2\vH\x01\t\xC8\x12X\xF4\x02!@\x01t2%\x02\xE5oK\"\x02\x05_fFaf\x86\xCF7dP\xA1\xF6\xAA\xCC\x1F\xA8\f8)U\x02\n}\xAE\xED\xB1\xE4\xB6\xA4\xB66\xBC\x99:1_\xED\xE8\xFC\x9AM\xFE2\xA1\x86\xB4H>\xBE\x82\xDC\xA0S\x12\tR\x90\xD9U\xA9%J\xCF\x92\xC8\x97\xCF5d\x90\xAF\xCCo\xA7\x01\xFE\xDF*v\xB9\xE4\xE3\xC9B\r\x9ER\xED\xEC\x1B\b$\x03\b\x97\x88\xED\x90\n\x99p}\xB0\xC9b6\xE8\x05\xB3\x9C\x9A\xE4\x02\xC1\x8C\x00\x99\x19\t\x8A$J\xA2\x9C\x9E\xE6\xB0\vT\x12\x91\b\xFE\x90\xCDj2\xEAd1%9\xD1IP$`\xC9\xCCHOKMINr%:\x1D\xF6\x04\xC5\xD6{\x87K~\xE1\xCB\xA7\xAD\xDFVh+,\xF3\x07\xEC\xDEj\xED;@=\xF6\x00\r\xC8^\xFE\xED\xB5{\xA8\xDDc\xF7\xAC_\xFAn\xD2\xC7M\xFFL\xFEn\xD9\xC6\xA5(/\xDD\xA4\xFD\x9A\xF4\xFD\xD2MK\xD5\x9F\x96nC]\x93\xFA_<\xB2\x0E\xA7\xB6\xE0\x11\xB5\x8E}\xB7\xA8\x07\xD6i\xAFH?\x9C\n\x14\xE6wm\xA1\x8FKu\x90\x03EP\x06+\x82\xA3J\x8A\x8Brs\xB2\x93\\N\x07\x9B\xBD,\t\x14\xC1\x02\xE07\x1B\xF3\xCDn\x7F\xC8h\x04J\xDC\x0E\x00\xEDS\t\x8AQ\xE6\xDB\xE8t`I1\xFB<\xB2=@\n\x91u\x84|\xA5\x99\x19\xB6S\xB6S\x99\x19\xBE\xBE\xD6[\xE6\x17+\xB3\xF2*\x13\x03Jn^neEuUue\xC0Y\xEEr\xE6\xE6)\xAED\x97+\x91\xD1Q\x96d\xA7RUY\x91\x97\x9BG\x15\xC9\xE9\xC0\xEF\x0F\x9D\xF8\xEC\x91\xE7\xC6M\xD9\xD8xS\xF3m\xBF9\xBA\xD9\x94\xE22m\x182i\xED\xE4\x9B\x1E\xF3\xE745?\xD9\xD22\xE9\x91\x85\xC4\xBE\xB2q\xCEm\x8F\xCE\x1Bn^\xB7\xAE\xF6\xC1I\x86\xF0w:\x9BY7fX\xE3\x96\xA7\xAE\x9E\x98\xD9\x82\xA9\xB5\xF7O\xAC\xCC\x1F\x8C\x12\xB6\x0F\xBE\xFDZ\x00\x11\x96u\x9D\x90\x0E\x8A\xA7\x80\x82\x1D\xBC\x10\x80ZX\x16\x1C\n0\xC8YT\xE1\xCCNs\x9A\x1CN\xC1\x1F*\"\x02d\x9B\x10\xB3M\x04\b\xE7s\x8D\xBD-\x00Ak~?\xAB\xDFm\xD5%Ym\xFE\x90?\xDF\xA6\x8B\xEExiii\x84\f\x11R\x14\xDA\x1D>\xBB\xA3\xB4t\xC8\x90\xF8\xE12\xBF\v\x03h/\xD7\x16\xED\xCD\xD2(\xE2\xCA\x92%\xA7\xC3\x95\x18(\xAF\xE6D\xC0_x\xFF\x8C\xB0}\xE7\xD9\x15IwNnl\x9C|G\xEB\xE4\xC9#\xA6<0\xBA\xB88\xA7\xB8\xA1\xBE\xB8\xB8\xB8\x84\xAE\xBDs\xF2\xE4\xC9\x8D\xDA\x1B{\xEA\x8B\x8Bs\x8A&\x8D....\xCE\x91\x12~\xFAF<\xD5<\xE7\xD1G\x9B\xE7\xCC\x99\xF3\xC4\x8E\x99W\xCD\xAE\x1F\xB3j\xC5\xA8K\xC6\x8CY\xD3R?&\xBCaNs\xE4\xAD{f\xF0\xB7\x96\x8F\x8E\xBC\x05\x14\xFAu\x9D\x10\xCD\xE2)\xF0B)\f\x80U\xC1\x91\x00U\xF9JI>\xF5\x87\x14\xA0\x04\xFD\xB9\xC9F\x012(d{\xD2SQ\xCC\x00\x9A\x99\x81\xDE\b\xE1\xFA\x15\x98+,\xCE\xC2\x02\xD9\x1F\xF2\xE7f{=\x99\x19\xE9\xA9\xC9N\xB3Qf\xD4+-)-\xED\xE6\x97(\xB9\x18\r}\x0E\x9F#J@F<O^\x8C&\xD5\xFCg B)9\xC1UUY\x19\xB0\xC9\x89\xAE\x9C\\*E\xC9E\xAB\x18\xC1\xBCYN\x87K\xC0\xD1\xEDO\x7F\xDC\xDAz\xCD\xD8\xDB\xA6\\6m\xF7]MM+G^\xFF\xAB\xFD\xCD/\xBD:\xE5*ur\xDB\x8B\xB3\xCBG\xCF\x9B\x7F\xEB\xB2\x8D3K\xEAni\x1D\xD1\xB4n\xEB\xD67_\xDFX\xDFo\xEF\xEA\xBB/\xB9\xA4\xA1a\xEB\x8E%\xC3\x06\xABo\xBE\xBC\xB1s\x82\xBA\xFFO\xCB\x96\xBC\xFA\x19..\x1Dxq\xCB\xBD\x8B\x16\xD3q\x85\xFE\x11\xCD;\x1F\x9A}#\xB3\x17G\t&\x1C\xC2e\x96+h\x8EqN\x94K|\x85\x9A\x88ZSv\xBA\\0\x91\xCC\xF0g\xECo\xAEU;\xC8\x14\xC9\x07\n\xE4\x04\x15\x83\x9E\x9FFK\x81\xE8\x0F\x19\xF4\xA2F\x1FN\x94\xC8\xF9*\xF3\x8B\xCE\xDC<\xA2\xD8\xECU\xD5NI\x96\x14\x9B+\x91Li_y\xEF\xFE\xE5\xBF\xBFa\xF0\xD8I5{\xB6n\x7F\x1B\x15\x1C\x80\xA30\xE5\xD8\r[\xEF\xDE\xFD\x92\xFA\xBE\xDA\xFE\xCA\x9D\x800Q\xED y\xFF\xC3\x9D\xEC\x95\x89\xAE\x04\xC5F%\xB9\xB2\xAA\xBAJ\xB1\xE5\xE5Nl_u\x0F\xBF\xD1\x98I\x83\xC4\xBD[\xB7\xBF\xAD~\xAB\x1EW\x9FV\xBF:v\xC3\xD6\x1D\xBB_B\x1FV\xBFr;\x88\x90G\xFEE\xFE#\xB6\x83\x0E\xCC\x90\x00\xE9\x90\r\v\x83C\xB30;\xCB\xCD\x04\x8F]\x87`\xCC`\xC4\xC1\xF4\x04&A\x8D\x06=%Fd\xC7-3\x03,\xD9\xEE\xCC\x8Ct\xFE\xC1\xE8\xBB:1v\xD2\xFA\x92\xA9C\x06\xF1\xE3f\xF7\xD9K\xCB\xFC\xE8\x12+\xAB*+s\xF3\xEC2\xAD\xAA\xA6y\xD5\x89\xAE\x9CjQr:\x1DNW\xA2\xD3\x1E\xA0\xB9\xDE,\x99\xBC\\\xA2\xFE\x83\x90\xD4/W\xEF.w\xFCk\xF5\x1B\x8EruO1\n\xE9\x88rkf\xA2\xD3\xE5\x10\xF5\xDB\x86\x11#ba\xB2\xFA\\\x13\x1A\xA5b\xF5\xC5\xA6\xAF\x8A\xA5\xCD\xDB\xD6\xA7\x14 \nT \xB8]\xFD\xA3\xD1\xC8vp\x014\v\xB5B\r\x18aT\xB0\x12\xC0\xA0'(S\xCA\xA4\xA6N\x16(52&\x90D\xB4\x00\x18\r\xB2$kzQ\xAFCQ@\xA0\x94\xC4\x84iL;\x96\xF9s\x14O\xA5G\t(\x1E\xA7G!Fu\x1A\xEEm\xC5\x87\xD5\xCB\x9A#\xFF\xB6\xAA\xD3\x00\xE1A\xF5(\xDE\x03\xA7A\x0F\x15\xC1\x1C\x9D\xC8$\xB9d\x96\x98\x88\xB6\b\x94\xC8\x9A\"\xD6a\x1Fj\xD8\xC7\xB4\x8F\x9D\x91\xC9[\x19p\x92\x07g\xCE<\x8D\xEA\xD1\xFA\xD4v\xC7\xE9\x0F\xD4g\xD9\x9A\xA6\x10\x89L$;\x81Bv0\x89\x99\x172\"\xBB\x0EA\xE4\f\x8DlQ\x85>_d\xBE\xF6J\x8Fs\n\x9E!Rk+\xFB\xEB\x07\x01\xF8\xCC(\xF8\x83\x99L\x86Ff\xC1|/\v\x00%\x91\xDF\x1106\xA7\xC8\x95\x98Y\xF0\xE0\xE9\xD3\xA7\x01\xBB\xDA\xD4\x0E\xB2\x8A[\x1EIA\x13\xFBS\x82q\x87\x89k|\x8A\x01\x1CH\x9C\xF7\x85\xBFV;\xA4o\x7F\xB2\x01\x81\t]'\x84,\xF1\x14X!\x13*\x82\xA9\x00I\xF9:[>\xF8C:\x02\xEC\xE6i>\xC1\xA17\xF9C&\xA1\xB4[u\xC5\x8B\x19&\x7F\x15\x9B&\x7F\x15\x9B&\x7F\xD91c\xF2\x97\x1D\x02\xD2\xFF\xB3\xEB\xAE\xBB\xEE\xBA\xAF\x8E\xAF\xDFs\xDDu\x9F]?j\xF4\xE8Q7\xAC\xAD\xBDd\xF4\x18\xF1\xD4[o\xA9\xF7\xA9w\xBC\xF9\xD6\xAF?\xC0[p\xFE\x9Bo\xB7>\xBCO}_\xFD\xF0\xC0\xFE\xB5\x0F\xE1eX\xF2\xE0^@\xF8+\x00\xED\x14O\x81\x1E\xEA\x82e\xCCj\xE0\xE6\x87NfL\xA3q\x86F$Y\x12\x90D8\x85\x92\b\xB3D9\xC5\x17\xB1\"\x18\xBD<\x8AX\x99\xA3x\x9C\x7Fe\xB6\x13~\x83\xF9\xAD\xC2m\xF5\xF7\xB4\x9C9\xD0\n\b\xF3\x00(\xD3y\xE9058\x00\xC0\x98o\xF3\x87l\x80\x163\xD1|\xDE\xB4Td/\x05\x7F(=r[\xBD\xC3\x1FJM3\x13GZz\x1AZ\xCCl\xA7)\x14\xDAB\xBE\x88l\xD0n\xCDD\xB36\xC0\xA6P5\x84p\xD5\xE4\xCD\x92+\xBB\xA5\xB2,\xC9\x1E\xE7\xBC\xBA\x87.\x9F\xFDB\xFD\xA0E7}\xF0\xDA\x13/\xAEX1\xB0\xE6\xA1\xE1o\x16\x92\x86\x83{~}\xC5\x9C\xB6\xE3\xDBj\xABW?>\xED\xCAe\x7F\xB8v\xEE\x82;j\x8E\xB4\x1D\x04\x84{\xBBN\xD0\xE3\xE2)(\x85\xF9L?'\xE7g\xE8\xF2K\xFC\xA1\x12\x92\x01\x88\xB9i\xA9\t\x8A\r\x99\xB9K\xF9~\xBA\n\xB2L\xFAB\x7F(7A\xB1\t\xE6\xC2\xACT\xB6(\x17\x02\x8A\xF1\xFCe\v\x85\nc\xBB\xCD\xA5E\xFC\x96WW2K\xA4[\xC5z\xBD\x95\xD5\x11\xE5\x11\xBF\xA0\xC4\xA8b\xBEWN1.\xC9\x1BZ\xB9c\xCC\xB0\xB9s\x9E\xBB\xA8\xEE\xB1i\xB3\xFE\xD5\xF2\xECS7\x7F\xB7\xF0\xA2e\xC36/\x1F\xF0\xEC\x96-\x1F\xAD2\xFE\x8E\x1Ai\xBEA\xB9x\xD4\x96\xFB&N\xDC\x82t\xECE7\x9E\x9C\xF4\xD8\xC0\x15\x93\xB7=0\x7Fp #k\xF1\xA7\xAF\xAEY\v\x042\x01\x84R\xB1\x1D\f`\x86K\x83\xC3\xCD\x82D\xA8\x84\x04\xC0d\x94%+E\x8D\t\bR\x03;t\xA2\x00\x16#\x10\x02  $\x11\xD1l2\xA3H\xB8\xB0A\x83^\x12{H\x94n\x83\xDBW\xE6\xF7(\x9EJ\f(\x01\xA7WA\x8FB\x0E\x85\x97\x92\xDB\x9F=~<|5~\x82{\xEF\xA2\xB7u\xAE{P\x9DF\xEA\xC8\x1D\x80\xB0\x97\xEFA;$\xC3\xD2\xE0\b\x00\x9A\x9F\xE4\x0F%\x11=\xDA\x8Cz\x14,\x84\x9FF\x00\xB0Z\xCChb\xF33\x9Bb\xCC\xE30\x03\xD8\xACf4\xB2q\xF6\xBE1\xC2C\x91\x8D\x88\xF0\xD1\x90A\xFCw\xBB\xED\x98\x9D\t\xEE\x187\xB9*\xB5m\xB0y\xB2d.\xFF\x84(\xD5\xF7\xDE\xB3\xF1\xCEI\x17\xAB\xFD\xAA\xFB\x93\x7F\x86_@\xDD\xDDGo\xBF\xA3\xEB\n\xE9\xD0\xC0\xC6\xA6;q\x82L\xDEzL]+\xCC\xBF\xAE\xABcm\v\x10\xB8\xB8\xEB\x84@\xC5o \r\xF2\xA1)X\x0E\x90\x93oH\xCF'\xAE\xFC\x04\x7F(\x01\f\x84 :\x1D\x04\x84(\x1F\xE5\x15H\x9E\x14\x8B?$9\xC0\xE2p:\x10|\xB6\xD01m\xB6\xDDL\x13g\xD0qQ\x11\xE3\x8D\xA8\xB0\xF00\xDB\xD6\x9B%K\xB2$\xC6\xEC6\xC5\x86\x857\xBD\xFC\xF4\xC2\x85\xEB\xD6\xBD\xF5\xF9\xE6\xCD\xF7\xDD\x87\t\x1B\xEE}j\xDE'S\xBD&\x19S\xD6\x8D\x1D7~\xFC\x86\x1F\xA8\xE1\xB1u-\x1F}\xB7m\xDBK/\xE2d\xBC\xF6\xC4\x89~\x8FM89e\xC9\x80\xC9\x8D\x8Dw>\xBCx1^\x84\x8B\x01a+\x80P#\xB6\x83\x11\xCA\x83^\x00\xBD$\xA6\x12\x99\x11\xDA\b\b:\x19,F\x11\xA8N\xA2z\x1D\xCA\x92&\xA2\x87\f\x8A\xC9\xD6\xAA\xEA\xAAj\xF4Tz\x9C@O\xA6WV\xDE\x88\xADa\x89>\x1D~\xB9\xEE\xE0\x86\xF5\x9F\x90\x9B\x9E}\xB6\xF3Y\xB5\x1FPh\xEE:!\f\x15OA&\x14C\r\\\x1A\f0k/)7_\xC7\x98@\x07\x88%n[7\xE5\x06\xF8\x1C\xE5\x05i\x85\x16!\xCBb\xF2\x87J\xDCi\x0E\x9BI\x00f\xD6\x95\x96v[t}\x9F<\x8C\xB8\x05\xE7\x9E1m<'*W8)e\xA9\xA7)\x9C\x877\xCE.\x1B\xD1\xD2r\xFCwW^9g\xF0\x8A\xBB\xC7]\xBE\xED\x96OOl\xB9\xFE\xF2 \xAEz\xB3\xAEn\xE5\x15\xB5\xB5W\x0EH\xB9\xA2\xA8|\xE2\xC4\x1B65L\x1CR\xB9\x99\xE6\x8E\x1C:}\xC9\xDE\x05\v\xA7N\xB9\xED\x9A\x15\xC3\xC7\x8D\x9B\xB8r\xC73\xABV-]\xFA\xCC\x9E\rco\xDA\xBEszu\xBF\xCA\x8A)\v\xA7\x96\xBC\xD38d\xD4\xE5\xD7\\4\xBE\xB6v\xF1\x8C\xA1U\xE3\x80s\xD4\xC7=9\xCA\x93O\xD2\xF3\r\x1AG\x11\x03\xF4\xE6\xA8\x9C\x14Kf\x81\xE4\x0F\x81\xC5!E9\xCA\x16:\xF6\xF3\x1C\x15[y \xA2\x86<\xDC}*g\xF2\b\xB3\x14[t\xE9\xB4X\xE3\xA8\x96\xB7\xBE`\x1C\xA5~\xB3\xE9\x9Eg\xE6r\x8ER?\xFD\xE1,\xE3\xA9\t\xE4\x0F\x8F\xAD[\xF7\xD1\xB7\xDB\xB6\xBF\xF4\x92\xFA\x98\xBA\x8Eq\xD4\xF8\x93MK\x06P\x8B\xFA\xA4\xDA\xDA\xD8t\xE7\xDE\xC5\x8B!\xEA\xE1\v5\xDC\xD3\xAE\t\xFA\x00dAD\x91;\xF8$\xA2\xB45\xF3E\x96bn=WGQ\xDD\x1D\xC7a\xCC\xA9\xAF\f8\x9Fkc_t\xF5\xF1\xE3\xEC\xFA\xEAQ~}=\x98aj\xB0\x06u\x12!\x80\xDC^\x11\xCDL\x8A\x98\r\xA2&-\x98\xEDb2b\xCC|1\x9Btr\xE4\x86F\x033a\xC4\xB8H\x82/\"?\n\x99\xFC\x887g\xF8\x04F\x8El\xC3P\x9Bz\xB4>\xE7yW\xDB~\xF5\x1D\xE1\x86\xE3\xC7\xE3l5\t\xBCAG\xC4g\xB7\x88\x02R3H\x94\xB0%\xD9\n}1\xDF5\x07\xD1\x89N\x14j;s\xE8\x89\xF0r\xB2\xBD\x19O\xE17\xFB\xD5g\t\xB3\x92\b,\xC0qB-\x9D\xC4)W\x16\xCCa\x94\x93\x19\xE5d\x8Dr\x92\x18\xF1\x00\x18\xE1('\x19;\x91\x85qF\x13Vz\x9C\v\xE8\tv}\x1C\xD7\xDA\x8A\xCB[[\xFF\xE7Y\xDA\x11+\xB1\x12\xF9e\xC8\xF6\xF0r\xA1FMP\xED\xFBp$\xC1\x91l\x967\x01\xD0\x1F\xB9\xDF\x9B\x0E\x8B\x98\xE7f\xCAW\x98\xDB\x86iV\x8B(h!\xE0X8']\x88\xF9\xBB\x06\xBD\xD3\x1Fr\x12\x80\xF4\xB4\xD8\xBE[-\x18]GOq^x\x8EY\xE0\xE1\xBC\x90[\xCD\xF8\xD5\x13\xA7G\xF9!v\xE2\xEA\xB66|x\xEA!\xF5\x9B_\xFD\xF9\x93\xE7\xFE\xB8\xF2\xAE\xA3\r\xCD^o[\x1B\xDE\\\xF5\x9FM\xC3\xB7\xDE\xF9R\xFD\x81\xEAa\x8DG\x8E\\U>x\xD8\xD0uW\xB0u\x84\xBBN\xC8\x15\xE2)\b\xC2\x18\xB868\x0E\xA0^J\xAB\xB3e\xD5\xD8H\x95\xCDPbK\xF0\x87\f@H\x16fA>\x81\xB4\x04\x1C64\x98\x96\xE4J\x00]>\xA1P\x90\xCF\xCD\x9BQ\xD6\x8C\x01\x8AT\xAEX\xFC\xA1aC\x83E\x05\xF9\x19I.\x87Eb\xD2\xAA\x94{\x17\xA5=\x9DP\x1F\xD3M\xA5\x0E\x9F\xA3\x87+\xAF-0G\xF2\xBA\x99\xD4G\xF0\xB8]\x89\n\x97Z\x95\x15\xD5\xD5^)\xF2\x8A\xAF\xD8\x95\x18\bP\xC9\xE9\x88\xD9\x16nYR4\x19f\xAF\x8EH\xB6@\xB9\xF0\xE5s\x8F\xA8\xFFx\xE6\x19L\xC1\x14\xBC\x12S\x8E\x1C\xD9\xB1\xE3\xC3\x03\xCE|\xD3\xE4\xB1K\xD6\xFC\xFE\xA1\x07_O\xCE7\x98\xF3Ro\xDC \x8D\xBBn\xC1\x82\x07\x1E\xF8\xB7\x1A\xFA\xF1\xC7\xFBv~\xBB\xF3n[\xDE\xF4a\xDB\xA6O\x9F\xB0\xA5\xA8\xE1\xF1\x83h\xC3\xA5\x98\x86i\x87\x0F\xAB?\xFC\xF8\xF8\xC1\x15y\xC36\xEC\xBAh\xD9\xE7?\xBD\xF6\x1AA$\xE1\xEB22\xEB\xB6\xDF\xFA\xF4\x97\xF7\xDC\xF3\xD3\x19\xF5\xA5\xBF\xDEz\xDB(\xF2\xC4K\x9E[o}\xF3.F_;\x80\xC8t\x8B\f\x06\x18\x1A\xCC7 \xB3\x98\xF5:+\x8A\x11\x0F\x82\x9DEJ\xB8\x19\xDEw\xC8\xABG|\x0F\x03\xE8\xA5\x1Ej\xF7P;)\x7F\x8B\x14\xFCeg\xF8\xF1\x9D\x1F\xE0\x9FN\x89\xEDg\xFA\xE1Nu\x1E\xA9\"k\x99k\xB1\x0F@xSl\x07\x07dB>\\\x1E\x1Ckpg\x10\x80\xFC<+bfF&\xBA\x13\x9DV\x04*\xF8C\x1E7:\x18s\x12\xBE\x97^\xBD\x94\xC24v\x9E'#\xD1a \xB2\xD9\"9\x01\xF2\xDD\x99N\x0F\xED\xE5^\xF40\xFF\xE2'\xA9\xB0\xAD\x8BW<\xB2\xE4\xCD\t\xB8cf`\xC0\xAD\xF0\x17\xFB\xF0c\xCC^\xBD\xE6\xEAQ7>>e\xFD\xBCQ\xAB\xA6\xEDRC\xF7a\xEE\xB4\xCB\xAE\xBE\xFA\xB3G\x9F\xC4;VL\xF9\xDD\x8Bb\xFB\x98\xB1\x87\xF7\xCF\xAF)\xAD\x18\xB3\xE8\xD7\xBB\x17\xD4\xDB\xAD\xBB\x8B|7\xDF;\xA1a\v\xA6\xDE\x9A\xCB\xEC\xEB\x95]'\xC4Q\xE2)H\x86\xD1\xC1\"\x00W:\xB1\xA6\x1B4\xB6EL6\x9B\xBAu\x87=E\xF2\x87$S2\xA0\xD9\xC4\xD4x\xEC\x9C\x9D\xA3As$\x8F;j{\x88\xCElo\xC4[\xF1\x94W\x8B\xA3\xBET\xCF\xAAw\xFE\xE1\xE8\x8B/\xE2\xD2\xD71A}\xE5\xC9\xB3\xD7_\x7F\xEB\xADH?\xFAi\xEC\x95\xC7\x8Fc\v\xAE}\xA5}h\xDB\xC2=\x0F\xA8\xEF\xAA\x1F?\xB0\xE7\x1A\xC6\x05\xFB\x00\xC4E\xDCw\xB7\xC3\xC4`\x15\x80=\xC1\x8Ah\xD0[5\x99\xA6\x8B\xF8a\x00\xA6\x14\xC1\x1FJ0\xE8\x88`\x16\xF4\x00v\xBD\xA7\xB7Sg\xD3\x88\xDESC(\x1E7Wk9\x017\xF3\xA6\"\xC4%_\xBF\xF4\xA2\xBA[\xFDO'I|\xB7f\xF2\xFCG\xEE\x13\xDB\xC35\xEAm\xAF\xBD\xB6\x9B4\xE0\xB4[\v\x13\x9C\xCC\xAF<\n \xA6q\xEBg|p\x10\x80@\xAD\x88:\xD9\x8A\"\x9F\x1E\xD5\xB8\xD4\xD8\xCD!z\x9D(x\xA2\xFA\x83yQ\xB2\xC4lQ\xE1\\\x87[s\xB5\xB5\xEF\xA3BY\xE7\x83\xA43,\xD0\x9B\xC5\xF6\xDDj\xCE}\xE1\xBF\xED\x8E\xDC]xLl\x07=\x8C\fV\xC4\xDF=\"\xEB\xF5}\xDE8v\xD7>\xDC\xFC\xEE\xBB\x1E\xA5\xA7:\xBF$\xCF\x84G\xB3;\xDA\xEE\v\xCF\x04\x84i]'\xC4\xF5\x9C[\xAEb\xD2\xCE\x91N-\xE9z\xE6\x1FR\x82&#aG\x07\x13\x91\xB8\x18\xCB@\x92\xCB\xAA\x91?Y\xF3\xE3l)\xA2?$&\x01\xB8\x12\xBB\xF7\xC5d\xC4\xE4\xA4sM\xF1\x88&e\xBC\xD5\xD38S\x04\xB6YQ\xCErG\xF8J\xF1V\x8A\xEB\xD5o\xD4\xCE\xCE\x1F_y\x15\xD7\xFF\x88I\xEA\xD1\x0F\xC2\x1F\xDF\xB3\x03]+\x9E:M\x0E\x85W\x8F\xA3\x02\xAE}\xF5\xD5\xDA\x17\x17\x84\xEFQ\xDF\xDA\xB3'\x07\xD7\xECd\x14d\xBC\xE5\xE1\xFB76\xD8\x8F)\x18+\xF28\x89@\xD1\xA8\x93\x99l\x91D\x82@c\x14\x94\x8C\x06J<\x94s\x9EF\xC5\xA8\xE2\xF1\xB9\xE2\xC9\x18P<J@\xF1*\x1Ee\xDF;\xE4\xA3\xB7\xDF\x0E\xE7\x89\xED\xE1\xDB\xC8\xB23\xFD\xC8\xF3\xE1\xE1\x80p\x18\x00\xAF\xE7\xB1\x84\x9C\xA0\x8B\xC6x\x98\x92s\x98V\v,\xB0K\x1E~\x87I*6\xEF2\xB5\x83\x8E\x12\xDB\xC1\f\xA3\xD8\xB9\xA5\x19&\x7F\b\r2\xD11G\b\xC1D@\xAFc\x97\xD3\xC9\x1E\xD4\xB3\xCB\x19\xF4=\xE6:d\x90\xDD\x16:\xC6\x1D\x9D\xDEn\x8E\x12Pl\x9E\xAC\xB2G\xEFz\xB4\xAC\xE0\x1D5\xF3\xA1\xBF=5n|\xDD\x83\xA2\xE3\xCC\xBF\xD5\xF4\b\xC7\xE7p\xDFpH\xB0X/Q\x8A@\r\x8CT \n\x9CR\\\fs3\xCA\xA0\x8Fi\xE9\xB8#X\xC8s#\x91\x15a\x00\xD1\x83\xCA\xD162\xFF\xDD\xF0c\xE4y\xF5\xC7\xF0B\xB1=\x9CO:\xC25\x9Dg\xC87\xE1\x84\xC8.\t\xE3\xC4v\x10\xA1\x7F0W\xE3s\xCD\xE6;\x97l\xA2\xD0k\x9D\xBE\xF8-q\xEE{\x87| \xB6\x9Fy\x7F\xB7vUI\x14\xDB\xC1\x04\xF5\xC1\xFEF\x1D\xA5\xA8\xA7\x06=\x9Ad\x89\xED{d5\x06\xBD@\x89(\x1By\xE8J@\xD1dL\x8A\x99R\xF17\xE2\xBB\xAF\xC9oD\x8F\xE2U\xD0\x8B\xCA>\xF4\xE2\x0E|\b\x85\x90z\xF9k\xEAj\xB1\xFD\xEC\r\xC2\x9A3\xFD\x84'\xCF\x1E\x12.>;:\x8E\xFF\xF40,X\xC6\xA3\xF7T\xCF\xEE\x1F\xBD\xBDL\b\xD5Q\xB6\xE4$\x14\xF5\xBA\xF3\xDF;BPdL\x87\xCA\xBE\xD7\xC9\xD9\xC3o\x84%\xB1\xFD\xEC\x8D\xC2\xD5g\xFA\tW\x9F\xBD\x11\b?\xBF\x9F\xF4\x88D\xA5\xEBl\xE9q\x91\xA8\x14\xC1\x91\xF2\xB3\x91(w\xC4\x05\x88\bx\xB1W$\x8A\xA6\xE3\x90\x17\x8E\x1D{A}F\xFD\xEB3_\x1E;\x86\xC1\xCF7l\xD8\xB0\xFE\xD37[vn\xDC(\x9Ez\xF7=u\x8Fz\xEF;\xEF\x1C\xFC\b\xAF\xC5\xE6w\xDF\xDD\xBDw\xAFzB\xFDd\xDF\xBE\xEB\xF6\xE2H\xCC\xDE\xBB\x17\b\x1C\x00\x10s\xF9\xAE8a\n\x93\xA9N\x87\x15\xD1h\xB0\xA2\x99D\xDC\xF7n\xA9fK\xD1\xF9C\x0E\x8B\x81\bf\x9D\x11\xC0i6\x19\xFB\xD0\xB4\xDD2?N\xCCqC\xC8i\xF3x\x14&\xFF\x99J\xF5\x1C u_6\xCF\x1D2>|\x83\xFAG\xF4\xE1\xC3K\xA6\xBD\xAF\xBE%\xB6\xA7\xA4\x8E\x9D\xB9_5\x86\x0F\x93\xAFq\xF4\x9E\xD2|\xA6\x93\xA6\xA9\x1D\xD2|\xF1\x14$A>L\x0E\x96\x02x\xD2\xC5\xE4t\xB3?d\x06\x91 \xBAx8\x04\xD9\xD90\x13\xCD\xF3R\xD2S\xF4\xFE\x90K\xD1Sn\xA0\x94\x96\x96t\xBB]\xCCc\xE8\xADEE9;/b\xCEUWy\"tgV\x01\xF6\xA2\xB94\x7F\x8B\xFA\xD0?\xE6W\xA9\x1F\xFF\xFE\xF7G\x8F\xE2\x10\x1C\xF6\xC2\vw\xF4\x1B\x9D;\xE6\xC7\xF0+\x9Fn\xD8\xB0a\xC3\xA7\x9F]s\xCD\xFC\x8D\xD7\x1CX\xB1\xD3\xF8\xF1G8\x05g\xBE\xF7\xDE{\xEF\xAA\xBB\xD4WBc\xAB\xD3\n\xAF\x10\xF7\xEC{X\xFDD=\xB9o\xDFC\x0Fa\x16\x9A\xF7\xB4Et\xEEN._\x92`vp\xB8\xCE\xC2\xA4;\x93\xE8h2Z\xD1B4\xC3\xDBl\xD0G\xCD/\xA6n\x05\x7F\xC8e5\x1A\xF4:\"\x9B\x05\x13@\x92\xC5l\xBA\x80\xED\x88X=\xCC\\\x95\xD1\x83\x1EE\x89Y\xA6\x9E}d\x11\xB6/\x1D\xDA\x82\xDF\xA8\xAAz\xA9z\xDD\xD7\x1F4\xCFi\x98\xF0\xBC\xFA\x9E\xD8\xAE\xDE~x\xE5\xF0\xEA\xF0\x18\xB2<\xBC\x9DZ\xEB\xC7\xEC\xDEXY\x05\b\xAB\xBBN\b'x^h2\xD3\x89\xF6t\vM\xCF\xF2\x87\xB2\x88\x05\x10\x99i\x1C\xB3h\x9C>\x93\xA8\xCF\xF0\x87L&\x1B\x90\f\x9Bb\x8B\x1C\xAA\x1E)\xC4>\"s\x82\xC7\xCD]\xFD\xBCl\xC5\xE6)w1=\xE4t\xC4\xE5\x0E=Y\xAB1\x1F\xDDX;u\xF8\xBD\xAF\xA8\xEBI\xC6\xDF~R;\xFF\xA1>7x\xC8\x03o\xFC}\xC6\x8C;n\xEF\x82\xCE\x8A\xB7n\xF9\xD7\xBA\x01%\xE5\xC36b6\xDE<\xE4\x85\xE6\x93M\x95\xD5\x15\xB5cg\xCF\xDA\xDB\xB6b\x05\x93y\x0E\x00\xE1\rn\xFBr\x0F\x98\xA9!\xAB\x16\xC3\x97\x01\x99\x8B\xC4\xDD\xDF\x1ER\xAFg\xE4>*\xF8<\x8A\xA7\x92G\xEDu\xAAIxN5\x89\xBE\xDD\xBB\xCF\xBC\x0F\b\xFB\xBBN\x88n\x1EQ\xAB\x0F\x96\x03\xE8\xD2\xB9s\x85\xC9V\x13\xE14\xB2\x98\x11\xB8\xE63\x9B\x92\xD0B\xD0\xA3\t\x1F\xAB\x05\x93{j=\xBB\xCF\x1E\xF3\xB1\xEC\x01\xE6J\xB8b\xAAD3`\x19\x1B\xEF\x7F'%y\xD4\x9C_\xBF<\xA1\xE1wyy\v\xB7\x9FR\xDF\xD9\xB6Ml\xEF\xBC\xE4\xFE\xFA\xD1\x81\x11\xD3\xA7\xFD\x8D\x1E\xECl<>o\xFE\x98\xB9\xB7\xDC\x82e\x8C\x02\xD9\x00\xE2\x18\xB1\x1D$\xC8\v&R\x04\"\x01F\xE5bOK?*\x00=L\x9D\x04\x90\xCC\b\xB7u`\x07\x86\x9E\f\x7F,\xB6\x9F\x1D*\x1C=\xD3\x0F\x10\x92\x01\xE4\x95\\\xB2\f\bz\x8D\x9A\xE621\x0E\x06\x9D\xCC/+Z\xCE\x9F9\xEFu\v\xE6J \xE2\xDD\xEA\xB5\xAFb)^\xFA*\x8E\xC3\xE1\x8F\xAA3\xDFR\x9FQ\x1F\x15\xDB\xCF.\x15n?\xBBV\xB8\xFEL?a\xD5\xD9\x9B\xD9Z\xD2\x00\xC4\x01\xDC\xCE\xA8\x0Ez\f\xB2\x80\x02\x01j\xD4\xEB\x80\x82$2\x07\xDAr\xBE;\xC7\x84{\xE4\xB6\xEC\xBEi\xC4\x13>\xFD_\xBC\x1D\x1F}9\xFC/\x92\xF6_\xF52\xB5\x8E|J\xFE\x1E~\x81\f\t\x0F\xE8TIc\xF8\x11v\xD7\f\x00\xB1?\xB7\x9Ck\x83\xC5\xB2\x80\xECF:\x1E<\xE1\xB7\x14d \x92H\xCC2%\xA0\x99\n\xBD\xCF\xEA\xB1c\xB6\xC2\x98z\xF1(\xDA\f\x14R\x16>\xF5-\xEE\xC3\x97^\n\xBFJ\x16\xD2\x19\xE1I\xE4`\xE7\xFE\xF0\x1D\x800\x17@X\xC7\xF5YM\xB0\x04@\xA2\xC4J\x04\x14t2\x12@IK%\x88\x020\xBD&R\xAA\xD7I\"\x15h\xC4\x16\x8D\x86P\"q\x1B\x1E\x16D\x8Fs.M\r'\xD2\xBFv~IS\x7F-l\xDE\xBD\xFB\xEC\x86_\xB3\xB5\xDD\xA5v\x10\xB7\xE4\x03\x19\x86\xB0;\tTF\x94\xC4H\x9C\x83 \xCA\x91\x98\x81(\x98\xB5e\xF1\x90G\xBC\xDA\x8CE=\x14\x8F\xD3\xAB\x04\x9Cw\xE1\xCD'O\xAA\x1D\xF2\xA4\xD6\x9F\xDEo\xED\x9D\xEDaD\xA1\xA4w\xB6\x07\xBD\x18 \xAB\xEE\v\x7F}\x9F\xDA!}\v\b)j\x07\xEE\xEB\x9E\x15\x9F\x10\x9F\x1A\xD1\x0E.sz{\xCC\n\x01\xF9\xC4\xCE\x99\x15*\x9E\xCA\x80\xE2\xAD\xC4}\xEA\xAA\x93'%\xDF\x7F\x0F\xB6J>\x9E\xCB\xCA&\x13\xE8.n\r\xB9\x83\t\x14\x88\x19\x19\xF7R\xB0\xC43\x8F\x96Q\xE3\xDC\xE2\xC5?\xAB\x7F\xDF\x87G\xF0\xC8~a}\xF8]\xBA\xBAs+ @\xD7\xE5\xC2\n\x8E\xD3\xB9\xA0|\x9A\xB3\xD2\xE3\x14V\xB4j\xD9\xB4E\"%C\xA4:-\xAB\x1C\xFDl\x8F\xAC2'\xCC\x90V\xF5\xE8\x17\"\xC5\xA1Lc\xCE\xE8\xFAJ\xA8\x17\x1A\xC1\r\x85\xB068\x11\xA0 \x9D\xF0\xB0O:Q\x90\x90$\xC4,OjJR\xA2\xD3\xCA\\y0c4\n\xEE\x93\xFC!p\xEA\x89No!\xA9)\xC4\xEC\x94,\x00Y\x1Ef\x989\xD9\x84\x13\x9Dh\xB5`w\xF8\xC7\xC6'\xDD#\x9E\xD9\xC39\xE5\xE1L\x9B'\x10\x9FKQ\x1C\x81\xF2j\x17\x7F+O\xC9\xCB\xD5\" Tz\xF6\x89mS\xA7\x92\xCBJ\xDE~\xE8\xD9\xD7\x0F\x1F\x9B2e\x81%\xC92zt]\x91\xAFb\xE8\xA0\xD1\xFF}j\xC3M{']|-^y\xED\xEFg\xEEmh\x98pHu\xFCZX\xE2\xCE\xCDy\t\x93\t1z\x9F:\xC0\xD6\xBD\xB3\xEB+!M\xF2\x81\x01\xD2\xA01\xD8\xDFE\xAC\xA8\xA7\x88Ff\x07\x88|\x91\x98\x92L -\x15\xC1b\x17\x01 -\xD9\x88 \b)lm\xA9)\xA8\xFD\xDA\xBD\xBC\x90\xCFg\xB71\xCB=\x8A\xE7`\xAC\x92\x18\x89\nd\xC9U\x91\xC8\xB5\x96.\x94\x95\x00\xCE\xB8q8\xA6\xF4\xAB\x9E\xBEaw\xBF\x9A\xA9W\xFDz\xFE\x82\xEB\xB7\xFC\xE7\xD2\xD9mm\xE4h\xF8\x83\x14<\xF8\xD4\xBC\xF9\xFD\xE6U\xD4\xDFy\xE7\x0F\xEA\xE7\xBBv%\x9B\xA4j\xB6\xC3\x8D]_\xD1\xFB\x85Fpiq\x01g:\xB1\xE6\x1B\xFC!\x03\x12f\xDD\x98M D\xF7G\xD1\xE2\x02\xAE\v\x89\vh\xA4\xE73t\xE6z\xDD\x91\xA0\x13\xBD\xFF\xA9=\x9F\xDDx\xE3-7\x9F\xDD\xF0\xD8\xC3\xB3\xD5_M\x9D\xF2\xC0\x9A\x07=\x03\xEE\xDF\x1DF\xC3\xDD;\xB2\x1F.Sg\x86\x16-\x1E\x0E\x84\xCF\xAA\x83\xD32\x1D\xC6\x07\xFB\xBB\xD0J\xF4\x14\x939-%L\xA3\x90\x9A\x82\xE9i\x8C\x179%\xD3S8\xED\xC4TF\xCA\xB4T\xD4~\x17\xE3iY\xE8\xF0\xC5\x88\xD8=#I\x8E\x9F*3\xA9\xA9\xFD\xE6a\xEA\x97\x11*N\xB9\x9AQ\xF1\xFA\x7FO\x9F\xD9\xD6\x86\x1B\x88/Y\x9D\xF8\xDB\xF9\xF3\xAB\xE7U\xD4\xB7\xDE\xF9\x03\xA6\xED\xDA\x95\x84\xA7~z?2_Uh\x04\x1Dd\xC2\x98\xA0\x1F #\xDF\xE4\x0F9\xD0\xC4d\"\x02\x014\xE8I2\xA1\x90\x92\x8C:~\x86\x92\xF5):\xA0f\x9B\xDE\xA0\xE7\xD1\xF9B\xDB1_\xA1\xE6\x07G\xE2}\xD1\x1C\x05O\xE9\xA0S\xCB\xF3TTW\x05\xDC\xAEDY\xF6$2\x87\x98\x96S\xA5\xE2\xF15#\xEA\x14\xF2\xFAk\xBF\xEE\xBA\xFB\xEE-\xD7\xFD\x05\xE9\xE2\xF1\x14\xC3>S\xEA\x14\x94\xEF\"\xAD\xB3\x03;G\r\x7FH\xF5\xED\x1At\xFF\xFDh\b\xDF}\xF7\xEFn\xEC\x18|u\xCD\x1Bl\xF73\x01\xC8UR\x1D8aV\xB0\x0E\xC0\x94/\xFBC6\x83^\x14\xCC2\x05p\xD8cp\x02' $(\x02Ef&8\x1D\x8A-\xE2\xEE\x19\xF4hO\x88\xC1\t\x848[\xA1\x97\x11\xC8L?oe\xA0\xD2\x16KS9\x9D\x01\xA7Wy\xE2\xB6\xDB\xB0b\xE8\xC4\xFA\x8A\xD1\xE9\xE9/\xBDD\x1Fi\xDD\x8C\xD7\xA5\xEC\xF6\x96\xF9\xD7\xEEh\xEDl\xD4,\xF0\xCB\xE8\xA7B#\x18 \x17\xA6\x04\xFB\x03d\xE7g\xFAC\x11\x96\xC8M\xE5<!3\xDAb\x96'\x930\n[D\x11<\xC4\xEEIM\xC1,\x0F\xE6r\xDE\xD0\x12\xC9\xA5\xF1\xFEpi<\xA1\xCF\xCB\x14\x01\xC5&\x13-\x13\xE2Vh\xCA\xB6\x1A\xF5\xF3~\xFD\xA6m\xD8]]3\xF5\xAA_-Xx\xFD\xF5\xDFO\x9F\xD5\x96:Z\xBD\xF8\xF03\x1F\xDE\x89c\xF1\x10\xFE\x94\xAC\xAE;8o\x1E;lw\xDC\xFE5\x1A\xEE\xB83\xA9\xF3\x1F]\xB0V}|\xE0\xA3\r8\x8B\xD1}'\x00\xFDR\xF2\x81\x1D.\n\xF6\x03\xB0e\xC8\xFE\x90\x8C\x98`\xD2S\x9E\xDD \x88v\xA3\x81\xEB!\x00\x93Q@\xBD=\x81\xBB\xD8\xE4\\\x0F\xBF\xB0GB\\\t(L2\xB8\x15\xC5\x1B\x11\x14\xCA\xCE\xB6\xD1#\xE7\xB7\xA0\xE3xj\xDA\xD8\x87\xEE\x93|\xE1\x91s+\xC6\xA8Ow\xFE@\xFEx]I\xE97a.\xB5\xAF\x01\xC0\x11\x11\xD4fM\xB0 \x92\x89\xC1X\x12\x86M\xE9g\xF30=\x1DpZ\x19p^\xD3\xD6\xD6&\xD4\x9C}Q\xA4mm@\xBA\xE6\xAA\xD3p\f\xF74\x14\r\x11@\xF3\xB5X\x06\x82`61\xC3D\xB1\x88hE\x8E}\x04\xBD\x8E\xDD\xCEj\xD1\xC9\x02\xE5q\r\xC5f\xD0\xD3\x9E\x1E\x7F,\x8F\x1B*\x8C\x057h\x8F\xE0\x86\xBD2\xE0\xBCo\xC2\x88Y\xAE\x84\xE3\xEA\xB1)\xEF\x1CW\xD7\xEF\xCA\xAF\x1F\xBC\x95\xCDJ\x9D&\xEDok\x8B\xEC\xC57\\\xD6\f\t\x96\xE8%J\x05`\x9A\xCE\xA0E\x85D\x01/ \xD0\x11\r\thq\x0E/*;\xDB\xF0\xF2#\xEA>|\xF1[u\x96\xE4\xEB\x14\x885\xDC\x15~\x89\x14\x87\xDF\x05\xD4h\xCD\xB1Z\xD9\xC1\xA48\x94\x1F%\xC29!\xA1B\xED\xB2\xD7\xB4I\xBE\x9F\xDE\xD7f+\xA5q\xED:38\x02 =]NL\xB7\xFACV\x94135I1R\t\x81\xBAS\x92\xED\t\xA0\xED\x99]a\x1E]r\x92Q )\xEE\xCC\x18\x13%(\x98\x9A\xD2#6\xC8\f\x9D\x1E1\x80\x80\x12pF\xB4\x8C+\xCAS\x94\xE9R\xC6Z\x1Ac5\xF5\x1B\xBAhsC\xA9wJ\xF5\xD0\xC5\xE8m\xC3\xDB6m=~\xFB\xA6\xADB\xCD\x1F7\x97T\\\\6\xE3\xBA\xA2\n\xF5X\xE7?\xC8\xE9\xE7?\x0E\xE7k?\xA3\xDC/4\x82\x1D\xC6\x04+c\xDC\x1Fe~\xCE\xF8\x11v\xFB\x05\xD6\xE73\x8Ec}\xE7\xCF\xB3\xBEP\xF3\xC7>8\xBF\x91\xE9m\xA1\x11\xAC\xE0\xD2b%\x8En\xD4\x0E\x9BC\xA2^H\xF8\xDFP;n\xC5\xE6q+6\xD2\xFF\xD3\xCD\x9B7o\xFEk[\xCB\xAE\xCD\x9B?U\xBFG3Z\x85\xC6{v\xA8?\xA9\xFF\xD9\xB1c\xFDn\xCC@\xF9\x9E{Z\xD5\xE9\xEA\xA5\xF8+|\x80\xDB\x10\xEA*>\x97\x04H\xD7\x10(i\x19\xBAD\x0E\x9C!:D\x87]\xA0\x84\t\xBA\x04\xC2\xABJ\x98\xA1\xCAf\x98\xC4\xA7\x07L`'\b\x14\x041f\xDF\xF9z\x03\x1F|\x0E\x9F\x83yq\xF1\xD3\xF7v\xEFs\xC4\x9AP\xBA\xED\f\x9C\xD1\xD6\x16U\x84\xCC\x9C\x88\xDA\x18\xEA*\xF1\x95?\xC6\x99\x13\xDDF\x06\xA7\xA9\xBA\x8Av\b\x8D\xA0@\x1ALcg=5C\xE7\xE4\xEB@\x1DA>KB\xD9\xEC\xD9*,\x00\xAE\xE8\n\xB4\x05\b?\xB3\x80\xDE\xB3\x0F(^\xA5\x87\xC4\xB6w\x8Brj\xEF\x9E<\xD3\xE2Q\xD5.\xD4\x9C\xA9&\x8D\xDDj<\x9C\x1F\xD5\xED\x1Aw\x92]\x9C\x1FF\x06K\x01L\x1AwZ\f\xDC\x8D\xD4\xA3\x95\x87\"5\xE1\x14\x13\x06\xE7\xF2\xA5\xED\xD8\xB9\x9C\x19\xD1|\xCA\xCE6_\xD9\xC8\xD9\xF6\x9C\n\xF7\x92uB\xCD\x1F\xE7\x07\xEA\xC5\xDF)'\xC3\x15\xC0\xF34_\xD1[\x84FH\xD7\xA2\x1AJ\xBE\x89\xE6\xA7\xF9Ci\xC4\x84\xC8\xCC\xDFn{\xCC^`\x10\v\x92\xFC!\x83\xC1\x02$\xC9b\xB5\\`T#1P^Y\x91\xC7McmBN\x87\xCB%h\xC8\x87\x95/\xFF\xEA\xF3\x07\x0E\x85\xF1\xFE\xAB\x1F\xD9\xB1\xE3\x8Dm\xBB1g\xE5\xCAW\x1E\xC8}j\xE6\x9E+*\x06L\xFA\x04K\xDD\xFB\xCAn\x98]\x12\x98\xF1\xF5\x8E)S\x00!\xBD\xEB+R*&\x82\x13\x96\x06\xC7\x02\xD8\xF3\x89?D\b:\xAD\x02\x15\t\x05\x83\x9E\x98e\r\xAEc1K\xA2L9^\xC4d\xD4\xC9\xDC\x8E\xB0Z\x8C\x06\x81\n\x1A\x88\x07\x9D\x80z\x9D(PY\xEAaG\xC4\xA0:\xB6\xC2\xF8\xF0\x83(y\xD9A\xAF\fTVs;BS\xDD$aP\xA5z\xBA\xA5\xA5\xED\x9Dw\x12\x13G\xE4\xA6Kv\x1CN6\xB4\xB6\xD9;Z\xC3\xFB\xAF),4\x02\xC2vf[\n5`\x87q\xC1*\x00K\x86\xE8\x0F\x89\xC4f\x90Q\xD0\x01\xB5sCG\xAF\xE3\x13\xE4Q$\x9A`\xD0\v(3\xF1cO@\xEE\xE0\xC6Y9\xBE\xB8\xA43\x0F\x80(J 2\x19\xA6\x06\xED\xA3G\xCCoQ\xFF\xD9\xC6\xE5O\xDBks+\xC6\xE0\x18j\nW\\[Zz\x8A\x1C;\xFB\" \xD8\x01\xE8\x0F<\xE3\xDE+\xFA\x81\xBF\x10\xFD\xC0Vu\xE3\xCBX\x8C5O\xA8s\x85\x9A\xCE'\xE98~=#\x80\xF8\xACPs\xDE\xE8\x07^`\xF4\xC3ng\xFF\xA3\x97\"*\xEA\x99\x17Bg\xDA\xFE\xF4\xC5#\xEA\x9B\xC7\xFF\xAAv\n5\x9Do\xD0\xF2\xCE\xD7h\xE5\xD9\x17\xE9\xE8\xCEg\xB4\xB8\x07\xFD\x8C#Q\xFB\x8C{\xE0\x05\xC6=\xEC\x91\xB8\x07\xCER\x1F\xFD\x02m?<\xAD\x1E\xC6\xF9\x9F\xAB\x1F\xABgH\r\x01u!\xEE\b\x7F\x12\xFE\x12\x0F\xABc\x19\xE5\xD4U\x9Cr2T\x053\x91\"aB\x91H\x04d)F\xC1>\xEB54!\x18#\xA4\x97Q\xB2\x1D\xF3\xB0\xEE\xF1\xF0\x8B\xAF\v5\x9DG\xE9\xD03\xDC;\xAA\x07\xA0Os\xFC\xC8\xE0H\x94C&\x82NF\x99pu\xA4\x0590\x16\xE4@ID-\xCA!\xF4\x82?\xC5\x82\x1C\xF5dI\xF8\xB7th\xF8N\xB2\xA6\x95&\xB6\xB6v\xFE\xA3\x15\x10\x92\xD5\x0E\xD2O\xF2A9L\rV\x97\x97\xE5\xE6d'[\xCC&\x1Em-\xB5\xA6\xBA\xCD\x85\tf\x1D\xB5\xBA\xFC\xA1\xC2T\x97\xAE\xAC0;5\xD9e\xD1\xA1\xDE\x0447\xC7l\xA2\xE5\x9A\v\x7FN-@\x8Fj\b{\xF4\xDCWTWU;#\xB8&\x1E\xC8\xD4\xA0\x11\x1C\xDD\x14pj\xA8(\x8E@\xF4&\x0F\xBE\xD7f\xB7o\x9DqO\xE5\xF0\xA2b\xB3b\xBC\xF3N\xA3b.)\xAA\xAB\xDC3k\x83\xDDn\xBBw0\xF9\xE3\xC3\xC1\xD1MM\xE3\xF66\x0E\xA4\xAD\xDE\xEC*G\xFD\xBC\xDA\x86\xDF_{\xED\xD1\t\xB5\xF3\xEA\x9D\x95\xD9\xDEV:\xACi\xF7\x98\xA6\xA6\xD1\xB5\x0F1z\x1ES;\xF0\xE2>-\x1F\xB9/\xCB\xC7\xAE\x04\x94c\xADj\x87<\xE9\xBF\x07\x99lT;\xC8\x9D\x92\x0F*\x18\x95*\x02\xF9y\xB91*\x95Y\xD3\xB3\xCCEQ*\x15\xA5\xBBt\x81\xA2\xDCt\x8DJ`\xA2\x15\x80\xF9yf\x13\xFDe*\xA1&\x0F\xB5\x84|e$>\xCDI\xD2M\x18\x9E\x9EOtE\xC9\x16\b\x90;k\xEE\xB1:\xEC7M\xDFQQW\\lJ0\xDE9\xCC\xE37&\x98J\x8Ak+\xF6\xCC\xDChwX\xEF\xA9!\xFD\x1E\x1E=\xB4iRC\x94T)u\xF3j\x1A\xFFp\xED\xC0\x81SVL\xAE\x99W\x97V\x11!\xD6\xF8IMC\xC7<\b\b\vp\x97PK\x05H\x862\x9E\xC1\x91E\xA3\x9C\xE0\x0F\x89\xE6\x04\xD0\xB0\xB1\x04,\x16s4\x12c\vu\x03\x06\xCB\xFCv/\xD77\x99\x84\xC9\xA1\x00W\x8F\xA5$\xD7\x9B\xD5\xD9J\xED\x03\x9Ek\x9E\xB3lX\xBA\x7F\x85\xC0~y\xB6y\xCE\xB2\xDA\xF4\xD2\x95xdQ\xF5\x81\xE1\xE3J\x1C\x87#\xFF\x82\xA0\xA12\xA4\xEF8*\xC3\x02\t\xB0:8MCf$X-F35q\x80\x06\xE1\xB6\xB9\xD9D\xA3(\r\xCA\xD3\x04z\x91(Vj H\xADf\xAA3\x1B\x89@\x89Y\x91%\xA0f\xA3\x06\xD2T,f3\x1A#\xB6\xA8\xC9\xD8\x1D\xD8)\xB4\x15\xFA|\xBE\xF3\x00:\xB02\xE0\fT\x06\x9C\xBD\x80\x1D\xEA\x8F\x07O\x1E\x8CGw`\xEB\xC1\x83\x07\x0FBt\x15\xF2\xAD|\x15)P\b\xCB\x82\xC3\x00\xBCE\xF6\xD4\"\xA3?d\x07\xB6\"#\x9E\x17m\x02\x90\xE7\xB6f\xBA]\xFE\x90\xCB\xDA\xB7\x00\x8B\xB7\n\x07\xC5j\x93\xE2\xED\xE888\xCA/\x14\xD8\xF4ZU\xC2\xF4a\xB5\xB5\xB53&\xD5L\x18V;}`AAAa\xBF\xAA\xBC\xF2\xC2\x82\xF8\x85\x92O\x87\r\x9B>\xA3vX\xD5\xF0\x05\xD3\x87\xD56\xE5\x17\f\x1CPP\xE8\xF1\r\x1BP\xC0\xF3W+\xD5\t\x11\xDCG1,\r\x8E\x04((\xCA>\x1F\xF8\x03\x8B\xF3r\xD3RS$s6?\x94\xBEB7\xC7\x82DG\xDD=@!\xF1\xA0f\xE6\x80\xF5\xB04~\t\x1F\x82\x818\xB4e\xC4\"\xF99\xCCH\xF8\x99Y\x83FU\x8C\x188pr\xED\xB8\xF2\xAA\x05\xCF\xF7\x8D!\xE9\x82%$\xA7lT]\xA9\xDF\xD9`\xAD\x9FF\xD9\xFA9nC\xDE\x02F\xB0\xC2\xF4`}\x9F\xC8\r\x8B\x19\xAD&\xD4\xF0\x1B\x02\xDFu\xAB\xC5l\x12x\xB1\xE1/\xE18\xCE\x03\xE4`\x8A,\x0E\xCC\x11\x1E\xF0\xDD\x17\xEA\xD1\x18\xA4C\xAA\xC3\xA1\xEA\xD1H\xF6\xCD#\x97\x80\x1E<078\n S\xB2\xD8\xA5\x14\x7FH\xCB\x10{\x12\x9D\x06\xC1\x9Cb\xC1\x1E\xA9b6*\x13\xE9\x02\xD3\xC5l\xA7|=\x9C\xBAH\xEA\xD8\xAE\x99\xA4\xAEn\x11\x91\xC7\x9D\xA6hJ\xB9IN.Y2\xB2fP\xFF\x8C\xA1\xC6\x169\xB9\xF8\xF2QC\x06U\xBB\x87\x1A\xE3S\xCDR\xDD\xF4\xF2Krs\xBCWL/\xBF$/'\xEB\nv\xDE.\xEB:!\xFEI\xFA\x8E\xE7\x9E\xBD\x90\x07K\xD9\xBA\xE2\xF3\xCF\x00y\xD9^\xB7\x99z\x18Qss\xB2<4>%-\xE4\x9A\xDC\x009\xD9f\xCC\xF5f\x99\xD1\xCD\xD6\x95\x97\x8B\x1Ew|\xE4\xB7\x1B\x1B\xAD)\x8B\xFF%u\x9D\x13\x91 4\xEDgR\xD8*e\xF2\xE4\x97\xF3\xD8?hR\x86j96\xE9;H\x86t\xF0\xC0\x8A\xE0\xE4>\xF2l\x00\x9E\x8C\xF4\x143\xE5aJwfZj\\\xEA-3\xC3\x8C\xEE\xF443\xA6t'\xE1\x04\rw\x96\x9A\x82Z*\xEE\xDC\xF0\xDA\x85%\xE4\xA22\xB3\xAF\xC4\x1C\x96p\xC1y\x9E\xEC\x9C\xE0\xE6\xEB\xEB\xEA\xD2\xA2\xFAR\x1D\xE4B\x1D\xEF\x84\xB0\rk\xA1\xAF\xF1Z\xB8\xA7\xCF\xF1\x0E\xF8\xA6{\\<\x14\x1B\xDF\x0E'\xE2\xC6O\xC5\xC6?\x827\xE2\xAE\xF3Jl\xFC\x93\xC8u\x1A\xD5\t<n\x9D\v#\xF8\xF8I\x14\xB4\xF1\xAE\xAF\xA8\xCA\xEF;*2\xCF\x81}\x8E\xD7\xC2\xAD}\x8Ew\xC0\xB7\xDD\xE3|\x9E\xA3\"\xF3\xFC\x8E\x8F\x8F\x07 \xD9\xFC\xF3\x1Fv\x01H\xB0\xED\v\xE8\xEA\xEAb\xC6\xCD\xD5\xB1Q\x19j\xBB\xFA\xB1Owm\x01 C\xE3>\xDD\xB1\x1D\x80v\xB5\xF3\n\xE9C<\xD6f\x84\x8B\x82\x03\x01\x8C:Y0SQ\xF3%%\x91R\r\xFA\x80\x1C\x8EdF\x83,\x99Q\xE0\xF1!\xAAI\xA2H\"\xB8/`W \xB6\xE1\xD7\xB4\xA9\x9B\x0F\x9E<\xA8\x05\xE1\xA2;\xC9\xA3/\x9C\xD2\r\x11J\x7F\x12]\xB1\x90\xC6\xE7:1B\xB9\x01}\x8E\xD7\xC2\xF6>\xC7;\xE0\x8B\xEEqN\xB9\x89\x11\xCA\xC5\x8F\x9F\x8A\x8D\x7F\x14\x19\xE7\xFE\x18\xBF\xCE\x94\xC8}+\xFA\x1C\xAF\x85\xD6>\xC7;\xE0d\xF78\xBF\xEF\x94\xC8}O\xF2N\x1Aw\xAB\x1D\xF4\x93HF\xB6\x10\x99\x0Eg\x1A\\\xC7\xFCS\xA3\x16\xDA\xB4\x18\rL\xAF#\xE8t\x84j5O\xD1\xF2\x05\xEE&\xA0]\xAC\x14i\x80\xE68s\xEC\xF8a\x92z\x00\xA7&\xB5%\xE3%\xEA\xFEd\xB5CX\x9A\xDC\x9AD2\xC2\x7FIjM>{;\x10XNw\x93\x17#\xD8\x9B\xFE\xC1t\x80$Ig\x93\xC0\x1F\x02@\x9D\x86\xBE\x91\x04\x87\xD4;\xA2d\xB7\x85\xEC\xBD\x82J?[\xAA\xBBs\xCD\x94\xA6\xA6)\xEB\x175,l\x9A\xB2fd \x10(\x1F1\xD4_\x13\b\x88\xA7\x9A\x1A\xD7\xAEkl\x1Aq\xD9\xF5-\x8DM-\x81\xF2\x91#\x03\x81\x82\x8A\t#\xCB\x03\x8C\xED\x0ErDv;$\x81\x07.\tV{\x92\xB5zl+\xF7\t\xB9\xBD\x93\xAEg\x0E1\x13V\xC9l\xC4(\x1A\xB5*l\xAB\x85&\xB9\x12\x14\x93Q<\x07\x81\xDD\xBB,\x929\xC3\xB9\x9A\xF4\xAD\xAE\f8\x13y\xD1uy\xB5S\xF2:\xA9\xA4a\x90]\xE4\xEA#+w\xDE\x7F\xC5\x1F\x9A\xB7\xEC\xF8\xED\xA2\xAD\xADw\xDD\xD0<0\xE3\xDEK+\x9A\x0F&\xB5\xECED\xCB\x8E\x85\xE9\xCF>+\xE5\xEF\x1Fd\xE8\xFC]\xED]\x03\x0E\n\xAB\xF5\xD6\xF1\xEA;o_>8\x87\xED\xEA\x1A\x00^\xA9\x95\x01\x9B\x83\xB3x\x9C\xC4\x1F2\x01\xDA\xAD:\n\x12\x85$vV(;>\x00\xAEDQ\x90\xA9\x94\x9E\x86f\xCDmct\xA5\x19\xDC\x80N\xB3S\x8Ewq\xD8\x05-\xD1\x91\x91\xCE\x84m\xA2\x13y\x01\xA5\xA6P\xA5\x98B-\x8CE#|\xBD\xCA\xD0\xAA+\xBD\x95\x81\b\xF0\x9A\x07U\x94\x80\xD3\xCB\x9D\b\x8Fs\xCD\xDB\xF8\xE4\x93s\xE7\x1E\x9B\xB7\xEE\x9AEG::\xFC\xB9M\xA4\xF9`\xEDO\x9F\xB7~\xF8\xFE\xB2+3\x0E\x94\xFDU=\xD5\xBA\xF1\xF0%\xF5\xA3\x0E\xF2H\xBC\xFA[\xFA=\xAFA\x1B\b\v\x98\xAD\x9A\x9A\x9FH\xF3K\xFC\xA1D\xC0j\x7F~r\x92\rAg.\xE1\x9C\xD4\xDFl)7\xE7fZ\x12dK\xA1?\x94`\xA9\xF6\xE7'\xD8,R\x12\xD0\xC2\xDC\xA4\xE4\xA4XD(\xE4\xEB\xE5\xF3p\x93-\x8E\xDD\xEC\x95\xDD\x95-y\xD9\xCC\xDB\x89[K\xC4S\x8C\xF9\x8A\x927\v#\x1Fe\xEF\\s\xE6\xA1\r\x13\x1B\x06\x97_\xFD\x1B\xF5\xD3;\xB6m\xBE\xE6\xFD\xDB\x8F\xBFy\xF3\xE6\t\x13\x9E\xD8\xFA\xD6E\x13\xEEz\xF8\xFA-\x7F\xDA\x89-\xF5~\xFF\xBA\x93\xF5\x7FU;\x0F/,/\x9F8\xA60;0v\xDD{\xB7\xEFl\xBE\xFD\xC19sJ\xF7\f\f\x04\x1A\x96\x8C\xAC\xBE\xF8\xA2\t\xAB\xB7=:\xF7\xC0\xEEi\xD3\xC8\xDEy\x97\x8E.-\xAD\x986\xA3\xE9\x86\xD9\x80\xD0@|d\x1D\x8F\xCAe\x05\xAD\x00\xA0\xF3\x87t\x16\x00\x81m;[\xDA\xEB\x99\x19\xBE\xC8\xBF\xE7\x1E\x1E\x9C\xBF\xA2\xA1a\xE2\xC4\xAB\x9A\xC7\xCE\x9E\xD8 4N\x9C\xB8byC\xC3\xB0\xC6\r+\x1A\x1Ax\xC5\xA9\xDAA\xAF\x17\xDB\xC1\n\x17\x07\xFB#\x9A\t\x01\xB4\x9A\x8C \x98#\x91\xAB(\xB2\x12,\xEC\\\x98Mvd'\xC3N8<\xCAh\xE8\x99\x96\xEE./\x8B\x94\x87`\xB4\x01A\xC0\xA3x\x15\xAF\x82g\x9F\x9E\x7F\xFD\xCC\x99\x9F\xE3\xCD-\xADj\x87`R\x1A\x97\xBEr\xA8~\xCCO6i\xD5O\x1CCrM\xD7W\xC26\xA9\x0E\n\xA098\x04 ;_\x8C\x14\xFA\xE4;\x1D(\x98E(\xD0\x80\xB6Y\x05r\xB2\xC5f\xB4d\xF8C\x196\x99\x9A\x1C\x00\x05\xF9\x91\x14\x82\xD3\x11o\n\xDA\n\xE3\v\vl\xA1\xC2\x1Ea~\x9ETd\xF6\x82\xE6\xF9\xDA<1\x9B\\\x9B7O\xA0KN\xE5\x9AK\xA7\xFD\x13\xD7o\x9E\xBF\xF4\xD9\xC7\xD4\xAD\xFBn|~\xC5\xD1\x15\x1F^\xB3|v\xDB\xAA\xD2\x12acWs\xB3\xFA\xDD\xE6[\x96U\xD4M\xBCq\xE3\x1F\xD4c\xD5\x8F\x8D\xBFw\xEE\x94\x87g/\x9F\xD1\xBA\xA9iwY\xD9\xBA\xB3%\xCC:\xB4\x02\x88\x1FrZg\x82\x0F\xCAamp\x12@\x92CgsD\xAC\xC3\xF2\xB2\xE2\xA2\xC2\x82\\\xD9\xE3\xA6Y\x1E\xF4\xE5\xE7\xB9\xB5,X\xA9\x94\x9D\xA6\b\x0E\xC5\xE4\x0F\x95\x15\x17\xE4\xE7\xE5f\xC9\xE6l\xA1\x90\x19\x8B\xBE\xC2\x04t\x97\x17\xD95c\xD1\xE3\xEE\x0E\x1Bw\xBB)\x91\xBA\xFE\xF3\x18\x8A\xD9\xDCPt\xC7\xFC\x13n(\xA2\x12(w:d\xBB\x97z\x15\xCA\xC8\xE1\xF5\x92\x7Fc\xD9\xC7\x1F}\xFC\x91z\\\xFD\xE1\x15\xF5\xCCG\x1Fc\x99z\xF6\xF9\xE7\x9E}\x16\xF1_\xBF\xF9\xCB\xF3\xCF\xABr\xE7\xF7\xB7|wW\xC7\\]\xF6{\xBF\x19)\xB6\x7F\xD4\xA1\xBE\xA1\xBE\xFAa\xC7\xA1/\xB0\x01\xCB;>Z\xF8\xFCs\xEA\x19U=r\xE4\xEEc\x98\x83\xD2\xB3\xCF\x9F\xFD\x9E\xBA_\xBAy\xBAz\v^\xA4\xFE\x16\x7Fs\xDFffK\xC6\xD3h\x00\xCC\t\xF6\x07\xE8\xE7\xC8\xF2;\v\xE3\xE9T\x98\x858\xA0\xA4\xB80\xCB-Eqn\x15\x85\xB9Q\x12\r()\xCEu3\xFD\xD2\xBB\xAA\xE4<\xDD!~\x89\x16\xF6\xF8\xE2\xB0n\xA1\xC0c\xAE\xBF@\x13\xFDM\x8B~\xBBb\xC5\xB2e\x7F\x98\xB5*i\xF3\xDC\r\xE3\xC6M\x98p\xC3\xC2\xA5\x17@\x9BNs\xE9\xAAU\xCF\x1E]\xB1\"I\xBC\xAAr\xEA%\xB7\xDF1y\xF2@ p\x92|!}\xC1\xF1r\x0E\xD8\x14\x9C\x85v\x9B\x16HJP\x8C\x14\x81Y\xD9\x92HP\xD2\xC4\xB9\xC3j\xD1\xC9 \x82\xD9d\xD0\v\x14D\vS`\x06\xD1j\xA7\xA2@t\x12\xE5\x80(\x9B\xD5\x8Cf\xBD.\x01\xED\xCC\xCC\x8A\xBA\x84\x0E{\x8F\xE2\xD1c\xC7|\xBEn\xC3;\x1AAD\xC5[\xE9qz\x15\x8F\x12\xB0\xDB\x03\x8AW\xA1^\xAA\xE0\xFB\xA7\xC9\xCE\xD3\xB8\xE2\xEF\xBB\xEE~\xFF\xE0\xDE\xAB\xF6\x92/\xC8\xC2\x96\x96\xF0\x0E\xF2\x85:\x19\x1F\r\xA7\x91d5\x07\x0F\xA9\x1C\xF1\xBCX\xA4$\x18E\xD8\xF4\xDD\xB7\xC1\x1E\xC0\xC5\xDC}\xA4\x11\xAF\xB1\xBFH\xC9\x95\x11\xFBqp\xB0\bxo\x1A\xB3V\xAD\xAB5\xAB\x89\x00\x8F$J\xCC\xD8\x17\x82\xBD\xBBx^3\x14\xFB3'@\xB3\x10\xB5j\x1C\xF9\xB8\xD8\x0E\x04\x12`I\xB0\x89H\x8C\xDFd\xC9\x8A\x82\xD1`E\x9D\xD9dEJ\xB5\xF2p\xC5\x86\tV\v\xA5\xDC%\x16\x05\xB0$(\x8C\xCC\xCC\xAB\xB1Y\tz\xB4\x88\xBF\xC5\xCC\xBCk\x83\x1EMF\x9DL\xD9\x1BT\x8CI\xA6\xF8@\x0Fz\x14\xC4n/\xDA\xA3x\x90L\xC6\x87:\xD3\xE8c\xF4O\xE1\x12rE\xF8\x0E\x12\xEE,\v\x9FU\xCF\x90\xFE\xE4\x8E\xB3\x951\x97\x1A\xEFWg\xB3\xB3\x13E>'C\x16\xF8\xE0\xEA\xE0H\x80\x9Ct}Zz\xA2?\x94H\xF4\x80\xE8\xCD\xB2\x18\x05^\x81\x8E\xE8KIB-\x9Fb6iXG\v@A\x8A\xE8NI\xF0\x87|\xDE\xAC\x94\xE4\xA4\x04\x8B\xD9d\x8C\xF6\xA8\x885\x81\x88YmZ\xB7\x95s\xB2,.\x1E-\xD4\x8Ar\xAB\xB5X\x87VO)\xDB5?\xB4B\xF3\xB5\x99)\xB4\xE0\xF1\x89\x85\x83\x8F\x1D\xC5!\xFF~v\xD1cO\x8E/\x18x\xEC\xA8z\xEC\xEBg\xE7}\xB8\xF97\x9Fm\xD88\xF1\xE2\xEB\x0F\x7F\xB6acS\xCE'\xF3\x16\xDC\xD7\x863\xDF{w\xCB\x96\xCF\xE7\xCD\xBF\xF7E\xF5\x81w\xDF\xDD\xB4\tm+\xF6\xEEE\xEF\xDF\xEE\xBFr\xF5\xDE\xBD\xEA'\xFF|\x88\xD7\x06\x02\b\xB5\xC2\x1E\x1E\xF3\x98\x18\x1C\xCAT\x98\x8C\xA6Hs\b\x8E\xEC\xE4\xD1\x8Eh\x8B\b\x01z\xF6\x87\xB0Z\xF4:\xADd\xD0l\xA2\xA4\xBB\xF2?\x1E\xB0\x16\xED\x10\x81\x95\x1E\xA7\xD6%\xE2.\xDC\xABN\v\xB7\xD3\x13\x98\x8F\xCB[q\xB9\xBA\xBDU\xDD\xAEvh8\xB2d\x00\xA1Rl\x07\x17\\\x1D\x9Cf2\x12\xBDL\x01x\xD7#*\xF3\x9EG4\xD2\xF3H'\xD3D'A\xEAb;d\xE1\xB0c\x8B\xC9H\xAC@\x9D\x0E\xC5f1Kf\xABA/K\x94Hfn\xD9\xD9\x13\xAC\x82\xC0g\xADc3\x16b)\xF9\b\x9C1\xC6Y\x1C\x1C\xCB\xFE\xC3\x00\xFF\xCF\xE3\xE4\xFF)\xD8\xA6v\xF0\xEE\x05\xF9\xEA\xC5_\xE00\x82\xB5\xBFQ'G\x06:p\xEA\xBA\xD6\x16\xF2E\xF8\x1DR\x12Nki]\xA7\x1E\x00\x84\xED<\xB7Y\x03v\x98\x14\x1C\x04 \xF1\xF4;Q\xCC:\"\x80\x91\x9A\x8ChO@\x02\xCC@@\rS\xAB\xD7\t\xD4\x90\xA0\x10\x8C$\xB1\x8D\x06\xB4\xF7\xAA&\xF1\xF5\xF2\xE2\xB5\xEC\x91\xB7\x92'c\xBD\xDB#\xE9\xA3\xB6\xFB\xF7\f\x1D\xDA&\xD4t\xA7\x8F^;Y\xA4^\x06\x04\x1Ai\x15i\x17\xBF\x017\xE4\xC3\xAA\xE0\x04\x80<\x1B19\xB4RKo\x96\xC7\x9D\x96\xEA\xB0kp;\x8B9#\x91P\x93V%,K\xFE\x90\x1B\x88]O\xD3R\x89\xD9\xEE\xB5Zt\x82Y\xD2k\xA8;\x99\xDA\xB9\x04\xB5\xC7\x01\xBAm\x851\xC4\x9D\xAD\xB0\x87\x01\x19\xAD\x1E\x8E\x83\xDB9\x15Gu\xA0\xBC:\x82\xB7\xCB\xAB\xF4f9\x1D\x81r\xFCr\xDE\xBC\xC9\xD5\xD5\xD8\xE8_3\xEB\xCA\x8DK\xBF\xAF\x96\xA8$JR\xA0xv\x9A%\xF7\x8F\xB3\xEA\xE8\x9D\xD3*\xAB&|1\xE2\x8A\x81K\xCB\xDET?\x98N\x11'\xD9\xA75\xEC\\7\x1D\b\xD4\xD3*\xF2 \xF7\xAD\\\x9Ao\xE5\x88h\xC4\x98o\x95h\x15\x12\xAC\xFF\xB3o\xC5&VY\x81W\xDD\xD40aB\xC3\xB6\x96q\xB3\x1A\x1An\xBA\xF5\xD6\xED\xE2\xA9i\xD3\xF6\xEC\x9D6m\xDC\xCC'\xF6L\x9B>\xF7\xC7\x1F\xFF\xFB\x03\x9313\xBA\xBE\x92\xF6\t\x8D\xA0\x87\x00\f\x82\xDB\x82\xF3\x01\xFA\xE7\x9B\x8A\xF3\xCB\x1D\xF9\xC9\xFEP9zH21!\xFAK\v\f\x02VP\xC8\xCF\xB3\xA0Pa\xA5:Lw%\xEA@\xB4\xF2X\x90\xCD*c\x05\xA3pe\x05\x82\xA5\xB2\"\xDDf\x10\x13\x81Jy\x12\x81Rj\xB5\x10sbN\xA9+\x11\xFD\xA5X\x90\xAFu\xE0\xE0\x98\xC7R_w\xD5T\xA9\xD6\xA8\xA8W\xD8U\xC9\xCB\x95\x05Nkf\xD795\xA8X\xB5\x86 \xCB\x8B\xE5\xCA\xD9N\xC5\xFAf\xD8=\x11\xA4\x19\xE9\x1A3t\xAC\x1A~\xF9Ft\xEF8\x86\xCF\x85\xD3L)\x97\xA0}\xC7S\xAF\x1F<\xBAyT\xED\x8A\x89\xCD7\xDC}\xE9\xA5dyIY\xD9\xDAG\x9F\x7F\xE3\xB9\xBF<L\x1CT\xA9|r\xFD\x88\xDA\xFFp0d\xF6\xE1\x03t\xFC\xC6\xF0W\x83W\r~{\xD8\xAEAM\xFE\x19-e\x03&N\xBA\x0E\x97_\xBB\xB0\xB0p\xE6\xDE\x06\xB5ff\xF9\xAE\xD1\xC3\x19\x1Do\xED\xFAJ\x98,4\x82\x132!\x0F\x161[\xD7\x9B\xAFO\xCDw\xF8C\x0E\xA2G\xC4<wf\xA2\xC5HA\x17\x95\xD1QTm\x8E^L\xD7\xDB\xFC!\xF6\x01\x1B\x97\xD0=\xBA\xF4\x94\xF6!\xA3{\x00\x14eou\x14\xDF\xC5\xC4s\x04\xF6\xC0\xA3gn\xA5\xA2\x94h\b\x02\xBCl\xF0mk\xD6l\xDE\xFC\xF9\x9E\xE5\xFC\xC55\x9F\xED\xB1\x92Boq\x00\xAD\x19A2f\xB6\xFA]\xC6\xC0\x8B\x0F\x1C\xF8\x1Au;vL\x9At\xE0W\x7FW\xCF\xDCs\xEF_H\xA1\xD5\x8E\xFB\xD6/\xBA\x82\x8CQgm\x9F\x01\x04\x9EU'\b9\xBC\xCA=\x1D\x96\x07GE\xAA\xA01M$\x02\xA1\x80V\x8BBz\xD5A\x03\xE5\xB0\x88\xFF\xA9\f\xBA\xBB,\xBDW\xBD\x17:\xBD\x95\xF6H\xAE*\xC6\x07<\x95U]UYI\xAB\xDB\xDA\xF6N=\x84\xF6_}z\xE2\xF9\xD7#\xC5\xD0B\xCD\xF1\xE3\xEA\xAA\xEA\x1F6\r\xBF\xF1\x8E\xD0\x98\x03\xFDj'\xFF\xFE\xC8U\xE5\x83\x87\x0EkY\n\x04\xBEWW\xE13|=z\x18\x1F\xEC\x87:\x91\x10\xA9G)\xB7^\xD0z@\xB0e\xE8\x05\xAD\x9D\x99$\"\b\x94h\xCD\x89(9\xB73\x9F\xC3\xE7\x88L\xD6\xAEx\x15;>\xD3v0\xA9-Y\x9BJ\xE7?\x98D\xA6\x89\x80\xD0\x88\xF9B\x19]\r\"\xF4\v\xE6\x01\x88qxf\x81FA\xD7\xB2\xD6\xC0&\x06o\xEE\x05\x04\xAFd\x9EX#=\xD1J\xBEh\r\x1F\xC2#\x91J;\x01\xC5S`\x87\xD9\xC1\xDA\b\x16R\x06\xE4(<\xD4\x030\x85\x15\xC3C\xDA\xAC\x02\xA5\\\x8A[\x98\nB\xD1F\xA8AO\xCC6 \x8A-\x12@\xB2qL}w\xC8 >b`\xB7{+\x03\xD5\t\x9Er\x97\x9C\xEB\xCD\xA2r\xC0\xE9\xA5e\xAF\xEC\x0F9\xAF\xC0\xEB\x16\xAC\xCD\xB8\xA2\xA9\xA3&\xEF\xF7'^Q;\xE8\x0F\xAD\vIv\xDA\xEE\\\xF5\xD5Pk\xA7\t\b\xAC\x80f\xFA5=\x01\"\x18\xA1*\x98\x1C\x9FV?\x7F\x8E\xBDgtFOdD\x11QF\xA4_3\xC2\xCEVW\xE1\xCD\xEA\x87\xB1\x97\xF4vu\xBB\xBA\xBD\x1E\x8F\xE0\x91\xFA\xD8+ \xB0\x15\x9A\x05\xF8\x7F\xBBw5b5b\x0E\xFF\xB9\x95)\xD9f\xBCI\xBD\n\xF3\xD9\xCB\xD9x\xB3\xBA\xEA .\xC7\xE5\xF5j\x9DZW\x1F{\xC5\xA4\xC5i\x00\xD9\x00m\x91\xA8\xE9h\xAD\x8A\x93\x99\xBB\xA2\xA8\xA5gx\xC3\x06Q\xAB\x81\x15\xD0 K\xC2\xCF\x86L\xE3\x1BGx\"\xDF\xA7\xDB\xF0/m\xF8\xD9q\xDEC\xA2\rx\xBF>\x10k\xE4-\x91\x1C\xE8\xF8`y\xAF\xDAt\xAD\xCBL4g\xA8e\x8F~\xBE1\xE3\xF9*\xD5\xBD\x18\xE8\x95\xFE\xDB\xCFa\xF5=\x92\x9A846\xA7\x12>\xA7,X\xC0\xE4\xA6[\xB2:\xA4T\x7F\x88\xCD.\xCB\x95h\x14\xCC\xA9\xD6\xF3'5\xD9'.`\x82\xBDSGqY\xD8\xF3\xE4\x8Ezge\xDB\xE4\xE4\x92%\xA3\x06\xF7\x91C\x8A_\xD4\xB4@\xCF\x1C\x12\xD5rHr\t\xF7\x80\xAB\xA1)\xE8\x07\xA8\x94\xB2\v$\x7F|\x1E\t\xAB\x8B|n\xC1\xEC\xCF\xEEQ\xD2\xC8\x06\xB9\xE3\x1B\xAF\x02\xECl)\xF6\x9Fqz\xFB\xCE\x14\x9Dg\x95?\x9B9\n\xBFs\xBE5_@6\xA97%x%\xA7\xFC2\xAF?\xCC\xD3,\x8D\xDCt\x9A\x91n\xF4\x87\x8C@\x89\xD9b#)\xB6\x04\x92\xECH$\x98\b\x04@\xB1Y\xD1\xE2tX1\xC1\x95\x18\xC9n\xDA\x130\x89\t*\xAB\x85\xC7\x8CR\xB8X\x03HI\xB6\x98\x11<\xA2\xC2\xD8#\xC9\x856+\xF3x\x13\x9D\t\n\x15\xCEU-\xD13\xD3\x13!\xEA\xA9\xEC.\\,wU\xC6\xA5?#\x00L\x8D\x9Cna\xE1\xC3\x7FP\xDF8r\xE4\xF7\xBF\xC7\x01O?D\xCB\xC3{0\xACRrK\xE7C\r\rO~\xBAn\xFD\xFA\r'\xF1\xE2\x013>\xF8\x00\xA71\xBAL\xEF\x1Fq\xEAH\x7Fl\xFC\xE7\xA2\xC5{\xF7\xAA\x1F\xAB\x1F\xEF\xDD\xCB8\xA3\xB1\xEB+\xD9!4B\x0E\x94\xC1\x00X\x13\x1C\x07P\x9D/\x14\xE5\xA7\xE4\xE6g\x99\xF3\x13\xFC\xA1,L!\t\x84\x1F\xF5r\x02\x98h\xB3R\x1D\xB7\xB7\xF4\xBAL,g\x8B\r\x94\xF3\xE8Y\xBE/\x83\xBDN\xD4\x83h.\xC9\xD0\xD9\xAC:\x02\xBEh\xC0\xE8\x9C\xD2\xF4sx\xA7JC\xE2\xDB=Z\xCA\xAD\xA7u\xA5h\xB6E\xA2\xA8\x01\x119\x96\x12\xA3&\x16=\x19\x1C\xB9\xF0v$s\xC7\xD0puB\xFDe\xEF\xDE\xB7\xF7\xD8\xA1\xC3\x8B'L\x1C<j\xF1]\xDFl\xDB\xB6}\xDB\xBFv]^\xA3>\xA7\xBE<x\xFC\x13\xE8\x1E4\x02\x1B\xF0;\x9AY\xBD\xFD\xA6\xDA\x12\xBA}j\xF1\xB0g\xB6\xAA\x7F?:\xE5\x8A\x91\xBBk\x06\x14\xCD\x9AR<l\xE7N\x14P\xBA\xE7\xDE1\xBE\fu\xD6\xD3\vo\xC4\x87_X\xB0V=\xBE\xA9\xEE\xAA\x85#\x99f\x9BK2\x05+\xEF\xA8\xE7\r:\x18\x11\xA5\x9E\x15@Z\xA8!\xBE\xA1\xDE\\\xFA\b\xC9li\x01\x84f\x92)\xDFO6w\xFF\xAD\xF1\x97\xFE\xB6Y\x1EH2\x9B\x9B\x81@\x7F!\x87\xF7\x97\xD4s\x9C{M\x02\xEF\xA8\xA8u\v4\x99%v\xF2(\xEF\x17\b2\xB5\x98\x89A\xA1\xCC(6\x1A\x04\xAA\xE8d\x01\xA30e\xDE?\xB0;r\x11\xA9wrj\xF5\x03\x95\ty\xB1Wd\xCA\xC8\x91\xC7\xF1\xAE\x11#\xDAP\xF2i\xCDw\xB0\xA4<\xFA\x02\bL\x14r\xC8\x95\xBF4\x1F\x8B\x99(\x06\x1Am\x03t\xA1\xF3\xE9n\x01\xE4\x8A\xBD\x9A8rd\x1B\xDE\xC5\xE6$\xE4D{\x01\x95G_\xB0}\xB9\x8C\xFE\x80\x93\xF8|\xFA\xEA\xA2\br\xC4h\xD2iA\x14\x9D\x8C=\xBB(v\xD3\x00'\xCD\x9Cy\x9A-:\xF5e\xE7\x8F\x1F\xE0p@XI\x7F\xC0\xC5\xE7\xBD\xF6\xFF\xD0\xA1q%\xBB4\xFD\xA1>\xF5e\xC7\xE9\x0F\xD4g\x18\vD\xE3\v\x9A&\x1E\x1B\x1C\xC84\xB1\x0Eu\xB2\xA0C\x91\xD7\x97q\x8D\xCB\xE1p<\xA4\x15\x89/\xE84\xAC'Gyj\x96\xD99\xB1\x05\xAD1\x91\xD6\xC9i\x01=\x11\xDEq\xFA\xF4i\"\xB5\xB6\xE2\xC3?\xFE\xD8\xD9x\xFAtW\x97\x86\xFA\xE3y\xBE\xCB\"y\xBE#\xBC\xBA\x8D\xD7@J\xDF\x81\x0EL`\x83\xCB\x83\r\x91:H\x00\x9B\xD9\xA47S\x83f=\x1B\rT\xA7\xB5\xC5\x8C\x94F\x1Ayi\xA4\x95\x12=\x80\xC5lF\xAB\xC9hF=/\x92\xA4\xDC\xD2C\r\xDD\x1B\x17\t<7\xB8\x10)\x98\x8C&^\xE3\v'\xD5\xBD\x07O\x1E\x8C\xAF\x9E\x94\xEAx\xA0\r\xD5\x91]'\xA8\x85wGJ\f\xEAi\x8F\x16\x93\x9A\xAD$b\x00\xD5\x91B\xF0\x86\xB3/\xF0\x1E\xBA@`-\xE6\xD0\xFF\n\x0FC*\xF8`U\xB0\x0E [JI\xE3\xC9DD\x9BU\xAF\xE3\xE5\x86I\xAED\xA7b1\xC8\xECr&s\x8A&\xEE$\xBB[\x12\x99\xA8Ot\xDA\x15\x1B\x8F\x06\xC8\xE767=Go\x16\xDA\xED\xB6\x9E\x9E\xBE\x9C\xC7\xB3Cy\xD5.\xEE?\xB9xN\xC8%\xE7I\xDE,{\xEF,\xE5\x92]M\xF7\r\t\xEEj\xDA5{\xD1\xA2\xD9\xBB\x9Av\x05\x87\xDC\xD7\xB4\xABy\xE1\xC2\x85\xB3kkk\x87\xCD\x9C\x1A\x9CX[\x87/\xECj\xDA\xB5`\xCE\xDC\xF9\xBB\xA6\xEC\x1A2d\xD7\x94]\xF3\xE7\xCE\x9D\xCF>K\xC6\xD4\xD66\xCF\xAC\xAD\xAB\x1A~\xC5\xAC\xDAZ\r\x8F\xD9L\xAA\xB9\xFD\x99\x114\xC7\x9AS\xC5\x15C\xF6\xB0pIu_\x06-\xBB\xCErh&3.\xE4:\x9A\xB5\xBA<f\xA7v\x1B\xA7Z\xF7D\xBAI\xAA\x03\x17\xA4\xC2\xFA\xE0e\x11\x9F\xC1\x90\x9CDl\"I\xA2T/'\x03\xA4&\x89\xC8{xGbo.\x87\x1D(\xA4$w\x97S%'9\x1D\x02M`\xB6H$B\x94\x9AbO\xA0\x06}\x9FuU\xDD\x95U\xC7\xA2\xE5\x8F}\xD5VyxK\x12\xC6\x8F\xF1\x15V\xC4\xD8\xA6>\x87#\xDAz\xD4Y\x9D}\x91>\xD2\xD9\xC8\xABt0\xB6\xA6$\xB8\"\xD8\x00`e+\xB2\x9BD\xAA\xA3T\xD6\x01\xB8\x12c.\x90^\x87IZ\x8D\x12\x9B>_\x89\xC9\xA8\x13\x88^\xCB\xA6F\xEB5\x12\x9D}.#\x96-\xEB\xBD\x04W@\xF1*y\xBD*\xC4J\xFFt\xFCxA\xE3\xC0\xA9i\xAE\xDF\xFEV\x9B{\xF2O\xEF\x8B;t\xCA\xA0\xF2%Z\x9DXw\x9E\xDF\x0E\x97\x06Ga\xB4Az\xD4\xC8\xB5\xE9\t3\x9C\x11\fz\xB0\xD8\r\xC4d\xA4z <\xAE\x90`\xB5\x18e-z\xCE\x81\x8C:Q@\xCAku\xBB}\x85\x9EX\x00%\x86\x07P\xE20\x01q\xB8\x80\b6\x80d&\xB7&\xE37\xDD\x00\x015!\xB959\xFC\x19 <\x88_\xE3=\xE4/\xD1>\xB5\x14tqz\xF5\xE7\xFB\xD4\xDAy\x9FZ\xFC\xFA\xF4i@X\xA0v\xE0\x8C\xFF\x8BN\xBC\vx'\xDE\x8E\xFA\xD4'\x98\x9C\x7F\x9B\xD9\x9E#\xD4\xA3d.\xB4\xFD\xFFJ_\x8E\x88\xE9\xCB\xEE\xDEy\xE5\xF5\xB9\xCFE\xF4\xA5\f\xC9]'\xE4\xBF\xF1\xE8_2\x14\xF0.\xEA\xE3\xA0\x01v\x06\x9B\x00F9\x07\xD59+J\x9CY\x85\xCE\x14\x87Sgs\x82?4\x88d\x11\x80\x8A\x14\x1DbE\x8A\x8Ej\x10\xC7\t\xE3\x89\x19\x00\x1B.\xE2\x81\x82z\xB9\xDF\b9\xE8\x973\x8A\xE4\xDCDYH\x90M\xFEP\xC3\x84\xF1\x17\x05\xFB\xE5f0'\xA2\xB44\xDE\x91\xE8\x91??v\xCC\x1Ek\xE7QZZ:\xA4g\x93\xB6\xF3\x05\x1A\x15[\xA0\\\xE9\xB3\xD3z\xF4\x9D\x9C\xF3\xFF\rS2\x17\xDF\xDA8y\xF2\xE4\xBB6L\x9C7\xB9q\xFB\xBE\x03\xFB\x8BK\xC8\xF8\xDB&O\x9E<\xB9uSC\xF7\xD0\xCA\xDB&766\xDE\xB1)\xF2\xA9\x03%\xC5?\xD515rLl\x9F\xD3\xFC\xC8\xC1\xE6\xE6\x89\xF3\x9F}d\xCE\x9C\xD9\xEAw\xEA\xB7h\xD90\xBA>\xBCA\x1Bo\x98\xFF\x1C\x1F\xFFV\xFD\x0E-\x1B\xEAG\xCF\x9E\xD3\xFC\xEB\xC7\xBB?\xCE\x86\xAD\xEB\xEBG\x87\xA7ru\xD4\xCB?N\x80\x99\xC1\x1A\xC5\xC6\xCEV//\xD9lBv\xCAhO?\xF9\xC2\x1Eb\xD0\xA3\x91l\xBC\x0Fj\x0F\xD8\xBDy\xDEs|\xCE\xC3\xDF}\xFC]\xEB+\xE4\x95\xDE\x8E\xB3z\xF4\xD5W{\"B\xED\xB0485A!f\x13=\x1F.\xD4n\xB3rds\f\x19\x1Ay\xF2\x82,\t\xD4$\x00\xB9\x00\x80h\xAF\xF6'\xF1\x10Q>\xFF8\x98h\xE7\x8A\xD8\xDC{ E_}\xF5\x02\"\x11f\x13Z\xFEO\"\x11\xD4\x1E\xC0^D\xDD\xAC\xC1W{\x13\x14\xA8FM\xE9;\x9Ek\xB2\xC3\xE2\xE0\x14\x00F335\xF7\"\xA8\xC0\xA5\x81\xC5\x1C\xA1&\x8D\xA0\xAB\x15\x9B\x99\xB1\x86\x19M\x11BF\\V\xB3\t\xE3\xC9)\xFD|\xDF\xB4\xA8\xDD\x15O\xCB\xFD\x1C\xD8\x18\xA3#\xB7\xB9.\f\x0Fl\xB5\xB0\xDB\xFF\xDF\xE2\x81\xBD\x18\x88\x9B\x9C:[\v\xED\xC4\xED2\x10\xB8\x11\x80L\x97\xB7p\xBBz`0\x9Fo%\xD2(\xADd\x91\x10\xA0\x12\x11\xA0\xCF\xE6a\xB6c\xB6c\xFC\xEE\x91\x02\\{\x00\x0F\xBF\x13\x8E\xEE[\x14q\xDCu\x14\x80\xB4\xF0{\xF0Nh\x06=\x11\xF9#Gx\xF4,v/\x83\x9E\xDDK'K\xD4L\x8C\xA2@\xCD\xE7\xB9'O\xB3\xC5\x15\xBFFX\xFA\xF0;j\xFF\xB8S\x18cb\xED\tX\x84Y\xE9\xBF\x8C}\x84^\xD8G\xCF\xFF\x86}<\xFC\x8E\xDA\x12\xA9\t\x88l>\x90\xAE?\x01\xE0o\xBA),K\xECZ\xBD(,\x10\xE9\x82(l\xF7b\xE0\xF0;\xBEh\x8C\x8E\xEFa4r\xB5%\x82~\x1E\x1E\xCC\xEB\x89}\xCE\xF2\xA0\xD7\xAD\x05\xA9\xA3\x01+o\x96\xE7\xDC\x80U\xE1\xFF\x84h\xB6\x07\xF0\xE7\xD1\xCC7s>\xB8\x80\x00T\xE4T\xC7\xAF\"\x0F\x1A\x83\x81\x9E\xAB\xC8\xCD!\x1A<'/\xDB\x1B\x81\xE7DW\x93\x97\x9B\x93\x1D\xBF\xA2\x9E\xAB\xFA\x9Fz\x8C\xE5D\xB8\xE9\xE7\xC3m/D\x19\xED\x02W\xF7\xEA\xAB\xBC'\xCA\t\xA1\x9F\xF85\x94\xC1\xEA\xE0%\x00^o\x86P\xAC\xF7\x872@O\xD0\xE3&\x90L\x01eI\xCB[@\x91/\xC9%\xD1\xE42\x9B\x15$\xAA0\xAB\xA6\xB0 %\x99\xFAK\x13\x14\xB6\xF62\x7Fi\x91\x8F\x8D$\xB9\x98n\x00\x9B\xD9-K\x11\xBC\xBA-\xDAr\xB7\x8F\x0E\x87=\xE2F\xB9y\xDE\xEA@^EuU\xB5\xB7:P\xC5\x13\x03\xD1f\xDE\xB2G\xF6H\xB2\xCB#\xE3\x9A\xBC\x81\x8B\x8F\xAE\x7F:\xB4\xF5o\xB7\xCD\v\xD8]\xBF\t,e\xDE\xF5\xBE\xC0u\xF9\xFE\xFBq\xD6\x86G\x7F\xB5\xF17\v\x07\xB9\xCD\x16R\x1D\b\x7F% \xC1\xD7\x02$\xF9\xC1)\x0F\x8Ez,x\xE3\xAC=\x03\xD6\xB6\x8C\x11\xEC\xBE~\xEB\xF6O\xC6\xD4\xA2\xA7Gn\xAA\xBF,\xBBl]}\xE9\xD8\x16\xF8e\xBE\xF5fi+\xFA?\xE5\xDB</\x06~vs\xC7\xF1\xC3uA\x1B\xCB4;\xC7\xE0\xCB[8\x06\xFF\xB2\xE0\xB0>\x10\xF8\xBC7\b[\x86\x06\xBBOOKM\x11LH\x7F\xA1\xF3\x15\xF7W.\x10jo\x0F`\x9F0\xFB\xA75I|^\x9C=?x=\xD6\xE0\x81\x85\xC1\x8Bbkpg\x92\xD4\x14\xDAc%\x9E\x8C\xF4\x14\x1A[\x8B\xC7\xAD= Jw\xE1\xEB\xE9\x8D:\xE8kA\xF6\xC8!\xECkQ\xFF\x8C\xC9\xF8\x9F]\xD6\xAB\xAF^\xD0\xDE\xA4\xA7a\xEA\xFFw\xF7\xC6\x8B\x81\xBE\x96ANj2\xFCg\x16\x01\xD1\xAE\r<\xEB\x19\xEB\xE3\x89\xE7i\xDA\x10\xEB\xE3y\ro\x80\x01\x80]\xA7EJ\x9E\x94\xEA@\x86\xFC`\xB2\xD6j\x94`4'sn\x95*\xD3\xA84Bz}\x94\xCC4&\xBFt\"%\x0F\x89\xA7\xC0\x05\x03\x82\x19\x00NI\xD0K6\x7FH\x004\x19\xB9\x7F\xE3\x02\x1B\x80\xC5e2j\xE1\xA4HN\xB8g \xE7|\x05@\xBA\xF3%0h\xAF\xF4\x04\x82C\xA4\xE4nq\xC7\xFF\xF2\xAC\x16\x07\xD9,R\r\x15\xC4W!\xD5iO\x05\x02\x10\xF3-\xFE\x90\x85\xA3\xD0\xD9\x8FX\x1C\xA6\xB4{k#\xFB\x1A\x9Dn\xAE\xAE\xC5YU1iz\x95\xCF\xDEb\x1B=\xFD\xEE\xDD3\x86Ju\xD3\xF3\xF3\xCA\xF2/\xBE\xBEa\xD1\x8A\x8B\x00\xE1{\x91\xE23\xBC\xAF\x89\x9FQ\x8A\x82\x18\x9D\xE1\xF9:nD\xE0\xBB\x9A\x9F\xFD}\x9B\xD6\xBD\x04\x96\x8B\x94\xF4\x93^\xE1\xF2\xB1<\x98\f\x90T\xA4\xB3\x151\xE9\xC8e\xA2[p\xB8{\xA3N\xBA_^\x00\x9C\x7F\xF2\xF4a\xB5\xB5\xC3fN\xAA\x990l\xD8\x8C\x01\x85\x05\x05\x05\xFDy\xA9\x9F\xF4\xCA\xB0a\xD3g\x0E\x8B\x96\xF7\x15\xE4G\xCB\xFB\xF2\v\x00\xE1W\xEA\x04\xAE\xA2\xEC0(\x98\x0E`-2\xF8Cv\xB3\xC9\x10\xB1\xAD\v%\xFE\xAB\xA4qV\x14\t\xAA\x01\xF6\xBB\x7F+\xF3{\xFA(\xC7\xC34\xAD\xE4n@S\xED\xD8\xF2\xAA\x05\xCF\xF7*\xAD#]\xAF\x8B\x94\xFC\x89#\x17e\xC8\r&2V\x16\xCC\x18\xC1\x1F\x9E\xC3\xD0\xDC\xEBgFi\x80}\x7FwT=\xFA\xDD\xB7G\xD5c\x1AOs\xE1\x87\xF0\x88\xBA\x9D\x97\x87\x99\xA1\x82QXt\x1A\xFC!\x83N\xD6v\xAA\x90\x91W'G\xC2\x95q\x85\x07\xA5\xDD\xAB\xD0z\x9D;y\vt\x1C\xB5x\xD3\x8A\xCA\x9C\x9A\x8B^\x9D\xD0<\xD3\xDA\x90~\xFF\xDA>N! \xD5\x8E \xE2\xF9N!R/\r\xB8\x02\xD5\xE4\xC9\xC81\x94\xEA\xD8\x84\x995\xFB\xFF\xB7#z\xDB\x11$\xAE\xC2[\x86\x92`\x96\xE6\xC3h\xB8V\x01\"\r\x84\xE4>\x1A\bE\xAA\xBD)\xAF\xF8nmU;\xC8\x17\xE14a)\xFB\xF9\xFF\xFCL\xA8f\xF1\x90`\xE3\x9Cz\xC1\x7F\xDDL\x0F\x8A\x87\xB4\xBF\xAE'\x13\xC8F\xF1SH\x82\xF1\xC1b\x00\x9D\xD1\xCC\x9C\x10bfj*\tr\xB5K\xB9\x125\xE3H\xCAQx\x88]1\x1A\xBA\x03\xEB=\x12\x8Aq\x1D\xB1\xEC\x95U\xD5\xBD\x1F\xF5\xC3\vF\xEA\xEB\x96\x8F\xD8\xF5\xE0\x8C\xCD\xD7\xAE\xBE\xB6a\xC2\xEF*\xB7\xB8p\v\x99\xB0\xF6\xAA\xB957\xAD\xBDc\xF8\xAA\xAA\xBA\xBA\xC5\xB7\xDC[tE\xF3Z>\xBB\x01d\xA9\xF8)dAc\xD0\x07\xE01\xD2D\xA3\xE2\x0F1\xED\xE9\xB0\xF3\x1E\xB4\x16\x80\xCC<1)\xC7\x1C\x1D5G\x9F\xB9\xD6\x1B\xCC\xDA\xC7\x18\x9Fd\xC0\xDD\xEB\xF9(\x9A\x88\xF0x+9*>\xABq\xF92L\x19^\xD0\xB0)P\xD0\xD4x\xCF\xBC\xB57\\tX\xED\f\x14\xFDp\xDF\xA5\xE2\xE8e\xB9o\xCD\xAC\xC9\xCE\xF0\xD4\xF5\x9B\xB8f\xC4\xC8\xF4\xB5\x81\x07\x7F7\xED\xC0&\xF8?\x8C\x80\xB6\x90\t\xF8\x9E\xF8)\x88P\x1A\xCC\xE0\x00#3\x88\xC0w\x96\xD7\x7F\xC9(D\xB9\xCD\xD7\r\xE5\xE6\t4E\xAE\xCCQ0\xD8\x86S\xC9\x04r\xBAlyS\xE7\x95\x00\x02\xAC\xEC:!\xF9\xC5S \x82\r\xEC\xE0\x82\x1B\x83\x8B\xED\x06 z\x93L\x12\x9D\xEC\x0E\x92\xD9\xE0r\xD8$\xC1,\x03$(fS\xAE\x96\xA1\xE3\x95 :\x99\x8A\x1C\xBC\x9Ah\x94\x88S1\xE8u\xA2$P\x97\x00\xC4b&f\xA3\x83\x12\xEEM\xDB\x13d)\x91\x1AE!\xD2\xC8\xD2f5\x19i\x8F\x8A\r\xAD\n>\xFE\xB7\xD8\x8C+\xA3OSrr\xC0t\x00\xB1\x7F\x1BN\xA53\xD5\x85x\xE7---\xEAlL<{\x07\x8F\xF7\xC5\xD6\x15>\xF4\xFD\x95\xC4\x19\xFE\xD7\xAA\xEFq>^\x1E\xD6E\xE3w\xD1\xB5&A\x1Ad\xC1z^\xB7\xCA8\x9C\x99\x93\xA9)F\x83\xCElNOK\xE6X[\xCC\xD5\x1E\xD7\x95\x95\xAE\x01\n\xA2\xEC\x9E\x9A\x92\xE4Jd\xFC\xAE7+\x1EwfZ\xB2`Ng\x9E\xAE\x8C\xE9\x91\x8A\xAA\xEEpA,\xBB\xDE\x9DK\xEB>\x0F\x9E\xF3\x9D\x07\x11\x03h\xE7K\xA7g\x87\\=b\xD7\x83\x97m\xB9\xEE\xEA\xD8\xD183S\bn={,\xA7\r\xA7\xAE]\xB6X;#\x95u\xB5\x97\xDFv\x97o\xC9\x9C\xB5<qFVE\xB7W\x80\xA5]'\xA4\xC1\xE2)\xC8\x82b\xF0C\x05<\x1E\xDC\xD0}n\x14\xBF\xC3\xAE\by\x054\xB7 \x9B\x04\xCA\xD9\x81\xD1\xB3\x85\xD1\xBC\x8A\xB2b\xAF`\xCE\x06(-),\xC8\xA5\xD9li\xF9yX\xE4\xCB\xC9\xD6<\xE0\xE8!+\xCF\xF7\x92\x80\xAF\x90\x9A\xF3+\xCAJ\xF2rs\xB4C\xA7G\xB0\x9A\xCD\xA2\x17\xC0_\x9A\xEDM\xA4\xF9\xEC\xEF\x8B\x8B\n\xF2i\xDCs\"l\xDDp\x9B\xEE\x8D\x0F\x15\xFA|\xA5\xFF\xD3y<\x97?Z\xCE{B\x85\xF1\x8Cin^\xB7Nm\xC6\xC4\xB3\x7F\xD1\x82\xC4\xE79\xB5g\xB6\xF4\xC5C\x84?=}\x11\xEF\xB7\x9B\n\x97\x07'0^\xB1\xA2\x98\x9A\xC2\x1B\x19[\xCC\x91\xA8Zr\x92@\xA9IK\xBD\xC6Zz'ZL\x92\x90l\xA6:\x9E)s\x99#\xA1\xB5\x94\xE4s\x1EQ\xD8\xFD\x18\xB8\xF8x\x8F\xB7\xB2\xAF\xA7:(\x1E\xA7g\xDF\x9E=\xFC\xD9\x0E/\xA9\xF7\xC7=\xDB\x01\xC7\xA9O\x92\x03\xBB\xC9u\xBD\x1E\xF1\xA0&\xF3\xE7,\\\x05\xCB\x84*\xC1\x0FF\b\x0430>tj2\xFF\x1C\xC4\x8DY\xD6\xD1d\xA1\x8B\xE3\xEA\xAE\xFA\xFF\xB0\xF7.\xE0QU\xD7\xDF\xF0o\x9Fs\xE6\x96\xB9e\x92\xC9\x9D\xDC`r\x87$$\x86\x90\x10u\x90\x00I\xB8\x85@\x02\x81 f&!\t\x86\x04s\x11A\xD4b\xBD\xB6\xEA\x1F*VKk\v\xBE\xB5\xAD)\x17m\xC1\xB4\xFA\xAFh\x9B\x18b[D\xBC\x17[/hk[\xDB\x7F\xB5-V!\xB3\xBF\xE7\xACsf\xE6\xCC$\x81\xD8\xBE\xEF\xF7}\xCF\xF7|\xC9s\xD69\xB3\xCF>\xFB\xAC\xB5\xD7\xDA\xFB\xEC\xB5\xF7\xDAk\xB1m\xBE\xBB;\xD86\xB6\xAD\xC3w7\x01\xDF\xDDo\x86\xFE\xEC\x90\xB3\xC8\xF5G+\xD7\x86\xDBi\xE5\xBA\xD6=O]\xB76G0\x8B\x89\x19\xE5\xBED]\xAB\xB6H\x82AN\xD7\xEB$\xAB\xC1\xA4v$\x13y\xF3\rX\xBFk\xD7\xA6\xE5\xC1\x97v]\xFA}Y#\r]\x97V\xF7\x97\xF8=\xB3\xDB\x10\x87k\xDC\x95\n?\xC5H\xBB\x9DY\x04%d\x82\xD5\xC2l\xC19\xDC\xA8\xC4\x88\xC2\xA1\xD8H\x8B$Y#\x04u\xEA,\xCEn\xB3\xAA\xD1\x13.\xE5\xA1}\x12\x1F\xED\xA7Y\xCF\xFB--\xEE\x15cw\xFA^`\xB3\x14'\xED'u'|\x7FLJ\\\xB6\xF1{\xBE\b\xDF\xAF\xD8\xCB\x8A\x9Bv\xD5\x87\x9B\xFE\x1E\xA4 \x1B\xD7\xBB\x97\x00\x19\xD9\xB6\xD4\xEC\xD8\xC2\xA1XYsdr\x13\xD4C\xAF\xEE\xFA\x88g\xE4\xB3]'\x89\xF2\xA7\x82\\|\x98\"f\x98\xA2\x94\xEFc\xBC\xCC_\x935\x02Q\xE4a\x8D\x02g\xE5\x8E\xF7\xE0>\xCE\xA68\xBADY\v\x8F\x83\xD6\x17\\qQ\\f\x96!\xAB4\x93\xC9\x03~r\vw\xF3\x89G\xF6\xAD\xB8\xF5\xA6\x05\xCC\xFA\xA5/\xFD\xF6\x9D\xDBn\xBFu\xD7\xBBs\xAEZv\xCF\x03+\xBE\xB4\x89e\xDD\xB2\xB8\x8AE\xB1H\xDD\xBE\x07\x96>\xB6\xF6\xBF\xAEY\xE2{\xD5\xB7\xC6\xF7\xF7o|\xE3\xA1\x87\xE4o\xC3\xD7\xEE\xB7\xED\xF1~w\xCD\xBDs|\x91\x9B7\xFF\xC2\xD7\xCE\x1Ed\x0F\xF9-\"hGt\x93\xBA\x83\x9A\x8Cq\x15or\xFA<\xF2&\xB7Y\xE6c\x8879r'\xA7\xF8\xA5%\x7Fr\x01\xF7\xBE_\xC0\xA1\\\xAE3o|M\xB0\x19\xAA\x13\xCA/\xE8P\xCE\xF0\xE4\xD8\xE2I<\xCA\x89\x88\x01tn\xFD\x1B\xEA\xEAG\xBD\xDB\xAD\xAC~\xD8\xCC\x06\x16\xF4C\xA3\xCC\xDAk\xBC\xD0D\x98\x8C\xB2Bb\xB0\x9AEI\x14\xACV\x03\xCC\x8A\xC1&\x99\xE7>\xAB\xCE^O\xE8f&=&&la\xE9%\xE1\xD6\xD0%\x90\xBD{\xC19:\xF8\x1F\xA4\xD5\xBA\x07\x91\x89\xCA\b\xB9\xF6\x7F\x837\x11\xC0X]\xAF\x99\x86f\xF7< 2;A1\xD1\x8CqZ\xCC\x925ar\vM9\xC3\x94,4s\x83\v\xE8\x1A\xEC\xC7)\xCA\xE1\xB4\f\x8FS\x9CC|\xCA\xBC\xAAU\xA2\xFD4*\xDE\x1C\x88\xC63\xF8\x17\xD1\x18\xED\xBB/\x10\xB7)\x1E\xDD\xEE\xF9@dL\x8CBctT\fB\xE9\xB3\x98\xC9B\xD7?\xB9o\xCB\x8D+\x1C\x8A\x8B\x8E\xBA\x18\xA5\x05a\xFDE\xE4\xD0\xB3\xCFNL\xB1V\xF7\v[\xBDb\xCF)\xAA\xE0\xB2_j\x89<_\xBB\xD2\xA3*\x86\x9Cc\xA3\xEF>\xF2Z\xED\xF73\xF1\x8E\x90@m\x88\xE2&\xA9\xF3V\xE4\xB5t2\xE79\x81\xA9E5\x82\x12\xCD_YC\\\xE6\x04\xC6>_ \x92\x12\x8B.f\x17\xF5\x8C\xB3]\xEE\xC6'\xF6\x87\xA3S:t\xD5\x9B\xC5~\xE2\xDF\"\xB5\x87\xB8&\x8C\xBAtlr/\n\xA5N\x9Dr\f\xA5\xD1?\xE9\xA8R\x19\x98u\xBC\x18\xA5yS&\x95\xE6\xBB.F\xEE\x85#\xAA\x16~1\x8A\x95u^\x99\xE6\x9F\x91uN*:\xDC\x8BC}[\xA7$\v\t\xF1\xA2\xD6\xC3ub\x02K\x9D\x96\x14\xAF\xD0F\xBE\xAE\x93 \xD3\x96\x98\x10o\xB0\x86\xB8\xBD\xCE\x8D|\xF6b\xE4M\xEC\xFB\xDAO\xDC\x84>\xB0\xC7\xBC*U\xE3\x9DaKs\x83\x14)\xDC2\x91,^\xE7\xAE\x9E\\\x16\x81\xE4D\x1D\xF3{\xC3\x0E\x06\xF5J\x04\x92\x12%6\x8Dv\x99Lc\n\xC3&\x8B\xC9\xF4\x05d\xB4\xA48\xE6\xA22:0<\x19\xBBhn\x8D|\x90\xD3\xEE\xC0$\\\xE7\xAE\x9A\xDC\v\xB9jM\xA5\x8C\x10\x83>\xC9\xE3\x81\x84x\x89\xF9\x1D\xA9\xC7ML\x96\x7F[\xFET\xBD\x95\x93\x19\xE2D\xDC\xF2]=<\x11\x9F\x86\x87\xA7\xD2\xA2\x12\x93BZ\x145\xA7iI\xEC\xFFL\x8B\x12\xD5\xB9\xAB\x8B1\xE7\x81\x8B6(\xFD\xED\xCAd\x97\xDA\x87\xFCL\xD3\x87\xBC\xCB\"\xA0\xC6\xD0\xD3m\xA6\xD1k4\x92\xD0\xE5\xAEML\x10\x9C1bx\xF4\xB6\xA4\xF88\xA7\x18\x1B\xA3\fh5a\xDC\xE2L\x10\x92\x12\x13\xE2cc\x9CQ\x11F\xC1|\x91\x88n\xE1\n@\xDE\xC41\xDD\xFC3v\x13\xC5v\x13\xF6\x04\xD6,\xC24\x00a\x9D:\xADG6\xE6\xD2\x9FU\xEF\xF3Y\xB8\xCE\xBD&\x8E\xD9\x05\x969czzj\x8A>\x91\x89\b\xF5E\x9F\xE1JJ\x14\x15o\xF4\xD3\xD3\x85\x8C\x14\x91|\xD2\xBBf\xA4\xA6HbF\xC05\xBD@\xCE\xAEX\xD0;\xBD\xA8\xF5\xF4\xAF\xB8\xA7'\xDF\xB6\x97\xF2P\xCF\x82\xD1F'\xF5U\x1F\xB5l\xD9\xF3lr\x8F\xF5R\xEB\xBC\x98\xFD\x8E\xE1\x1F\xFA>\xFF\xFF\x90\xF6\xA6h\x01\x9D\xFA<$\"\x03\xB7\xB9\xD7\x01\xAE\x94\xC8\x14\n\x1F\xCD\"\x056-)\xD1\"\xB1\be+\x00\x83^\xD9\x8A\xA6\x93\x94\xB0\x1C\xE6\b\xC5N9\xCD\xE4,\x1C2\x1A\x04\xABN`N\x8AR\x9Eh1\xCBc`C\xD0@! \x91\xF2\b25<\b\xA9v$\x9C^\x92^RLV\x8C3J\xC28\xA9\xF5R,K\xDE\xF0\xDE\xBD\x13\xFB*\xFE\xD3\xCE\xE1\xE1\x9D\xE7c\x7F\xA9\xE1\xE1\x98;\xE0\xAFX\xB5h\xD1\xBFA\x16-^\x99\x7Fv\x8B\x81Md}\xA3\xEC\xC2\xD7\xD8\xDEX\x15\x9B\x1B\x9D\x7F_\xA1\xF2[\xF7\x85\xECnBb\x16^\xE8\x97\x87\xC8\x01\xA3\x16e|\xACx\xD2z0\xE0I\xEB7x\x1F\xA1vX\xC9\xD8\xEA^\x058\xB2\x13\v\x87bc\xAC\x16\xC9\x9A\xC8.\x19b\x912~1\x93\x9C\x90`\x04\x1A\"\xC6\x8D\x96\xB5$\xDD0\xC1HY\xA5\xD0p\xBBv\x98,\x06|\x89\x19\x91\x8A\xD9\xF0\xCA\xA3\xE1\x8C\xEC\xFC\xC9BA\xB0\xDC\x9C\xF44\xC9\x9A\xCF\xB4A!\xE4\xB4D#\f\xE1\x81!\xC8\x0E[\x1B\x1Dbj\xF1!\xC6\x93v\xE9\x88\x11c\x07\x83\x14;\xAA6>\xF0\xF0F\xF7\xE4A$t#\x1Br\xE4*\xB8\xB3vs\xEF\xB2 WM$\x8D\x1B\xDDKei\xD4MM\x1A\xED6)`\x04\xA6*sZv\xEA.m\x01\xA6u\xB8\xB8qX#\x88\xC3\xC3\x019<\x11\x90\xC3\xB7\xFCr\xE8\xBBO\x8D\xEC\x99\x80\xDB\xDCW\x03\x8E\x98\xD8\xC2!gt,&\x93A\xAB\xC5\x1Ct\x0Fj\xCF\x8D\x97s[EA/\xC6\xC7[\x84)\x89dAxo(\xF7%\x13\xC9\xE6\x8C\x10\xBDFC\xE0\x1F\x83*\x8DJ\xA6V\x9Bi\xF0\xDDG\xF1H\xFC\xB4\xBE\xC3Z0\xB1\xED\xA3\xC5:\xB1\xED#\x19>\x06x\x14\xB4}\xB4Y-\x06\xBD$\xDA\xFF3\xDBG\xFF\xC0DC\xD0{\xE1\xA6\x8F\x06u\xE81\x91\x97\xBEwU\xDEQ\x9CRu\xB4\xB5\xCF\xBD%4R\xA9\xAA\xBFL\x1E\xAF\xD4\xAF\xCE$@\xE9\xFB)pi\xB29VH\x99&\xC4\xC6\x8B\xE9i\xA9I\x89:\xEB\xA5\"\x99\x06\xA3\x10i\x97\xE8\xF2\xA6\x16\xCD4\xA0\xF3L\x1E\xD5\xD4W\xAB\xD6\xCCd\xE1M\xC5\xBD\x01\x1BQ\x8A\x95\xA2\xAF\xA4X)\xF9\xB8\xC1\xDD\xA0\x89\x962k\xA6\x90\x9D%N\x183%'\x9B\xE5\xE7\xE5f\x89J\xF4\x94\xBC\\!\x11\xA2.\x7F\xD6\xCC\x9C\xEC,\x9D\x01\xB2\x82=Q(\x15\x99\xB9\x9A`*y_8\x9AJ@'\xBAdT\x95\xB1\xB7\xD5:\xB8tx\x15\xE9\x89\x80\xCDIP:\xF2\xF0\x90\xBB\x05H\xCD\xCE\xBEX([\xE6\x9A!\xEB\xEC\xD9\x98,\xA8\xAD\xCB\x1C+\xCC\x88\x8D\x17\x92\x12/%\x14\xCF\x066g\xE4\x05v\xE5\xFB{\xF0\xB0\xB0\xFB\x93\xCB\xC6\xB8\xCE\xFBbR\xD2<\xEE;5\x99\xBCH\xE1\xB3;~\xA9\xC9D\r\xB5\xAE3L\xD0\xB4.E\xDF\xBCS\xEE\x19/\x1E\x07\x98tN\xAA7Ai\\~\x8F:J@`\xBF\xF2I\xD5&(\x1Ah\xA0\xE6\xC6m9\x9Dt\xB9{\xD2\xEA\x12e-t\xF2\n:6<y\xFB\x19\x1E\xF6\xB7\x1D\x8Aw\x9B\x89\\|\xC9]\x7F\xA9HC@n\x96\x8E\xD1BNN\xB6\x1Aw(+]\x88N\x07rs$\x96\xA5\xAE\x10i\x9BN\x90L\nE\x14\f`\xF3oG$\"-\xF5\x92\xED\xC7wrx*-\x87\xB4\xF1\r\xBEZ5\xF6s\x0E\x1Ev\xB7\x03\xC93/\xDEj\xA6\xA7S\xAB\x11&h5\xA9\xB9\x99\xC4\xFC\xCC\xCC\xD8xA\xC9w\xE9\xEE\xB4 \xCC\xB9\xEF\xBF\xD1tD\xD5\x88E\xF1\xD2>c\xBA\xEE&\xDF\x9F}|\xBC\\\xF4\x1D\xFD\xF4\xB3\xB2\x9C-\xDF\xBE\xE3\xAA\roVL&\x1F\xE7\x7FXoZP\x13\xB9LL\xCE\xDD\xF8\x10\x02\xBD\xEC(IJ!ns7M.)\x053\xF3r\xB3\xB3\xF4\xD6Y\x8A\xC8\xE4\xCFb\xFE.6+_\xD4\xE9\xF2\x15q\x9953;K\x12\xF3\xE5\x1A)\xC8\x9F\\`h\x13\x12\xC9\n\xC5\xC2\xF8w\xE2W\x05\xB6\x8C^Zf:I\x87\xBC\xA4\xD4\xE8\xB7)\xBA$\xD3\x07\xFCY+\xE3\x8Bvw\x9D\x7FoE \xDA\xB6\x7FG\x85?\xEA\xB6\xE4\x8F\xBA\xADn\xAB\xB0\x18%A\x9CB\x04\xEE\x90\xDD\x97\xDA\x18\xDC~sE\x7F,n[P\xDD\x0F\xC4\xE4\x0E\x98\xA3\v\x8A/\\\xC3\x8B4sq\x9D{\r\x10I\xC1^\x12\x13\x84\x18\xA7\x18\f\xC7\x15\x1B\xC3h\xFA\xC2\x1F\x96K\x82-\xCEdV\xA7-\xF4fAt\n\xF2p\xC8b\xD6)\xD1\x8At\x13F+\xCAS\xD4|\xB2\xBA\xFC\xF5d\xC1\xBA\xFCF\x7F\xA1\x91\x8Bn\xF4\xDB\x1E\x8D\x0F\xDE\xA5\xBF/@\x8D\x03\xD0\x1D#[\xB78\xDC\xE6\xBEV\xF1\xB0%\nz\x9D\x81\xA9\x16\x06F\x83.6\x86\xD1\xFE<\xE5\x9E\x8EF\xD6\xAA\xA3-G\xA4`\xB5\x19\xF4\x12\x10\xE3\xB4Z\x04\x96\xAE\xB3\xC5\xC5\x9A#D\xA4\xEB$%\xFC\x89\xDD&\xD2\xEE]\xE5\xBEN\xB9\xAB\x93Bv\xC6j\xA2\xA3\xCB\xFA\xAFH\xFB\xFA\x14\xF7\x1A\xA4\b;\xD2\x1Dl\x9B\xF0\xE6X\xD6\xE9\xBD{e.\xED\xDD\xFB\xD2X\x96\xB8\xD6w~@j\xD8y\xEE\xDC\xB9s;\xCF\x0FP\xE8t0\xE8\xD58iI\xB8^\xE6N|\n\x85\xBAb\x89N\x87YR|\xFDE\x98\x02\xBE\xFE\xFC.\xCD\x92\xA2\xA3 \x8A\xB0\x99\x8CB\xB4\xEA\xE1\xCF\x19-1GR\xA29\xC2\xA0\x97t\xFE\x8Di\xA1nt\xE4/vP\x89\x0F\xDD\x95XL\xAE\xC2\xC6\x05\x97\xDA\xBBw\x98e\xFB\xDE\b\t1E\xDA\xBA\xEF\xAE\xF1q\xA6\xF8)@\xD8l\xC8\x87\x88$\xACt\x17\x01\tz\xA3U\xEF,\x1CJ\x8A\xB4K\x92\xD5id\xFE\xE0\xF0\x91v\xC1*$)\xFB<L\x13\x87jU\x1D\xBB\x87\xF8uwL\xE6\x95\xE3\xE8i_\xCDE\x1Cq\xE8+\xC3\xEC:\x05\xFEu@(\xA4\x9D\xC9I\xB8\xC6]\x11\xC4\xD5\b'KrJ\xB4e\x82\xC9x*{:\x04\xC6B\xB0\xD6M\x8A\xB5\xDCu\x91\x16;5\xD4\xBF4\xEC[9\t\xEA\x8AW\xEBq\x1E3\xF8[\x80p\xB5\xFE\r\xB2@s\xBBg\x01\x06\xC9\x10X\x82\xD2\xEC-\t\xEC\xF0Pv\x81\\lGIz\xCC\xD1\xD3\xBE\x06e\xF9O_\xB9w\xAF\xE2\xF1[p\xD1\xAC\x86\xE2\xD9\xFB7\xF7\x05y|;\xAD\xFE\xD5\xB8\xF3\x01\x93!J\xEE\xF5t\x92d\x8D\n\xF0\xD7f\x15\xAC\x82\xEE\xD2\xFC\xD5\xCCV\x14;\xC6\x8F\x06e\xB6N\xB8\x8C\x17:/\xA1r\x93\xEC\xDF\xFCXe\x8F\xC3\x8A\x85`5\xCE*v\xEAX\xC9\x1C\x1B\x87\x95\xCC\xABP\xCB\\\x017\xF8\xEEc'\xA9\xB7r`\xBD{.`\x8A\xB1\x15\x0EY\xCC6\xE8$\x11\xFEY\x01Cnd\xE1\x90N\x12\x04\x88\x16\xB3`\x15\"'\xD9\x9B3\x14\xA9\x99\x1E\xCE\vU\xA7\x8B\x1D\xA1j\xF4\xD1\xD3[\xFD\xB6\xA1ru\xF9\xEDC9\xC7\xE5\xBE\xFB\xD8\xFD4G\xB0\x142W\xDF\xB9_\x1E\x07\x1F\x05\xD8\x1D\x06\x13I\xD4U\xEE\x02Ml\xC4P\x89R=\x0E\xA9\xC3[E\xA6\x84\x89eJ\xA4\x1DJ\xBF\x1AV$\x8A\xE6'\x8E\xFA\xDE\xD0\xE5\xD2\xBBg\xD2(|\x16{\x8F\xFC\x9A\xEF\xF2m\x10\xA3\x028\x19\xB0\x8C\x8D\xD0\xE8|\xB6\xEF\r)\xC3p;\xAC\x88\xC1u\xEE\x15\x80\x98b)\x1CrF\vv\x9B\xC8\"\f\x82Q\x1E\x9B1X\x04D\xDAYL\x94\xC3&\n0\x19asFG\x8A&\x83\x18c\xB7\x89\x06\x88\xF2'\xDA\xA4X\x91\x98\xC6G2#\x1B4\xAD\x9A\x17X{\x8D\v\x8D\xB3\xA8~\xB5f\xFF\xF0\x81\x1F\xCE\xCE9\xEDK}\xE4\xBB\xEA\x17\xEB\xC3c\xCBVT\x1E\xD09?\xFF\xBB/\xD9\xD0\x19X\xCB\xE2\xAD\xBE\rB\x89\xBE\x92\xB0\xEFp/Q\xA3A\x06\xB0WcBj1g\x13cN\xC1\xB9T\xFF\x18\x13c\x9E\x1B\xC4:4:\xA4\xFF[\x1B\x8C\x10Y\xF6\xB73\x7F\xDB{B<\x11\x16'2\xF0\x85=\xEE\xAB\xD5e\x90\x8E\x90\x88\xCD\xEE*\xC063\xA1p\xC8\xA4\x04\xD9\x8A\x8E\xA2E}P\xE4H\x7F\xB0\x0E 27N\xFEt\xAA[\xD1M\xD6\xB8I\xE3H\x06\x16y\x94\xB8\x1D\x9A\xA5}5\xB0d:sD\x87\x8Dl\x8F\x0F\vm/\x8F\x1D\x14\x9E\xF6\x9D\x1B\xEB\xF0\x96ew\xD1Xv\x9E\xEE\xC4X\xB6\xF0\xC6\xD8\x15\x17>\x17\xFE:\x16\xE5[\xAF\x1D\xC1r\x8E}\xBEZ\x8Ay\x99\x89\xE5\xB2L\xB1~\xFC\x06\xFE\xB8\xA4\x7F\x95\xAE\xA0X\x98\xB3T\xB2\x82\xE40q\n\xA10\xFD\xD1\xBC&\x8E\x85)]1\xF6\xB1&\x16&\x8D\x18\xA5e\x86\xDB\xA1\x83\t\xCB\xDDe\xCA\\\x14T~\x9A\xF4L\xE7\x9F 4\x1A\x04I\x10Mz\x81\\z\x04\xBA\x80\xB0V\x96\x17nYD\x91X\x1E=-\xBCv\xA1E\xDD\v\xF9\xAA?\xFC\x8A?\x9A\x83\xE1Edb\x05\xC5m\xB8\x97\xBF\xCF\xBE*c\xE5\xAB\x95\x96Q\xE4\xED\x18lv/\x02L3\x9Dr\x8Fi\xD0KV'4H\xEA\xD4.\x1D0\xE7F\x15\x0EEE\xC9yt4\x88\x9D\f\xC5\x820\x7F}a=jz\f\vc\xB1\x8C\xFDX\x9F\x86\xB5\x9F\xBF\xFA\xF08\x8E\xAE\xF0\xD5R<r\x85\x12=\xEB\x7F\x14\xFE\xDA%:\xECht/\xB0\x99#L\x06\xBD\x9E\x89b\x18\t\xF2h\x0E\xA2-\xC2$X\xF5\xA2<\x905\xE8%\xD1\x1A\xE8\xCAl\xD6q\xCE\xD3\x02\x9E\x90\xF3\x82h\xFB\xD7\xA5d\x84}uK\x97\x0E3\xC2U\x124\xABM\xBB\x00\xC1C\xF6\xE1V,p\x97XLF\x83N\xD23\x88\xE6\b\x81)[?eV\x9B%R\x1Bt\x92$\x9A\xE9s$P\xE0\xC0P^\xFB\xB7\x9D\x06\x9D\t\xEC\x1A^#\xBFV\x9F\x17\xB6\xC6\x15\xAC\x07\x13j\xDC\xA5\x80I1\xB7Q\xE7*\x8C\x06Y\xCE\xB4\xDD\xB81@\xBB\xC9x\xF1\xD1\x812\xF5L$\xEF\x1B&z\x85[I\x8F\x96)\xDD\xAFZ\xC2\xBB\xC3\xBF\x1A\x8AE\xBC\xEA\xA8Yb\xFA\x00\x8Da\x8A\x8E\xF6M\xD1\x14\xD1c\xEF\xF32u\xF4\x0E&\x8F\xF8\xA5\xA5\x14S\xB7\xD6]\x11\fma&\x1E\xAA\xFC\xB5\xAAA.\x14\x1F<\xEAt\xAD\xD5\xC2\x14\xC2B\x1Ds\x840\xD5PR\xEA(v\x94\xC6\x18\x1C\xE91\x8F\xEE\xDD{\xFA\xDC9\xE1U\xE1h\xED\x0F\xEA\x84\xCD>\xE3\x1D\x8F\xDD1v\xFD\xC3\x00\xE3\x9F\x01\xEC\xA4>\x0FfT\xB8\v\x828@\xF4\xAF\xD6\xA8oV;\v\xCDk\x83\xDE\x7F\xC2\xDE\xB7\xEB\xAE\xBB\x9E\xBF\xF3N\xE1\xA5\xAAG\x97\b?\x1A{z\xC1w\x17_\xF8\xB9F\xBB4\xC1\x8Ae\xEE\n%F\x92\xC5\xCC\xAC\x11J\x80\xA4@\xA7k\xB5\x98\xA7\x1E!I\x95\"\x7FT$\xB9\xBBP# \x9DSz\fm\xB8#\xB9\xE3\xF0\xC7P\xA1\x19\xB3\x95\xAA=M\x11}\x93\x1F\xF5\xD5\xEA\xD2u'`B\x02\xBA\xDC\xCB\x00\xEB\xCCx\x7F0\xA7(\x879B\xB2\xC6#$\x96\x13`\xCF\x8D-\x1C\x8A\x8D\x95\xEF\x1A\x04\xC3\xA5Q.\x98\xFC\x1B\xE1'!\xBC\xFFP\xC99$w!w\xCE\xA7.$H\x13\xF5$\xD5\x8E\xD0o\xC3\x07\xB4v\xB0R\xFD6\xFC\x1D\b\xA9}\x07\xD6\xB9\xAB\"\xEDB\x84YTHs\xD8\xAC\x112#B\xB9\xE0\xF7\xEE`\x10\"\xA6\xCA\x89\x10V\x04\xD6\xF1U\xFC\x85\x0F\x03\xCA|\x10}\xED*A8W\xDEU1\x97;\xEC\xC5\x14m;\x19\xD7\xBAW\x05\"\x0EO\xA3\xE0'\xFAD&\xFA5\xFD\xA4D\x7F\xDCmyD\x1C\x1F'$9\xC9\xECIbNm(b\x91\x16\xB9c\x9Cb\xA8g(e+\xFC\xC5#\x12\x07{\xC9\v~\r\x7F\xDA\xB4%\x8F|\xD3w\xA5\xDCqi#\x14\x7F\xB9@\xD6\x1C5\xDD\x18\x18\x1E\xF55\x91|E){(\xAD\xD9\xC6\xC2!\x07\xB1 \xD2n\x8E\xD0\xEB\xACF2[U\x19 D8\x04 \xD2.\x89\xF1\xA2.\xCA\x11\xACxs\xC4\xF8\xCE|\x02Y\n\x04\x82(a\x0Eb\x82\xEF\xE75\xCB\xAEZ\xB2\xF7\xC2G\n\x07>{\xCB\xF7\x93\x98}Io\xDA\xA5\xEF\x9C\xBF[\x1E=\xF8\x9AHr\x92\xD0\xE4\x9E/k\xEB\x06\n\xCBb`\x89N5\xB4\xB3\xDD\x16!Y-H\n\xEC\x9E\x94\x15sSR\xA26\xC0\xB3\x12\xC8V\xD4\xC6\xD2\x1D\xCA\xCD\x9B .u\x9A#\x88ax\xC0g\x19\xD3\xF9\xE5{\xFDa\x9F7\x15\xCB\x95\xFA\x90\x82\xAE(*U\xEB\xF7\x16\xAF\x7FC\xDD\xF5\xDC\xE0\xBE,<R\xD9\x8C4\x03\xA38e\xD3\xD3YH\x94\xB2\xE9\x964\xFF\x9E\xE8\xDC\xFF8 Yz\x8C\x98|\xB1=\xEE\xBF\x13n\x9D\xCA.\xE8\xC0z\xBB4\x8D4\xD3:\xCDz\xBBJ\xAB\xBA\xC3{6j\xDD3\x81\fC~\xFC\fc\xE4\f\xBFCMuEZ\xF1\xA7\xE9\x92\x9C.K\xE1\x90\x9C6\x91?M\xAD;\xCD\xA9P9\xC1R\xF4Ei>MJ\xE4\x86R\x8Dj{\xE9*\x10J\xC6\xAD\xC8S\x8C*;\xE2\x90\xA3\xD0\x9Cl\xC8t\x1A\x8C\x91\x065\xC07\x9B\x9E\x9E\x10/Y3\x89\xBB\xFEP\xDFr\xDA\x94h\x9E$\xF2\xF7xZ'\x8A\x05>\xF6\xE8\xB8\x85\xF6\x8B\x84\x07\x17n\rYi\x97B\xF89\x03YX\x1B\xEE\xA5\x81\xBC3H\xE9\x101.\xC8\xDEE\xBD4\x8C\v\xB1=\x05\xF7\x13\xC5\xD1\xC5\xEC\xA2\xFC\xF4\xCD\r\xEE\xF9\x9C\xA2\xA7\x06\xF5[+\xF3\xB0Y\x13g\xECmv{\xC0\xEEl\x1F\xE9\xBF\xF1\x98\x86N\xF7\n\xA3\xCD,(K\x10L\x1E\xFC\xD8\x14OjlZ\x82\xDC\xA5\xD0\f\xA7\xA4\x8E\xF0\xA2M\xB4@\x95\x98\x10g7G\x98\xC8\xE8\xCC\x02\xC4\xDB\xAC\x96\xF4\xC9\x95\xB2p\xAB3\xA7A/\xF7\r\xE9\x0E\x87\x7F\x13\xEF\x8Ct\x1A=\b\x9B\xD9\x89\xEE\xF97\xB2\xBF\xFA|\xBE\xF5\xBE\xDB\xFE\xFC\x9A\xB7ee\xED\xD3\xBEW\xF6*\xC3\t\xDF\x9E\xA3}\vK\xC7\x96\b=c\xF7\x89\xF6\x9A%\x0F\xDFR2\x87%\xF85\x92}\x80p\x9A\xA8\xADWF\x16\xF8\x9AB\xAD\xAFV\xB7\x8FFz\xF1\xC8\xC6\xED\xEE&`\xDA\xCC\xAC\xC2!\x99\xE8\xF4\xB4\xC4\x04\xC9\x9A\x85p\xE2\xFDd\xFB\x07\xB6)\xB9\x19D\xB9\x9C?@y\xC6EH\xD7l|\x98\xD0\xE2|\xD2j\b\x1F\x81LZ%\x1A\xADf\xA2z\xF9\xACP\xA3\xE6(c\x13\x8A\xCD\xAE\xD4\x8E\x9E\xF5\xFF-\\\x12\xD2p\x93\xFB\xEA\xD4\x14!!Q\x9CH\x1E\xD2\x92\xA7%\x88J@\xC5\t$\xC2\x02!-5%9(\x18\xB6\x8B\n\xC68{\xC4\x8B\x89F`43Y]\b\x1B\x03\xC3\x9B\x89\xAA\xC2o\x9F\xC8\xB9<\xA2\x11\x9EQd\x84\x01z\xBCk\x96G97\xF03\xD2\x19\xC3\xED\xD4\x17\x90\xEDQt\xB2ML\x9E^84]\xB0\x811\x8AeN6\xA7\x99\x19,\xCB\xA5\x8C\xCBc\xF2,:SJ\xE1\x90E\xEE\x10,\xBAH\x88)\x91\x8E\xC8\x89\x02\xC9\x8F\xB7Y/-\x91\xD2\xD3\xD4\x80a\x0Er=\xE8\x9A\x91\x16\xE3\x8C\x8B\xF5\x87\n\xD3\xD3\xBC\x10\xBB\x81e\xB34\xB6\xA0q\xE17F}7\t)\x1F~\xE6\xBB\xF0'\xDFS\x97_\xF9\x9D\x93\x7F\xDC\xB8\xF1k{8.\xAC\x90\x1B\xC6e\xA7\xEE\xF9\x9F\x9D\xE5\xF9EW\xDD\xC2\\\xEC\xABW>\xE7\xFD\xDD\x9A\x92\xD2\xCB\x16,\xF54\xFF\xAF\xE1\xDE^}\x87\xDA\x1BP||\xA2\xBDA\x1Dyg\"\x94\xFA<l\x95G\xDEZ\xEAss\x84\f\x97\x18V\x07y\xD9Y\xEA\xCE\xBD@-\xE4\xE5\xE6dSM\x98.Y\x13y_\xB4*\xFC\x93M\x97\xAE\x0E\xFFb\xCFTj\x84f\xA5\xFCu\x92\x8C\f\\'\xD3\xEE\xC8\xB6\x88\xD9\xD3\n\x87\xA6\t\x16\xE6\x9A!\xA4\xA6\x88L\x96x\xD5\x8A:-\x95eLOOQ\xAD\xF8s\"t9\xF1\x85C\x11\xF2\x07!-5%\xC2h\x83\x98\x1EoSFaD\xFB\xB3\x97\">\x10+\xCC\xEF\x802\xC6\x19\x17'){\x13\xFDd\xF7\x8D\xFC\xE0\xECw\x1E\x1Fc\xDF\xDE6\xF0\xE0\x83'\xEF}\x98e\xF4\xF5\x8D~\xA7_%5\xF3\xD85\xFB\xBB.+_\xF5[V\x90\xF6\xE8\xEC;=\xF9\xC5\x1B\xFF\xFC\xE0\xDA\xB5\xBAi\x01\x1Ao\xF0\xD5Jgt\x7F\xC1\f\x94b\x87{\x05P<3\x7F2\x01g\xA5\xB3\v33\\zk>\x91X\x92\x9B\xEB\xE7p\xAE\xA5tva\xAE\xCCa\xE3x\x0E\x17\xA4\xA6\x84\xC6\xC7\x9B \xA4\xF1\xA59=cz\xE9\x04\xDE\x14\xFC\\\xAF\xDC7\x11\xD7\xBF\xC6/<\x1C\x1A\xE0xr\xDE?2\xD2\xD3\x9B\x11\xE6\x8CAn\x17\xBEZ\xF1\x1E\xEA\x19\x95v\xF1;\xB9W\x9CB\xBBpe\x84\xB4\vj\x14\x99\x19\xEC\xFF\xBEv\xE1\xEF\x17/\xDD.\x84\xF9Sj\x18\x86\x81\xA0F\x18\xDE[\xBC\x8BST+N_\xADt\x92\xF6-%a\xA7\xBB\x01\x88\x9B\x19U8\x94\x14\xE3\x8C\x90\xACQj\x041\xBB\xDF\xCD\xA9\x01\"$\x1A>%\xE4\xDA\n\x87l6I/D\x98\x8C\xA2\x1EbR\x8CS\xF1+i\xD0\x87L\xF6i'7\xF2.6\xE3Ga\x89b\xD2\x1D3&\x90\x19\xC1\xE8\xB3HO\xF9,\xBBI4\xCA\xE75T\x92#\x0E]\xDE\xC3\x0F\x7F\xFE\xAA,\x01\x8B\x17j#]'\xFBj\x85\x02],b\x90\x83o\xBA\xB7\x00\x193\xD3\xA2\xB3\x85\xC2!A`1vI\xD4\t\"\"L\x82\xD5\xC0rfL\x8F\x8F\x8B\x85\xC1\x9A\xA6\xC67\xD4\x19\x94\r\xEC\x16\xB3\xD1@\x8E\\\xB3r\xA7\x15\x0E\xC5!B\x90\xB3\xC6\xEA\"$\x11\xB0\xDB\xCC\x11\x92\xE2\xC1\xD9ja\xD3b \xD0R\xB0A\xAF\xB1\xF7\v\xCEM\x04-7\"\x03\xEEy\x14\x92u\xFA\x19\xB2B\\R\\RJ\v\xC2\x8A\xD1\x82a\xA2\n\x88\xAA(\xF1}z\xE3\x8D\xC3\xA7O\xC7\xC6.\xCAL\xFEChE\xE8\xA3\xD9B\xE1\xE6\xBD\xC3\xD1o\xEC\x1D\xFB\xDE\xAE\xDC\\\xF3\x1Da\x95\"\xC0\tH'i\x0F\x9E\x1D\xAD\xEE\xE56\xAB`4\x89!\xEC\xB5[\xCCFY\x8D7\xC8*\xA7\xCCe\xBB\xC9(Jz\xD1f\x15\xF4\x10-\xE6\x88)\xF07/<\xCETL\xBA#\xDA\xEF6De\xE2?\xFD\x1Fw\xE2^`\xD6B\xE6\x1B\xFF\x83\xF0\xA2\xFE!\x8A\x82\xF3Uw\x1B\xA02-E\x1E\x86\xC4F\x98\x8C\xD3\fb\x80\x81\fa,K\x9E\xC6\xA0\xB2-1AH\xB6\xD0tE\\\xAC$&\xAB\xFC\x12\x94-\xF8V\v\x8B\x01\xF3sL7~\x1E7:RY\xE0\t\xCC^L\xCC'10\x7F\x11\xCE\x1D#\xCD\xBC\x86\xF3DZ\xAA\x9D\xBF ~Pd\xC3z\xF7UJ\xFC\x0E\xBBh\xB0Y\x03\xDE\x91-fI\x14\xEDr\xE7b4(F\xC1\xE6\x88\xF4\xC0\xC4\xA1\xD5\x12\x98;\xD4\x12\x11\x9C\x90\xA5\xDAW9 \x1F\x82\xD1\xF7\x12+P8\xC0\n|/\t\xBF\xDC\xCB~\xF5\xF0\xC3\xBE\xCB\xF6\x8E\x95\xC8\xF8\xC8u/\xB7\x99d\xDC\xEEn\x06b\xB3\x93\n\x87\x92\x04\x96\x1C\x1FEl7\x19\x05\xAB\x9E%\b\x14\xF4\x93\x82\xC8\xCA=\xA5^\x14\x94\xD1\xB5(\x884\xB3IM&\xCAa\xB3F\x98$\xC5\x98\x9E\xBC9$\xC4\xB3d%&\t9\xC5\x99 zw\xE4\xB3\x9A\xD6A\x9B\x88\xE5\xEA\x0ET9\x1DN\xBF{\x974\xC7C7\xDEH\xD5\xADV\xB8\\\xFD\xC2\xDC\x1B?\xA5\xDA\xFE\xF4\xC6\x0F\xE5\xEA\xBE'\x9A-\fx\xDB\xCAG\x02fc\xB3\xBB\x1A(\xD0\xA7\xCC\xD0\xE7\x1Ag\x84\xF9\xDC\x9A\x9D\x99\x91(YsS\xFCN\xB7\xE8\xB7\xEAt+\x89\xD9\x04f\x9A\xD4\xE9\x16E\xD4\b4\xECK\xBA\x11\x9Bd}\x7F\"\x7F\\c\x93\xDA*L\xEA\xA1k|\xDC\f%\x1A\xF4_\x10\x8D<\xDC\xE6\xDE\x00\xE4\xE8\xE3\x93\xF5.[\x8A\xAEp(\x1E:\xC1\xC5\xF2\\N\x11F\x11\x91\x11\x06&\x19!\xB2\xB4T\xC1\n\xF2\x11\x1D\xE50\x19\x99hK\x8B\x82\x90\x97*\xC0$:M\x06\n\xAE\xC1 \x89Q\xB4\xE2\xA8\xD8\xC30\xA3!\xC4\xBE'N\xB5p\xC8\xD3\x1A\xEA\x07be\x18\xA8Ei\x02\xBCMf\xF5 FW/j\xBB\xD1\xF7\x91\x1A\xF7m\xCC6I(\xFE_\xB6^\xB6\x84-\x11-\xC1\x80p:1, \xBF*\v\xFA7\xC8\x8A\xB3\xD5\xBDx\xC2\xB8\xF4\xC9\x89\x06\xCDvA\x7FL\xFAP\xC7k\x8A\x7F\xB6\xFF4\x12}\xFA\xC4Q\xE8M\xC2\xAD\x17a\xEF\xDE\xBD\x81\xF8\xDE\x0F\x06\xE2{\xFF\x86\xE2{k=\xCB\xE5\xC1\xEB^\b\xA4\x1A\xB2\xC7\t\xBA\xDF\xB2W\xA5\x8D~NU\xCE\xC3\xBE_\x17\x11\xF2q\xD3>\x13\x8A\xF7\x046\x1B\x93P\xAEk\xD6Ng\xF9\xA5Z_\x89hd\xA0K\x1E\x05'dO'\x91\xD6\t~1NI\x8EqJ\xD6\xE9F\x8D\x1C\xA7DAH\x8E\xF9\xA2r\x1C6\xEB:\xA1\xFC\x8E\x9F\xD3\v\x97\xDCpb\xDD\xE3eV_\xA9\xCCl\xC9T.\x93\xF5y\x85\xA3\x1F\x93\x05j\x19\xB6\xC9\xA3\xD6\xA2\x99\xD3sg&\x8E\x93\xDC\xE9\x89Ai\x9D\x93\x96\x92\x9F\x96Y8\x94\x99\x92\x99\"\\\xDAq\xA0\xC6Q\x9B\xD2\x9BM\xBD3\xBB\x943\xB7\t\x9D\f\xD6\x04\x1D\xBC-\xB8z^NNN\xEE\\r\xF069\xF3\x7F\x1D\xEA\xF9-\xA7<\xE0\xF9-\x10\x05\x7F4\xD0\x1A~K\xADA\f\xF1\xB3\x98\x8Eke\x19Qk-=%9QJ\x82\xC6\x87dZ\xEA\xB4$\xD1_\x81i6\x8B\x90\xAEl=5L\xC1\xED\xA2\xD2\xD5M\xCD\x87$S'\b'l\xF9\xCB\x82\xF3\x82\x17w#\xE9\x9F!\xBB\x8F\xFFA\x9A\xAD\x89\xFF\xFF6\xABW\xFA\x01\xDF}\xBA4\xDD\t$ \v\xDB\xDC\xB5@j\x8Ck\x9C\xC0\xA8\xC6\xCA.!(7\xC9\xB9\xB2\xD0d\xCA7tS\x10\x9B\xE0\x10\xD7o\x97<\xA5\xBE!\xD4A\xC1\x84\x12\xB2#h\x944IE\x8C\xBD\xE5\xDF\xE4#\xD7\x83\xEF>\x8AC\xEA\xAF\x87w\xD8KT\x0F\t\x80\xA1\xCFp;,pb\x9D\xBB<:J\xB0YE\xB3b\xCBa\xB71\xA7#\xD2*Z\"L\x10E\x18\r\xB4R\xA4\xB39\xA3\xA7\xE6\x8B=??\xB0N\x97\xAE\xB8\x95a\xC5l\x06c~\xFB\x1F\xF6u\xDF\x97_`\x05l\xFD\vl\x19[\xF8C\xDF5\xA7|\x83\xBE\x1F\x06\x8Dp\xCFwK{\xCE\xEF\x90\xEE\xF8|\xAE\xD4\x7F\xFE\xABz\xCDn}3\xA0\xFB\xA9\xBEr\xEAX\xB3\x7F\x17k\x19\xD7\xE8b6Cd\xFE\xB9\t\xE6\xF0}\xFE\xDC\xD0\xE7\xC3o\xBD?\xE0{\xF1\xF9\xDF\xFB.\xD4\xA8\bKW\\8)\x16]\xF8\xA5Xr\xFE\xE7b\xF5\x85\xC1\x80\x07N\xAD\xCF\x9EHlp/\xB6\xDB\x84\b\x93\x18\xF4\xDC\x13i\xB5\x98D\xAD\xEF\x1E\xBB-B\x92\f\x10\xAD\x16\xB3^\xA7\xB3\x1A\"M\xA2 ]\xDA\x7FOHp\x19\x15\xDD\x90\xE02\xCD\xFE\xCDA\xE3\x1C\xF9(\xF5\xEA\xF7\r#k@\r\xEE96\xAB`2\x8ALd\x82 \xEB\x12z\nTK:\x90<\x8C\xF5[\xF9\\\xAAN\t7%\x04vP\x12f\x04\xAAs\xAF\xEF\x96\x13,\x8BU\x1E\x1E\xFB\xF9\xAFK\x83Uy\\\x9C\xFFyi\xC0\\\x19\x02Z\x01i\xA7\xBA\x9E_\xED.\x83<\xB2\xB6\v\x12\x93\xE8k\xC4\xF4d\xF1a\x8D`&\x10j\xF0\xAF\xEB\xEBD\xD1d\xD4\xEBDITW\n\xFD\x1A\x98\x1A\xCF\x8F\xC9\n\x00SL\x7FZ\xC5\xA4\xB1X\xF1\xF7\x17>\x10\x93\xC6\x9A?~\xDFw\xFC1\xE9\xD6\x87\x1F>\x7F\xF3c\x81\xB5\xFC\x1A@|\x92\xFA\x93\r\xEA\x8C\"C\x10;\x13a\xB7A\x1E7Y#t\xCC\xAC\xA0(\x84\xA0h\x92\xFB\x07\x19?Ag\x11\f\x11\xA2 \xF7!\x12\x8BP\xF7\xC5ip\x1D\xB73.\x1C\xE3\x92\xE2\x18-\xC6\xDF\x1E\x0E\xA2;<\f?\xB6d\r\xB8A\xDD\xC5\xF8\x03\x84\xD6\xA5\x03\r\xEE\x85\xCA\xEA\xFC\x045\x1AX\xAA\xF7\xD7\xA9f\x95\xFEb\xF5\x9A\xA7E\xD3\xBF}O\x83\xEA\x01\x95\xCF~|\xB5\xEB\xF2\xE15\xFC.\x0E\x93\xB5\x99QF\x9C\xFC\xBF.t\x17\x026\x83\xA9p(\xD2b&\x993ZeJ\xD4\x10\x01\xAA9\xB1\xC5<\xDEt$\xD4 UV\x9D.\xF3;r\x98\x1E\xE3\xD8}\xD7]+j\xFF\xCB\x99\x9F\x12y\x938\xB0\xF7\xD6\xC1Mm\xBA\xFB\xA53\xE7\xF3\x102\xA3X\xAC\xF8\x8C\xCA\x9AY4\xE9\x8C\xE2\xCC\xBC\f\x97d-R\x02\x84\xE7\x16\xFAg\xC6\n-\x85\xF2\x1D\x8B\xFE\xFF\xDClb\xF8Z\xCA%g\x12k\x03k*\x17\x9FD\xF4})tm%l\x06\x91\xF5c8l\xAE,\x0E\xBD\xEE\xE5\x809-V\xD6pMF\xC9\x1A\xAB\xCE\x95e(\x93)\x060u\xA6\xCC\x1A\xEB,\x1Cr:%\xBD`2\n\xEA\f\x8A)0\x83\x12i\x0F\xE7\xE2\x14\xA6\xC8\xC2\xCD\xE2\xFC3+\xBE\xB1\xE0\"\x12M\xAE\x8C\xB3\x8D\xF3\xCF\x8Ceb\x8D\xB2jd\x00y\x9B\xAD\x15\xC0\xF7\xC0\xAEx\x9B\x15g\xDA\n\x87l\xAA\xB7Y\xDD\xA5\xBD\xCD\x86\xF3e \x80E\xE8\xFB!\xE0)\xDFqv\x8Bt\x05\xF5$\x8D\xEE+\x98Q/\xF7\xBE\x14G\x87L)\x95\x9EE5E\x87\xC5\xCC\x02\xA1{\xAC\x16\x9A@P:\x12\xBD\x8EA\xA7\x89\x9A\xEB\x9FD\xA0A\x886\xA4\x8EXR\x1C\xF3\xD4\xE2\xC5\xC3lh8\x18IG\xBA\xF3\xF9\xE7\xFF7z\xDD\xFC\xCF<\xB2\xFEgO\xFF?\x13\xCF\xF0?\xF3#\xABx\xB9\xF1I\r\xE4\x1D`\x89\xDC\xDFM\xE6\x18@\xE3\x0E \xD1\b1\xDC\x15\x80\xD6\v\xC0T|\x00\\z\xC7\xFF\xE4\xDB\xFB\xE5\xDAn\x17\xF4\xD2\x82/\xC6\xABv\xF1\x8C\xCA\xAB\x7F#\xC6\xDD\xFF.\x19\xFD\xFF\xE3\xB3\xFD\xBF)>\x9B\x00Q\xA8\x15\x1E&\xDBy+\x9A\xDCWY%\xBD \xEA\x99\x10\x01\xF2\x82'\xB0LQ\xAF~\x1E,f\x83^T\xEC\x80\xAD:\xB3\xA4\x0E\x94\xAD\x16\x86Xq\xBC\x17\x96\xA0sl\xDA\xC35\xBB0\xCC\xFD\xE9>\x8DW\\\xA1\xF6\x93\x1E\xC1\xE9\xF7`\n0\xDE\xEA\xDB\xC0\x96HW\xC0\n\xB7;[\xDD\x85\x10\xDC\x7F`22\x9B<D\x97&\xDA\x1C\x91\xA7\xAA\x80\x13o.\bn*\b\xD9L\x00\x1A\xF9\x00\xAC\xB8\xF8\x86\xA7~yn\xA3\xBD\xE2\x9F\xB0\x1B\xE5T\f~\xF4\xD8j\xE5|\xF3\x7F\xFB\x16\xFBj\r\x1F\x1A>\x06`Q,\x18\x95\xE7\f\x1F\xFBj\x01c\xAAo\xB1\xAF\xCA\xF0!\x95\xA4\xF9cw\ne(\x93\xAF\x84\xB2\xC0\xF1\x94\xF0:\x9A\xA4^$H\xBDh3$c\xAB\xAE\x01s\xD9\x9D\xA8\x12\x06\xF0ea\x00ub2\xB2\xA4\x83h\x17\xCAp@\x18\xC0Z:\x97\xF1a\xA9\x17\xB5R/~/\xF5b\x93\xD4\x8BoH\xBDH\x95z\xF1\xBF\xA4^\xAC\x96zq\x97\xD4\v\xAF|M\xEF(\xC3Sr\x19\x81\xA3\x17_1\xA6bL\xD7\x80h]\x03\x1E\xD5\x8D\xA0O7\x82Gu\r8.\x9D\xC5q}\x196\xC8\xBF\x852\x1C\x95\x80\xD9\x94\xDE\x8BG\xF5\x03\x94\xF7Q\xBA\xDF\x80\xEF\xFB\xF3\xE9\x1Ap\x83t\x16N\xDD\b\xBE\xA7k\x80\xCBp/\x12t\r\x98\xA6k@\x8At\x16\xADB\x19\x1E\x90q\x16\xCA\x90(>\v\x97\xD4\v\b\x03\xD8,\xF5b\xA3\xD4\x8B}\x12\xD0 \xF5*\x87PFtl\x90\xD3\xD9\bv\xB1\x11\xDE*A\xB9\xD6\x0F`\x1F\xE5W\xF2\xD2Y\x18\xA0\xE7\xFB\x842$K\xBD\xB8O\x02\xA2u#0K\xC04\xF9Z\x02j\x84\x83H\x10\x9CxV8\x88>\x99~\x95\xEEh\xA2\xBB\x01\xC7U\x9A\x9Ad\xFCU\x9C\xC6\x1F\x1A\x1C\xFD\x07\x1B\xC1\n6\xC2\x1Fa#\xFCv6\xC2Ohp\v?\xEE\v;\xBE.\x16\xA3G\xEA\xC5!\xA9\x17\xDB\xA5^\xEC\x12~\x8D\x95\xD2R\xAC\x95\xCEb\x97\xEE\x03\xD8\xE5\xC3\b\xFCN\x18\xC0\xB5\xC2\x00\xCAdy1\x02\xD1r\x9D\xCB\xD7\xAAL\x90\x1C\xA9\xF2s\x9FF\xAE\x82\xC794\b\x1F\xA1F\xBE6$c\xA3t\x16\xFF%\x9D\xC5O\x85\x01|\"\x1D\xA4\xFA\x96\x9F\x9F\xAD)\xABW\x96\x1F#\xF0\xA9\xCC'\x7F]\xC9\xF5c\x046\x18\xEE%zZ\x8D\x80\x97\xF0\x1A@\x1D\x1BA\x13\x1BQ\xEA\x96\xCA\x00=\x93\xC2\x1A|\x8B\xA5^\xEC\x10\x06P#\f\xA0G\x02R\xE9\xE8\xC5\xD7e9f#h\x17\x06\xB0\xC8\b\x92\x97h\xE2E\xF0|\\(\xC3\xDDB\x19\x97\xCFL(\xE3o\xC98\xC8\x87\x8C\x97\x9F_\xFEC\x96\x0Fa\x80\x7F*\f\xC0(\f\xC0\xA9\x9E?\x91\xDF+\f\xE0\x07\xC2\x00\xFF\xB50\x80\x019\x0F\xC9\x9FL\xAF,\x13\x03X+\xB7\x15\x15\xC7\x1A\xB5\x9D\xDD\xA8?\x88>\xF5\xE8\xD6\x8D@'\x1D\xC4\xF52M\xB2\xDC\x13Oe\xD9\xEA\xC5>\xDDz\xC4H\xBB\xD0\x1187P\xFAFY\xB6d\x99\xB9\xC8\xF9Q\xE9\xCFt\xD6\xC9\xE5\xA9m\xEC\x92g\x99\xFFr\xFB\x98\xECL\xE5\xCAx\x8D\xC0!\xF5B/\x94\xF1Sl\x84\x7F]\xAE?YV\x83\xBFq\x03\x1B\xC1\xE5r\x1B\xD7\xBD\x8B\xA3\xE2\xBD\xD8%\xB7u\xB9\xBD\xD1\xBB@\xEDJ\x96\xE7Ge9\xD7\x9E\x85z\xEC\xA2\xF3A:;\xD8\b\xFFL\xF3\xDE\x90\xB3\xF4*\xE0\xBFVql\b?S_3\xA0<\xA39\v\xD4\xAF\x80\xDA\xE8\x84g\xB9\xCF\xA1v\x7F\x16N\x11\xCAY\xFE\xAD\xB6\xE3\xFB\xA6z\xA6\xFEj\x04f\xEA\xAFd\xBE\x9E\x85\xDC\xE7\xD4\x84\x9F\xD9\b\x8C\xE1\xEF&\x99R\xFAX\xA5\x7FV\xE4Ii\x1FJ{\xF2\x92\xBC\x1CD\xBB\xDC\x1E\xE4|\xFEv \f@\x94\xEB[(\xF3\x7FA\xE2z\xC0\xC4\xDF[\x00\x93\xB9\x05v8\xF9C\xB0\xE3\x18\x7F\x01v\f\xF2\x9F!\x12.\xEEC$Jy?\"Q\xC6\x8F#\x12\xE5\xFC\x02\"Q\xC1;\x11\t\x0F\xDD\xF5\x12\xDC\xCD\x9F@$F\xB9\x0F\x0E*\xC7\x81c\xFC\x04\x1C\x18\xE4O#\x1AN\xBE\x87\xBC\xE7\xA7 \x1A\x89|\x10N\xD8\xF9)8\xE1 \x18\xCD\x8F\xC0\t'?\x04'b\xF8_\xE0D,\x7F\x05N\xC4\xF1=p\"\x9E\xBF\b'\x12\xF8Q8\x91\xC8\x1F\x87\x13I\xFC$\x9C\x98\xC6O\"\x06N~+b\x10\xC7\xBB\x11\x83D\xFE(b\xE1\xE4\xDB\x10\x8B8\xFEO\xC4\"\x91?\x8288\xB9\x17qd\xF5\x1B\x87D\xFE5\xC4\xC3\xC9\xBF\x8Cx\xCA\x13\x8FD\xFE\x04\x12\xE0\xE4w!\x01q\x88B\x02a\x98\b;OD\"\x1C<\x01\x89p\xF2\x93HD\f?\x8FD\xC4\xF2?!\x11q\xBC\t\x89\x88\xE7g\x91\x88\x04~\x1A\x89H\xE4cHD\x12\xFF\x1D\x12\x91\xCC\xBF\x81$8\xF9\xE3HB\x1C\n\x91\x84D\xFE\x16\xA6\xC1\xC9\xEF\xC44\xC4\xC1\x82iH\xE4\x07\xE1\x82\x1D\xD3\xE0B$\xBF\x00\x17\x1CH\x82\v\x99\xFC(\\\xC8\xE5\xCF\xC1\x85\"\xFE3\xB8p\x19\x7F\n.\x94\xF2\xE5pa.\xFF)\\(\xE3[\xE1B9\xFF\x1E\\\xA8\xE0\x8B\xE1B%\xFF\x14.,\xA4r\x16\xF17\xE0\xC2b\xFE\x0E\\\xA8\xE2\xAF\xC3\x85\x1A~\x1A.\xD4\xF1\xB7\xE0\xC2jJ_\xC3\xDF\x83\vk\xF9Y\xB8\xD0\xC8\x8F\xC3\x85ut\xDDD\xD7-\xFCq\xB8\xD0Foo\xA77vS9\x8F\x11n\xC7\xF8W\xE1\xC2 \xBF\x19.<\xC3O\xC0\x85W(\xCF\xAB\x04_\xE3?E\x06\\\xFCMd\xA0\x88\x9FA\x06\xCA\xF8\xD3\xC8@9?\x89\fT\xF0\xC3\xC8\x80\x87\xEEz\t\xB6Q\x9E\xDD\xFC\x17\xC8\xC0\x1E\xFE\x1E2p\x98\xD2\x1F\xA7\xF4\x11\xBA\x1E%x\x8AR^\"\xF82?\x83L\xB8 \"\x13y\xFC\x042\x91\xCF\x9FF&\x8A\xF8Ad\xC2C\xE9^\x82m\x94\xB2\x9B\x9FG&F)\xE5\x14?\x88,\xB8\xF8O\x90\x85Y\xDC\x84,\x94\xF2\xE7\x90Exf\xA1\x9C\xBF\x8D,\xCC\xE3\x8F!\v\x15\xFC[\xC8\x82\x87rz\t\x1E\"x\x98\xE0\b\xC1Q\xFE\x13\xE4\xC0\xCE\x17 \x07\x91\x90\x90\x03\x07\xBF\n9p\xF1;\x90\x83Y\\\x87\x1C\x14\xF1\xB7\x91\x83J\xBE\x0F9\xA8\xE2\xBFE\x0E\x96\xF2\v\xC8\xC12\xFE9rPG)\xF5\xFC\x19\xE4`-\x1FB\x0E<\xF4\xAC\x97`\x1B\x7F\x079\xE8\xA0g;\xF9\x8F\x91\x83.\xBA\xDEJOm'\xB8\x93\xE0~J?\xC0\x9FE\x0E\x0E\xD1\xB3\x87\t>\xC1\xDFB\x0EF\xE8z\x94\xDF\x81\\\xB8\xF8G\xC8E)\xFF\x04\xB9(\xE3g\x91\x8Br\xFE'\xE4\xA2\x82\xBF\x87\\x\xE8\xAE\x97\xE0n\xFE!rq\x88\xAE\x0F\x13\x1C!8\xCA?\xC2,\xB8\xF8\x1F1\v\x1E\x82^\x82r\xFE|D\xF2U\xC8G&\xEFD>r\xF9\xF5\xC8G\x11\xEFC>\xE6\xF0\x7F!\x1F\xA5\x10\x91\x8FJ~\x1A\xF9\xA8\xE2\x0F\"\x1Fu\xFC\x11\xE4c-\x7F\x0E\xF9h\xA2\xFCm\xBC\x1F\xF9\xE8\xA4<]\x04\xB7S\x9E\x9D\x04wQ\xCE\xFD\x94\xFE8\xE5<\xC5\xFBQ\x80H\xDF\x18\n\xE46\x81\x02jG\x05\xC8\xE5\xC7Q\x80\"\xFES\x14`\x0E\xCC(@)\xAFD\x01\xE6\xF2\x17P\x802^\x8E\x02\x94\xF3\xBD(@\x05/D\x01\xD6\xF2OQ\x80&\xBE\x0F\x05\xF0P9^\x82-\xFC \n\xD0\xC6\x9FB\x01\xDA\xE9\xD9]\x94s7\xE6\xA1\x00G(\xFD\x98\xEF\x02\n0\xE8\xFB3\n0JO\x9D\xA2\xF4\x97\b\xBE\xCC\x9F\xC2l\xD89\xC7l8\xB8\x0F\xB3\xE1\xE2\x170\x1B\x99\xFC\x9F\x98\x8D\\\x00\xB3QD\xE9\x95\xFCC\xCCF\x15?\x8F\xD9\xA8\xA3\x94\xB5|\f\xB3\xE1\xA1\xFC^\x82-\xF4T\x1B\x95\xD6A\xF9;\tv\x11\xDCJ\xCFn\xA7gw\x12\xDCE%\xEC\xA6\xF4\xFD\xFC\x0F\x98\x8D\x03\x04G\xA9\xB4S\x9C\xA3\b.\xFE\f\x8APJ\xB0\x8C\xFF\x04E(\xE7\xEF\xA2\b\xF3\xF8A\x14\xA1\x82\x7F\x1DE\xF0\xD0]/\xC1\xDD\x942\xCA\x9FA1\xEC<\x05\xC5\x88\xE4\x1F\xA0\x18\x0E\x9E\x8Cb\xB8\xF8\x97Q\x8CY\xDC\x80bT\xF2wP\x8C*~\x16\xC5\xA8\xE3\xEF\xA1\x18\x1E\xBA\xEB%\xD8Aw;\tv\x11\xDCJ9\xB7S\xCE\x9D\x04wS\xF9\xFB\xE9\xEE\x01\xFE<\x8A\xF1\x04]\x8F\xF2/\xA3\x04\x91\xFC\xDB(A&\x7F\f%\xC8\xE5GQ\x82\"\xFE#\x94\xA0\x94?\x8B\x12\xCC\xE5\xC7P\x822\xFE\x1D\x94\xA0\x9C\xD2+\xF8n\x94\xA0\x92\xBF\x89\x12T\xF1\xC3(A\x1D\xFF1J\xB0\x96\x9F@\t\x9A\xF8+(A\v\x95\xD6F\xF9\xDB\xA9\x84\x0E\xCA\xDFI\xB0\x8B\xE0Vzv;=\xBB\x93\xE0\xCDT\xC2.\x82\xFB\xF9\x19\x94\xE0qJ\x7F\x82\x1FA\tN\xF1\x1Fa\x0E\\\xFC-\xCCA)\xFF\x00sP\xC6_\xC3\x1C\x94\xF3\xDFb\x0E*\xF8\xAB\x98\x835\xFC\x14\xE6\xC0Cy\xBC\x04w\xF3!\xCC\xC1(\x7F\v\xA5\xB0\xF3e(E$\xEFC)\x1C|)J\x91\xCC\xA3P\x8A\x14\x9E\x84R\xB8(%\x93\x1FC)r\xF93(\xC5,\x1E\x83R\x14\xD1\xF5\x1C~\x1E\xA5(C9JQ\x8E\xF9(E\x05\xE6\xA1\x14\x95|\x16J\xB1\x88\xCB)U\xDC\x8DR\xD4\xF0\n\x94b),(\xC52\x98P\x8A:^\x89R\xD4\xF3j\x94\xA2\x81g\xA3\x14ky\rJ\xD1\xC8\xABP\x8Au|%J\xD1D\xD7\x1E\xC2\xC1K\xB0\x8D\xDE\xBB\x9Br\xEE\xA1\xEB\xFD\xF4\xAE\x03\xBC\x10\xA5x\x8C'\xA3\x14\x87(\xE7a\x82G(\xCF\xE3\xFC8J\xF1\f/B)F(}\x94\xE0)\xBA\xFB\x12\xC1\x97\xF93\x98\v;?\x83\xB9p\xF0\xB71\x17.\xFE,\xE6\xA2\x96\x7F\x8C\xB9XIp\x15\xC1z\x82\x1E\xBA\xEB%\xB8\x9B\x7F\x1Fsq\x98\xAEG\b\x8E\xF2gQ\x06;oC\x19\"\xF9)\x94\xC1\xC17\xA1\f\xC9\xFC\x10\xCA\x90\xC2\x9F@\x19\xC9s\x192\xF9\xCFP\x86\\\xFE<\xCAPDp\x0E\xFF#\xCA\xE4:C\x19*\xF9~\x94\xA1\x8A\x7F\x13e\xA8\xE1\xDFB\x19\x96\xCA#'\xD4Q\x8A\xDC\xC3\x97a-\xBD\xAB\x89_@\x19\xB5\x822j\x05eh\xE3#(\xC3n>\x17e\xD8C%\xEF\xA7\xD2\x0E\xF0\xDBP\x86\xC7x\x0F\xCAp\x88r\x1E&x\x84\xF2?\xC3\xEF@\x19F(e\x94\xE0)J\x7F\x89\xE0\xCB|\x04\xE5\xB0\xF3\xAF\xA3\x1C\x91\xFC\x7FP\x0E\x07\x7F\x00\xE5H\xE6\x83(G\n\x7F\n\xE5p\xF1o\xA1\x1C\x99\xFC$\xCA\x91\xCB\xDFD9\x8A\xF8\xEB('\xBAdI\x99\x8FrT\xF2\x83(G\x15\xFF\t\xCAQ\xC3\x8F\xA1\x1CKaD9\xEA\xF8\xD3(G=\xBDe-\x7F\x01\xE5h\x82\x84rx\xA8L/\xC16\xFE\x06\xCA\xB1\x9B\xF7\xA0\x1C{\xF8\xEFP\x8E\xFDT\xDA\x01\xFE(\xCA\xF1\x18\xBF\x1F\xE58D9\x0F\x13<B\xF9\x9F\xE1\xDFG9F(e\x94\xE0)J\x7F\x89\xE0\xCB\xFC\r\xCCC$\x7F\x10\xF3\x90\xC9\xBF\x8Fy(\xE2G0\x0F\x97\x11\xAC\xE4\xEFa\x1E\xAA\xF8!\xCCC\x1D\x1F\xC4<\xAC\xE5/a\x1E\x9A\xF8#\x98\x876\xFE8*`\xE7\xD9\xA8@$_\x87\n8x\x16*\x90\xCC7\xA3\x02)\xFC:T\xC0\xC5\xE7\xA1\x02\x99\xFC+\xA8@.\xDF\x83\n\x14\xF1\xAF\xA1\x02s\xB8\xDC\xAF\xCBuR\x81J\xDE\x88\nT\xF1+Q\x81\x1A.\xA7,\x85\x01\x15\xA8\xE3\vP\x81U\xFCfT`-\xBF\t\x15h\xE4?A\x05<T\xA6\x97`\x1B\xBF\x1F\x15\xD8\xCD3P\x81=T\xF2~*\xED\x00\x9F\x85\n<\xE6\xF3\xA1\x02\x87(\xE7a\x82G(\xFF3<\n\x15\x18\xA1\x94Q\x82\xA7(\xFD%\x82/\xF3\xFBq9\x1A\xF9\x10.G\x13\x1FB%\x96q\x1F*\xD1\xC8GQ\x89u\xFCO\xA8D\x13]\x0F\xF2\x97\xB1\x10\x8D\xFC},\xC4:\x00\v\xD1\xC4\xDF\xC7\",\xE1\xAFc\x11\x96\xF3\xD7Q\x855\xFC,\xAA\xD0H\xD7\xEB\xF8\x87\xA8\xC2z\xEEC\x15\x9A(e\x90\x7F\x80jT\xF2s\xA8F\x15\xFF\x07\xAA\xE5_\xA8\xC6R\x14\xA1\x1A\xCBP\x88j\xAC\xA0\xEB:\xFEOT\xA3\x016Tc\r\x16\xA2\x1A\x1D\xF4T'\xC1.\x82[\xA9\x84\xED\x94s'\xC1\xFD\x94~\x80\xBF\x81j<\xC1\xFF\x86j\f\xCA\xB5\x8CJ\xFE\x01jP\xC5?C\rV@D\r\xEA\xF9\xA7\xA8A'\xA5w\x11\xDCJw\xB7\xF3\v\xA8\xC1N\x82\xFB\xF9\x07X\x82&~\x16K0\xC8\xFF\t\xB9/\xB1a)\x96\xC1\x82\xE5\xB0\xF3\xF3X\x8EH\xBE\x0F\xCB\xE1\xA0\xEBJ\xFE.\x96\xA3\x8A\x1F\xC5r\xD4\xF0#X\x8E:\xFES,G\x03tX\x8E\xB5\xFC4\x96\xA3\x83\xF2t\x12\xEC\"\xB8\x95\xF2o\xA7\x9C;\t\xEE\xA2\x9C\xFB\xF9Y\xAC@#LX\x81&\x98P\x8BU\xFCS\xD4\xA2\x91\x9FE-\xD6q\x8EZ\xC2m%Jy\rVb\x15\xFF\x17V\xD2\xDD\x95\xC4\x9D\x95\xEA]\x19\xF3:\x1A\xBD\xD4a\r\xFF\x14uh\xE4o\xA3\x0E\xEB\xF8\x18\xEA\xB0\x9E\xBF\x8E:4Q\xCA \xFF#Va\r?\x8FU\xC4\xD9\xD5X\xC4\xCFa5\xD6\xF2\x7F\xA1\x1Ev\xFE-\xD4#\x92?\x8Bz8\xF87Q\x8Fd\xFEO\xD4#\x85`%\xFF\x1B\xEA\xB1\x88\xFF\x1D\xF5XL\xB0\x8A\xD2\xABq\x05\xEAQ\xC3\xCF\xA3\x1EK\xC0P\x8F\xA5\xB0\xA2\x1E\xCB`F=\x96S\xCA\nJ\xA9\xA5\xEB\x95\x04\xEB\xF89\xD4c\x15]\xAF\xA6\xD2\xEA\xE9\xBA\x81\x9EZ\x83+Q\x8F\xB50\xA0\x1E\x8D\xB8\n\xF5X\x87\xC5\xA8\xC7z\xF9K\x83&J\xD9\x80D\xD4\xA3\x83\xB0\xDAL\xF0Z\x82\x9D\x04\xBB\bv\xF3\xCFP\x8F\xAD\x84\xE7u\x04{\bn\xA7\xB7\xEF x#\xC1\x9D\x04\xF7\xD3S\x07\xF8\x9B\xA8\xC7\x13\xFC\x13\xD4c\x10\xA9h \x99o \x8Du\r\x92\xF9\xA7X\x83\x14\x82s\x10\x8D5\xA8\xE4\x1CkP\xC5\xFF\x865X\x02\x11kP\xC7?\xC6\x1AtPz'\xC1.\x82[)\xCFv\xBA\xBB\x93\xE0~\x00k0\x88\x14\xAC\xC5 \x80F\xD8\xF9n4\"\x12\x02\x1A\xE1\xE0\xFF\x85F\xE2B#q\xA1\x11\x95\xFC\xF7h\xC4\"\xFE[4\xA2\x8A\xBF\x83F\xD4\xF0w\xD1\x88\x15\xB0\xA1\x11u\xFCm4\xA2\x81\xFF\x0F\x1A\xD1A97\x13\xBC\x96`'\xC1-\x04\xBB\bn\xA5\x12\xAE#\xD8Cp;\x95\xB0\x83\xE0N\x82\xFB)\xE7\x01\xFE\v\xAC\x83\x9D?\x85u\x88D\x1C\xD6\xC1\xC1\x7F\x8AuH\xE6\x7F\xC7:\xA4\x10\xAC\xE4\x7F\xC0:,\xE2\x7F\xC5:T\xF1\xBF`\x1Dj\xF8\x9F\xB1\x0E+`\xC1:\xAA\x93uh\xE0\xFF\xC0:tP\xCE\xCD\x04\xAF%\xD8Ip\v\xC1.\x82[\xA9\x84\xEB\b\xF6\x10\xDCN%\xEC \xB8\x93\xE0~\xCAy\x80\xFF\x06\xEBi$\xB9\x1E\x8B\xF8\x8BX\x8F*~\x12\xEBQ\xC7_\xC6z\xAC\xE6\xAFb=\xB6\xF2\x93h\x82\x9D\xDF\x83&D\x02h\x82\x83\x7F\x15MT\xB7MT\xB7MT\xB7MX\xC4\xDFB\x13\xAA\xF8\xDBhB\r\x7F\x07MT\xB7M\xA4\x8B5Q\xDD6Q\xDD6Q\xDD6Q\xDD6Q\xDD6Q\xDD6Q\xDD6a+\x95p\x1D\xC1\x1E\x82\xDB\xA9\x84\x1D\x04w\x12\xDCO9\x0F\xF0\x9F\xC3C\xFA\xBE\x87\xF4}\x0F\xE9\xFB\x1E\xD2S<\xA4\xEF{H\xDF\xF7\x90\xBE\xEF!}\xDFC\xFA\xBE\x87\xF4}\x0F\xE9\xFB\x1E\xD2\xF7=\xA4\xEF{H\xDF\xF7\x90\xBE\xEF!}\xDFC\x9A\xBE\x874}\x0Fi\xFA\x1E\xD2\xF4=\xA4\xE9{H\xD3\xF7\x90\xA6\xEF!M\xDFC\x1A\xBD\x874z\x0Fi\xF4\x1E\xD2\xE8\xBD\x84\xA7\x97\xF0\xF4\x12\x9E^\xC2\xD3Kxz\tO/\xE1\xE9%<\xBD\x84\xA7\x97\xF0\xF4\x12\x9E^\xC2\xD3Kxz\tO/\xE1\xE9%<\xBD4/\xE1%l\xBD\x84\xAD\x97\xB0\xF5\x12\xB6^\xC2\xD6K\xD8z\t[/a\xEB%l\xBD\x84\xAD\x97\xB0\xF5\x12\xB6-p\x01h#\xFD\xA5\r\xA5\xFCghC\x19\x1FD\x1B\xCA\xF9;h#\xFD\xA5\r\x15\xFC\x01\xB4\xD3\x88\xB1\x9DF\x8C\xED4bl\xC7B\xFE\t\xDAi\xDC\xD8N\xE3\xC6v\x1A7\xB6\xD3\xB8\xB1\x83\xBE\x9E\x1D\xF4\xF5\xEC\xA0\xAF\xE7fJ\xD9L)\x9B)\xA5\x93R:)\xA5\x93R\xBA(\xA5\x8BR\xBA(e+}I\xB7\xD2\x97t+}C{(\xA5\x87Rz(e;\xF5\xE7\xDB\xA9?\xDFN=\xF9\x0EJ\xD9A);(\xE5F\xEA\xF9w\xAAP\xBE\xBB\x93\xEE\xEE\xA4\xFE\x7F'\xE5\xD9\x03\x17?\x8E\xFDh\xE4\xAFa?\xD6\xF1\xDFc?\x9A\xF8k\x18\x80\x8B\x1F\xC3\x00Jy\n\x06P\xC6\xAF\xC6\x00\xCA\xF9w0\x80\nn\xC3\x00<t\xD7KP\x1E\xAD\r`\x94\x1F\xC3!\x92\x84C$\x03\x87H\x06\x0E\x91\f\x1C\"\x198D2p\x88d\xE0\x10\xC9\xC0!\x92\x81C$\x03\x87H\x06\x0ES\t\x87\xA9\x84\xC3T\xC2a*\xE10\x95p\x98J8L%\x1C\xA6\x12\x0ES\t\x87\xA9\x84\xC3T\xC2\x11\xE2\xE9\x11\xE2\xE9\x11\xE2\xE3Q\xB8\xF8Wp\x14\xA5H\xC3Qy\f\x8E\xA3(\xC7\x12\x1C\x95\xC7q8\n\x0F\xDD\xF5\x12\xDC\xED\xFB+\x8Eb\x94\x7F\x05\xC7\xE0\xE2\xF7B\xD6\x8D.\xC31\x94\xC1\ry$\xBB\x1A\xC7\xE4Q\x1E\x8E\xC1Cw\xBD\x04w\xFB>\xC11\x8C\xF2{\xF1$\\\xFC&<)\xEB^x\x12e\x98\x8E'Q\x8E\xB9x\x12\x150\xE0Ix\xE8\xAE\x97\xE0n\xDF\xEF\xF1$F\xF9M\x18\x84\x9D\x1F\xC1 \x1C\xFC\x10\x06\xE1\xE2\xBB0\x88\xC5\xFCu\f\xA2\x8E\x9F\xC1 \xEA\xF9\xDF0\x88\x06\xFE\x17\fb\r\xEC\x18D#b1\x88u\x98\x81A4\xD1\xB5\x87\x9E\xF2\x12\xDC\xED\xFB#\x061\xCAw\xE18\\\xFC\x05\x1CG)/\xC6q\x94\xF1>\x1CG9?\x86\xE3\xA8\xE03p\x1C\x1E\xBA\xEB%\xB8\x9B\xDF\x85\xE3\x18\xE5/`\x18.,\xC10J\xF9\x0E\f\xA3\x8C\xDF\x8Ca\x94\xF3\xD3\x18F\x05o\xC50v\xA3\x00#\xC4\xA9\x11\xE2\xD4\bqj\x8485B\x9C\x1A!N\x8D\x10\xA7F\x88S#\xC4\xA9\x11\xE2\xD4\bqj\x94J\x18\xA5~c\x94\xCA\x19\xA5rF\xA9\x9CQ*g\x94\xCA\x19\xA5rF\xA9\x9CQ*g\x94\xCA\x19U\xCB\x91\xFB\x8DQ\xEA7F\xA9\xDF\x18\xA5~c\x94\xFA\x8DQ\xEA7F\xA9\xDF\x18\xA5~c\x94\xFA\x8DQ\xEA7F\xA9\xDF\x18\xA5~c\x94\xFA\x8DQ\xEA7F\xA9\xC7\x18\xA5\x1E\xE3\x14\xF5\x15\xA7H\xAEN\x91\\\x9D\xA2\xBE\xE2\x14I\xD7K\x94\xFE\x12\xA5\xBFD)/S\xCA\xCB\x94\xF22\xA5\xBCB=\xC9+\xD4\x93\xBCB=\xC9+\xD4\x87\xBCB}\xC8+\xD4\x87\xBCB}\xC8\xABt\xF75\x82\xF2_\x86\xFA\xDF\x8C\xBB\x99\xC4\xBE\"d\vO\v\xAF\x8A\x11\xE2\x95\xE2\x93\xE2'R\x9At\xA5\xE4\x91n\x92~\xAD\x93tW\xEB^\xD3\xA7\xE9w\xE9?2\xA4\x1A\x06\x8C\xB1\xC6E\xC6{\x8C?6\xBEm\xD2\x9B6G$F4D\xFC\xD2\x9Cl\xBE\xD6<`~\xCF\xB2\xC4r\x97\xE5\xFB\x96\xF7\xAD)\xD6j\xEBW\xAD?\xB79mm\xB6\xD7\xED\x97\xD9\x1F\xB2\x8FF&D\xCE\x8F\xBC%\xF2\xA9\xC8\xBF;\xB2\x1D\x8D\x8E^\xC7\xA3\x8E\x13\x8E\xDFG!jg\xD4\xEB\xD1\xD3\xA3wD\xBF\xE6\xCCv~\xCDy&\xC6\x12\xB36fO\xCC\x91XG\xEC\xDA\xD8o\xC7\tq\xD7\xC4}'\xEE\\|m\xFCC\xF1\xCF\xC6\x9FO(I\xD8\x94\xB0/\xD1\x968+\xF1\xBB\x89\x1F$U%\x8DL[<\xED\xEB\xC9H\xBE1\xF9\xCF\xC9\x9F\xA6\x88)\xF6\x94\xA4\x94\xAC\x94\xE2\x94+S\x96\xA4\xACI\xF1\xA6t\xA7\xECH\xB9#eO\xCA\xA9\x94\xB7R>L\xF9G*R-\xA9\xF1\xA9\xAE\xD4\xC2\xD4\x8A\xD4\xAA\xD4/\xA5\xBE\x98V\x9C\xB6?=/\xBD1\xFD\xC0t\xFB\xF4\x033\ng<8\xE3\x89\x19\xEF\xCEx\xD7u\xA5\xEB9\xD7s\x19\x11\xF4\xBF5\xE3\xA9\xE0\x7Ff~\xE6u\x99\xD7e\xC5d\xDD\x9D\xF5qvavSvS\xF6\xE3\xF4\xFF\xD7\x9C\x999m9m9O\xE4N\xCF\xFD~^A\xDEh\xDE\x1Ff\xEAf.\x9B\xF9\xC0\xCC_\xCC\xFCxV\xE1\xAC\xC2Y\x15\xB3\x1E\x98u$??\xBF.\xBF?\xFF\xED\x82\x8A\x82\xFB\v\x06\v>(\x9CU\xF8\xE9\xEC\xDA\xD9\x07g\x7FZ\xB4\xA2\xE8\xE1\xA2\x17\x8B\xED\xC5\xCB\x8Bo)~\xEF\xB2\xBA\xCB\xCE\x94\\^\xF2\x9D9\xE69\x9Ds\xBE:\xE7Gs\xCE\x95\xC6\x94..\xBD\xB6\xF4\xC9\xD2\x7F\xCCM\x9E\xBB|\xEE\xF5s\xF9\\^\x96[V]\xD6^6X\xEE,\x9F[\xDE\\\xFE\xFA\xBC\xDAy\x9FU\\]\xF1\x8D\x8Aw//\xBF\xFC\xA7\x97\x0F_\x91w\xC5\rW\xDCv\xC5\x9F\xAE8w\xE5\xFA+\xDB\xAE|\xE1\xCA\xD7\xDC\x95\xEEC\xF3\x13\xE6\xDF2\xFF\xA3\xF9\xFF\xBA\xAA\xF9\xAA7\x16\\\xBE\xE0'\x95\xC6Jg\xE5M\x95|\xE1\xD2\x85k\x17\xFE|\xE1\xC9E\xB9\x8B\xE6,zf\xF1\xC2\xC5o.\xFE\xA0\xAA\xA9\xEA\x9D\xEA\xEB\xAA}5\r5?[\x92\xB9\xE4\x9E%\xEF-u/\xED]z\xF3\xD2\xD1e\xCEeW/\xEBX\xF6\xADe?Xvty\xF4\xF2\xAE\xE5\xA7\x97\xFFnE\xDC\x8A\x86\x15\x9E\x15O\xAFx\xBE\xD6^[S{[\xED\x93\xB5\xFFZ9ke\xCF\xCA\x9BW\xBE\xB3\xF2\xA3\xBA\xCB\xEB\xAA\xEB\x0E\xD7\x8D\xADjX\xF5\xEC\xAA_\xAD^\xB4\xFAh}v\xFDe\xF5\xDF\xA9\xFFaC~CY\xC3\x13\r\xFF\xBD\xA6`\xCD\xBC5?]\x9B\xB7\xF6\xE9\xB5#\x8D\x8B\x1A\xEB\x1A\xFF{\xDD\xA2u\x0F\xAD\xB7\xADoX\xFF\xF3\xA6\x05M'6\xCC\xDC0w\xC3\xE1\xAB\xD3\xAF\xFE\xF1\xD5\xC77\x16n\xAC\xD8xt\xE3\xB3\xD7$]\xD3{\xCDHsL\xF3\xDA\xE6\x96\xE6#\xCDO{L\x9E\x18\xCFj\xCF[\x9E\x0F\xBD\xD5\xDE\xD5\xDE\xBB\xBD/z\xFF\xDE\x12\xD52\xBBeE\xCB\x96\x96--\xF7\xB4|\xD8jhMo]\xD8zd\x93e\xD3\x9AM{6\xED\x01\x03\xD8\x9D\xA8\x83\x01K A\x80\x04\xC0Nk\xCF\x83\x10\xC8\xA6!\x9Ee\x06l\x1B\xEAU\x8B\t\x19\x9AH\x97 \x03\x07\x18p\xB5z-\"\x16\xAD\xEA\xB5\x04\x07nT\xAFu\x88\xC5=\xEA\xB5\x1EF<\xA2^\x1BP\x8A\x01\xF5\xDA\x88\x18\xBC\xAB^\x9B\x90\x8As\xEA\xB5\x19\xD1,F\xBD\xB6 \x89eC\x04\x93L\x00\x06\xD8\x02\xF5\x9A!\x8A\xFDE\xBD\x16`c\\\xBD\x161S\xB0\xAA\xD7\x12\xA6\ve\xEA\xB5\x0E3\x85\xF5\xEA\xB5\x1E\x91\xC2\x9D\xEA\xB5\x01]\xC2\x83\xEA\xB5\x11\xB9\xA2N\xBD6\xE1\n\xB1@\xBD6#S\xDC\xA2^[0G\xBC\x7FA\xF7\xD6\xED=\x1Dm\xED}i\xD9\xDE\x9C\xB4\xA2\xC2\xC2\xD9i\x9E\xEDiWu\xB4\xB5vvoK\xCBL\xAB\xEA\xEE\xDC\xD2\xDA\x9BV\xDD\xE5\xCDO\xAB\xEE\xEA\xED\xEB\xE9\xF7\xF6utw\xF5\xA6y'|\xB0\xBEnM^^\xFE\xD2\xFE\x1B:\xD2V5w\xF5\xD6\xB5\xB6\xF5w6\xF7\x04~\xA7\xA9\t\xE5iWeV\x8DK\x9D\x9D_\x94V\x9E\xB6\xC2\xDB\xD7\xEDi\xEDI\x9B]4\x93\x8A\x95\xB3\xC9\xB9({GoZsZOk[Go_kOkKZ_OsK\xEB\x96\xE6\x9Ek\xD3\xBA7M\x8C\xF5\x84\x89Kz:z\xFD\xBF\x9B\xBBZ\xD2\x16\xB47\xF7t\xB6\xF6\xFAKh\xEF\xEB\xDBZ^P\xB0m\xDB\xB6\xFC\xFE\x9Em[\xB7\xE6\xB7\xB4\xB6\xB4\xF6v\xB4u\xB9=J\x86\xE6\xAE\x96vz:\xDF\xDB\xBD\x05\v\xD0\x8D\xAD\xD8\x8E\x1Et\xA0\r\xED\xE8C\x1A\xB2\xE1E\x0E\xD2P\x84B\x14b6\xD2\xE0\xC1v\xA4\xE1*\xCA\xD3\x8ANtc\x1B\xD2\x90\x894T\xA1\x1B\x9D\xD8\x82V\xF4\"\r\xD5\xE8\x82\x17\xF9\xEAU/\xFA\xD0\x83~x\xD1\x87\x0EtSJ\x1A\xBC_\xE0\x8D\xF5\xB2\xD2\x8F<\xE4!\x1FK\xD1\x8F\x1B\xD0\x814\xACB3\x95U\x87V\xB4\xA1\x1F\x9DhF\xCF\x04\xF7\xD3\xC2r\x94\x13\r\x99\xA8\x9AB\xDE\xD9\xC8G\x11\xD2\xE8\x99\x15DA7<hE\x0F\xD20\x1BE\x98\xA9\xC1\xD6_\x9A\xBF\xAC`\xE9\x1DTr3\xD2\xD0C\xA5wP\x9D\xB4\xD2\xAF\x16\xA4Q\xFD4\xA3\x05\xAD\xD8Bo\xBD\x16i\xE8\xC6\xA6/T\xD7S\xCF\xB9\x84\xEA\xBCw\xDC}\x19k\x19\x9B\x05h',:\xD5\xF4\xD0\x92eN\xF5a+\xCAQ\x80\x02l\xA3\xFF|\xF4\xA3\x07\xDB\xB0\x15[\x91Ot\xB4\xD0\xB3\xF2s]p\xC3\x13R\x82\xF2\x9Ev\xCD\xBB\xF3I\x1A\xB6 `\xDF5\xC9\x1F\xBBS\xBD\x10!A\x07=\f0\xC2\x84\b\x98a\x81\x156\xD8\x11\t\x07\xA2\x10\r'b\x10\x8B8\xC4#\x01\x89H\xC24$#\x05\xA9HC:\xA6c\x06\\\xC8@&\xB2\x90\x8D\x1C\xE4\"\x0F31\v\xF9( F\x16\xA1\x18\x97\xA1\x04sP\x8A\xB9\xB4b0\x0F\x15\xB8\x1CW\xE0J\xB81\x1FWa\x01*\xB1\x10\x8B\xB0\x18U\xA8F\r\x96\xD0|\xDAr\xAC@-V\xA2\x0E\xAB\xB0\x9A\xE6y\xD6`-\x1A\xB1\x0E\xEB\xD1\x84\r\xB8\x1A\x1Bq\r\x9A\xE1\x81\x97*h\x13\t~\x076\xE3Z\xAA\x8A.j\x12\xD7\xA1\x87\xC4\xA3\x1F\xD7c\x1Bn\xC0v\xEC\xC0\x8D\xD8\x89\x9Bp3n\xC1\x97\xB0\v\xB7\xE2\xCB\xB8\r\xB7\xE3\x0E\xDC\x89\xBBp7\xBE\x82\xAF\xE2\x1E\xDC\x8B\xFB\x00\xEC\xC6\x1E\x00\xF7S-}\x1D\x0Fj*\xEFa|\x1B\xC0~\x1C\xC0#\xF8_\xF8.\x80\xEFQ\xFAc\x18\xC0\x0F\x01\x1C\xC2a\x1C\xC1\xE3x\x02?\xC2\x8Fq\x14\xC7\xF0$\x06\xF1\x13\x00O\xE1i&\xE0gx\x06\xC7\x99\x88\xE7\xF0s\xFC\x02C\x18\xC6\xF3\x18\xC1\t\x8C\xE2\x05\xFC\x12\xBF\xC2\xAFq\x12/\xE2\x14^b\x12^\xC6+x\x15\xAF\xE1u\xBC\xC1tL\x8F3x\x8B\xF6\xE5\xBD\x8Dw\xF0.3\xE0 >dF\xFC\x06\x9F\xE0\xEF\xCC\x84\x8F\xF1O\xFC\x03\xE7\xF0G\xFC\r\x7F\xC6_\xF0'|\x84\xBF\xB2\bff\x16fe6f\xC7\x18|,\x929X\x14\x8B\x06g`N\x16\xC3bY\x1C\x8Bg\t,\x91%\xB1i,\x99\xA5\xB0T\x96\xC6\xD2\xD9t6\x03\xFF\xC2g\xCC\xC52X&\xCBb\xD9,\x87\xE5\xB2<6\x93\xCDb\xF9\xAC\x80\x15\xB2\xD9\xAC\x88\x15\xE3sv\x19+asX)\x9B\xCB\xCAX9\x9B\xC7*\xD8\xE5\xEC\nv%s\xB3\xF9\xEC*\xBC\x87\xB3l\x01\xABd\v\xD9\"\xB6\x98U\xB1jV\xC3\x96\xB0\xA5l\x19[\xCEV\xB0Z\xB6\x92\xD5\xB1Ul5\xABg\rl\r[\xCB\x1A\xD9:\xB6\x1E\xE7q\x01\xEF\xE3\x03\xD6\xC46\xB0\xAB\xD9Fv\rkf\x1E\xE6e-\xAC\x95mbm\xAC\x9Du\xB0\xCD\xECZ\xD6\xC9\xB6\xB0.\xD6\xCD\xB6\xB2\xEBX\x0F\xEBe}\xAC\x1F\xBF\xC7\x1F\xD8\xF5l\x1B\xBB\x81mg;\xD8\x8Dl'\xBB\x89\xDD\xCCna_b\xBB\xD8\xAD\xEC\xCB\xEC6\xFC\x0F\xFE\x9B\xDD\xCE\xEE`w\xB2\xBB\xD8\xDD\x80qSO3}\xCB\x84M\x1D\xD2\xC2\xFE\x9En]_GgK\xAB~K\xB3\xB7\xA7\xBB\x8BRL\xBD\x9B\xFA\xDA\xB7omo\xED\xB2mm\xED\xE9\xE8n\xF1\xB6v\xD1w\xC70_\xC9ehV\xCE\xFA\xF9\x9E\x9E\xD6\xEB[\xF5\xCDt2\xCC\xEFn\xEB\xEEj\xBD\xD6\xD0\xAC\x9C\xCD\v\xBC\x1D=\xDE\xFE-\x9B:[o0{\x83\xD7\x11\vZ\xBA\xFB\x9A\xBDr\xA1\x11\xDE\xC0\xA5\xBE\xD2\xDB,\x17\xD9\xA2\x9C*\xBD=\xDD\xCD}\xFA\x16:\x19\x16\xAA\xEFmU\xDF\xBBPyo+\x9D\"\x16\x06\xCBk\r\\\x1A\x16\xAA\xD8\xB4*g\xFDB\xA5\xE0V:\x99\x17kpk\xD3\xE0\xB68XV[\xE0\xD2\xB2\xD8\xDB\xBDeK\xB3\xFA\xA3M\xF3\xC3\\\xA5)\xA7=x-Uy\x9A{\xA4vOs\x8F\xBEZ\xA9\xDF\x0E:\x19\xAAUJ:TJ\xAA\x15J:\x94\x1A\xACVq\xEEP\xCEBu\x8D\xD0\xB1\xD9\\\xA3y\xC7\xE6\xE0\xB5e\x89\x16\xABkC~\xB4\xF5\xB4\xB6vu6w\xB5tx\xF5K\x9B\xBD\xFD}\xAD\xFAN:Y\x96j\xF3uj~\xE8\x97*\x15\xD4I'iiKw\x9F\xD4\xD9\xD2\xDD\xA7_\xAE<\xDF\xA5<\xBF\\\xFB|\x97\xF6\xF9\xE5\xCA\xF3]J\x05w5o\xED\xEE\xED\xEB\xE9\xDE\xDA\xDE*.\xECj\x13[\xBB\xDA\f+T\xE2\xBBU\xE2W(\xC4w\xD3\xC9\xBA\xA2\xBD\xBF\xAB\xAD\xB9\xA7\x7FKgs\x7F\x9F\xB5[\xFBK_\xA7\xE0\xD0\xA3\xE0P\xA7\xC5\xA1G\x8BC\x9D\x82C\x8FrZ\xA5<\xD5K'\xF3*M5\xF6j\xAAq\xB5\xB6\xB4>mi\xAB\x95b\xFA\x94\x1AY-\xB3\xB4Ofi\xBD\xC2\xD2~\x85\xA5\xF5*U\xFD*U\xF5\nU\xFDt\xD2\xD5\xF7tt\xB5\xE9\xFAeh\xAD\x0F\xA1\xB0_\xFB\xCBP\xAF\xB2\xBE_m<k4\xD8n\xD3\\7j\xAE\xB7\x07\xAF\xF5\xEB\x14Zw\xD0)b]P\x8Cw\x04.u\x9D\xDD]m\xBD\x96UZz{\xB5\xC2\xAC\xD4\x84G\x1E\xEA\x99\xFB\x82\xD7\x11\xF5r\xF3\xBFV\xFEm\xEAm\xDD\xD2\xE1\xED\xEE\xEC\xEE25wu\xF7\xB5v\xB6v4\xEB\x95\xBE\xC2\xD8\xE5Q.\"6u\xB4\xF5\xF7\xB4\xB64\xF7\xB6\x9B\x9A7ut\x14\x16\x16\x15\xCE\xB5^\xD7\xDF-\xF7!\xD7\xB7\xF6\xF4\xB6\xB6\x98z\x9A[:\xBC\xCD\x9D\xAD7\x98Z{\xFB:\xB64\xF7\xB5\xB6\x18Z\xBA\xFB\xB64\xF7\xB5\v\x9B:\x84M\x9D\xD6M\xDD\xFD=\xBD\xFD\xD4\xFF\xF4\xF7\x18[\xBA\xFB:[{{7\x03O\x14\xB2\x9F\xB0\xEA\xF8\xDB\xEFM\xF6\xDBt\xB3\xC7\x01\xD3\x01RA\x0E\x04\xB4\x9D\xC0\xD7\xDFt@\xC8\xF1\xDF3\x1D0|,\xFF6\x1D`\xCF\xAB\xE7C\xA6\x03\x82\xA4\x1Cr\x9A\xFF\x90\xEF\x89?6\x1D\xD0\x7Fn:\xA0[\xA3\x9C\xE54\x7F\xDE\xC0\x91\xA3\x1E\xA2\xE6\xBE\xA8<\xEB?\xA4o+\xE7q\xCFh\xAF'\xFA\x1D~H\x93\x9C'9\x024\xAAg\x99v\x99^\xF1\x9BJZ\xC8Y\x93\xAE}\xDE\x7F\x7F\xB2C8\x13J\xAB\xF6\xD0\xD6\xA7\xF4\x17\xD3\x01&\xF3\xC0\xA3\xE0\x8DN\xD3\x01\xFCBI\xA3\xE3P\xF0\x10\xE6\xAB\xFC\xC8\x0E\xE2\xA6\xBD7a\xDE\xA9\xA4\x85\xD7\x9D\xA4\xD2\xE0\x97\x03m\xDD\xA9\xCF\xC82\xE3\xCF/_\x8B+\x95\xB3?]\xA6\xD3\xFF[{\x90<\xF8\x9F\xF1\xD7\x97_\x1E\xB6\xABy\xA4`~)V9\f3\xA5^JS\xEBG>\xFCx\xCAr\xA8\xEB\x0E\xADW\xE2\x8F\x8A\x13\xD5\x8DZ\xAE\xB8,Xf\xA0\x0ErL\x07tvE\x96\r35|P\x0F\x86\x8B\xFF\x16\xF4\xA1\xBF\xE5\x83\xF8\xECoC\xEB\x82\xEF\x91y\xE7\x977\xFFY~\x9E\xAE\x9FWh\xA1\xB4(\xE5\x90\xF1\xA2\xEB\xB0\xB6%>\xA7\xBE[.\xB3U\xA5E\xA6;Ay\x1F\xE1\xA9\xBES\xAE#\xFF\xEF\xC0\xF9C\xE5^H\xBA\xA6]\x84\x97\xE3\xCF?iy\xE1\xF9T9\xA5\xFA\x98\x1E,\xD7\xCF\xB7\x89\xF0$|4\xEF\xD1\xDE#~\xFEx|y\x93\x9D'\xA3?\xD0\x87}s\x02\x1A\xC3\xCE\x97\xA2\xD5/\x7F!4\x9CQ\x7F7j~OB\xB3,\x9B\xFE:\n\xBC\xEF\xC7\x97\xAE\xDB\x00-\x87B\xDB\xAA\xFC.\xE35J\x19\xB2\xDCP\xBBX\x13l\x1F\xDA~NN\x93\x9F\x95\xF3i\xDB\x81\xD2n\xFF\xAF\x00\x00\x00\xFF\xFFb\xBB\xC7v\xDC\x07\x01\x00")));
		_bindata = $makeMap($String.keyFor, [{ k: "default_assets/font/luxisr.ttf", v: default_assetsFontLuxisrTtf }]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/lzw"] = (function() {
	var $pkg = {}, $init, bufio, errors, fmt, io, decoder, sliceType, arrayType, arrayType$1, arrayType$2, ptrType, sliceType$1, funcType, errClosed, errOutOfCodes, NewReader;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	decoder = $pkg.decoder = $newType(0, $kindStruct, "lzw.decoder", true, "compress/lzw", false, function(r_, bits_, nBits_, width_, read_, litWidth_, err_, clear_, eof_, hi_, overflow_, last_, suffix_, prefix_, output_, o_, toRead_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.bits = 0;
			this.nBits = 0;
			this.width = 0;
			this.read = $throwNilPointerError;
			this.litWidth = 0;
			this.err = $ifaceNil;
			this.clear = 0;
			this.eof = 0;
			this.hi = 0;
			this.overflow = 0;
			this.last = 0;
			this.suffix = arrayType.zero();
			this.prefix = arrayType$1.zero();
			this.output = arrayType$2.zero();
			this.o = 0;
			this.toRead = sliceType.nil;
			return;
		}
		this.r = r_;
		this.bits = bits_;
		this.nBits = nBits_;
		this.width = width_;
		this.read = read_;
		this.litWidth = litWidth_;
		this.err = err_;
		this.clear = clear_;
		this.eof = eof_;
		this.hi = hi_;
		this.overflow = overflow_;
		this.last = last_;
		this.suffix = suffix_;
		this.prefix = prefix_;
		this.output = output_;
		this.o = o_;
		this.toRead = toRead_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4096);
	arrayType$1 = $arrayType($Uint16, 4096);
	arrayType$2 = $arrayType($Uint8, 8192);
	ptrType = $ptrType(decoder);
	sliceType$1 = $sliceType($emptyInterface);
	funcType = $funcType([ptrType], [$Uint16, $error], false);
	decoder.ptr.prototype.readLSB = function() {
		var _r, _tuple, code, d, err, x, y, y$1, y$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; code = $f.code; d = $f.d; err = $f.err; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(d.nBits < d.width)) { break; } */ if(!(d.nBits < d.width)) { $s = 2; continue; }
			_r = d.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			d.bits = (d.bits | (((y = d.nBits, y < 32 ? (((x >>> 0)) << y) : 0) >>> 0))) >>> 0;
			d.nBits = d.nBits + (8) >>> 0;
		/* } */ $s = 1; continue; case 2:
		code = ((((d.bits & ((((y$1 = d.width, y$1 < 32 ? (1 << y$1) : 0) >>> 0) - 1 >>> 0))) >>> 0) << 16 >>> 16));
		d.bits = (y$2 = (d.width), y$2 < 32 ? (d.bits >>> y$2) : 0) >>> 0;
		d.nBits = d.nBits - (d.width) >>> 0;
		$s = -1; return [code, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readLSB }; } $f._r = _r; $f._tuple = _tuple; $f.code = code; $f.d = d; $f.err = err; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readLSB = function() { return this.$val.readLSB(); };
	decoder.ptr.prototype.readMSB = function() {
		var _r, _tuple, code, d, err, x, y, y$1, y$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; code = $f.code; d = $f.d; err = $f.err; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(d.nBits < d.width)) { break; } */ if(!(d.nBits < d.width)) { $s = 2; continue; }
			_r = d.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			d.bits = (d.bits | (((y = ((24 - d.nBits >>> 0)), y < 32 ? (((x >>> 0)) << y) : 0) >>> 0))) >>> 0;
			d.nBits = d.nBits + (8) >>> 0;
		/* } */ $s = 1; continue; case 2:
		code = ((((y$1 = ((32 - d.width >>> 0)), y$1 < 32 ? (d.bits >>> y$1) : 0) >>> 0) << 16 >>> 16));
		d.bits = (y$2 = (d.width), y$2 < 32 ? (d.bits << y$2) : 0) >>> 0;
		d.nBits = d.nBits - (d.width) >>> 0;
		$s = -1; return [code, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readMSB }; } $f._r = _r; $f._tuple = _tuple; $f.code = code; $f.d = d; $f.err = err; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readMSB = function() { return this.$val.readMSB(); };
	decoder.ptr.prototype.Read = function(b) {
		var b, d, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; d = $f.d; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			if (d.toRead.$length > 0) {
				n = $copySlice(b, d.toRead);
				d.toRead = $subslice(d.toRead, n);
				$s = -1; return [n, $ifaceNil];
			}
			if (!($interfaceIsEqual(d.err, $ifaceNil))) {
				$s = -1; return [0, d.err];
			}
			$r = d.decode(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [0, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.Read }; } $f.b = b; $f.d = d; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.Read = function(b) { return this.$val.Read(b); };
	decoder.ptr.prototype.decode = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, c, code, d, err, i, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; c = $f.c; code = $f.code; d = $f.d; err = $f.err; i = $f.i; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r = d.read(d); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			code = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				d.err = err;
				/* break; */ $s = 2; continue;
			}
			if (code < d.clear) {
				(x = d.output, x$1 = d.o, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1] = ((code << 24 >>> 24))));
				d.o = d.o + (1) >> 0;
				if (!((d.last === 65535))) {
					(x$2 = d.suffix, x$3 = d.hi, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3] = ((code << 24 >>> 24))));
					(x$4 = d.prefix, x$5 = d.hi, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5] = d.last));
				}
			} else if ((code === d.clear)) {
				d.width = 1 + ((d.litWidth >>> 0)) >>> 0;
				d.hi = d.eof;
				d.overflow = (y = d.width, y < 32 ? (1 << y) : 0) << 16 >>> 16;
				d.last = 65535;
				/* continue; */ $s = 1; continue;
			} else if ((code === d.eof)) {
				d.err = io.EOF;
				/* break loop; */ $s = 2; continue s;
			} else if (code <= d.hi) {
				_tmp = code;
				_tmp$1 = 8191;
				c = _tmp;
				i = _tmp$1;
				if ((code === d.hi) && !((d.last === 65535))) {
					c = d.last;
					while (true) {
						if (!(c >= d.clear)) { break; }
						c = (x$6 = d.prefix, ((c < 0 || c >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[c]));
					}
					(x$7 = d.output, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i] = ((c << 24 >>> 24))));
					i = i - (1) >> 0;
					c = d.last;
				}
				while (true) {
					if (!(c >= d.clear)) { break; }
					(x$9 = d.output, ((i < 0 || i >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[i] = (x$8 = d.suffix, ((c < 0 || c >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[c]))));
					i = i - (1) >> 0;
					c = (x$10 = d.prefix, ((c < 0 || c >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[c]));
				}
				(x$11 = d.output, ((i < 0 || i >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[i] = ((c << 24 >>> 24))));
				d.o = d.o + ($copySlice($subslice(new sliceType(d.output), d.o), $subslice(new sliceType(d.output), i))) >> 0;
				if (!((d.last === 65535))) {
					(x$12 = d.suffix, x$13 = d.hi, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13] = ((c << 24 >>> 24))));
					(x$14 = d.prefix, x$15 = d.hi, ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15] = d.last));
				}
			} else {
				d.err = errors.New("lzw: invalid code");
				/* break loop; */ $s = 2; continue s;
			}
			_tmp$2 = code;
			_tmp$3 = d.hi + 1 << 16 >>> 16;
			d.last = _tmp$2;
			d.hi = _tmp$3;
			if (d.hi >= d.overflow) {
				if (d.width === 12) {
					d.last = 65535;
					d.hi = d.hi - (1) << 16 >>> 16;
				} else {
					d.width = d.width + (1) >>> 0;
					d.overflow = (y$1 = (1), y$1 < 32 ? (d.overflow << y$1) : 0) << 16 >>> 16;
				}
			}
			if (d.o >= 4096) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		d.toRead = $subslice(new sliceType(d.output), 0, d.o);
		d.o = 0;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f.c = c; $f.code = code; $f.d = d; $f.err = err; $f.i = i; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.decode = function() { return this.$val.decode(); };
	decoder.ptr.prototype.Close = function() {
		var d;
		d = this;
		d.err = errClosed;
		return $ifaceNil;
	};
	decoder.prototype.Close = function() { return this.$val.Close(); };
	NewReader = function(r, order, litWidth) {
		var _1, _r, _tmp, _tmp$1, _tuple, br, d, litWidth, ok, order, r, y, y$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; br = $f.br; d = $f.d; litWidth = $f.litWidth; ok = $f.ok; order = $f.order; r = $f.r; y = $f.y; y$1 = $f.y$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, 0, 0, 0, $throwNilPointerError, 0, $ifaceNil, 0, 0, 0, 0, 0, arrayType.zero(), arrayType$1.zero(), arrayType$2.zero(), 0, sliceType.nil);
		_1 = order;
		if (_1 === (0)) {
			d.read = $methodExpr(ptrType, "readLSB");
		} else if (_1 === (1)) {
			d.read = $methodExpr(ptrType, "readMSB");
		} else {
			d.err = errors.New("lzw: unknown order");
			$s = -1; return d;
		}
		/* */ if (litWidth < 2 || 8 < litWidth) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (litWidth < 2 || 8 < litWidth) { */ case 1:
			_r = fmt.Errorf("lzw: litWidth %d out of range", new sliceType$1([new $Int(litWidth)])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			d.err = _r;
			$s = -1; return d;
		/* } */ case 2:
		_tuple = $assertType(r, io.ByteReader, true);
		br = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			d.r = br;
		} else {
			d.r = bufio.NewReader(r);
		}
		d.litWidth = litWidth;
		d.width = 1 + ((litWidth >>> 0)) >>> 0;
		d.clear = (y = ((litWidth >>> 0)), y < 32 ? (1 << y) : 0) << 16 >>> 16;
		_tmp = d.clear + 1 << 16 >>> 16;
		_tmp$1 = d.clear + 1 << 16 >>> 16;
		d.eof = _tmp;
		d.hi = _tmp$1;
		d.overflow = (y$1 = d.width, y$1 < 32 ? (1 << y$1) : 0) << 16 >>> 16;
		d.last = 65535;
		$s = -1; return d;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f._1 = _1; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.br = br; $f.d = d; $f.litWidth = litWidth; $f.ok = ok; $f.order = order; $f.r = r; $f.y = y; $f.y$1 = y$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	ptrType.methods = [{prop: "readLSB", name: "readLSB", pkg: "compress/lzw", typ: $funcType([], [$Uint16, $error], false)}, {prop: "readMSB", name: "readMSB", pkg: "compress/lzw", typ: $funcType([], [$Uint16, $error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "decode", name: "decode", pkg: "compress/lzw", typ: $funcType([], [], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}];
	decoder.init("compress/lzw", [{prop: "r", name: "r", anonymous: false, exported: false, typ: io.ByteReader, tag: ""}, {prop: "bits", name: "bits", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "nBits", name: "nBits", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Uint, tag: ""}, {prop: "read", name: "read", anonymous: false, exported: false, typ: funcType, tag: ""}, {prop: "litWidth", name: "litWidth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "clear", name: "clear", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "eof", name: "eof", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "hi", name: "hi", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "overflow", name: "overflow", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "last", name: "last", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "suffix", name: "suffix", anonymous: false, exported: false, typ: arrayType, tag: ""}, {prop: "prefix", name: "prefix", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "output", name: "output", anonymous: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "o", name: "o", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "toRead", name: "toRead", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errClosed = errors.New("lzw: reader/writer is closed");
		errOutOfCodes = errors.New("lzw: out of codes");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/color/palette"] = (function() {
	var $pkg = {}, $init, color;
	color = $packages["image/color"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = color.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/gif"] = (function() {
	var $pkg = {}, $init, bufio, bytes, lzw, errors, fmt, image, color, palette, draw, io, reader, decoder, blockReader, interlaceScan, sliceType, sliceType$1, sliceType$2, sliceType$3, arrayType, ptrType, sliceType$4, sliceType$5, arrayType$1, ptrType$4, ptrType$5, errNotEnough, errTooMuch, errBadPixel, interlacing, readFull, readByte, uninterlace, Decode, DecodeConfig, init;
	bufio = $packages["bufio"];
	bytes = $packages["bytes"];
	lzw = $packages["compress/lzw"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	image = $packages["image"];
	color = $packages["image/color"];
	palette = $packages["image/color/palette"];
	draw = $packages["image/draw"];
	io = $packages["io"];
	reader = $pkg.reader = $newType(8, $kindInterface, "gif.reader", true, "image/gif", false, null);
	decoder = $pkg.decoder = $newType(0, $kindStruct, "gif.decoder", true, "image/gif", false, function(r_, vers_, width_, height_, loopCount_, delayTime_, backgroundIndex_, disposalMethod_, imageFields_, transparentIndex_, hasTransparentIndex_, globalColorTable_, delay_, disposal_, image_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.vers = "";
			this.width = 0;
			this.height = 0;
			this.loopCount = 0;
			this.delayTime = 0;
			this.backgroundIndex = 0;
			this.disposalMethod = 0;
			this.imageFields = 0;
			this.transparentIndex = 0;
			this.hasTransparentIndex = false;
			this.globalColorTable = color.Palette.nil;
			this.delay = sliceType$4.nil;
			this.disposal = sliceType$1.nil;
			this.image = sliceType$5.nil;
			this.tmp = arrayType$1.zero();
			return;
		}
		this.r = r_;
		this.vers = vers_;
		this.width = width_;
		this.height = height_;
		this.loopCount = loopCount_;
		this.delayTime = delayTime_;
		this.backgroundIndex = backgroundIndex_;
		this.disposalMethod = disposalMethod_;
		this.imageFields = imageFields_;
		this.transparentIndex = transparentIndex_;
		this.hasTransparentIndex = hasTransparentIndex_;
		this.globalColorTable = globalColorTable_;
		this.delay = delay_;
		this.disposal = disposal_;
		this.image = image_;
		this.tmp = tmp_;
	});
	blockReader = $pkg.blockReader = $newType(0, $kindStruct, "gif.blockReader", true, "image/gif", false, function(r_, slice_, err_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.slice = sliceType$1.nil;
			this.err = $ifaceNil;
			this.tmp = arrayType.zero();
			return;
		}
		this.r = r_;
		this.slice = slice_;
		this.err = err_;
		this.tmp = tmp_;
	});
	interlaceScan = $pkg.interlaceScan = $newType(0, $kindStruct, "gif.interlaceScan", true, "image/gif", false, function(skip_, start_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.skip = 0;
			this.start = 0;
			return;
		}
		this.skip = skip_;
		this.start = start_;
	});
	sliceType = $sliceType(interlaceScan);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	sliceType$3 = $sliceType(color.Color);
	arrayType = $arrayType($Uint8, 256);
	ptrType = $ptrType(image.Paletted);
	sliceType$4 = $sliceType($Int);
	sliceType$5 = $sliceType(ptrType);
	arrayType$1 = $arrayType($Uint8, 1024);
	ptrType$4 = $ptrType(decoder);
	ptrType$5 = $ptrType(blockReader);
	readFull = function(r, b) {
		var _r, _tuple, b, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = io.ReadFull(r, b); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if ($interfaceIsEqual(err, io.EOF)) {
			err = io.ErrUnexpectedEOF;
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: readFull }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	readByte = function(r) {
		var _r, _tuple, b, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = r.ReadByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		b = _tuple[0];
		err = _tuple[1];
		if ($interfaceIsEqual(err, io.EOF)) {
			err = io.ErrUnexpectedEOF;
		}
		$s = -1; return [b, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: readByte }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	blockReader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _tuple, b, blockLen, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; b = $f.b; blockLen = $f.blockLen; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			$s = -1; return [0, b.err];
		}
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		/* */ if (b.slice.$length === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (b.slice.$length === 0) { */ case 1:
			blockLen = 0;
			_r = b.r.ReadByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			blockLen = _tuple[0];
			b.err = _tuple[1];
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.err];
			}
			if (blockLen === 0) {
				b.err = io.EOF;
				$s = -1; return [0, b.err];
			}
			b.slice = $subslice(new sliceType$1(b.tmp), 0, blockLen);
			_r$1 = readFull(b.r, b.slice); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			b.err = _r$1;
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				$s = -1; return [0, b.err];
			}
		/* } */ case 2:
		n = $copySlice(p, b.slice);
		b.slice = $subslice(b.slice, n);
		$s = -1; return [n, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: blockReader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.b = b; $f.blockLen = blockLen; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	blockReader.prototype.Read = function(p) { return this.$val.Read(p); };
	decoder.ptr.prototype.decode = function(r, configOnly) {
		var _1, _i, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, br, c, configOnly, d, err, err$1, err$2, err$3, err$4, i, litWidth, lzwr, m, n, n$1, nExtraBytes, ok, p, pixel, r, rr, ti, useLocalColorTable, x, x$1, x$2, x$3, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; br = $f.br; c = $f.c; configOnly = $f.configOnly; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; i = $f.i; litWidth = $f.litWidth; lzwr = $f.lzwr; m = $f.m; n = $f.n; n$1 = $f.n$1; nExtraBytes = $f.nExtraBytes; ok = $f.ok; p = $f.p; pixel = $f.pixel; r = $f.r; rr = $f.rr; ti = $f.ti; useLocalColorTable = $f.useLocalColorTable; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		_tuple = $assertType(r, reader, true);
		rr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			d.r = rr;
		} else {
			d.r = bufio.NewReader(r);
		}
		_r = d.readHeaderAndScreenDescriptor(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (configOnly) {
			$s = -1; return $ifaceNil;
		}
		/* while (true) { */ case 2:
			_r$1 = readByte(d.r); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			c = _tuple$1[0];
			err$1 = _tuple$1[1];
			/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 5:
				_r$2 = fmt.Errorf("gif: reading frames: %v", new sliceType$2([err$1])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } */ case 6:
				_1 = c;
				/* */ if (_1 === (33)) { $s = 9; continue; }
				/* */ if (_1 === (44)) { $s = 10; continue; }
				/* */ if (_1 === (59)) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === (33)) { */ case 9:
					_r$3 = d.readExtension(); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					err$1 = _r$3;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return err$1;
					}
					$s = 13; continue;
				/* } else if (_1 === (44)) { */ case 10:
					_r$4 = d.newImageFromDescriptor(); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$2 = _r$4;
					m = _tuple$2[0];
					err$2 = _tuple$2[1];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return err$2;
					}
					useLocalColorTable = !((((d.imageFields & 128) >>> 0) === 0));
					/* */ if (useLocalColorTable) { $s = 16; continue; }
					/* */ $s = 17; continue;
					/* if (useLocalColorTable) { */ case 16:
						_r$5 = d.readColorTable(d.imageFields); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						_tuple$3 = _r$5;
						m.Palette = _tuple$3[0];
						err$2 = _tuple$3[1];
						if (!($interfaceIsEqual(err$2, $ifaceNil))) {
							$s = -1; return err$2;
						}
						$s = 18; continue;
					/* } else { */ case 17:
						if (d.globalColorTable === color.Palette.nil) {
							$s = -1; return errors.New("gif: no color table");
						}
						m.Palette = d.globalColorTable;
					/* } */ case 18:
					if (d.hasTransparentIndex) {
						if (!useLocalColorTable) {
							m.Palette = $appendSlice((color.Palette.nil), (x = d.globalColorTable, $subslice(new sliceType$3(x.$array), x.$offset, x.$offset + x.$length)));
						}
						ti = ((d.transparentIndex >> 0));
						if (ti < m.Palette.$length) {
							(x$2 = m.Palette, ((ti < 0 || ti >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ti] = (x$1 = new color.RGBA.ptr(0, 0, 0, 0), new x$1.constructor.elem(x$1))));
						} else {
							p = $makeSlice(color.Palette, (ti + 1 >> 0));
							$copySlice(p, m.Palette);
							i = m.Palette.$length;
							while (true) {
								if (!(i < p.$length)) { break; }
								((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = (x$3 = new color.RGBA.ptr(0, 0, 0, 0), new x$3.constructor.elem(x$3)));
								i = i + (1) >> 0;
							}
							m.Palette = p;
						}
					}
					_r$6 = readByte(d.r); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$4 = _r$6;
					litWidth = _tuple$4[0];
					err$2 = _tuple$4[1];
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
						_r$7 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$2])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						$s = -1; return _r$7;
					/* } */ case 22:
					/* */ if (litWidth < 2 || litWidth > 8) { $s = 24; continue; }
					/* */ $s = 25; continue;
					/* if (litWidth < 2 || litWidth > 8) { */ case 24:
						_r$8 = fmt.Errorf("gif: pixel size in decode out of range: %d", new sliceType$2([new $Uint8(litWidth)])); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						$s = -1; return _r$8;
					/* } */ case 25:
					br = new blockReader.ptr(d.r, sliceType$1.nil, $ifaceNil, arrayType.zero());
					_r$9 = lzw.NewReader(br, 0, ((litWidth >> 0))); /* */ $s = 27; case 27: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					lzwr = _r$9;
					$deferred.push([$methodVal(lzwr, "Close"), []]);
					_r$10 = readFull(lzwr, m.Pix); /* */ $s = 28; case 28: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$2 = _r$10;
					/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 29:
						/* */ if (!($interfaceIsEqual(err$2, io.ErrUnexpectedEOF))) { $s = 31; continue; }
						/* */ $s = 32; continue;
						/* if (!($interfaceIsEqual(err$2, io.ErrUnexpectedEOF))) { */ case 31:
							_r$11 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$2])); /* */ $s = 33; case 33: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
							$s = -1; return _r$11;
						/* } */ case 32:
						$s = -1; return errNotEnough;
					/* } */ case 30:
					_r$12 = lzwr.Read($subslice(new sliceType$1(d.tmp), 0, 1)); /* */ $s = 34; case 34: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					_tuple$5 = _r$12;
					n = _tuple$5[0];
					err$3 = _tuple$5[1];
					/* */ if (!((n === 0)) || (!($interfaceIsEqual(err$3, io.EOF)) && !($interfaceIsEqual(err$3, io.ErrUnexpectedEOF)))) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (!((n === 0)) || (!($interfaceIsEqual(err$3, io.EOF)) && !($interfaceIsEqual(err$3, io.ErrUnexpectedEOF)))) { */ case 35:
						/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 37; continue; }
						/* */ $s = 38; continue;
						/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 37:
							_r$13 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$3])); /* */ $s = 39; case 39: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
							$s = -1; return _r$13;
						/* } */ case 38:
						$s = -1; return errTooMuch;
					/* } */ case 36:
					nExtraBytes = 0;
					/* while (true) { */ case 40:
						_r$14 = br.Read($subslice(new sliceType$1(d.tmp), 0, 2)); /* */ $s = 42; case 42: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
						_tuple$6 = _r$14;
						n$1 = _tuple$6[0];
						err$4 = _tuple$6[1];
						nExtraBytes = nExtraBytes + (n$1) >> 0;
						if (nExtraBytes > 1) {
							$s = -1; return errTooMuch;
						}
						if ($interfaceIsEqual(err$4, io.EOF)) {
							/* break; */ $s = 41; continue;
						}
						/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 43; continue; }
						/* */ $s = 44; continue;
						/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 43:
							_r$15 = fmt.Errorf("gif: reading image data: %v", new sliceType$2([err$4])); /* */ $s = 45; case 45: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							$s = -1; return _r$15;
						/* } */ case 44:
					/* } */ $s = 40; continue; case 41:
					if (m.Palette.$length < 256) {
						_ref = m.Pix;
						_i = 0;
						while (true) {
							if (!(_i < _ref.$length)) { break; }
							pixel = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
							if (((pixel >> 0)) >= m.Palette.$length) {
								$s = -1; return errBadPixel;
							}
							_i++;
						}
					}
					if (!((((d.imageFields & 64) >>> 0) === 0))) {
						uninterlace(m);
					}
					d.image = $append(d.image, m);
					d.delay = $append(d.delay, d.delayTime);
					d.disposal = $append(d.disposal, d.disposalMethod);
					d.delayTime = 0;
					d.hasTransparentIndex = false;
					$s = 13; continue;
				/* } else if (_1 === (59)) { */ case 11:
					/* */ if (d.image.$length === 0) { $s = 46; continue; }
					/* */ $s = 47; continue;
					/* if (d.image.$length === 0) { */ case 46:
						_r$16 = fmt.Errorf("gif: missing image data", new sliceType$2([])); /* */ $s = 48; case 48: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
						$s = -1; return _r$16;
					/* } */ case 47:
					$s = -1; return $ifaceNil;
				/* } else { */ case 12:
					_r$17 = fmt.Errorf("gif: unknown block type: 0x%.2x", new sliceType$2([new $Uint8(c)])); /* */ $s = 49; case 49: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
					$s = -1; return _r$17;
				/* } */ case 13:
			case 8:
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return $ifaceNil; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.br = br; $f.c = c; $f.configOnly = configOnly; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.i = i; $f.litWidth = litWidth; $f.lzwr = lzwr; $f.m = m; $f.n = n; $f.n$1 = n$1; $f.nExtraBytes = nExtraBytes; $f.ok = ok; $f.p = p; $f.pixel = pixel; $f.r = r; $f.rr = rr; $f.ti = ti; $f.useLocalColorTable = useLocalColorTable; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decoder.prototype.decode = function(r, configOnly) { return this.$val.decode(r, configOnly); };
	decoder.ptr.prototype.readHeaderAndScreenDescriptor = function() {
		var _r, _r$1, _r$2, _r$3, _tuple, d, err, fields, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; err = $f.err; fields = $f.fields; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: reading header: %v", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		d.vers = ($bytesToString($subslice(new sliceType$1(d.tmp), 0, 6)));
		/* */ if (!(d.vers === "GIF87a") && !(d.vers === "GIF89a")) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!(d.vers === "GIF87a") && !(d.vers === "GIF89a")) { */ case 5:
			_r$2 = fmt.Errorf("gif: can't recognize format %q", new sliceType$2([new $String(d.vers)])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		d.width = ((d.tmp[6] >> 0)) + (((d.tmp[7] >> 0)) << 8 >> 0) >> 0;
		d.height = ((d.tmp[8] >> 0)) + (((d.tmp[9] >> 0)) << 8 >> 0) >> 0;
		fields = d.tmp[10];
		/* */ if (!((((fields & 128) >>> 0) === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((((fields & 128) >>> 0) === 0))) { */ case 8:
			d.backgroundIndex = d.tmp[11];
			_r$3 = d.readColorTable(fields); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple = _r$3;
			d.globalColorTable = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
		/* } */ case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readHeaderAndScreenDescriptor }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.fields = fields; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readHeaderAndScreenDescriptor = function() { return this.$val.readHeaderAndScreenDescriptor(); };
	decoder.ptr.prototype.readColorTable = function(fields) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, d, err, fields, i, j, n, p, x, x$1, x$2, x$3, x$4, x$5, x$6, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; d = $f.d; err = $f.err; fields = $f.fields; i = $f.i; j = $f.j; n = $f.n; p = $f.p; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		n = (y = ((1 + ((((fields & 7) >>> 0) >>> 0)) >>> 0)), y < 32 ? (1 << y) : 0) >> 0;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, ($imul(3, n)))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: reading color table: %s", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [color.Palette.nil, _r$1];
		/* } */ case 3:
		_tmp = 0;
		_tmp$1 = $makeSlice(color.Palette, n);
		j = _tmp;
		p = _tmp$1;
		_ref = p;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = (x = new color.RGBA.ptr((x$1 = d.tmp, x$2 = j + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), (x$3 = d.tmp, x$4 = j + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])), (x$5 = d.tmp, x$6 = j + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6])), 255), new x.constructor.elem(x)));
			j = j + (3) >> 0;
			_i++;
		}
		$s = -1; return [p, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readColorTable }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.d = d; $f.err = err; $f.fields = fields; $f.i = i; $f.j = j; $f.n = n; $f.p = p; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readColorTable = function(fields) { return this.$val.readColorTable(fields); };
	decoder.ptr.prototype.readExtension = function() {
		var _1, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, _tuple$2, _tuple$3, b, d, err, err$1, err$2, err$3, err$4, extension, n, n$1, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; b = $f.b; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; extension = $f.extension; n = $f.n; n$1 = $f.n$1; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readByte(d.r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		extension = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		size = 0;
			_1 = extension;
			/* */ if (_1 === (1)) { $s = 6; continue; }
			/* */ if (_1 === (249)) { $s = 7; continue; }
			/* */ if (_1 === (254)) { $s = 8; continue; }
			/* */ if (_1 === (255)) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === (1)) { */ case 6:
				size = 13;
				$s = 11; continue;
			/* } else if (_1 === (249)) { */ case 7:
				_r$2 = d.readGraphicControl(); /* */ $s = 12; case 12: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === (254)) { */ case 8:
				$s = 11; continue;
			/* } else if (_1 === (255)) { */ case 9:
				_r$3 = readByte(d.r); /* */ $s = 13; case 13: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				b = _tuple$1[0];
				err$1 = _tuple$1[1];
				/* */ if (!($interfaceIsEqual(err$1, $ifaceNil))) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ case 14:
					_r$4 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$1])); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					$s = -1; return _r$4;
				/* } */ case 15:
				size = ((b >> 0));
				$s = 11; continue;
			/* } else { */ case 10:
				_r$5 = fmt.Errorf("gif: unknown extension 0x%.2x", new sliceType$2([new $Uint8(extension)])); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } */ case 11:
		case 5:
		/* */ if (size > 0) { $s = 18; continue; }
		/* */ $s = 19; continue;
		/* if (size > 0) { */ case 18:
			_r$6 = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, size)); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			err$2 = _r$6;
			/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 21:
				_r$7 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$2])); /* */ $s = 23; case 23: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$s = -1; return _r$7;
			/* } */ case 22:
		/* } */ case 19:
		/* */ if ((extension === 255) && ($bytesToString($subslice(new sliceType$1(d.tmp), 0, size))) === "NETSCAPE2.0") { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if ((extension === 255) && ($bytesToString($subslice(new sliceType$1(d.tmp), 0, size))) === "NETSCAPE2.0") { */ case 24:
			_r$8 = d.readBlock(); /* */ $s = 26; case 26: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$2 = _r$8;
			n = _tuple$2[0];
			err$3 = _tuple$2[1];
			/* */ if (!($interfaceIsEqual(err$3, $ifaceNil))) { $s = 27; continue; }
			/* */ $s = 28; continue;
			/* if (!($interfaceIsEqual(err$3, $ifaceNil))) { */ case 27:
				_r$9 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$3])); /* */ $s = 29; case 29: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				$s = -1; return _r$9;
			/* } */ case 28:
			if (n === 0) {
				$s = -1; return $ifaceNil;
			}
			if ((n === 3) && (d.tmp[0] === 1)) {
				d.loopCount = ((d.tmp[1] >> 0)) | (((d.tmp[2] >> 0)) << 8 >> 0);
			}
		/* } */ case 25:
		/* while (true) { */ case 30:
			_r$10 = d.readBlock(); /* */ $s = 32; case 32: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
			_tuple$3 = _r$10;
			n$1 = _tuple$3[0];
			err$4 = _tuple$3[1];
			/* */ if (!($interfaceIsEqual(err$4, $ifaceNil))) { $s = 33; continue; }
			/* */ $s = 34; continue;
			/* if (!($interfaceIsEqual(err$4, $ifaceNil))) { */ case 33:
				_r$11 = fmt.Errorf("gif: reading extension: %v", new sliceType$2([err$4])); /* */ $s = 35; case 35: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				$s = -1; return _r$11;
			/* } */ case 34:
			if (n$1 === 0) {
				$s = -1; return $ifaceNil;
			}
		/* } */ $s = 30; continue; case 31:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readExtension }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.b = b; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.extension = extension; $f.n = n; $f.n$1 = n$1; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readExtension = function() { return this.$val.readExtension(); };
	decoder.ptr.prototype.readGraphicControl = function() {
		var _r, _r$1, _r$2, _r$3, d, err, flags, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; d = $f.d; err = $f.err; flags = $f.flags; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 6)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: can't read graphic control: %s", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 3:
		/* */ if (!((d.tmp[0] === 4))) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (!((d.tmp[0] === 4))) { */ case 5:
			_r$2 = fmt.Errorf("gif: invalid graphic control extension block size: %d", new sliceType$2([new $Uint8(d.tmp[0])])); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		flags = d.tmp[1];
		d.disposalMethod = (((flags & 28) >>> 0)) >>> 2 << 24 >>> 24;
		d.delayTime = ((d.tmp[2] >> 0)) | (((d.tmp[3] >> 0)) << 8 >> 0);
		if (!((((flags & 1) >>> 0) === 0))) {
			d.transparentIndex = d.tmp[4];
			d.hasTransparentIndex = true;
		}
		/* */ if (!((d.tmp[5] === 0))) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if (!((d.tmp[5] === 0))) { */ case 8:
			_r$3 = fmt.Errorf("gif: invalid graphic control extension block terminator: %d", new sliceType$2([new $Uint8(d.tmp[5])])); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return _r$3;
		/* } */ case 9:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readGraphicControl }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.d = d; $f.err = err; $f.flags = flags; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readGraphicControl = function() { return this.$val.readGraphicControl(); };
	decoder.ptr.prototype.newImageFromDescriptor = function() {
		var _r, _r$1, d, err, height, left, top, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; d = $f.d; err = $f.err; height = $f.height; left = $f.left; top = $f.top; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 9)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			_r$1 = fmt.Errorf("gif: can't read image descriptor: %s", new sliceType$2([err])); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return [ptrType.nil, _r$1];
		/* } */ case 3:
		left = ((d.tmp[0] >> 0)) + (((d.tmp[1] >> 0)) << 8 >> 0) >> 0;
		top = ((d.tmp[2] >> 0)) + (((d.tmp[3] >> 0)) << 8 >> 0) >> 0;
		width = ((d.tmp[4] >> 0)) + (((d.tmp[5] >> 0)) << 8 >> 0) >> 0;
		height = ((d.tmp[6] >> 0)) + (((d.tmp[7] >> 0)) << 8 >> 0) >> 0;
		d.imageFields = d.tmp[8];
		if ((left + width >> 0) > d.width || (top + height >> 0) > d.height) {
			$s = -1; return [ptrType.nil, errors.New("gif: frame bounds larger than image bounds")];
		}
		$s = -1; return [image.NewPaletted(new image.Rectangle.ptr(new image.Point.ptr(left, top), new image.Point.ptr(left + width >> 0, top + height >> 0)), color.Palette.nil), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.newImageFromDescriptor }; } $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.err = err; $f.height = height; $f.left = left; $f.top = top; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.newImageFromDescriptor = function() { return this.$val.newImageFromDescriptor(); };
	decoder.ptr.prototype.readBlock = function() {
		var _r, _r$1, _tuple, d, err, err$1, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; err$1 = $f.err$1; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = readByte(d.r); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if ((n === 0) || !($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [0, err];
		}
		_r$1 = readFull(d.r, $subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err$1 = _r$1;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			$s = -1; return [0, err$1];
		}
		$s = -1; return [((n >> 0)), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readBlock }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readBlock = function() { return this.$val.readBlock(); };
	uninterlace = function(m) {
		var _i, _ref, dx, dy, m, nOffset, nPix, offset, pass, y;
		nPix = sliceType$1.nil;
		dx = $clone(m.Bounds(), image.Rectangle).Dx();
		dy = $clone(m.Bounds(), image.Rectangle).Dy();
		nPix = $makeSlice(sliceType$1, ($imul(dx, dy)));
		offset = 0;
		_ref = interlacing;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			pass = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), interlaceScan);
			nOffset = $imul(pass.start, dx);
			y = pass.start;
			while (true) {
				if (!(y < dy)) { break; }
				$copySlice($subslice(nPix, nOffset, (nOffset + dx >> 0)), $subslice(m.Pix, offset, (offset + dx >> 0)));
				offset = offset + (dx) >> 0;
				nOffset = nOffset + (($imul(dx, pass.skip))) >> 0;
				y = y + (pass.skip) >> 0;
			}
			_i++;
		}
		m.Pix = nPix;
	};
	Decode = function(r) {
		var _r, d, err, r, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; r = $f.r; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, "", 0, 0, 0, 0, 0, 0, 0, 0, false, color.Palette.nil, sliceType$4.nil, sliceType$1.nil, sliceType$5.nil, arrayType$1.zero());
		_r = d.decode(r, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [(x = d.image, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f._r = _r; $f.d = d; $f.err = err; $f.r = r; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	DecodeConfig = function(r) {
		var _r, d, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, "", 0, 0, 0, 0, 0, 0, 0, 0, false, color.Palette.nil, sliceType$4.nil, sliceType$1.nil, sliceType$5.nil, arrayType$1.zero());
		_r = d.decode(r, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err];
		}
		$s = -1; return [new image.Config.ptr(d.globalColorTable, d.width, d.height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeConfig }; } $f._r = _r; $f.d = d; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DecodeConfig = DecodeConfig;
	init = function() {
		image.RegisterFormat("gif", "GIF8?a", Decode, DecodeConfig);
	};
	ptrType$4.methods = [{prop: "decode", name: "decode", pkg: "image/gif", typ: $funcType([io.Reader, $Bool], [$error], false)}, {prop: "readHeaderAndScreenDescriptor", name: "readHeaderAndScreenDescriptor", pkg: "image/gif", typ: $funcType([], [$error], false)}, {prop: "readColorTable", name: "readColorTable", pkg: "image/gif", typ: $funcType([$Uint8], [color.Palette, $error], false)}, {prop: "readExtension", name: "readExtension", pkg: "image/gif", typ: $funcType([], [$error], false)}, {prop: "readGraphicControl", name: "readGraphicControl", pkg: "image/gif", typ: $funcType([], [$error], false)}, {prop: "newImageFromDescriptor", name: "newImageFromDescriptor", pkg: "image/gif", typ: $funcType([], [ptrType, $error], false)}, {prop: "readBlock", name: "readBlock", pkg: "image/gif", typ: $funcType([], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}];
	reader.init([{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", typ: $funcType([], [$Uint8, $error], false)}]);
	decoder.init("image/gif", [{prop: "r", name: "r", anonymous: false, exported: false, typ: reader, tag: ""}, {prop: "vers", name: "vers", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "loopCount", name: "loopCount", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "delayTime", name: "delayTime", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "backgroundIndex", name: "backgroundIndex", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "disposalMethod", name: "disposalMethod", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "imageFields", name: "imageFields", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "transparentIndex", name: "transparentIndex", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "hasTransparentIndex", name: "hasTransparentIndex", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "globalColorTable", name: "globalColorTable", anonymous: false, exported: false, typ: color.Palette, tag: ""}, {prop: "delay", name: "delay", anonymous: false, exported: false, typ: sliceType$4, tag: ""}, {prop: "disposal", name: "disposal", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "image", name: "image", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}]);
	blockReader.init("image/gif", [{prop: "r", name: "r", anonymous: false, exported: false, typ: reader, tag: ""}, {prop: "slice", name: "slice", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	interlaceScan.init("image/gif", [{prop: "skip", name: "skip", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "start", name: "start", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = bytes.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = lzw.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = palette.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		errNotEnough = errors.New("gif: not enough image data");
		errTooMuch = errors.New("gif: too much image data");
		errBadPixel = errors.New("gif: invalid pixel value");
		interlacing = new sliceType([new interlaceScan.ptr(8, 0), new interlaceScan.ptr(8, 4), new interlaceScan.ptr(4, 2), new interlaceScan.ptr(2, 1)]);
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/jpeg"] = (function() {
	var $pkg = {}, $init, bufio, errors, image, color, imageutil, io, huffman, block, FormatError, UnsupportedError, component, bits, decoder, huffmanSpec, huffmanLUT, arrayType, arrayType$2, sliceType, arrayType$3, ptrType, ptrType$1, structType, arrayType$4, structType$1, arrayType$5, sliceType$1, arrayType$6, arrayType$7, arrayType$8, arrayType$9, arrayType$10, arrayType$11, arrayType$12, arrayType$13, structType$2, arrayType$14, sliceType$2, arrayType$15, sliceType$3, ptrType$2, ptrType$5, ptrType$6, ptrType$7, errShortHuffmanData, errUnsupportedSubsamplingRatio, unzig, errMissingFF00, theHuffmanSpec, theHuffmanLUT, idct, Decode, DecodeConfig, init, init$1;
	bufio = $packages["bufio"];
	errors = $packages["errors"];
	image = $packages["image"];
	color = $packages["image/color"];
	imageutil = $packages["image/internal/imageutil"];
	io = $packages["io"];
	huffman = $pkg.huffman = $newType(0, $kindStruct, "jpeg.huffman", true, "image/jpeg", false, function(nCodes_, lut_, vals_, minCodes_, maxCodes_, valsIndices_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.nCodes = 0;
			this.lut = arrayType$7.zero();
			this.vals = arrayType$8.zero();
			this.minCodes = arrayType$3.zero();
			this.maxCodes = arrayType$3.zero();
			this.valsIndices = arrayType$3.zero();
			return;
		}
		this.nCodes = nCodes_;
		this.lut = lut_;
		this.vals = vals_;
		this.minCodes = minCodes_;
		this.maxCodes = maxCodes_;
		this.valsIndices = valsIndices_;
	});
	block = $pkg.block = $newType(256, $kindArray, "jpeg.block", true, "image/jpeg", false, null);
	FormatError = $pkg.FormatError = $newType(8, $kindString, "jpeg.FormatError", true, "image/jpeg", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "jpeg.UnsupportedError", true, "image/jpeg", true, null);
	component = $pkg.component = $newType(0, $kindStruct, "jpeg.component", true, "image/jpeg", false, function(h_, v_, c_, tq_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.h = 0;
			this.v = 0;
			this.c = 0;
			this.tq = 0;
			return;
		}
		this.h = h_;
		this.v = v_;
		this.c = c_;
		this.tq = tq_;
	});
	bits = $pkg.bits = $newType(0, $kindStruct, "jpeg.bits", true, "image/jpeg", false, function(a_, m_, n_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.a = 0;
			this.m = 0;
			this.n = 0;
			return;
		}
		this.a = a_;
		this.m = m_;
		this.n = n_;
	});
	decoder = $pkg.decoder = $newType(0, $kindStruct, "jpeg.decoder", true, "image/jpeg", false, function(r_, bits_, bytes_, width_, height_, img1_, img3_, blackPix_, blackStride_, ri_, nComp_, baseline_, progressive_, jfif_, adobeTransformValid_, adobeTransform_, eobRun_, comp_, progCoeffs_, huff_, quant_, tmp_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.bits = new bits.ptr(0, 0, 0);
			this.bytes = new structType$1.ptr(arrayType$4.zero(), 0, 0, 0);
			this.width = 0;
			this.height = 0;
			this.img1 = ptrType.nil;
			this.img3 = ptrType$1.nil;
			this.blackPix = sliceType.nil;
			this.blackStride = 0;
			this.ri = 0;
			this.nComp = 0;
			this.baseline = false;
			this.progressive = false;
			this.jfif = false;
			this.adobeTransformValid = false;
			this.adobeTransform = 0;
			this.eobRun = 0;
			this.comp = arrayType$5.zero();
			this.progCoeffs = arrayType$6.zero();
			this.huff = arrayType$10.zero();
			this.quant = arrayType$12.zero();
			this.tmp = arrayType$13.zero();
			return;
		}
		this.r = r_;
		this.bits = bits_;
		this.bytes = bytes_;
		this.width = width_;
		this.height = height_;
		this.img1 = img1_;
		this.img3 = img3_;
		this.blackPix = blackPix_;
		this.blackStride = blackStride_;
		this.ri = ri_;
		this.nComp = nComp_;
		this.baseline = baseline_;
		this.progressive = progressive_;
		this.jfif = jfif_;
		this.adobeTransformValid = adobeTransformValid_;
		this.adobeTransform = adobeTransform_;
		this.eobRun = eobRun_;
		this.comp = comp_;
		this.progCoeffs = progCoeffs_;
		this.huff = huff_;
		this.quant = quant_;
		this.tmp = tmp_;
	});
	huffmanSpec = $pkg.huffmanSpec = $newType(0, $kindStruct, "jpeg.huffmanSpec", true, "image/jpeg", false, function(count_, value_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.count = arrayType$2.zero();
			this.value = sliceType.nil;
			return;
		}
		this.count = count_;
		this.value = value_;
	});
	huffmanLUT = $pkg.huffmanLUT = $newType(12, $kindSlice, "jpeg.huffmanLUT", true, "image/jpeg", false, null);
	arrayType = $arrayType(huffmanLUT, 4);
	arrayType$2 = $arrayType($Uint8, 16);
	sliceType = $sliceType($Uint8);
	arrayType$3 = $arrayType($Int32, 16);
	ptrType = $ptrType(image.Gray);
	ptrType$1 = $ptrType(image.YCbCr);
	structType = $structType("image/jpeg", [{prop: "src", name: "src", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "stride", name: "stride", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	arrayType$4 = $arrayType($Uint8, 4096);
	structType$1 = $structType("image/jpeg", [{prop: "buf", name: "buf", anonymous: false, exported: false, typ: arrayType$4, tag: ""}, {prop: "i", name: "i", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "j", name: "j", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nUnreadable", name: "nUnreadable", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	arrayType$5 = $arrayType(component, 4);
	sliceType$1 = $sliceType(block);
	arrayType$6 = $arrayType(sliceType$1, 4);
	arrayType$7 = $arrayType($Uint16, 256);
	arrayType$8 = $arrayType($Uint8, 256);
	arrayType$9 = $arrayType(huffman, 4);
	arrayType$10 = $arrayType(arrayType$9, 2);
	arrayType$11 = $arrayType($Int32, 64);
	arrayType$12 = $arrayType(block, 4);
	arrayType$13 = $arrayType($Uint8, 128);
	structType$2 = $structType("image/jpeg", [{prop: "compIndex", name: "compIndex", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "td", name: "td", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "ta", name: "ta", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	arrayType$14 = $arrayType(structType$2, 4);
	sliceType$2 = $sliceType(component);
	arrayType$15 = $arrayType($Int32, 4);
	sliceType$3 = $sliceType($Uint32);
	ptrType$2 = $ptrType(huffmanLUT);
	ptrType$5 = $ptrType(huffman);
	ptrType$6 = $ptrType(block);
	ptrType$7 = $ptrType(decoder);
	decoder.ptr.prototype.ensureNBits = function(n) {
		var _r, _tuple, c, d, err, n, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; c = $f.c; d = $f.d; err = $f.err; n = $f.n; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			_r = d.readByteStuffedByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			c = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					$s = -1; return new FormatError(errShortHuffmanData);
				}
				$s = -1; return err;
			}
			d.bits.a = ((d.bits.a << 8 >>> 0) | ((c >>> 0))) >>> 0;
			d.bits.n = d.bits.n + (8) >> 0;
			if (d.bits.m === 0) {
				d.bits.m = 128;
			} else {
				d.bits.m = (y = (8), y < 32 ? (d.bits.m << y) : 0) >>> 0;
			}
			if (d.bits.n >= n) {
				/* break; */ $s = 2; continue;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.ensureNBits }; } $f._r = _r; $f._tuple = _tuple; $f.c = c; $f.d = d; $f.err = err; $f.n = n; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.ensureNBits = function(n) { return this.$val.ensureNBits(n); };
	decoder.ptr.prototype.receiveExtend = function(t) {
		var _r, d, err, s, t, x, y, y$1, y$2, y$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; s = $f.s; t = $f.t; x = $f.x; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (d.bits.n < ((t >> 0))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.bits.n < ((t >> 0))) { */ case 1:
			_r = d.ensureNBits(((t >> 0))); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
		/* } */ case 2:
		d.bits.n = d.bits.n - (((t >> 0))) >> 0;
		d.bits.m = (y = (t), y < 32 ? (d.bits.m >>> y) : 0) >>> 0;
		s = (y$1 = t, y$1 < 32 ? (1 << y$1) : 0) >> 0;
		x = ((((y$2 = ((d.bits.n << 24 >>> 24)), y$2 < 32 ? (d.bits.a >>> y$2) : 0) >>> 0) >> 0)) & ((s - 1 >> 0));
		if (x < (s >> 1 >> 0)) {
			x = x + (((((y$3 = t, y$3 < 32 ? (-1 << y$3) : 0) >> 0)) + 1 >> 0)) >> 0;
		}
		$s = -1; return [x, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.receiveExtend }; } $f._r = _r; $f.d = d; $f.err = err; $f.s = s; $f.t = t; $f.x = x; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.receiveExtend = function(t) { return this.$val.receiveExtend(t); };
	decoder.ptr.prototype.processDHT = function(n) {
		var _i, _i$1, _i$2, _r, _r$1, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, base, c, code, d, err, err$1, h, i, i$1, i$2, i$3, index, j, k, lutValue, n, n$1, nCodes, tc, th, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; base = $f.base; c = $f.c; code = $f.code; d = $f.d; err = $f.err; err$1 = $f.err$1; h = $f.h; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; index = $f.index; j = $f.j; k = $f.k; lutValue = $f.lutValue; n = $f.n; n$1 = $f.n$1; nCodes = $f.nCodes; tc = $f.tc; th = $f.th; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(n > 0)) { break; } */ if(!(n > 0)) { $s = 2; continue; }
			if (n < 17) {
				$s = -1; return new FormatError("DHT has wrong length");
			}
			_r = d.readFull($subslice(new sliceType(d.tmp), 0, 17)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			tc = d.tmp[0] >>> 4 << 24 >>> 24;
			if (tc > 1) {
				$s = -1; return new FormatError("bad Tc value");
			}
			th = (d.tmp[0] & 15) >>> 0;
			if (th > 3 || (d.baseline && th > 1)) {
				$s = -1; return new FormatError("bad Th value");
			}
			h = (x = (x$1 = d.huff, ((tc < 0 || tc >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[tc])), ((th < 0 || th >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[th]));
			h.nCodes = 0;
			nCodes = arrayType$3.zero();
			_ref = nCodes;
			_i = 0;
			while (true) {
				if (!(_i < 16)) { break; }
				i = _i;
				((i < 0 || i >= nCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : nCodes[i] = (((x$2 = d.tmp, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3])) >> 0)));
				h.nCodes = h.nCodes + (((i < 0 || i >= nCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : nCodes[i])) >> 0;
				_i++;
			}
			if (h.nCodes === 0) {
				$s = -1; return new FormatError("Huffman table has zero length");
			}
			if (h.nCodes > 256) {
				$s = -1; return new FormatError("Huffman table has excessive length");
			}
			n = n - ((((h.nCodes >> 0)) + 17 >> 0)) >> 0;
			if (n < 0) {
				$s = -1; return new FormatError("DHT has wrong length");
			}
			_r$1 = d.readFull($subslice(new sliceType(h.vals), 0, h.nCodes)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$1 = _r$1;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return err$1;
			}
			_ref$1 = h.lut;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < 256)) { break; }
				i$1 = _i$1;
				(x$4 = h.lut, ((i$1 < 0 || i$1 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[i$1] = 0));
				_i$1++;
			}
			_tmp = 0;
			_tmp$1 = 0;
			x$5 = _tmp;
			code = _tmp$1;
			i$2 = 0;
			while (true) {
				if (!(i$2 < 8)) { break; }
				code = (y = (1), y < 32 ? (code << y) : 0) >>> 0;
				j = 0;
				while (true) {
					if (!(j < ((i$2 < 0 || i$2 >= nCodes.length) ? ($throwRuntimeError("index out of range"), undefined) : nCodes[i$2]))) { break; }
					base = ((((y$1 = ((7 - i$2 >>> 0)), y$1 < 32 ? (code << y$1) : 0) >>> 0) << 24 >>> 24));
					lutValue = (((((x$6 = h.vals, ((x$5 < 0 || x$5 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$5])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((2 + i$2 >>> 0) << 16 >>> 16))) >>> 0;
					k = 0;
					while (true) {
						if (!(k < ((y$2 = ((7 - i$2 >>> 0)), y$2 < 32 ? (1 << y$2) : 0) << 24 >>> 24))) { break; }
						(x$7 = h.lut, x$8 = (base | k) >>> 0, ((x$8 < 0 || x$8 >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[x$8] = lutValue));
						k = k + (1) << 24 >>> 24;
					}
					code = code + (1) >>> 0;
					x$5 = x$5 + (1) >>> 0;
					j = j + (1) >> 0;
				}
				i$2 = i$2 + (1) >>> 0;
			}
			_tmp$2 = 0;
			_tmp$3 = 0;
			c = _tmp$2;
			index = _tmp$3;
			_ref$2 = nCodes;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < 16)) { break; }
				i$3 = _i$2;
				n$1 = ((_i$2 < 0 || _i$2 >= _ref$2.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2[_i$2]);
				if (n$1 === 0) {
					(x$9 = h.minCodes, ((i$3 < 0 || i$3 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[i$3] = -1));
					(x$10 = h.maxCodes, ((i$3 < 0 || i$3 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[i$3] = -1));
					(x$11 = h.valsIndices, ((i$3 < 0 || i$3 >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[i$3] = -1));
				} else {
					(x$12 = h.minCodes, ((i$3 < 0 || i$3 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[i$3] = c));
					(x$13 = h.maxCodes, ((i$3 < 0 || i$3 >= x$13.length) ? ($throwRuntimeError("index out of range"), undefined) : x$13[i$3] = ((c + n$1 >> 0) - 1 >> 0)));
					(x$14 = h.valsIndices, ((i$3 < 0 || i$3 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[i$3] = index));
					c = c + (n$1) >> 0;
					index = index + (n$1) >> 0;
				}
				c = (y$3 = (1), y$3 < 32 ? (c << y$3) : 0) >> 0;
				_i$2++;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processDHT }; } $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.base = base; $f.c = c; $f.code = code; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.h = h; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.index = index; $f.j = j; $f.k = k; $f.lutValue = lutValue; $f.n = n; $f.n$1 = n$1; $f.nCodes = nCodes; $f.tc = tc; $f.th = th; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processDHT = function(n) { return this.$val.processDHT(n); };
	decoder.ptr.prototype.decodeHuffman = function(h) {
		var _r, _r$1, _tmp, _tmp$1, code, d, err, err$1, h, i, n, v, x, x$1, x$2, x$3, x$4, x$5, x$6, y, y$1, y$2, y$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; code = $f.code; d = $f.d; err = $f.err; err$1 = $f.err$1; h = $f.h; i = $f.i; n = $f.n; v = $f.v; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (h.nCodes === 0) {
			$s = -1; return [0, new FormatError("uninitialized Huffman table")];
		}
		/* */ if (d.bits.n < 8) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.bits.n < 8) { */ case 1:
			_r = d.ensureNBits(8); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 4:
				if (!($interfaceIsEqual(err, new FormatError(errMissingFF00))) && !($interfaceIsEqual(err, new FormatError(errShortHuffmanData)))) {
					$s = -1; return [0, err];
				}
				if (!((d.bytes.nUnreadable === 0))) {
					d.unreadByteStuffedByte();
				}
				/* goto slowPath */ $s = 6; continue;
			/* } */ case 5:
		/* } */ case 2:
		v = (x = h.lut, x$1 = ((((y = (((d.bits.n - 8 >> 0) >>> 0)), y < 32 ? (d.bits.a >>> y) : 0) >>> 0)) & 255) >>> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
		if (!((v === 0))) {
			n = (((v & 255) >>> 0)) - 1 << 16 >>> 16;
			d.bits.n = d.bits.n - (((n >> 0))) >> 0;
			d.bits.m = (y$1 = (n), y$1 < 32 ? (d.bits.m >>> y$1) : 0) >>> 0;
			$s = -1; return [(((v >>> 8 << 16 >>> 16) << 24 >>> 24)), $ifaceNil];
		}
		/* slowPath: */ case 6:
		_tmp = 0;
		_tmp$1 = 0;
		i = _tmp;
		code = _tmp$1;
		/* while (true) { */ case 7:
			/* if (!(i < 16)) { break; } */ if(!(i < 16)) { $s = 8; continue; }
			/* */ if (d.bits.n === 0) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (d.bits.n === 0) { */ case 9:
				_r$1 = d.ensureNBits(1); /* */ $s = 11; case 11: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				err$1 = _r$1;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [0, err$1];
				}
			/* } */ case 10:
			if (!((((d.bits.a & d.bits.m) >>> 0) === 0))) {
				code = code | (1);
			}
			d.bits.n = d.bits.n - (1) >> 0;
			d.bits.m = (y$2 = (1), y$2 < 32 ? (d.bits.m >>> y$2) : 0) >>> 0;
			if (code <= (x$2 = h.maxCodes, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]))) {
				$s = -1; return [(x$3 = h.vals, x$4 = ((x$5 = h.valsIndices, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])) + code >> 0) - (x$6 = h.minCodes, ((i < 0 || i >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[i])) >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])), $ifaceNil];
			}
			code = (y$3 = (1), y$3 < 32 ? (code << y$3) : 0) >> 0;
			i = i + (1) >> 0;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return [0, new FormatError("bad Huffman code")];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decodeHuffman }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.code = code; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.h = h; $f.i = i; $f.n = n; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.decodeHuffman = function(h) { return this.$val.decodeHuffman(h); };
	decoder.ptr.prototype.decodeBit = function() {
		var _r, d, err, ret, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; ret = $f.ret; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (d.bits.n === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.bits.n === 0) { */ case 1:
			_r = d.ensureNBits(1); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [false, err];
			}
		/* } */ case 2:
		ret = !((((d.bits.a & d.bits.m) >>> 0) === 0));
		d.bits.n = d.bits.n - (1) >> 0;
		d.bits.m = (y = (1), y < 32 ? (d.bits.m >>> y) : 0) >>> 0;
		$s = -1; return [ret, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decodeBit }; } $f._r = _r; $f.d = d; $f.err = err; $f.ret = ret; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.decodeBit = function() { return this.$val.decodeBit(); };
	decoder.ptr.prototype.decodeBits = function(n) {
		var _r, d, err, n, ret, y, y$1, y$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; n = $f.n; ret = $f.ret; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (d.bits.n < n) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (d.bits.n < n) { */ case 1:
			_r = d.ensureNBits(n); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
		/* } */ case 2:
		ret = (y = (((d.bits.n - n >> 0) >>> 0)), y < 32 ? (d.bits.a >>> y) : 0) >>> 0;
		ret = (ret & (((((y$1 = ((n >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0)) - 1 >>> 0))) >>> 0;
		d.bits.n = d.bits.n - (n) >> 0;
		d.bits.m = (y$2 = (((n >>> 0))), y$2 < 32 ? (d.bits.m >>> y$2) : 0) >>> 0;
		$s = -1; return [ret, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decodeBits }; } $f._r = _r; $f.d = d; $f.err = err; $f.n = n; $f.ret = ret; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.decodeBits = function(n) { return this.$val.decodeBits(n); };
	idct = function(src) {
		var dc, src, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$5, x$6, x$7, x$8, x$9, x0, x1, x2, x3, x4, x5, x6, x7, x8, y, y0, y1, y2, y3, y4, y5, y6, y7, y8, y8$1;
		y = 0;
		while (true) {
			if (!(y < 8)) { break; }
			y8 = $imul(y, 8);
			if (((x = y8 + 1 >> 0, (src.nilCheck, ((x < 0 || x >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x]))) === 0) && ((x$1 = y8 + 2 >> 0, (src.nilCheck, ((x$1 < 0 || x$1 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$1]))) === 0) && ((x$2 = y8 + 3 >> 0, (src.nilCheck, ((x$2 < 0 || x$2 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$2]))) === 0) && ((x$3 = y8 + 4 >> 0, (src.nilCheck, ((x$3 < 0 || x$3 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$3]))) === 0) && ((x$4 = y8 + 5 >> 0, (src.nilCheck, ((x$4 < 0 || x$4 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$4]))) === 0) && ((x$5 = y8 + 6 >> 0, (src.nilCheck, ((x$5 < 0 || x$5 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$5]))) === 0) && ((x$6 = y8 + 7 >> 0, (src.nilCheck, ((x$6 < 0 || x$6 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$6]))) === 0)) {
				dc = (x$7 = y8 + 0 >> 0, (src.nilCheck, ((x$7 < 0 || x$7 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$7]))) << 3 >> 0;
				(x$8 = y8 + 0 >> 0, src.nilCheck, ((x$8 < 0 || x$8 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$8] = dc));
				(x$9 = y8 + 1 >> 0, src.nilCheck, ((x$9 < 0 || x$9 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$9] = dc));
				(x$10 = y8 + 2 >> 0, src.nilCheck, ((x$10 < 0 || x$10 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$10] = dc));
				(x$11 = y8 + 3 >> 0, src.nilCheck, ((x$11 < 0 || x$11 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$11] = dc));
				(x$12 = y8 + 4 >> 0, src.nilCheck, ((x$12 < 0 || x$12 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$12] = dc));
				(x$13 = y8 + 5 >> 0, src.nilCheck, ((x$13 < 0 || x$13 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$13] = dc));
				(x$14 = y8 + 6 >> 0, src.nilCheck, ((x$14 < 0 || x$14 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$14] = dc));
				(x$15 = y8 + 7 >> 0, src.nilCheck, ((x$15 < 0 || x$15 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$15] = dc));
				y = y + (1) >> 0;
				continue;
			}
			x0 = (((x$16 = y8 + 0 >> 0, (src.nilCheck, ((x$16 < 0 || x$16 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$16]))) << 11 >> 0)) + 128 >> 0;
			x1 = (x$17 = y8 + 4 >> 0, (src.nilCheck, ((x$17 < 0 || x$17 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$17]))) << 11 >> 0;
			x2 = (x$18 = y8 + 6 >> 0, (src.nilCheck, ((x$18 < 0 || x$18 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$18])));
			x3 = (x$19 = y8 + 2 >> 0, (src.nilCheck, ((x$19 < 0 || x$19 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$19])));
			x4 = (x$20 = y8 + 1 >> 0, (src.nilCheck, ((x$20 < 0 || x$20 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$20])));
			x5 = (x$21 = y8 + 7 >> 0, (src.nilCheck, ((x$21 < 0 || x$21 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$21])));
			x6 = (x$22 = y8 + 5 >> 0, (src.nilCheck, ((x$22 < 0 || x$22 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$22])));
			x7 = (x$23 = y8 + 3 >> 0, (src.nilCheck, ((x$23 < 0 || x$23 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$23])));
			x8 = $imul(565, ((x4 + x5 >> 0)));
			x4 = x8 + ($imul(2276, x4)) >> 0;
			x5 = x8 - ($imul(3406, x5)) >> 0;
			x8 = $imul(2408, ((x6 + x7 >> 0)));
			x6 = x8 - ($imul(799, x6)) >> 0;
			x7 = x8 - ($imul(4017, x7)) >> 0;
			x8 = x0 + x1 >> 0;
			x0 = x0 - (x1) >> 0;
			x1 = $imul(1108, ((x3 + x2 >> 0)));
			x2 = x1 - ($imul(3784, x2)) >> 0;
			x3 = x1 + ($imul(1568, x3)) >> 0;
			x1 = x4 + x6 >> 0;
			x4 = x4 - (x6) >> 0;
			x6 = x5 + x7 >> 0;
			x5 = x5 - (x7) >> 0;
			x7 = x8 + x3 >> 0;
			x8 = x8 - (x3) >> 0;
			x3 = x0 + x2 >> 0;
			x0 = x0 - (x2) >> 0;
			x2 = ((($imul(181, ((x4 + x5 >> 0)))) + 128 >> 0)) >> 8 >> 0;
			x4 = ((($imul(181, ((x4 - x5 >> 0)))) + 128 >> 0)) >> 8 >> 0;
			(x$24 = y8 + 0 >> 0, src.nilCheck, ((x$24 < 0 || x$24 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$24] = (((x7 + x1 >> 0)) >> 8 >> 0)));
			(x$25 = y8 + 1 >> 0, src.nilCheck, ((x$25 < 0 || x$25 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$25] = (((x3 + x2 >> 0)) >> 8 >> 0)));
			(x$26 = y8 + 2 >> 0, src.nilCheck, ((x$26 < 0 || x$26 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$26] = (((x0 + x4 >> 0)) >> 8 >> 0)));
			(x$27 = y8 + 3 >> 0, src.nilCheck, ((x$27 < 0 || x$27 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$27] = (((x8 + x6 >> 0)) >> 8 >> 0)));
			(x$28 = y8 + 4 >> 0, src.nilCheck, ((x$28 < 0 || x$28 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$28] = (((x8 - x6 >> 0)) >> 8 >> 0)));
			(x$29 = y8 + 5 >> 0, src.nilCheck, ((x$29 < 0 || x$29 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$29] = (((x0 - x4 >> 0)) >> 8 >> 0)));
			(x$30 = y8 + 6 >> 0, src.nilCheck, ((x$30 < 0 || x$30 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$30] = (((x3 - x2 >> 0)) >> 8 >> 0)));
			(x$31 = y8 + 7 >> 0, src.nilCheck, ((x$31 < 0 || x$31 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$31] = (((x7 - x1 >> 0)) >> 8 >> 0)));
			y = y + (1) >> 0;
		}
		x$32 = 0;
		while (true) {
			if (!(x$32 < 8)) { break; }
			y0 = (((x$33 = 0 + x$32 >> 0, (src.nilCheck, ((x$33 < 0 || x$33 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$33]))) << 8 >> 0)) + 8192 >> 0;
			y1 = (x$34 = 32 + x$32 >> 0, (src.nilCheck, ((x$34 < 0 || x$34 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$34]))) << 8 >> 0;
			y2 = (x$35 = 48 + x$32 >> 0, (src.nilCheck, ((x$35 < 0 || x$35 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$35])));
			y3 = (x$36 = 16 + x$32 >> 0, (src.nilCheck, ((x$36 < 0 || x$36 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$36])));
			y4 = (x$37 = 8 + x$32 >> 0, (src.nilCheck, ((x$37 < 0 || x$37 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$37])));
			y5 = (x$38 = 56 + x$32 >> 0, (src.nilCheck, ((x$38 < 0 || x$38 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$38])));
			y6 = (x$39 = 40 + x$32 >> 0, (src.nilCheck, ((x$39 < 0 || x$39 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$39])));
			y7 = (x$40 = 24 + x$32 >> 0, (src.nilCheck, ((x$40 < 0 || x$40 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$40])));
			y8$1 = ($imul(565, ((y4 + y5 >> 0)))) + 4 >> 0;
			y4 = ((y8$1 + ($imul(2276, y4)) >> 0)) >> 3 >> 0;
			y5 = ((y8$1 - ($imul(3406, y5)) >> 0)) >> 3 >> 0;
			y8$1 = ($imul(2408, ((y6 + y7 >> 0)))) + 4 >> 0;
			y6 = ((y8$1 - ($imul(799, y6)) >> 0)) >> 3 >> 0;
			y7 = ((y8$1 - ($imul(4017, y7)) >> 0)) >> 3 >> 0;
			y8$1 = y0 + y1 >> 0;
			y0 = y0 - (y1) >> 0;
			y1 = ($imul(1108, ((y3 + y2 >> 0)))) + 4 >> 0;
			y2 = ((y1 - ($imul(3784, y2)) >> 0)) >> 3 >> 0;
			y3 = ((y1 + ($imul(1568, y3)) >> 0)) >> 3 >> 0;
			y1 = y4 + y6 >> 0;
			y4 = y4 - (y6) >> 0;
			y6 = y5 + y7 >> 0;
			y5 = y5 - (y7) >> 0;
			y7 = y8$1 + y3 >> 0;
			y8$1 = y8$1 - (y3) >> 0;
			y3 = y0 + y2 >> 0;
			y0 = y0 - (y2) >> 0;
			y2 = ((($imul(181, ((y4 + y5 >> 0)))) + 128 >> 0)) >> 8 >> 0;
			y4 = ((($imul(181, ((y4 - y5 >> 0)))) + 128 >> 0)) >> 8 >> 0;
			(x$41 = 0 + x$32 >> 0, src.nilCheck, ((x$41 < 0 || x$41 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$41] = (((y7 + y1 >> 0)) >> 14 >> 0)));
			(x$42 = 8 + x$32 >> 0, src.nilCheck, ((x$42 < 0 || x$42 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$42] = (((y3 + y2 >> 0)) >> 14 >> 0)));
			(x$43 = 16 + x$32 >> 0, src.nilCheck, ((x$43 < 0 || x$43 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$43] = (((y0 + y4 >> 0)) >> 14 >> 0)));
			(x$44 = 24 + x$32 >> 0, src.nilCheck, ((x$44 < 0 || x$44 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$44] = (((y8$1 + y6 >> 0)) >> 14 >> 0)));
			(x$45 = 32 + x$32 >> 0, src.nilCheck, ((x$45 < 0 || x$45 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$45] = (((y8$1 - y6 >> 0)) >> 14 >> 0)));
			(x$46 = 40 + x$32 >> 0, src.nilCheck, ((x$46 < 0 || x$46 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$46] = (((y0 - y4 >> 0)) >> 14 >> 0)));
			(x$47 = 48 + x$32 >> 0, src.nilCheck, ((x$47 < 0 || x$47 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$47] = (((y3 - y2 >> 0)) >> 14 >> 0)));
			(x$48 = 56 + x$32 >> 0, src.nilCheck, ((x$48 < 0 || x$48 >= src.length) ? ($throwRuntimeError("index out of range"), undefined) : src[x$48] = (((y7 - y1 >> 0)) >> 14 >> 0)));
			x$32 = x$32 + (1) >> 0;
		}
	};
	FormatError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "invalid JPEG format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "unsupported JPEG feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	decoder.ptr.prototype.fill = function() {
		var _r, _tmp, _tmp$1, _tuple, d, err, n, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; err = $f.err; n = $f.n; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((d.bytes.i === d.bytes.j))) {
			$panic(new $String("jpeg: fill called when unread bytes exist"));
		}
		if (d.bytes.j > 2) {
			d.bytes.buf[0] = (x = d.bytes.buf, x$1 = d.bytes.j - 2 >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			d.bytes.buf[1] = (x$2 = d.bytes.buf, x$3 = d.bytes.j - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[x$3]));
			_tmp = 2;
			_tmp$1 = 2;
			d.bytes.i = _tmp;
			d.bytes.j = _tmp$1;
		}
		_r = d.r.Read($subslice(new sliceType(d.bytes.buf), d.bytes.j)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		d.bytes.j = d.bytes.j + (n) >> 0;
		if (n > 0) {
			err = $ifaceNil;
		}
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.fill }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.n = n; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.fill = function() { return this.$val.fill(); };
	decoder.ptr.prototype.unreadByteStuffedByte = function() {
		var d, y, y$1;
		d = this;
		d.bytes.i = d.bytes.i - (d.bytes.nUnreadable) >> 0;
		d.bytes.nUnreadable = 0;
		if (d.bits.n >= 8) {
			d.bits.a = (y = (8), y < 32 ? (d.bits.a >>> y) : 0) >>> 0;
			d.bits.n = d.bits.n - (8) >> 0;
			d.bits.m = (y$1 = (8), y$1 < 32 ? (d.bits.m >>> y$1) : 0) >>> 0;
		}
	};
	decoder.prototype.unreadByteStuffedByte = function() { return this.$val.unreadByteStuffedByte(); };
	decoder.ptr.prototype.readByte = function() {
		var _r, _tmp, _tmp$1, _tmp$2, _tmp$3, d, err, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; err = $f.err; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = 0;
		err = $ifaceNil;
		d = this;
		/* while (true) { */ case 1:
			/* if (!(d.bytes.i === d.bytes.j)) { break; } */ if(!(d.bytes.i === d.bytes.j)) { $s = 2; continue; }
			_r = d.fill(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0;
				_tmp$1 = err;
				x = _tmp;
				err = _tmp$1;
				$s = -1; return [x, err];
			}
		/* } */ $s = 1; continue; case 2:
		x = (x$1 = d.bytes.buf, x$2 = d.bytes.i, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2]));
		d.bytes.i = d.bytes.i + (1) >> 0;
		d.bytes.nUnreadable = 0;
		_tmp$2 = x;
		_tmp$3 = $ifaceNil;
		x = _tmp$2;
		err = _tmp$3;
		$s = -1; return [x, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readByte }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.err = err; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readByte = function() { return this.$val.readByte(); };
	decoder.ptr.prototype.readByteStuffedByte = function() {
		var _r, _r$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, d, err, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		x = 0;
		err = $ifaceNil;
		d = this;
		if ((d.bytes.i + 2 >> 0) <= d.bytes.j) {
			x = (x$1 = d.bytes.buf, x$2 = d.bytes.i, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2]));
			d.bytes.i = d.bytes.i + (1) >> 0;
			d.bytes.nUnreadable = 1;
			if (!((x === 255))) {
				_tmp = x;
				_tmp$1 = err;
				x = _tmp;
				err = _tmp$1;
				$s = -1; return [x, err];
			}
			if (!(((x$3 = d.bytes.buf, x$4 = d.bytes.i, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])) === 0))) {
				_tmp$2 = 0;
				_tmp$3 = new FormatError(errMissingFF00);
				x = _tmp$2;
				err = _tmp$3;
				$s = -1; return [x, err];
			}
			d.bytes.i = d.bytes.i + (1) >> 0;
			d.bytes.nUnreadable = 2;
			_tmp$4 = 255;
			_tmp$5 = $ifaceNil;
			x = _tmp$4;
			err = _tmp$5;
			$s = -1; return [x, err];
		}
		d.bytes.nUnreadable = 0;
		_r = d.readByte(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		x = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = 0;
			_tmp$7 = err;
			x = _tmp$6;
			err = _tmp$7;
			$s = -1; return [x, err];
		}
		d.bytes.nUnreadable = 1;
		if (!((x === 255))) {
			_tmp$8 = x;
			_tmp$9 = $ifaceNil;
			x = _tmp$8;
			err = _tmp$9;
			$s = -1; return [x, err];
		}
		_r$1 = d.readByte(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple$1 = _r$1;
		x = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$10 = 0;
			_tmp$11 = err;
			x = _tmp$10;
			err = _tmp$11;
			$s = -1; return [x, err];
		}
		d.bytes.nUnreadable = 2;
		if (!((x === 0))) {
			_tmp$12 = 0;
			_tmp$13 = new FormatError(errMissingFF00);
			x = _tmp$12;
			err = _tmp$13;
			$s = -1; return [x, err];
		}
		_tmp$14 = 255;
		_tmp$15 = $ifaceNil;
		x = _tmp$14;
		err = _tmp$15;
		$s = -1; return [x, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readByteStuffedByte }; } $f._r = _r; $f._r$1 = _r$1; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readByteStuffedByte = function() { return this.$val.readByteStuffedByte(); };
	decoder.ptr.prototype.readFull = function(p) {
		var _r, d, err, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((d.bytes.nUnreadable === 0))) {
			if (d.bits.n >= 8) {
				d.unreadByteStuffedByte();
			}
			d.bytes.nUnreadable = 0;
		}
		/* while (true) { */ case 1:
			n = $copySlice(p, $subslice(new sliceType(d.bytes.buf), d.bytes.i, d.bytes.j));
			p = $subslice(p, n);
			d.bytes.i = d.bytes.i + (n) >> 0;
			if (p.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			_r = d.fill(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readFull }; } $f._r = _r; $f.d = d; $f.err = err; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readFull = function(p) { return this.$val.readFull(p); };
	decoder.ptr.prototype.ignore = function(n) {
		var _r, d, err, m, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; m = $f.m; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((d.bytes.nUnreadable === 0))) {
			if (d.bits.n >= 8) {
				d.unreadByteStuffedByte();
			}
			d.bytes.nUnreadable = 0;
		}
		/* while (true) { */ case 1:
			m = d.bytes.j - d.bytes.i >> 0;
			if (m > n) {
				m = n;
			}
			d.bytes.i = d.bytes.i + (m) >> 0;
			n = n - (m) >> 0;
			if (n === 0) {
				/* break; */ $s = 2; continue;
			}
			_r = d.fill(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				$s = -1; return err;
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.ignore }; } $f._r = _r; $f.d = d; $f.err = err; $f.m = m; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.ignore = function(n) { return this.$val.ignore(n); };
	decoder.ptr.prototype.processSOF = function(n) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _tmp, _tmp$1, _tmp$2, _tmp$3, d, err, h, hv, i, j, n, v, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; d = $f.d; err = $f.err; h = $f.h; hv = $f.hv; i = $f.i; j = $f.j; n = $f.n; v = $f.v; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((d.nComp === 0))) {
			$s = -1; return new FormatError("multiple SOF markers");
		}
		_1 = n;
		if (_1 === (9)) {
			d.nComp = 1;
		} else if (_1 === (15)) {
			d.nComp = 3;
		} else if (_1 === (18)) {
			d.nComp = 4;
		} else {
			$s = -1; return new UnsupportedError("number of components");
		}
		_r = d.readFull($subslice(new sliceType(d.tmp), 0, n)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!((d.tmp[0] === 8))) {
			$s = -1; return new UnsupportedError("precision");
		}
		d.height = (((d.tmp[1] >> 0)) << 8 >> 0) + ((d.tmp[2] >> 0)) >> 0;
		d.width = (((d.tmp[3] >> 0)) << 8 >> 0) + ((d.tmp[4] >> 0)) >> 0;
		if (!((((d.tmp[5] >> 0)) === d.nComp))) {
			$s = -1; return new FormatError("SOF has wrong length");
		}
		i = 0;
		while (true) {
			if (!(i < d.nComp)) { break; }
			(x$2 = d.comp, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])).c = (x = d.tmp, x$1 = 6 + ($imul(3, i)) >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			j = 0;
			while (true) {
				if (!(j < i)) { break; }
				if ((x$3 = d.comp, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i])).c === (x$4 = d.comp, ((j < 0 || j >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[j])).c) {
					$s = -1; return new FormatError("repeated component identifier");
				}
				j = j + (1) >> 0;
			}
			(x$7 = d.comp, ((i < 0 || i >= x$7.length) ? ($throwRuntimeError("index out of range"), undefined) : x$7[i])).tq = (x$5 = d.tmp, x$6 = 8 + ($imul(3, i)) >> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6]));
			if ((x$8 = d.comp, ((i < 0 || i >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[i])).tq > 3) {
				$s = -1; return new FormatError("bad Tq value");
			}
			hv = (x$9 = d.tmp, x$10 = 7 + ($imul(3, i)) >> 0, ((x$10 < 0 || x$10 >= x$9.length) ? ($throwRuntimeError("index out of range"), undefined) : x$9[x$10]));
			_tmp = (((hv >>> 4 << 24 >>> 24) >> 0));
			_tmp$1 = ((((hv & 15) >>> 0) >> 0));
			h = _tmp;
			v = _tmp$1;
			if (h < 1 || 4 < h || v < 1 || 4 < v) {
				$s = -1; return new FormatError("luma/chroma subsampling ratio");
			}
			if ((h === 3) || (v === 3)) {
				$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
			}
			_2 = d.nComp;
			if (_2 === (1)) {
				_tmp$2 = 1;
				_tmp$3 = 1;
				h = _tmp$2;
				v = _tmp$3;
			} else if (_2 === (3)) {
				_3 = i;
				if (_3 === (0)) {
					if (v === 4) {
						$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
					}
				} else if (_3 === (1)) {
					if (!(((_r$1 = d.comp[0].h % h, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || !(((_r$2 = d.comp[0].v % v, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0))) {
						$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
					}
				} else if (_3 === (2)) {
					if (!((d.comp[1].h === h)) || !((d.comp[1].v === v))) {
						$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
					}
				}
			} else if (_2 === (4)) {
				_4 = i;
				if (_4 === (0)) {
					if (!((hv === 17)) && !((hv === 34))) {
						$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
					}
				} else if ((_4 === (1)) || (_4 === (2))) {
					if (!((hv === 17))) {
						$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
					}
				} else if (_4 === (3)) {
					if (!((d.comp[0].h === h)) || !((d.comp[0].v === v))) {
						$s = -1; return new UnsupportedError(errUnsupportedSubsamplingRatio);
					}
				}
			}
			(x$11 = d.comp, ((i < 0 || i >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[i])).h = h;
			(x$12 = d.comp, ((i < 0 || i >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[i])).v = v;
			i = i + (1) >> 0;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processSOF }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f.d = d; $f.err = err; $f.h = h; $f.hv = hv; $f.i = i; $f.j = j; $f.n = n; $f.v = v; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processSOF = function(n) { return this.$val.processSOF(n); };
	decoder.ptr.prototype.processDQT = function(n) {
		var _1, _i, _i$1, _r, _r$1, _r$2, _ref, _ref$1, _tuple, d, err, err$1, err$2, i, i$1, n, tq, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple = $f._tuple; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; i$1 = $f.i$1; n = $f.n; tq = $f.tq; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(n > 0)) { break; } */ if(!(n > 0)) { $s = 2; continue; }
			n = n - (1) >> 0;
			_r = d.readByte(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			x = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			tq = (x & 15) >>> 0;
			if (tq > 3) {
				$s = -1; return new FormatError("bad Tq value");
			}
				_1 = x >>> 4 << 24 >>> 24;
				/* */ if (_1 === (0)) { $s = 5; continue; }
				/* */ if (_1 === (1)) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_1 === (0)) { */ case 5:
					if (n < 64) {
						/* break loop; */ $s = 2; continue s;
					}
					n = n - (64) >> 0;
					_r$1 = d.readFull($subslice(new sliceType(d.tmp), 0, 64)); /* */ $s = 9; case 9: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err$1 = _r$1;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return err$1;
					}
					_ref = (x$1 = d.quant, ((tq < 0 || tq >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[tq]));
					_i = 0;
					while (true) {
						if (!(_i < 64)) { break; }
						i = _i;
						(x$3 = (x$4 = d.quant, ((tq < 0 || tq >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[tq])), ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i] = (((x$2 = d.tmp, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])) >> 0))));
						_i++;
					}
					$s = 8; continue;
				/* } else if (_1 === (1)) { */ case 6:
					if (n < 128) {
						/* break loop; */ $s = 2; continue s;
					}
					n = n - (128) >> 0;
					_r$2 = d.readFull($subslice(new sliceType(d.tmp), 0, 128)); /* */ $s = 10; case 10: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					err$2 = _r$2;
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						$s = -1; return err$2;
					}
					_ref$1 = (x$5 = d.quant, ((tq < 0 || tq >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[tq]));
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < 64)) { break; }
						i$1 = _i$1;
						(x$10 = (x$11 = d.quant, ((tq < 0 || tq >= x$11.length) ? ($throwRuntimeError("index out of range"), undefined) : x$11[tq])), ((i$1 < 0 || i$1 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[i$1] = (((((x$6 = d.tmp, x$7 = $imul(2, i$1), ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])) >> 0)) << 8 >> 0) | (((x$8 = d.tmp, x$9 = ($imul(2, i$1)) + 1 >> 0, ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9])) >> 0)))));
						_i$1++;
					}
					$s = 8; continue;
				/* } else { */ case 7:
					$s = -1; return new FormatError("bad Pq value");
				/* } */ case 8:
			case 4:
		/* } */ $s = 1; continue; case 2:
		if (!((n === 0))) {
			$s = -1; return new FormatError("DQT has wrong length");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processDQT }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.i$1 = i$1; $f.n = n; $f.tq = tq; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processDQT = function(n) { return this.$val.processDQT(n); };
	decoder.ptr.prototype.processDRI = function(n) {
		var _r, d, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((n === 2))) {
			$s = -1; return new FormatError("DRI has wrong length");
		}
		_r = d.readFull($subslice(new sliceType(d.tmp), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		d.ri = (((d.tmp[0] >> 0)) << 8 >> 0) + ((d.tmp[1] >> 0)) >> 0;
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processDRI }; } $f._r = _r; $f.d = d; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processDRI = function(n) { return this.$val.processDRI(n); };
	decoder.ptr.prototype.processApp0Marker = function(n) {
		var _r, _r$1, _r$2, d, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (n < 5) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n < 5) { */ case 1:
			_r = d.ignore(n); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = d.readFull($subslice(new sliceType(d.tmp), 0, 5)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		n = n - (5) >> 0;
		d.jfif = (d.tmp[0] === 74) && (d.tmp[1] === 70) && (d.tmp[2] === 73) && (d.tmp[3] === 70) && (d.tmp[4] === 0);
		/* */ if (n > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (n > 0) { */ case 5:
			_r$2 = d.ignore(n); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processApp0Marker }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processApp0Marker = function(n) { return this.$val.processApp0Marker(n); };
	decoder.ptr.prototype.processApp14Marker = function(n) {
		var _r, _r$1, _r$2, d, err, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; err = $f.err; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (n < 12) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n < 12) { */ case 1:
			_r = d.ignore(n); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			$s = -1; return _r;
		/* } */ case 2:
		_r$1 = d.readFull($subslice(new sliceType(d.tmp), 0, 12)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		n = n - (12) >> 0;
		if ((d.tmp[0] === 65) && (d.tmp[1] === 100) && (d.tmp[2] === 111) && (d.tmp[3] === 98) && (d.tmp[4] === 101)) {
			d.adobeTransformValid = true;
			d.adobeTransform = d.tmp[11];
		}
		/* */ if (n > 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (n > 0) { */ case 5:
			_r$2 = d.ignore(n); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return _r$2;
		/* } */ case 6:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processApp14Marker }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processApp14Marker = function(n) { return this.$val.processApp14Marker(n); };
	decoder.ptr.prototype.decode = function(r, configOnly) {
		var _1, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, configOnly, d, err, err$1, err$2, marker, n, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; configOnly = $f.configOnly; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; marker = $f.marker; n = $f.n; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		d.r = r;
		_r = d.readFull($subslice(new sliceType(d.tmp), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		if (!((d.tmp[0] === 255)) || !((d.tmp[1] === 216))) {
			$s = -1; return [$ifaceNil, new FormatError("missing SOI marker")];
		}
		/* while (true) { */ case 2:
			_r$1 = d.readFull($subslice(new sliceType(d.tmp), 0, 2)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			err$1 = _r$1;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err$1];
			}
			/* while (true) { */ case 5:
				/* if (!(!((d.tmp[0] === 255)))) { break; } */ if(!(!((d.tmp[0] === 255)))) { $s = 6; continue; }
				d.tmp[0] = d.tmp[1];
				_r$2 = d.readByte(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple = _r$2;
				d.tmp[1] = _tuple[0];
				err$1 = _tuple[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [$ifaceNil, err$1];
				}
			/* } */ $s = 5; continue; case 6:
			marker = d.tmp[1];
			/* */ if (marker === 0) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (marker === 0) { */ case 8:
				/* continue; */ $s = 2; continue;
			/* } */ case 9:
			/* while (true) { */ case 10:
				/* if (!(marker === 255)) { break; } */ if(!(marker === 255)) { $s = 11; continue; }
				_r$3 = d.readByte(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$1 = _r$3;
				marker = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [$ifaceNil, err$1];
				}
			/* } */ $s = 10; continue; case 11:
			if (marker === 217) {
				/* break; */ $s = 3; continue;
			}
			/* */ if (208 <= marker && marker <= 215) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (208 <= marker && marker <= 215) { */ case 13:
				/* continue; */ $s = 2; continue;
			/* } */ case 14:
			_r$4 = d.readFull($subslice(new sliceType(d.tmp), 0, 2)); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err$1 = _r$4;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err$1];
			}
			n = ((((d.tmp[0] >> 0)) << 8 >> 0) + ((d.tmp[1] >> 0)) >> 0) - 2 >> 0;
			if (n < 0) {
				$s = -1; return [$ifaceNil, new FormatError("short segment length")];
			}
				_1 = marker;
				/* */ if ((_1 === (192)) || (_1 === (193)) || (_1 === (194))) { $s = 17; continue; }
				/* */ if (_1 === (196)) { $s = 18; continue; }
				/* */ if (_1 === (219)) { $s = 19; continue; }
				/* */ if (_1 === (218)) { $s = 20; continue; }
				/* */ if (_1 === (221)) { $s = 21; continue; }
				/* */ if (_1 === (224)) { $s = 22; continue; }
				/* */ if (_1 === (238)) { $s = 23; continue; }
				/* */ if (224 <= marker && marker <= 239 || (marker === 254)) { $s = 24; continue; }
				/* */ if (marker < 192) { $s = 25; continue; }
				/* */ $s = 26; continue;
				/* if ((_1 === (192)) || (_1 === (193)) || (_1 === (194))) { */ case 17:
					d.baseline = marker === 192;
					d.progressive = marker === 194;
					_r$5 = d.processSOF(n); /* */ $s = 28; case 28: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					err$1 = _r$5;
					if (configOnly && d.jfif) {
						$s = -1; return [$ifaceNil, err$1];
					}
					$s = 27; continue;
				/* } else if (_1 === (196)) { */ case 18:
					/* */ if (configOnly) { $s = 29; continue; }
					/* */ $s = 30; continue;
					/* if (configOnly) { */ case 29:
						_r$6 = d.ignore(n); /* */ $s = 32; case 32: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
						err$1 = _r$6;
						$s = 31; continue;
					/* } else { */ case 30:
						_r$7 = d.processDHT(n); /* */ $s = 33; case 33: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						err$1 = _r$7;
					/* } */ case 31:
					$s = 27; continue;
				/* } else if (_1 === (219)) { */ case 19:
					/* */ if (configOnly) { $s = 34; continue; }
					/* */ $s = 35; continue;
					/* if (configOnly) { */ case 34:
						_r$8 = d.ignore(n); /* */ $s = 37; case 37: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						err$1 = _r$8;
						$s = 36; continue;
					/* } else { */ case 35:
						_r$9 = d.processDQT(n); /* */ $s = 38; case 38: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						err$1 = _r$9;
					/* } */ case 36:
					$s = 27; continue;
				/* } else if (_1 === (218)) { */ case 20:
					if (configOnly) {
						$s = -1; return [$ifaceNil, $ifaceNil];
					}
					_r$10 = d.processSOS(n); /* */ $s = 39; case 39: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					err$1 = _r$10;
					$s = 27; continue;
				/* } else if (_1 === (221)) { */ case 21:
					/* */ if (configOnly) { $s = 40; continue; }
					/* */ $s = 41; continue;
					/* if (configOnly) { */ case 40:
						_r$11 = d.ignore(n); /* */ $s = 43; case 43: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						err$1 = _r$11;
						$s = 42; continue;
					/* } else { */ case 41:
						_r$12 = d.processDRI(n); /* */ $s = 44; case 44: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
						err$1 = _r$12;
					/* } */ case 42:
					$s = 27; continue;
				/* } else if (_1 === (224)) { */ case 22:
					_r$13 = d.processApp0Marker(n); /* */ $s = 45; case 45: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
					err$1 = _r$13;
					$s = 27; continue;
				/* } else if (_1 === (238)) { */ case 23:
					_r$14 = d.processApp14Marker(n); /* */ $s = 46; case 46: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
					err$1 = _r$14;
					$s = 27; continue;
				/* } else if (224 <= marker && marker <= 239 || (marker === 254)) { */ case 24:
					_r$15 = d.ignore(n); /* */ $s = 47; case 47: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
					err$1 = _r$15;
					$s = 27; continue;
				/* } else if (marker < 192) { */ case 25:
					err$1 = new FormatError("unknown marker");
					$s = 27; continue;
				/* } else { */ case 26:
					err$1 = new UnsupportedError("unknown marker");
				/* } */ case 27:
			case 16:
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err$1];
			}
		/* } */ $s = 2; continue; case 3:
		if (d.progressive) {
			err$2 = d.reconstructProgressiveImage();
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err$2];
			}
		}
		if (!(d.img1 === ptrType.nil)) {
			$s = -1; return [d.img1, $ifaceNil];
		}
		if (!(d.img3 === ptrType$1.nil)) {
			if (!(d.blackPix === sliceType.nil)) {
				$s = -1; return d.applyBlack();
			} else if (d.isRGB()) {
				$s = -1; return d.convertToRGB();
			}
			$s = -1; return [d.img3, $ifaceNil];
		}
		$s = -1; return [$ifaceNil, new FormatError("missing SOS marker")];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.configOnly = configOnly; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.marker = marker; $f.n = n; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.decode = function(r, configOnly) { return this.$val.decode(r, configOnly); };
	decoder.ptr.prototype.applyBlack = function() {
		var _i, _q, _q$1, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, bounds, bounds$1, d, i, i$1, iBase, iBase$1, img, img$1, subsample, sx, sy, t, translation, translations, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1;
		d = this;
		if (!d.adobeTransformValid) {
			return [$ifaceNil, new UnsupportedError("unknown color model: 4-component JPEG doesn't have Adobe APP14 metadata")];
		}
		if (!((d.adobeTransform === 0))) {
			bounds = $clone(d.img3.Bounds(), image.Rectangle);
			img = image.NewRGBA($clone(bounds, image.Rectangle));
			imageutil.DrawYCbCr(img, $clone(bounds, image.Rectangle), d.img3, $clone(bounds.Min, image.Point));
			_tmp = 0;
			_tmp$1 = bounds.Min.Y;
			iBase = _tmp;
			y = _tmp$1;
			while (true) {
				if (!(y < bounds.Max.Y)) { break; }
				_tmp$2 = iBase + 3 >> 0;
				_tmp$3 = bounds.Min.X;
				i = _tmp$2;
				x = _tmp$3;
				while (true) {
					if (!(x < bounds.Max.X)) { break; }
					(x$3 = img.Pix, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (255 - (x$1 = d.blackPix, x$2 = ($imul(((y - bounds.Min.Y >> 0)), d.blackStride)) + ((x - bounds.Min.X >> 0)) >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) << 24 >>> 24)));
					_tmp$4 = i + 4 >> 0;
					_tmp$5 = x + 1 >> 0;
					i = _tmp$4;
					x = _tmp$5;
				}
				_tmp$6 = iBase + img.Stride >> 0;
				_tmp$7 = y + 1 >> 0;
				iBase = _tmp$6;
				y = _tmp$7;
			}
			return [new image.CMYK.ptr(img.Pix, img.Stride, $clone(img.Rect, image.Rectangle)), $ifaceNil];
		}
		bounds$1 = $clone(d.img3.Bounds(), image.Rectangle);
		img$1 = image.NewCMYK($clone(bounds$1, image.Rectangle));
		translations = $toNativeArray($kindStruct, [new structType.ptr(d.img3.Y, d.img3.YStride), new structType.ptr(d.img3.Cb, d.img3.CStride), new structType.ptr(d.img3.Cr, d.img3.CStride), new structType.ptr(d.blackPix, d.blackStride)]);
		_ref = translations;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			t = _i;
			translation = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), structType);
			subsample = !(((x$4 = d.comp, ((t < 0 || t >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[t])).h === d.comp[0].h)) || !(((x$5 = d.comp, ((t < 0 || t >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[t])).v === d.comp[0].v));
			_tmp$8 = 0;
			_tmp$9 = bounds$1.Min.Y;
			iBase$1 = _tmp$8;
			y$1 = _tmp$9;
			while (true) {
				if (!(y$1 < bounds$1.Max.Y)) { break; }
				sy = y$1 - bounds$1.Min.Y >> 0;
				if (subsample) {
					sy = (_q = sy / (2), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				}
				_tmp$10 = iBase$1 + t >> 0;
				_tmp$11 = bounds$1.Min.X;
				i$1 = _tmp$10;
				x$6 = _tmp$11;
				while (true) {
					if (!(x$6 < bounds$1.Max.X)) { break; }
					sx = x$6 - bounds$1.Min.X >> 0;
					if (subsample) {
						sx = (_q$1 = sx / (2), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
					}
					(x$9 = img$1.Pix, ((i$1 < 0 || i$1 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i$1] = (255 - (x$7 = translation.src, x$8 = ($imul(sy, translation.stride)) + sx >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])) << 24 >>> 24)));
					_tmp$12 = i$1 + 4 >> 0;
					_tmp$13 = x$6 + 1 >> 0;
					i$1 = _tmp$12;
					x$6 = _tmp$13;
				}
				_tmp$14 = iBase$1 + img$1.Stride >> 0;
				_tmp$15 = y$1 + 1 >> 0;
				iBase$1 = _tmp$14;
				y$1 = _tmp$15;
			}
			_i++;
		}
		return [img$1, $ifaceNil];
	};
	decoder.prototype.applyBlack = function() { return this.$val.applyBlack(); };
	decoder.ptr.prototype.isRGB = function() {
		var d;
		d = this;
		if (d.jfif) {
			return false;
		}
		if (d.adobeTransformValid && (d.adobeTransform === 0)) {
			return true;
		}
		return (d.comp[0].c === 82) && (d.comp[1].c === 71) && (d.comp[2].c === 66);
	};
	decoder.prototype.isRGB = function() { return this.$val.isRGB(); };
	decoder.ptr.prototype.convertToRGB = function() {
		var _q, _q$1, _q$2, _tmp, _tmp$1, bounds, cScale, co, d, i, iMax, img, po, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yo;
		d = this;
		cScale = (_q = d.comp[0].h / d.comp[1].h, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		bounds = $clone(d.img3.Bounds(), image.Rectangle);
		img = image.NewRGBA($clone(bounds, image.Rectangle));
		y = bounds.Min.Y;
		while (true) {
			if (!(y < bounds.Max.Y)) { break; }
			po = img.PixOffset(bounds.Min.X, y);
			yo = d.img3.YOffset(bounds.Min.X, y);
			co = d.img3.COffset(bounds.Min.X, y);
			_tmp = 0;
			_tmp$1 = bounds.Max.X - bounds.Min.X >> 0;
			i = _tmp;
			iMax = _tmp$1;
			while (true) {
				if (!(i < iMax)) { break; }
				(x$2 = img.Pix, x$3 = (po + ($imul(4, i)) >> 0) + 0 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = (x = d.img3.Y, x$1 = yo + i >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]))));
				(x$6 = img.Pix, x$7 = (po + ($imul(4, i)) >> 0) + 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = (x$4 = d.img3.Cb, x$5 = co + (_q$1 = i / cScale, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5]))));
				(x$10 = img.Pix, x$11 = (po + ($imul(4, i)) >> 0) + 2 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = (x$8 = d.img3.Cr, x$9 = co + (_q$2 = i / cScale, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]))));
				(x$12 = img.Pix, x$13 = (po + ($imul(4, i)) >> 0) + 3 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13] = 255));
				i = i + (1) >> 0;
			}
			y = y + (1) >> 0;
		}
		return [img, $ifaceNil];
	};
	decoder.prototype.convertToRGB = function() { return this.$val.convertToRGB(); };
	Decode = function(r) {
		var _r, d, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, new bits.ptr(0, 0, 0), new structType$1.ptr(arrayType$4.zero(), 0, 0, 0), 0, 0, ptrType.nil, ptrType$1.nil, sliceType.nil, 0, 0, 0, false, false, false, false, 0, 0, arrayType$5.zero(), arrayType$6.zero(), arrayType$10.zero(), arrayType$12.zero(), arrayType$13.zero());
		_r = d.decode(r, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f._r = _r; $f.d = d; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	DecodeConfig = function(r) {
		var _1, _r, _tuple, cm, d, err, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _tuple = $f._tuple; cm = $f.cm; d = $f.d; err = $f.err; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = new decoder.ptr($ifaceNil, new bits.ptr(0, 0, 0), new structType$1.ptr(arrayType$4.zero(), 0, 0, 0), 0, 0, ptrType.nil, ptrType$1.nil, sliceType.nil, 0, 0, 0, false, false, false, false, 0, 0, arrayType$5.zero(), arrayType$6.zero(), arrayType$10.zero(), arrayType$12.zero(), arrayType$13.zero());
		_r = d.decode(r, true); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err];
		}
		_1 = d.nComp;
		if (_1 === (1)) {
			$s = -1; return [new image.Config.ptr(color.GrayModel, d.width, d.height), $ifaceNil];
		} else if (_1 === (3)) {
			cm = color.YCbCrModel;
			if (d.isRGB()) {
				cm = color.RGBAModel;
			}
			$s = -1; return [new image.Config.ptr(cm, d.width, d.height), $ifaceNil];
		} else if (_1 === (4)) {
			$s = -1; return [new image.Config.ptr(color.CMYKModel, d.width, d.height), $ifaceNil];
		}
		$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), new FormatError("missing SOF marker")];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeConfig }; } $f._1 = _1; $f._r = _r; $f._tuple = _tuple; $f.cm = cm; $f.d = d; $f.err = err; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DecodeConfig = DecodeConfig;
	init = function() {
		image.RegisterFormat("jpeg", "\xFF\xD8", Decode, DecodeConfig);
	};
	decoder.ptr.prototype.makeImg = function(mxx, myy) {
		var _1, _q, _q$1, _tmp, _tmp$1, d, h0, h3, hRatio, m, m$1, mxx, myy, subsampleRatio, v0, v3, vRatio;
		d = this;
		if (d.nComp === 1) {
			m = image.NewGray($clone(image.Rect(0, 0, $imul(8, mxx), $imul(8, myy)), image.Rectangle));
			d.img1 = $assertType(m.SubImage($clone(image.Rect(0, 0, d.width, d.height), image.Rectangle)), ptrType);
			return;
		}
		h0 = d.comp[0].h;
		v0 = d.comp[0].v;
		hRatio = (_q = h0 / d.comp[1].h, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		vRatio = (_q$1 = v0 / d.comp[1].v, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		subsampleRatio = 0;
		_1 = (hRatio << 4 >> 0) | vRatio;
		if (_1 === (17)) {
			subsampleRatio = 0;
		} else if (_1 === (18)) {
			subsampleRatio = 3;
		} else if (_1 === (33)) {
			subsampleRatio = 1;
		} else if (_1 === (34)) {
			subsampleRatio = 2;
		} else if (_1 === (65)) {
			subsampleRatio = 4;
		} else if (_1 === (66)) {
			subsampleRatio = 5;
		} else {
			$panic(new $String("unreachable"));
		}
		m$1 = image.NewYCbCr($clone(image.Rect(0, 0, $imul(($imul(8, h0)), mxx), $imul(($imul(8, v0)), myy)), image.Rectangle), subsampleRatio);
		d.img3 = $assertType(m$1.SubImage($clone(image.Rect(0, 0, d.width, d.height), image.Rectangle)), ptrType$1);
		if (d.nComp === 4) {
			_tmp = d.comp[3].h;
			_tmp$1 = d.comp[3].v;
			h3 = _tmp;
			v3 = _tmp$1;
			d.blackPix = $makeSlice(sliceType, ($imul(($imul(($imul(($imul(($imul(8, h3)), mxx)), 8)), v3)), myy)));
			d.blackStride = $imul(($imul(8, h3)), mxx);
		}
	};
	decoder.prototype.makeImg = function(mxx, myy) { return this.$val.makeImg(mxx, myy); };
	decoder.ptr.prototype.processSOS = function(n) {
		var _i, _q, _q$1, _q$2, _q$3, _r, _r$1, _r$10, _r$11, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, ac, ah, al, b, bits$1, blockCount, bx, by, comp, compIndex, compIndex$1, compIndex$2, cs, d, dc, dcDelta, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, expectedRST, h0, hi, huff, i, i$1, i$2, j, j$1, j$2, mcu, mx, mxx, my, myy, n, nComp, q, scan, t, t$1, totalHV, v0, val0, val1, value, value$1, vi, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2, y$3, zig, zigEnd, zigStart, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; ac = $f.ac; ah = $f.ah; al = $f.al; b = $f.b; bits$1 = $f.bits$1; blockCount = $f.blockCount; bx = $f.bx; by = $f.by; comp = $f.comp; compIndex = $f.compIndex; compIndex$1 = $f.compIndex$1; compIndex$2 = $f.compIndex$2; cs = $f.cs; d = $f.d; dc = $f.dc; dcDelta = $f.dcDelta; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; err$5 = $f.err$5; err$6 = $f.err$6; err$7 = $f.err$7; expectedRST = $f.expectedRST; h0 = $f.h0; hi = $f.hi; huff = $f.huff; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; mcu = $f.mcu; mx = $f.mx; mxx = $f.mxx; my = $f.my; myy = $f.myy; n = $f.n; nComp = $f.nComp; q = $f.q; scan = $f.scan; t = $f.t; t$1 = $f.t$1; totalHV = $f.totalHV; v0 = $f.v0; val0 = $f.val0; val1 = $f.val1; value = $f.value; value$1 = $f.value$1; vi = $f.vi; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; zig = $f.zig; zigEnd = $f.zigEnd; zigStart = $f.zigStart; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		d = this;
		if (d.nComp === 0) {
			$s = -1; return new FormatError("missing SOF marker");
		}
		if (n < 6 || (4 + ($imul(2, d.nComp)) >> 0) < n || !(((_r = n % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			$s = -1; return new FormatError("SOS has wrong length");
		}
		_r$1 = d.readFull($subslice(new sliceType(d.tmp), 0, n)); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		nComp = ((d.tmp[0] >> 0));
		if (!((n === (4 + ($imul(2, nComp)) >> 0)))) {
			$s = -1; return new FormatError("SOS length inconsistent with number of components");
		}
		scan = arrayType$14.zero();
		totalHV = 0;
		i = 0;
		while (true) {
			if (!(i < nComp)) { break; }
			cs = (x = d.tmp, x$1 = 1 + ($imul(2, i)) >> 0, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
			compIndex = -1;
			_ref = $subslice(new sliceType$2(d.comp), 0, d.nComp);
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				comp = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), component);
				if (cs === comp.c) {
					compIndex = j;
				}
				_i++;
			}
			if (compIndex < 0) {
				$s = -1; return new FormatError("unknown component selector");
			}
			((i < 0 || i >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i]).compIndex = ((compIndex << 24 >>> 24));
			j$1 = 0;
			while (true) {
				if (!(j$1 < i)) { break; }
				if (((i < 0 || i >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i]).compIndex === ((j$1 < 0 || j$1 >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[j$1]).compIndex) {
					$s = -1; return new FormatError("repeated component selector");
				}
				j$1 = j$1 + (1) >> 0;
			}
			totalHV = totalHV + (($imul((x$2 = d.comp, ((compIndex < 0 || compIndex >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[compIndex])).h, (x$3 = d.comp, ((compIndex < 0 || compIndex >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[compIndex])).v))) >> 0;
			((i < 0 || i >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i]).td = (x$4 = d.tmp, x$5 = 2 + ($imul(2, i)) >> 0, ((x$5 < 0 || x$5 >= x$4.length) ? ($throwRuntimeError("index out of range"), undefined) : x$4[x$5])) >>> 4 << 24 >>> 24;
			t = ((i < 0 || i >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i]).td;
			if (t > 3 || (d.baseline && t > 1)) {
				$s = -1; return new FormatError("bad Td value");
			}
			((i < 0 || i >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i]).ta = ((x$6 = d.tmp, x$7 = 2 + ($imul(2, i)) >> 0, ((x$7 < 0 || x$7 >= x$6.length) ? ($throwRuntimeError("index out of range"), undefined) : x$6[x$7])) & 15) >>> 0;
			t$1 = ((i < 0 || i >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i]).ta;
			if (t$1 > 3 || (d.baseline && t$1 > 1)) {
				$s = -1; return new FormatError("bad Ta value");
			}
			i = i + (1) >> 0;
		}
		if (d.nComp > 1 && totalHV > 10) {
			$s = -1; return new FormatError("total sampling factors too large");
		}
		_tmp = 0;
		_tmp$1 = 63;
		_tmp$2 = 0;
		_tmp$3 = 0;
		zigStart = _tmp;
		zigEnd = _tmp$1;
		ah = _tmp$2;
		al = _tmp$3;
		if (d.progressive) {
			zigStart = (((x$8 = d.tmp, x$9 = 1 + ($imul(2, nComp)) >> 0, ((x$9 < 0 || x$9 >= x$8.length) ? ($throwRuntimeError("index out of range"), undefined) : x$8[x$9])) >> 0));
			zigEnd = (((x$10 = d.tmp, x$11 = 2 + ($imul(2, nComp)) >> 0, ((x$11 < 0 || x$11 >= x$10.length) ? ($throwRuntimeError("index out of range"), undefined) : x$10[x$11])) >> 0));
			ah = ((((x$12 = d.tmp, x$13 = 3 + ($imul(2, nComp)) >> 0, ((x$13 < 0 || x$13 >= x$12.length) ? ($throwRuntimeError("index out of range"), undefined) : x$12[x$13])) >>> 4 << 24 >>> 24) >>> 0));
			al = (((((x$14 = d.tmp, x$15 = 3 + ($imul(2, nComp)) >> 0, ((x$15 < 0 || x$15 >= x$14.length) ? ($throwRuntimeError("index out of range"), undefined) : x$14[x$15])) & 15) >>> 0) >>> 0));
			if (((zigStart === 0) && !((zigEnd === 0))) || zigStart > zigEnd || 64 <= zigEnd) {
				$s = -1; return new FormatError("bad spectral selection bounds");
			}
			if (!((zigStart === 0)) && !((nComp === 1))) {
				$s = -1; return new FormatError("progressive AC coefficients for more than one component");
			}
			if (!((ah === 0)) && !((ah === (al + 1 >>> 0)))) {
				$s = -1; return new FormatError("bad successive approximation values");
			}
		}
		_tmp$4 = d.comp[0].h;
		_tmp$5 = d.comp[0].v;
		h0 = _tmp$4;
		v0 = _tmp$5;
		mxx = (_q = (((d.width + ($imul(8, h0)) >> 0) - 1 >> 0)) / (($imul(8, h0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		myy = (_q$1 = (((d.height + ($imul(8, v0)) >> 0) - 1 >> 0)) / (($imul(8, v0))), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		if (d.img1 === ptrType.nil && d.img3 === ptrType$1.nil) {
			d.makeImg(mxx, myy);
		}
		if (d.progressive) {
			i$1 = 0;
			while (true) {
				if (!(i$1 < nComp)) { break; }
				compIndex$1 = ((i$1 < 0 || i$1 >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i$1]).compIndex;
				if ((x$16 = d.progCoeffs, ((compIndex$1 < 0 || compIndex$1 >= x$16.length) ? ($throwRuntimeError("index out of range"), undefined) : x$16[compIndex$1])) === sliceType$1.nil) {
					(x$19 = d.progCoeffs, ((compIndex$1 < 0 || compIndex$1 >= x$19.length) ? ($throwRuntimeError("index out of range"), undefined) : x$19[compIndex$1] = $makeSlice(sliceType$1, ($imul(($imul(($imul(mxx, myy)), (x$17 = d.comp, ((compIndex$1 < 0 || compIndex$1 >= x$17.length) ? ($throwRuntimeError("index out of range"), undefined) : x$17[compIndex$1])).h)), (x$18 = d.comp, ((compIndex$1 < 0 || compIndex$1 >= x$18.length) ? ($throwRuntimeError("index out of range"), undefined) : x$18[compIndex$1])).v)))));
				}
				i$1 = i$1 + (1) >> 0;
			}
		}
		bits.copy(d.bits, new bits.ptr(0, 0, 0));
		_tmp$6 = 0;
		_tmp$7 = 208;
		mcu = _tmp$6;
		expectedRST = _tmp$7;
		b[0] = arrayType$11.zero();
		dc = arrayType$15.zero();
		_tmp$8 = 0;
		_tmp$9 = 0;
		bx = _tmp$8;
		by = _tmp$9;
		blockCount = 0;
		my = 0;
		/* while (true) { */ case 2:
			/* if (!(my < myy)) { break; } */ if(!(my < myy)) { $s = 3; continue; }
			mx = 0;
			/* while (true) { */ case 4:
				/* if (!(mx < mxx)) { break; } */ if(!(mx < mxx)) { $s = 5; continue; }
				i$2 = 0;
				/* while (true) { */ case 6:
					/* if (!(i$2 < nComp)) { break; } */ if(!(i$2 < nComp)) { $s = 7; continue; }
					compIndex$2 = ((i$2 < 0 || i$2 >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i$2]).compIndex;
					hi = (x$20 = d.comp, ((compIndex$2 < 0 || compIndex$2 >= x$20.length) ? ($throwRuntimeError("index out of range"), undefined) : x$20[compIndex$2])).h;
					vi = (x$21 = d.comp, ((compIndex$2 < 0 || compIndex$2 >= x$21.length) ? ($throwRuntimeError("index out of range"), undefined) : x$21[compIndex$2])).v;
					j$2 = 0;
					/* while (true) { */ case 8:
						/* if (!(j$2 < ($imul(hi, vi)))) { break; } */ if(!(j$2 < ($imul(hi, vi)))) { $s = 9; continue; }
						/* */ if (!((nComp === 1))) { $s = 10; continue; }
						/* */ $s = 11; continue;
						/* if (!((nComp === 1))) { */ case 10:
							bx = ($imul(hi, mx)) + (_r$2 = j$2 % hi, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) >> 0;
							by = ($imul(vi, my)) + (_q$2 = j$2 / hi, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
							$s = 12; continue;
						/* } else { */ case 11:
							q = $imul(mxx, hi);
							bx = (_r$3 = blockCount % q, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero"));
							by = (_q$3 = blockCount / q, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
							blockCount = blockCount + (1) >> 0;
							if (($imul(bx, 8)) >= d.width || ($imul(by, 8)) >= d.height) {
								j$2 = j$2 + (1) >> 0;
								/* continue; */ $s = 8; continue;
							}
						/* } */ case 12:
						if (d.progressive) {
							block.copy(b[0], (x$22 = (x$23 = d.progCoeffs, ((compIndex$2 < 0 || compIndex$2 >= x$23.length) ? ($throwRuntimeError("index out of range"), undefined) : x$23[compIndex$2])), x$24 = ($imul(($imul(by, mxx)), hi)) + bx >> 0, ((x$24 < 0 || x$24 >= x$22.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$22.$array[x$22.$offset + x$24])));
						} else {
							block.copy(b[0], arrayType$11.zero());
						}
						/* */ if (!((ah === 0))) { $s = 13; continue; }
						/* */ $s = 14; continue;
						/* if (!((ah === 0))) { */ case 13:
							_r$4 = d.refine(b[0], (x$25 = d.huff[1], x$26 = ((i$2 < 0 || i$2 >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i$2]).ta, ((x$26 < 0 || x$26 >= x$25.length) ? ($throwRuntimeError("index out of range"), undefined) : x$25[x$26])), zigStart, zigEnd, (y = al, y < 32 ? (1 << y) : 0) >> 0); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
							err$1 = _r$4;
							if (!($interfaceIsEqual(err$1, $ifaceNil))) {
								$s = -1; return err$1;
							}
							$s = 15; continue;
						/* } else { */ case 14:
							zig = zigStart;
							/* */ if (zig === 0) { $s = 17; continue; }
							/* */ $s = 18; continue;
							/* if (zig === 0) { */ case 17:
								zig = zig + (1) >> 0;
								_r$5 = d.decodeHuffman((x$27 = d.huff[0], x$28 = ((i$2 < 0 || i$2 >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i$2]).td, ((x$28 < 0 || x$28 >= x$27.length) ? ($throwRuntimeError("index out of range"), undefined) : x$27[x$28]))); /* */ $s = 19; case 19: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
								_tuple = _r$5;
								value = _tuple[0];
								err$2 = _tuple[1];
								if (!($interfaceIsEqual(err$2, $ifaceNil))) {
									$s = -1; return err$2;
								}
								if (value > 16) {
									$s = -1; return new UnsupportedError("excessive DC component");
								}
								_r$6 = d.receiveExtend(value); /* */ $s = 20; case 20: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
								_tuple$1 = _r$6;
								dcDelta = _tuple$1[0];
								err$2 = _tuple$1[1];
								if (!($interfaceIsEqual(err$2, $ifaceNil))) {
									$s = -1; return err$2;
								}
								((compIndex$2 < 0 || compIndex$2 >= dc.length) ? ($throwRuntimeError("index out of range"), undefined) : dc[compIndex$2] = (((compIndex$2 < 0 || compIndex$2 >= dc.length) ? ($throwRuntimeError("index out of range"), undefined) : dc[compIndex$2]) + (dcDelta) >> 0));
								b[0][0] = ((y$1 = al, y$1 < 32 ? (((compIndex$2 < 0 || compIndex$2 >= dc.length) ? ($throwRuntimeError("index out of range"), undefined) : dc[compIndex$2]) << y$1) : 0) >> 0);
							/* } */ case 18:
							/* */ if (zig <= zigEnd && d.eobRun > 0) { $s = 21; continue; }
							/* */ $s = 22; continue;
							/* if (zig <= zigEnd && d.eobRun > 0) { */ case 21:
								d.eobRun = d.eobRun - (1) << 16 >>> 16;
								$s = 23; continue;
							/* } else { */ case 22:
								huff = (x$29 = d.huff[1], x$30 = ((i$2 < 0 || i$2 >= scan.length) ? ($throwRuntimeError("index out of range"), undefined) : scan[i$2]).ta, ((x$30 < 0 || x$30 >= x$29.length) ? ($throwRuntimeError("index out of range"), undefined) : x$29[x$30]));
								/* while (true) { */ case 24:
									/* if (!(zig <= zigEnd)) { break; } */ if(!(zig <= zigEnd)) { $s = 25; continue; }
									_r$7 = d.decodeHuffman(huff); /* */ $s = 26; case 26: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
									_tuple$2 = _r$7;
									value$1 = _tuple$2[0];
									err$3 = _tuple$2[1];
									if (!($interfaceIsEqual(err$3, $ifaceNil))) {
										$s = -1; return err$3;
									}
									val0 = value$1 >>> 4 << 24 >>> 24;
									val1 = (value$1 & 15) >>> 0;
									/* */ if (!((val1 === 0))) { $s = 27; continue; }
									/* */ $s = 28; continue;
									/* if (!((val1 === 0))) { */ case 27:
										zig = zig + (((val0 >> 0))) >> 0;
										if (zig > zigEnd) {
											/* break; */ $s = 25; continue;
										}
										_r$8 = d.receiveExtend(val1); /* */ $s = 30; case 30: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
										_tuple$3 = _r$8;
										ac = _tuple$3[0];
										err$4 = _tuple$3[1];
										if (!($interfaceIsEqual(err$4, $ifaceNil))) {
											$s = -1; return err$4;
										}
										(x$31 = ((zig < 0 || zig >= unzig.length) ? ($throwRuntimeError("index out of range"), undefined) : unzig[zig]), ((x$31 < 0 || x$31 >= b[0].length) ? ($throwRuntimeError("index out of range"), undefined) : b[0][x$31] = ((y$2 = al, y$2 < 32 ? (ac << y$2) : 0) >> 0)));
										$s = 29; continue;
									/* } else { */ case 28:
										/* */ if (!((val0 === 15))) { $s = 31; continue; }
										/* */ $s = 32; continue;
										/* if (!((val0 === 15))) { */ case 31:
											d.eobRun = (((y$3 = val0, y$3 < 32 ? (1 << y$3) : 0) << 16 >>> 16));
											/* */ if (!((val0 === 0))) { $s = 33; continue; }
											/* */ $s = 34; continue;
											/* if (!((val0 === 0))) { */ case 33:
												_r$9 = d.decodeBits(((val0 >> 0))); /* */ $s = 35; case 35: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
												_tuple$4 = _r$9;
												bits$1 = _tuple$4[0];
												err$5 = _tuple$4[1];
												if (!($interfaceIsEqual(err$5, $ifaceNil))) {
													$s = -1; return err$5;
												}
												d.eobRun = (d.eobRun | (((bits$1 << 16 >>> 16)))) >>> 0;
											/* } */ case 34:
											d.eobRun = d.eobRun - (1) << 16 >>> 16;
											/* break; */ $s = 25; continue;
										/* } */ case 32:
										zig = zig + (15) >> 0;
									/* } */ case 29:
									zig = zig + (1) >> 0;
								/* } */ $s = 24; continue; case 25:
							/* } */ case 23:
						/* } */ case 15:
						if (d.progressive) {
							block.copy((x$32 = (x$33 = d.progCoeffs, ((compIndex$2 < 0 || compIndex$2 >= x$33.length) ? ($throwRuntimeError("index out of range"), undefined) : x$33[compIndex$2])), x$34 = ($imul(($imul(by, mxx)), hi)) + bx >> 0, ((x$34 < 0 || x$34 >= x$32.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$32.$array[x$32.$offset + x$34])), b[0]);
							j$2 = j$2 + (1) >> 0;
							/* continue; */ $s = 8; continue;
						}
						err$6 = d.reconstructBlock(b[0], bx, by, ((compIndex$2 >> 0)));
						if (!($interfaceIsEqual(err$6, $ifaceNil))) {
							$s = -1; return err$6;
						}
						j$2 = j$2 + (1) >> 0;
					/* } */ $s = 8; continue; case 9:
					i$2 = i$2 + (1) >> 0;
				/* } */ $s = 6; continue; case 7:
				mcu = mcu + (1) >> 0;
				/* */ if (d.ri > 0 && ((_r$10 = mcu % d.ri, _r$10 === _r$10 ? _r$10 : $throwRuntimeError("integer divide by zero")) === 0) && mcu < ($imul(mxx, myy))) { $s = 36; continue; }
				/* */ $s = 37; continue;
				/* if (d.ri > 0 && ((_r$10 = mcu % d.ri, _r$10 === _r$10 ? _r$10 : $throwRuntimeError("integer divide by zero")) === 0) && mcu < ($imul(mxx, myy))) { */ case 36:
					_r$11 = d.readFull($subslice(new sliceType(d.tmp), 0, 2)); /* */ $s = 38; case 38: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
					err$7 = _r$11;
					if (!($interfaceIsEqual(err$7, $ifaceNil))) {
						$s = -1; return err$7;
					}
					if (!((d.tmp[0] === 255)) || !((d.tmp[1] === expectedRST))) {
						$s = -1; return new FormatError("bad RST marker");
					}
					expectedRST = expectedRST + (1) << 24 >>> 24;
					if (expectedRST === 216) {
						expectedRST = 208;
					}
					bits.copy(d.bits, new bits.ptr(0, 0, 0));
					arrayType$15.copy(dc, arrayType$15.zero());
					d.eobRun = 0;
				/* } */ case 37:
				mx = mx + (1) >> 0;
			/* } */ $s = 4; continue; case 5:
			my = my + (1) >> 0;
		/* } */ $s = 2; continue; case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.processSOS }; } $f._i = _i; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.ac = ac; $f.ah = ah; $f.al = al; $f.b = b; $f.bits$1 = bits$1; $f.blockCount = blockCount; $f.bx = bx; $f.by = by; $f.comp = comp; $f.compIndex = compIndex; $f.compIndex$1 = compIndex$1; $f.compIndex$2 = compIndex$2; $f.cs = cs; $f.d = d; $f.dc = dc; $f.dcDelta = dcDelta; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.err$5 = err$5; $f.err$6 = err$6; $f.err$7 = err$7; $f.expectedRST = expectedRST; $f.h0 = h0; $f.hi = hi; $f.huff = huff; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.mcu = mcu; $f.mx = mx; $f.mxx = mxx; $f.my = my; $f.myy = myy; $f.n = n; $f.nComp = nComp; $f.q = q; $f.scan = scan; $f.t = t; $f.t$1 = t$1; $f.totalHV = totalHV; $f.v0 = v0; $f.val0 = val0; $f.val1 = val1; $f.value = value; $f.value$1 = value$1; $f.vi = vi; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.zig = zig; $f.zigEnd = zigEnd; $f.zigStart = zigStart; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.processSOS = function(n) { return this.$val.processSOS(n); };
	decoder.ptr.prototype.refine = function(b, h, zigStart, zigEnd, delta) {
		var _1, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, b, bit, bit$1, bits$1, d, delta, err, err$1, err$2, err$3, err$4, h, val0, val1, value, x, y, z, zig, zigEnd, zigStart, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; b = $f.b; bit = $f.bit; bit$1 = $f.bit$1; bits$1 = $f.bits$1; d = $f.d; delta = $f.delta; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; err$4 = $f.err$4; h = $f.h; val0 = $f.val0; val1 = $f.val1; value = $f.value; x = $f.x; y = $f.y; z = $f.z; zig = $f.zig; zigEnd = $f.zigEnd; zigStart = $f.zigStart; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (zigStart === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (zigStart === 0) { */ case 1:
			if (!((zigEnd === 0))) {
				$panic(new $String("unreachable"));
			}
			_r = d.decodeBit(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			bit = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			if (bit) {
				b.nilCheck, b[0] = ((b.nilCheck, b[0]) | (delta));
			}
			$s = -1; return $ifaceNil;
		/* } */ case 2:
		zig = zigStart;
		/* */ if (d.eobRun === 0) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (d.eobRun === 0) { */ case 4:
			/* while (true) { */ case 6:
				/* if (!(zig <= zigEnd)) { break; } */ if(!(zig <= zigEnd)) { $s = 7; continue; }
				z = 0;
				_r$1 = d.decodeHuffman(h); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_tuple$1 = _r$1;
				value = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				val0 = value >>> 4 << 24 >>> 24;
				val1 = (value & 15) >>> 0;
					_1 = val1;
					/* */ if (_1 === (0)) { $s = 10; continue; }
					/* */ if (_1 === (1)) { $s = 11; continue; }
					/* */ $s = 12; continue;
					/* if (_1 === (0)) { */ case 10:
						/* */ if (!((val0 === 15))) { $s = 14; continue; }
						/* */ $s = 15; continue;
						/* if (!((val0 === 15))) { */ case 14:
							d.eobRun = (((y = val0, y < 32 ? (1 << y) : 0) << 16 >>> 16));
							/* */ if (!((val0 === 0))) { $s = 16; continue; }
							/* */ $s = 17; continue;
							/* if (!((val0 === 0))) { */ case 16:
								_r$2 = d.decodeBits(((val0 >> 0))); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
								_tuple$2 = _r$2;
								bits$1 = _tuple$2[0];
								err$2 = _tuple$2[1];
								if (!($interfaceIsEqual(err$2, $ifaceNil))) {
									$s = -1; return err$2;
								}
								d.eobRun = (d.eobRun | (((bits$1 << 16 >>> 16)))) >>> 0;
							/* } */ case 17:
							/* break loop; */ $s = 7; continue s;
						/* } */ case 15:
						$s = 13; continue;
					/* } else if (_1 === (1)) { */ case 11:
						z = delta;
						_r$3 = d.decodeBit(); /* */ $s = 19; case 19: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_tuple$3 = _r$3;
						bit$1 = _tuple$3[0];
						err$3 = _tuple$3[1];
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							$s = -1; return err$3;
						}
						if (!bit$1) {
							z = -z;
						}
						$s = 13; continue;
					/* } else { */ case 12:
						$s = -1; return new FormatError("unexpected Huffman code");
					/* } */ case 13:
				case 9:
				_r$4 = d.refineNonZeroes(b, zig, zigEnd, ((val0 >> 0)), delta); /* */ $s = 20; case 20: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$4 = _r$4;
				zig = _tuple$4[0];
				err$1 = _tuple$4[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				if (zig > zigEnd) {
					$s = -1; return new FormatError("too many coefficients");
				}
				if (!((z === 0))) {
					(x = ((zig < 0 || zig >= unzig.length) ? ($throwRuntimeError("index out of range"), undefined) : unzig[zig]), b.nilCheck, ((x < 0 || x >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[x] = z));
				}
				zig = zig + (1) >> 0;
			/* } */ $s = 6; continue; case 7:
		/* } */ case 5:
		/* */ if (d.eobRun > 0) { $s = 21; continue; }
		/* */ $s = 22; continue;
		/* if (d.eobRun > 0) { */ case 21:
			d.eobRun = d.eobRun - (1) << 16 >>> 16;
			_r$5 = d.refineNonZeroes(b, zig, zigEnd, -1, delta); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_tuple$5 = _r$5;
			err$4 = _tuple$5[1];
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				$s = -1; return err$4;
			}
		/* } */ case 22:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.refine }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.b = b; $f.bit = bit; $f.bit$1 = bit$1; $f.bits$1 = bits$1; $f.d = d; $f.delta = delta; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.err$4 = err$4; $f.h = h; $f.val0 = val0; $f.val1 = val1; $f.value = value; $f.x = x; $f.y = y; $f.z = z; $f.zig = zig; $f.zigEnd = zigEnd; $f.zigStart = zigStart; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.refine = function(b, h, zigStart, zigEnd, delta) { return this.$val.refine(b, h, zigStart, zigEnd, delta); };
	decoder.ptr.prototype.refineNonZeroes = function(b, zig, zigEnd, nz, delta) {
		var _r, _tuple, b, bit, d, delta, err, nz, u, zig, zigEnd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; b = $f.b; bit = $f.bit; d = $f.d; delta = $f.delta; err = $f.err; nz = $f.nz; u = $f.u; zig = $f.zig; zigEnd = $f.zigEnd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* while (true) { */ case 1:
			/* if (!(zig <= zigEnd)) { break; } */ if(!(zig <= zigEnd)) { $s = 2; continue; }
			u = ((zig < 0 || zig >= unzig.length) ? ($throwRuntimeError("index out of range"), undefined) : unzig[zig]);
			/* */ if ((b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u])) === 0) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if ((b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u])) === 0) { */ case 3:
				if (nz === 0) {
					/* break; */ $s = 2; continue;
				}
				nz = nz - (1) >> 0;
				zig = zig + (1) >> 0;
				/* continue; */ $s = 1; continue;
			/* } */ case 4:
			_r = d.decodeBit(); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			bit = _tuple[0];
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			if (!bit) {
				zig = zig + (1) >> 0;
				/* continue; */ $s = 1; continue;
			}
			if ((b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u])) >= 0) {
				b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u] = ((b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u])) + (delta) >> 0));
			} else {
				b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u] = ((b.nilCheck, ((u < 0 || u >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[u])) - (delta) >> 0));
			}
			zig = zig + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [zig, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.refineNonZeroes }; } $f._r = _r; $f._tuple = _tuple; $f.b = b; $f.bit = bit; $f.d = d; $f.delta = delta; $f.err = err; $f.nz = nz; $f.u = u; $f.zig = zig; $f.zigEnd = zigEnd; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.refineNonZeroes = function(b, zig, zigEnd, nz, delta) { return this.$val.refineNonZeroes(b, zig, zigEnd, nz, delta); };
	decoder.ptr.prototype.reconstructProgressiveImage = function() {
		var _q, _q$1, _q$2, bx, by, d, err, h, h0, i, mxx, stride, v, x, x$1, x$2, x$3, x$4, x$5, x$6;
		d = this;
		h0 = d.comp[0].h;
		mxx = (_q = (((d.width + ($imul(8, h0)) >> 0) - 1 >> 0)) / (($imul(8, h0))), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = 0;
		while (true) {
			if (!(i < d.nComp)) { break; }
			if ((x = d.progCoeffs, ((i < 0 || i >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[i])) === sliceType$1.nil) {
				i = i + (1) >> 0;
				continue;
			}
			v = (_q$1 = ($imul(8, d.comp[0].v)) / (x$1 = d.comp, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])).v, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			h = (_q$2 = ($imul(8, d.comp[0].h)) / (x$2 = d.comp, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i])).h, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			stride = $imul(mxx, (x$3 = d.comp, ((i < 0 || i >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[i])).h);
			by = 0;
			while (true) {
				if (!(($imul(by, v)) < d.height)) { break; }
				bx = 0;
				while (true) {
					if (!(($imul(bx, h)) < d.width)) { break; }
					err = d.reconstructBlock((x$4 = (x$5 = d.progCoeffs, ((i < 0 || i >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[i])), x$6 = ($imul(by, stride)) + bx >> 0, ((x$6 < 0 || x$6 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$6])), bx, by, i);
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return err;
					}
					bx = bx + (1) >> 0;
				}
				by = by + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return $ifaceNil;
	};
	decoder.prototype.reconstructProgressiveImage = function() { return this.$val.reconstructProgressiveImage(); };
	decoder.ptr.prototype.reconstructBlock = function(b, bx, by, compIndex) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, b, bx, by, c, compIndex, d, dst, qt, stride, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, y, y8, yStride, zig;
		d = this;
		qt = (x = d.quant, x$1 = (x$2 = d.comp, ((compIndex < 0 || compIndex >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[compIndex])).tq, ((x$1 < 0 || x$1 >= x.length) ? ($throwRuntimeError("index out of range"), undefined) : x[x$1]));
		zig = 0;
		while (true) {
			if (!(zig < 64)) { break; }
			(x$4 = ((zig < 0 || zig >= unzig.length) ? ($throwRuntimeError("index out of range"), undefined) : unzig[zig]), b.nilCheck, ((x$4 < 0 || x$4 >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[x$4] = ($imul((x$3 = ((zig < 0 || zig >= unzig.length) ? ($throwRuntimeError("index out of range"), undefined) : unzig[zig]), (b.nilCheck, ((x$3 < 0 || x$3 >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[x$3]))), ((qt.nilCheck, ((zig < 0 || zig >= qt.length) ? ($throwRuntimeError("index out of range"), undefined) : qt[zig])))))));
			zig = zig + (1) >> 0;
		}
		idct(b);
		_tmp = (sliceType.nil);
		_tmp$1 = 0;
		dst = _tmp;
		stride = _tmp$1;
		if (d.nComp === 1) {
			_tmp$2 = $subslice(d.img1.Pix, ($imul(8, ((($imul(by, d.img1.Stride)) + bx >> 0)))));
			_tmp$3 = d.img1.Stride;
			dst = _tmp$2;
			stride = _tmp$3;
		} else {
			_1 = compIndex;
			if (_1 === (0)) {
				_tmp$4 = $subslice(d.img3.Y, ($imul(8, ((($imul(by, d.img3.YStride)) + bx >> 0)))));
				_tmp$5 = d.img3.YStride;
				dst = _tmp$4;
				stride = _tmp$5;
			} else if (_1 === (1)) {
				_tmp$6 = $subslice(d.img3.Cb, ($imul(8, ((($imul(by, d.img3.CStride)) + bx >> 0)))));
				_tmp$7 = d.img3.CStride;
				dst = _tmp$6;
				stride = _tmp$7;
			} else if (_1 === (2)) {
				_tmp$8 = $subslice(d.img3.Cr, ($imul(8, ((($imul(by, d.img3.CStride)) + bx >> 0)))));
				_tmp$9 = d.img3.CStride;
				dst = _tmp$8;
				stride = _tmp$9;
			} else if (_1 === (3)) {
				_tmp$10 = $subslice(d.blackPix, ($imul(8, ((($imul(by, d.blackStride)) + bx >> 0)))));
				_tmp$11 = d.blackStride;
				dst = _tmp$10;
				stride = _tmp$11;
			} else {
				return new UnsupportedError("too many components");
			}
		}
		y = 0;
		while (true) {
			if (!(y < 8)) { break; }
			y8 = $imul(y, 8);
			yStride = $imul(y, stride);
			x$5 = 0;
			while (true) {
				if (!(x$5 < 8)) { break; }
				c = (x$6 = y8 + x$5 >> 0, (b.nilCheck, ((x$6 < 0 || x$6 >= b.length) ? ($throwRuntimeError("index out of range"), undefined) : b[x$6])));
				if (c < -128) {
					c = 0;
				} else if (c > 127) {
					c = 255;
				} else {
					c = c + (128) >> 0;
				}
				(x$7 = yStride + x$5 >> 0, ((x$7 < 0 || x$7 >= dst.$length) ? ($throwRuntimeError("index out of range"), undefined) : dst.$array[dst.$offset + x$7] = ((c << 24 >>> 24))));
				x$5 = x$5 + (1) >> 0;
			}
			y = y + (1) >> 0;
		}
		return $ifaceNil;
	};
	decoder.prototype.reconstructBlock = function(b, bx, by, compIndex) { return this.$val.reconstructBlock(b, bx, by, compIndex); };
	$ptrType(huffmanLUT).prototype.init = function(s) {
		var _i, _ref, _tmp, _tmp$1, code, h, i, j, k, maxValue, nBits, s, v, x, x$1, x$2, x$3, x$4, y;
		h = this;
		maxValue = 0;
		_ref = s.value;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			v = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (((v >> 0)) > maxValue) {
				maxValue = ((v >> 0));
			}
			_i++;
		}
		h.$set((x = $makeSlice(sliceType$3, (maxValue + 1 >> 0)), $subslice(new huffmanLUT(x.$array), x.$offset, x.$offset + x.$length)));
		_tmp = 0;
		_tmp$1 = 0;
		code = _tmp;
		k = _tmp$1;
		i = 0;
		while (true) {
			if (!(i < 16)) { break; }
			nBits = (((i + 1 >> 0) >>> 0)) << 24 >>> 0;
			j = 0;
			while (true) {
				if (!(j < (x$1 = s.count, ((i < 0 || i >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[i])))) { break; }
				(x$2 = h.$get(), x$3 = (x$4 = s.value, ((k < 0 || k >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + k])), ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3] = ((nBits | code) >>> 0)));
				code = code + (1) >>> 0;
				k = k + (1) >> 0;
				j = j + (1) << 24 >>> 24;
			}
			code = (y = (1), y < 32 ? (code << y) : 0) >>> 0;
			i = i + (1) >> 0;
		}
	};
	init$1 = function() {
		var _i, _ref, i, s;
		_ref = theHuffmanSpec;
		_i = 0;
		while (true) {
			if (!(_i < 4)) { break; }
			i = _i;
			s = $clone(((_i < 0 || _i >= _ref.length) ? ($throwRuntimeError("index out of range"), undefined) : _ref[_i]), huffmanSpec);
			$indexPtr(theHuffmanLUT, i, ptrType$2).init($clone(s, huffmanSpec));
			_i++;
		}
	};
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "ensureNBits", name: "ensureNBits", pkg: "image/jpeg", typ: $funcType([$Int32], [$error], false)}, {prop: "receiveExtend", name: "receiveExtend", pkg: "image/jpeg", typ: $funcType([$Uint8], [$Int32, $error], false)}, {prop: "processDHT", name: "processDHT", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "decodeHuffman", name: "decodeHuffman", pkg: "image/jpeg", typ: $funcType([ptrType$5], [$Uint8, $error], false)}, {prop: "decodeBit", name: "decodeBit", pkg: "image/jpeg", typ: $funcType([], [$Bool, $error], false)}, {prop: "decodeBits", name: "decodeBits", pkg: "image/jpeg", typ: $funcType([$Int32], [$Uint32, $error], false)}, {prop: "fill", name: "fill", pkg: "image/jpeg", typ: $funcType([], [$error], false)}, {prop: "unreadByteStuffedByte", name: "unreadByteStuffedByte", pkg: "image/jpeg", typ: $funcType([], [], false)}, {prop: "readByte", name: "readByte", pkg: "image/jpeg", typ: $funcType([], [$Uint8, $error], false)}, {prop: "readByteStuffedByte", name: "readByteStuffedByte", pkg: "image/jpeg", typ: $funcType([], [$Uint8, $error], false)}, {prop: "readFull", name: "readFull", pkg: "image/jpeg", typ: $funcType([sliceType], [$error], false)}, {prop: "ignore", name: "ignore", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "processSOF", name: "processSOF", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "processDQT", name: "processDQT", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "processDRI", name: "processDRI", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "processApp0Marker", name: "processApp0Marker", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "processApp14Marker", name: "processApp14Marker", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "decode", name: "decode", pkg: "image/jpeg", typ: $funcType([io.Reader, $Bool], [image.Image, $error], false)}, {prop: "applyBlack", name: "applyBlack", pkg: "image/jpeg", typ: $funcType([], [image.Image, $error], false)}, {prop: "isRGB", name: "isRGB", pkg: "image/jpeg", typ: $funcType([], [$Bool], false)}, {prop: "convertToRGB", name: "convertToRGB", pkg: "image/jpeg", typ: $funcType([], [image.Image, $error], false)}, {prop: "makeImg", name: "makeImg", pkg: "image/jpeg", typ: $funcType([$Int, $Int], [], false)}, {prop: "processSOS", name: "processSOS", pkg: "image/jpeg", typ: $funcType([$Int], [$error], false)}, {prop: "refine", name: "refine", pkg: "image/jpeg", typ: $funcType([ptrType$6, ptrType$5, $Int32, $Int32, $Int32], [$error], false)}, {prop: "refineNonZeroes", name: "refineNonZeroes", pkg: "image/jpeg", typ: $funcType([ptrType$6, $Int32, $Int32, $Int32, $Int32], [$Int32, $error], false)}, {prop: "reconstructProgressiveImage", name: "reconstructProgressiveImage", pkg: "image/jpeg", typ: $funcType([], [$error], false)}, {prop: "reconstructBlock", name: "reconstructBlock", pkg: "image/jpeg", typ: $funcType([ptrType$6, $Int, $Int, $Int], [$error], false)}];
	ptrType$2.methods = [{prop: "init", name: "init", pkg: "image/jpeg", typ: $funcType([huffmanSpec], [], false)}];
	huffman.init("image/jpeg", [{prop: "nCodes", name: "nCodes", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "lut", name: "lut", anonymous: false, exported: false, typ: arrayType$7, tag: ""}, {prop: "vals", name: "vals", anonymous: false, exported: false, typ: arrayType$8, tag: ""}, {prop: "minCodes", name: "minCodes", anonymous: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "maxCodes", name: "maxCodes", anonymous: false, exported: false, typ: arrayType$3, tag: ""}, {prop: "valsIndices", name: "valsIndices", anonymous: false, exported: false, typ: arrayType$3, tag: ""}]);
	block.init($Int32, 64);
	component.init("image/jpeg", [{prop: "h", name: "h", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "v", name: "v", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "c", name: "c", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "tq", name: "tq", anonymous: false, exported: false, typ: $Uint8, tag: ""}]);
	bits.init("image/jpeg", [{prop: "a", name: "a", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "m", name: "m", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "n", name: "n", anonymous: false, exported: false, typ: $Int32, tag: ""}]);
	decoder.init("image/jpeg", [{prop: "r", name: "r", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "bits", name: "bits", anonymous: false, exported: false, typ: bits, tag: ""}, {prop: "bytes", name: "bytes", anonymous: false, exported: false, typ: structType$1, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "img1", name: "img1", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "img3", name: "img3", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "blackPix", name: "blackPix", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "blackStride", name: "blackStride", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "ri", name: "ri", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "nComp", name: "nComp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "baseline", name: "baseline", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "progressive", name: "progressive", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "jfif", name: "jfif", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "adobeTransformValid", name: "adobeTransformValid", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "adobeTransform", name: "adobeTransform", anonymous: false, exported: false, typ: $Uint8, tag: ""}, {prop: "eobRun", name: "eobRun", anonymous: false, exported: false, typ: $Uint16, tag: ""}, {prop: "comp", name: "comp", anonymous: false, exported: false, typ: arrayType$5, tag: ""}, {prop: "progCoeffs", name: "progCoeffs", anonymous: false, exported: false, typ: arrayType$6, tag: ""}, {prop: "huff", name: "huff", anonymous: false, exported: false, typ: arrayType$10, tag: ""}, {prop: "quant", name: "quant", anonymous: false, exported: false, typ: arrayType$12, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType$13, tag: ""}]);
	huffmanSpec.init("image/jpeg", [{prop: "count", name: "count", anonymous: false, exported: false, typ: arrayType$2, tag: ""}, {prop: "value", name: "value", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	huffmanLUT.init($Uint32);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = imageutil.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		theHuffmanLUT = arrayType.zero();
		errShortHuffmanData = "short Huffman data";
		errUnsupportedSubsamplingRatio = "luma/chroma subsampling ratio";
		unzig = $toNativeArray($kindInt, [0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);
		errMissingFF00 = "missing 0xff00 sequence";
		theHuffmanSpec = $toNativeArray($kindStruct, [new huffmanSpec.ptr($toNativeArray($kindUint8, [0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]), new sliceType([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])), new huffmanSpec.ptr($toNativeArray($kindUint8, [0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125]), new sliceType([1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250])), new huffmanSpec.ptr($toNativeArray($kindUint8, [0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]), new sliceType([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])), new huffmanSpec.ptr($toNativeArray($kindUint8, [0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119]), new sliceType([0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250]))]);
		init();
		init$1();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["hash/adler32"] = (function() {
	var $pkg = {}, $init, hash, digest, ptrType, sliceType, New, update, Checksum;
	hash = $packages["hash"];
	digest = $pkg.digest = $newType(4, $kindUint32, "adler32.digest", true, "hash/adler32", false, null);
	ptrType = $ptrType(digest);
	sliceType = $sliceType($Uint8);
	$ptrType(digest).prototype.Reset = function() {
		var d;
		d = this;
		d.$set(1);
	};
	New = function() {
		var d;
		d = $newDataPointer(0, ptrType);
		d.Reset();
		return d;
	};
	$pkg.New = New;
	$ptrType(digest).prototype.Size = function() {
		var d;
		d = this;
		return 4;
	};
	$ptrType(digest).prototype.BlockSize = function() {
		var d;
		d = this;
		return 4;
	};
	update = function(d, p) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, d, p, q, s1, s2, x;
		_tmp = ((((d & 65535) >>> 0) >>> 0));
		_tmp$1 = (((d >>> 16 >>> 0) >>> 0));
		s1 = _tmp;
		s2 = _tmp$1;
		while (true) {
			if (!(p.$length > 0)) { break; }
			q = sliceType.nil;
			if (p.$length > 5552) {
				_tmp$2 = $subslice(p, 0, 5552);
				_tmp$3 = $subslice(p, 5552);
				p = _tmp$2;
				q = _tmp$3;
			}
			while (true) {
				if (!(p.$length >= 4)) { break; }
				s1 = s1 + ((((0 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 0]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((1 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 1]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((2 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 2]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				s1 = s1 + ((((3 >= p.$length ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + 3]) >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				p = $subslice(p, 4);
			}
			_ref = p;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				x = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				s1 = s1 + (((x >>> 0))) >>> 0;
				s2 = s2 + (s1) >>> 0;
				_i++;
			}
			s1 = (_r = s1 % (65521), _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			s2 = (_r$1 = s2 % (65521), _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
			p = q;
		}
		return (((((s2 << 16 >>> 0) | s1) >>> 0) >>> 0));
	};
	$ptrType(digest).prototype.Write = function(p) {
		var _tmp, _tmp$1, d, err, nn, p;
		nn = 0;
		err = $ifaceNil;
		d = this;
		d.$set(update(d.$get(), p));
		_tmp = p.$length;
		_tmp$1 = $ifaceNil;
		nn = _tmp;
		err = _tmp$1;
		return [nn, err];
	};
	$ptrType(digest).prototype.Sum32 = function() {
		var d;
		d = this;
		return ((d.$get() >>> 0));
	};
	$ptrType(digest).prototype.Sum = function(in$1) {
		var d, in$1, s;
		d = this;
		s = ((d.$get() >>> 0));
		return $append(in$1, (((s >>> 24 >>> 0) << 24 >>> 24)), (((s >>> 16 >>> 0) << 24 >>> 24)), (((s >>> 8 >>> 0) << 24 >>> 24)), ((s << 24 >>> 24)));
	};
	Checksum = function(data) {
		var data;
		return ((update(1, data) >>> 0));
	};
	$pkg.Checksum = Checksum;
	ptrType.methods = [{prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "BlockSize", name: "BlockSize", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Write", name: "Write", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Sum32", name: "Sum32", pkg: "", typ: $funcType([], [$Uint32], false)}, {prop: "Sum", name: "Sum", pkg: "", typ: $funcType([sliceType], [sliceType], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = hash.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["compress/zlib"] = (function() {
	var $pkg = {}, $init, bufio, flate, errors, fmt, hash, adler32, io, reader, sliceType, arrayType, ptrType$2, NewReader, NewReaderDict;
	bufio = $packages["bufio"];
	flate = $packages["compress/flate"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	adler32 = $packages["hash/adler32"];
	io = $packages["io"];
	reader = $pkg.reader = $newType(0, $kindStruct, "zlib.reader", true, "compress/zlib", false, function(r_, decompressor_, digest_, err_, scratch_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.decompressor = $ifaceNil;
			this.digest = $ifaceNil;
			this.err = $ifaceNil;
			this.scratch = arrayType.zero();
			return;
		}
		this.r = r_;
		this.decompressor = decompressor_;
		this.digest = digest_;
		this.err = err_;
		this.scratch = scratch_;
	});
	sliceType = $sliceType($Uint8);
	arrayType = $arrayType($Uint8, 4);
	ptrType$2 = $ptrType(reader);
	NewReader = function(r) {
		var _r, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = NewReaderDict(r, sliceType.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReader }; } $f._r = _r; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReader = NewReader;
	NewReaderDict = function(r, dict) {
		var _r, dict, err, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dict = $f.dict; err = $f.err; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = new reader.ptr($ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, arrayType.zero());
		_r = z.Reset(r, dict); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		err = _r;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$s = -1; return [z, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewReaderDict }; } $f._r = _r; $f.dict = dict; $f.err = err; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewReaderDict = NewReaderDict;
	reader.ptr.prototype.Read = function(p) {
		var _r, _r$1, _r$2, _r$3, _tuple, _tuple$1, checksum, err, n, p, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; checksum = $f.checksum; err = $f.err; n = $f.n; p = $f.p; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			$s = -1; return [0, z.err];
		}
		n = 0;
		_r = z.decompressor.Read(p); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		z.err = _tuple[1];
		_r$1 = z.digest.Write($subslice(p, 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return [n, z.err];
		}
		_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			z.err = err;
			$s = -1; return [n, z.err];
		}
		checksum = ((((((((z.scratch[0] >>> 0)) << 24 >>> 0) | (((z.scratch[1] >>> 0)) << 16 >>> 0)) >>> 0) | (((z.scratch[2] >>> 0)) << 8 >>> 0)) >>> 0) | ((z.scratch[3] >>> 0))) >>> 0;
		_r$3 = z.digest.Sum32(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		/* */ if (!((checksum === _r$3))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((checksum === _r$3))) { */ case 4:
			z.err = $pkg.ErrChecksum;
			$s = -1; return [n, z.err];
		/* } */ case 5:
		$s = -1; return [n, io.EOF];
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.checksum = checksum; $f.err = err; $f.n = n; $f.p = p; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Read = function(p) { return this.$val.Read(p); };
	reader.ptr.prototype.Close = function() {
		var _r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		if (!($interfaceIsEqual(z.err, $ifaceNil)) && !($interfaceIsEqual(z.err, io.EOF))) {
			$s = -1; return z.err;
		}
		_r = z.decompressor.Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		z.err = _r;
		$s = -1; return z.err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Close }; } $f._r = _r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Close = function() { return this.$val.Close(); };
	reader.ptr.prototype.Reset = function(r, dict) {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, checksum, dict, fr, h, haveDict, ok, r, z, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; checksum = $f.checksum; dict = $f.dict; fr = $f.fr; h = $f.h; haveDict = $f.haveDict; ok = $f.ok; r = $f.r; z = $f.z; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		z = this;
		reader.copy(z, new reader.ptr($ifaceNil, z.decompressor, $ifaceNil, $ifaceNil, arrayType.zero()));
		_tuple = $assertType(r, flate.Reader, true);
		fr = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			z.r = fr;
		} else {
			z.r = bufio.NewReader(r);
		}
		_r = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 2)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple$1 = _r;
		z.err = _tuple$1[1];
		if (!($interfaceIsEqual(z.err, $ifaceNil))) {
			if ($interfaceIsEqual(z.err, io.EOF)) {
				z.err = io.ErrUnexpectedEOF;
			}
			$s = -1; return z.err;
		}
		h = ((((z.scratch[0] >>> 0)) << 8 >>> 0) | ((z.scratch[1] >>> 0))) >>> 0;
		if ((!((((z.scratch[0] & 15) >>> 0) === 8))) || (!(((_r$1 = h % 31, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)))) {
			z.err = $pkg.ErrHeader;
			$s = -1; return z.err;
		}
		haveDict = !((((z.scratch[1] & 32) >>> 0) === 0));
		/* */ if (haveDict) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (haveDict) { */ case 2:
			_r$2 = io.ReadFull(z.r, $subslice(new sliceType(z.scratch), 0, 4)); /* */ $s = 4; case 4: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			z.err = _tuple$2[1];
			if (!($interfaceIsEqual(z.err, $ifaceNil))) {
				if ($interfaceIsEqual(z.err, io.EOF)) {
					z.err = io.ErrUnexpectedEOF;
				}
				$s = -1; return z.err;
			}
			checksum = ((((((((z.scratch[0] >>> 0)) << 24 >>> 0) | (((z.scratch[1] >>> 0)) << 16 >>> 0)) >>> 0) | (((z.scratch[2] >>> 0)) << 8 >>> 0)) >>> 0) | ((z.scratch[3] >>> 0))) >>> 0;
			if (!((checksum === adler32.Checksum(dict)))) {
				z.err = $pkg.ErrDictionary;
				$s = -1; return z.err;
			}
		/* } */ case 3:
		/* */ if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if ($interfaceIsEqual(z.decompressor, $ifaceNil)) { */ case 5:
			/* */ if (haveDict) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (haveDict) { */ case 8:
				_r$3 = flate.NewReaderDict(z.r, dict); /* */ $s = 11; case 11: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				z.decompressor = _r$3;
				$s = 10; continue;
			/* } else { */ case 9:
				_r$4 = flate.NewReader(z.r); /* */ $s = 12; case 12: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				z.decompressor = _r$4;
			/* } */ case 10:
			$s = 7; continue;
		/* } else { */ case 6:
			_r$5 = $assertType(z.decompressor, flate.Resetter).Reset(z.r, dict); /* */ $s = 13; case 13: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
		/* } */ case 7:
		z.digest = adler32.New();
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: reader.ptr.prototype.Reset }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.checksum = checksum; $f.dict = dict; $f.fr = fr; $f.h = h; $f.haveDict = haveDict; $f.ok = ok; $f.r = r; $f.z = z; $f.$s = $s; $f.$r = $r; return $f;
	};
	reader.prototype.Reset = function(r, dict) { return this.$val.Reset(r, dict); };
	ptrType$2.methods = [{prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType], [$Int, $error], false)}, {prop: "Close", name: "Close", pkg: "", typ: $funcType([], [$error], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([io.Reader, sliceType], [$error], false)}];
	reader.init("compress/zlib", [{prop: "r", name: "r", anonymous: false, exported: false, typ: flate.Reader, tag: ""}, {prop: "decompressor", name: "decompressor", anonymous: false, exported: false, typ: io.ReadCloser, tag: ""}, {prop: "digest", name: "digest", anonymous: false, exported: false, typ: hash.Hash32, tag: ""}, {prop: "err", name: "err", anonymous: false, exported: false, typ: $error, tag: ""}, {prop: "scratch", name: "scratch", anonymous: false, exported: false, typ: arrayType, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = flate.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = adler32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ErrChecksum = errors.New("zlib: invalid checksum");
		$pkg.ErrDictionary = errors.New("zlib: invalid dictionary");
		$pkg.ErrHeader = errors.New("zlib: invalid header");
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["image/png"] = (function() {
	var $pkg = {}, $init, bufio, zlib, binary, fmt, hash, crc32, image, color, io, strconv, interlaceScan, decoder, FormatError, UnsupportedError, sliceType, sliceType$1, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, arrayType, arrayType$1, arrayType$2, ptrType$14, interlacing, chunkOrderError, abs, filterPaeth, cbPaletted, min, Decode, DecodeConfig, init;
	bufio = $packages["bufio"];
	zlib = $packages["compress/zlib"];
	binary = $packages["encoding/binary"];
	fmt = $packages["fmt"];
	hash = $packages["hash"];
	crc32 = $packages["hash/crc32"];
	image = $packages["image"];
	color = $packages["image/color"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	interlaceScan = $pkg.interlaceScan = $newType(0, $kindStruct, "png.interlaceScan", true, "image/png", false, function(xFactor_, yFactor_, xOffset_, yOffset_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.xFactor = 0;
			this.yFactor = 0;
			this.xOffset = 0;
			this.yOffset = 0;
			return;
		}
		this.xFactor = xFactor_;
		this.yFactor = yFactor_;
		this.xOffset = xOffset_;
		this.yOffset = yOffset_;
	});
	decoder = $pkg.decoder = $newType(0, $kindStruct, "png.decoder", true, "image/png", false, function(r_, img_, crc_, width_, height_, depth_, palette_, cb_, stage_, idatLength_, tmp_, interlace_, useTransparent_, transparent_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.img = $ifaceNil;
			this.crc = $ifaceNil;
			this.width = 0;
			this.height = 0;
			this.depth = 0;
			this.palette = color.Palette.nil;
			this.cb = 0;
			this.stage = 0;
			this.idatLength = 0;
			this.tmp = arrayType$1.zero();
			this.interlace = 0;
			this.useTransparent = false;
			this.transparent = arrayType$2.zero();
			return;
		}
		this.r = r_;
		this.img = img_;
		this.crc = crc_;
		this.width = width_;
		this.height = height_;
		this.depth = depth_;
		this.palette = palette_;
		this.cb = cb_;
		this.stage = stage_;
		this.idatLength = idatLength_;
		this.tmp = tmp_;
		this.interlace = interlace_;
		this.useTransparent = useTransparent_;
		this.transparent = transparent_;
	});
	FormatError = $pkg.FormatError = $newType(8, $kindString, "png.FormatError", true, "image/png", true, null);
	UnsupportedError = $pkg.UnsupportedError = $newType(8, $kindString, "png.UnsupportedError", true, "image/png", true, null);
	sliceType = $sliceType(interlaceScan);
	sliceType$1 = $sliceType($Uint8);
	sliceType$2 = $sliceType($emptyInterface);
	ptrType = $ptrType(image.Gray);
	ptrType$1 = $ptrType(image.RGBA);
	ptrType$2 = $ptrType(image.Paletted);
	ptrType$3 = $ptrType(image.NRGBA);
	ptrType$4 = $ptrType(image.Gray16);
	ptrType$5 = $ptrType(image.RGBA64);
	ptrType$6 = $ptrType(image.NRGBA64);
	ptrType$7 = $ptrType(image.Alpha);
	ptrType$8 = $ptrType(image.Alpha16);
	arrayType = $arrayType($Uint8, 4096);
	arrayType$1 = $arrayType($Uint8, 768);
	arrayType$2 = $arrayType($Uint8, 6);
	ptrType$14 = $ptrType(decoder);
	abs = function(x) {
		var m, x;
		m = x >> 31 >> 0;
		return (((x ^ m) >> 0)) - m >> 0;
	};
	filterPaeth = function(cdat, pdat, bytesPerPixel) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, a, b, bytesPerPixel, c, cdat, i, j, pa, pb, pc, pdat;
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = 0;
		_tmp$3 = 0;
		_tmp$4 = 0;
		_tmp$5 = 0;
		a = _tmp;
		b = _tmp$1;
		c = _tmp$2;
		pa = _tmp$3;
		pb = _tmp$4;
		pc = _tmp$5;
		i = 0;
		while (true) {
			if (!(i < bytesPerPixel)) { break; }
			_tmp$6 = 0;
			_tmp$7 = 0;
			a = _tmp$6;
			c = _tmp$7;
			j = i;
			while (true) {
				if (!(j < cdat.$length)) { break; }
				b = ((((j < 0 || j >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + j]) >> 0));
				pa = b - c >> 0;
				pb = a - c >> 0;
				pc = abs(pa + pb >> 0);
				pa = abs(pa);
				pb = abs(pb);
				if (pa <= pb && pa <= pc) {
				} else if (pb <= pc) {
					a = b;
				} else {
					a = c;
				}
				a = a + (((((j < 0 || j >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + j]) >> 0))) >> 0;
				a = a & (255);
				((j < 0 || j >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + j] = ((a << 24 >>> 24)));
				c = b;
				j = j + (bytesPerPixel) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	cbPaletted = function(cb) {
		var cb;
		return 7 <= cb && cb <= 10;
	};
	FormatError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "png: invalid format: " + (e);
	};
	$ptrType(FormatError).prototype.Error = function() { return new FormatError(this.$get()).Error(); };
	UnsupportedError.prototype.Error = function() {
		var e;
		e = this.$val;
		return "png: unsupported feature: " + (e);
	};
	$ptrType(UnsupportedError).prototype.Error = function() { return new UnsupportedError(this.$get()).Error(); };
	min = function(a, b) {
		var a, b;
		if (a < b) {
			return a;
		}
		return b;
	};
	decoder.ptr.prototype.parseIHDR = function(length) {
		var _1, _2, _3, _4, _5, _6, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, d, err, h, length, nPixels, w, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _5 = $f._5; _6 = $f._6; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; d = $f.d; err = $f.err; h = $f.h; length = $f.length; nPixels = $f.nPixels; w = $f.w; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((length === 13))) {
			$s = -1; return new FormatError("bad IHDR length");
		}
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, 13)); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		if (!((d.tmp[10] === 0))) {
			$s = -1; return new UnsupportedError("compression method");
		}
		if (!((d.tmp[11] === 0))) {
			$s = -1; return new UnsupportedError("filter method");
		}
		if (!((d.tmp[12] === 0)) && !((d.tmp[12] === 1))) {
			$s = -1; return new FormatError("invalid interlace method");
		}
		d.interlace = ((d.tmp[12] >> 0));
		w = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) >> 0));
		h = (($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 4, 8)) >> 0));
		if (w <= 0 || h <= 0) {
			$s = -1; return new FormatError("non-positive dimension");
		}
		nPixels = $mul64((new $Int64(0, w)), (new $Int64(0, h)));
		if (!((x = (new $Int64(0, (((nPixels.$low + ((nPixels.$high >> 31) * 4294967296)) >> 0)))), (nPixels.$high === x.$high && nPixels.$low === x.$low)))) {
			$s = -1; return new UnsupportedError("dimension overflow");
		}
		d.cb = 0;
		d.depth = ((d.tmp[8] >> 0));
		_1 = d.depth;
		if (_1 === (1)) {
			_2 = d.tmp[9];
			if (_2 === (0)) {
				d.cb = 1;
			} else if (_2 === (3)) {
				d.cb = 7;
			}
		} else if (_1 === (2)) {
			_3 = d.tmp[9];
			if (_3 === (0)) {
				d.cb = 2;
			} else if (_3 === (3)) {
				d.cb = 8;
			}
		} else if (_1 === (4)) {
			_4 = d.tmp[9];
			if (_4 === (0)) {
				d.cb = 3;
			} else if (_4 === (3)) {
				d.cb = 9;
			}
		} else if (_1 === (8)) {
			_5 = d.tmp[9];
			if (_5 === (0)) {
				d.cb = 4;
			} else if (_5 === (2)) {
				d.cb = 6;
			} else if (_5 === (3)) {
				d.cb = 10;
			} else if (_5 === (4)) {
				d.cb = 5;
			} else if (_5 === (6)) {
				d.cb = 11;
			}
		} else if (_1 === (16)) {
			_6 = d.tmp[9];
			if (_6 === (0)) {
				d.cb = 12;
			} else if (_6 === (2)) {
				d.cb = 14;
			} else if (_6 === (4)) {
				d.cb = 13;
			} else if (_6 === (6)) {
				d.cb = 15;
			}
		}
		/* */ if (d.cb === 0) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (d.cb === 0) { */ case 3:
			_r$2 = fmt.Sprintf("bit depth %d, color type %d", new sliceType$2([new $Uint8(d.tmp[8]), new $Uint8(d.tmp[9])])); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			$s = -1; return new UnsupportedError((_r$2));
		/* } */ case 4:
		_tmp = ((w >> 0));
		_tmp$1 = ((h >> 0));
		d.width = _tmp;
		d.height = _tmp$1;
		_r$3 = d.verifyChecksum(); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIHDR }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._5 = _5; $f._6 = _6; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.h = h; $f.length = length; $f.nPixels = nPixels; $f.w = w; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIHDR = function(length) { return this.$val.parseIHDR(length); };
	decoder.ptr.prototype.parsePLTE = function(length) {
		var _1, _q, _r, _r$1, _r$2, _r$3, _tuple, d, err, i, i$1, length, n, np, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _q = $f._q; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; d = $f.d; err = $f.err; i = $f.i; i$1 = $f.i$1; length = $f.length; n = $f.n; np = $f.np; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		np = (((_q = length / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0));
		if (!(((_r = length % 3, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0)) || np <= 0 || np > 256 || np > ((y = ((d.depth >>> 0)), y < 32 ? (1 << y) : 0) >> 0)) {
			$s = -1; return new FormatError("bad PLTE length");
		}
		_r$1 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, ($imul(3, np)))); /* */ $s = 1; case 1: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$2 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 2; case 2: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		_1 = d.cb;
		if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			d.palette = $makeSlice(color.Palette, 256);
			i = 0;
			while (true) {
				if (!(i < np)) { break; }
				(x$7 = d.palette, ((i < 0 || i >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + i] = (x = new color.RGBA.ptr((x$1 = d.tmp, x$2 = ($imul(3, i)) + 0 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? ($throwRuntimeError("index out of range"), undefined) : x$1[x$2])), (x$3 = d.tmp, x$4 = ($imul(3, i)) + 1 >> 0, ((x$4 < 0 || x$4 >= x$3.length) ? ($throwRuntimeError("index out of range"), undefined) : x$3[x$4])), (x$5 = d.tmp, x$6 = ($imul(3, i)) + 2 >> 0, ((x$6 < 0 || x$6 >= x$5.length) ? ($throwRuntimeError("index out of range"), undefined) : x$5[x$6])), 255), new x.constructor.elem(x))));
				i = i + (1) >> 0;
			}
			i$1 = np;
			while (true) {
				if (!(i$1 < 256)) { break; }
				(x$9 = d.palette, ((i$1 < 0 || i$1 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i$1] = (x$8 = new color.RGBA.ptr(0, 0, 0, 255), new x$8.constructor.elem(x$8))));
				i$1 = i$1 + (1) >> 0;
			}
			d.palette = $subslice(d.palette, 0, np);
		} else if ((_1 === (6)) || (_1 === (11)) || (_1 === (14)) || (_1 === (15))) {
		} else {
			$s = -1; return new FormatError("PLTE, color type mismatch");
		}
		_r$3 = d.verifyChecksum(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parsePLTE }; } $f._1 = _1; $f._q = _q; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.i = i; $f.i$1 = i$1; $f.length = length; $f.n = n; $f.np = np; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parsePLTE = function(length) { return this.$val.parsePLTE(length); };
	decoder.ptr.prototype.parsetRNS = function(length) {
		var _1, _2, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _tuple, _tuple$1, _tuple$2, d, err, err$1, err$2, i, length, n, n$1, n$2, rgba, x, x$1, x$2, x$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; i = $f.i; length = $f.length; n = $f.n; n$1 = $f.n$1; n$2 = $f.n$2; rgba = $f.rgba; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
			_1 = d.cb;
			/* */ if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) { $s = 2; continue; }
			/* */ if ((_1 === (6)) || (_1 === (14))) { $s = 3; continue; }
			/* */ if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4)) || (_1 === (12))) { */ case 2:
				if (!((length === 2))) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple = _r;
				n = _tuple[0];
				err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return err;
				}
				_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n)); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$1;
				$copySlice(new sliceType$1(d.transparent), $subslice(new sliceType$1(d.tmp), 0, length));
				_2 = d.cb;
				if (_2 === (1)) {
					d.transparent[1] = (d.transparent[1] * (255) << 24 >>> 24);
				} else if (_2 === (2)) {
					d.transparent[1] = (d.transparent[1] * (85) << 24 >>> 24);
				} else if (_2 === (3)) {
					d.transparent[1] = (d.transparent[1] * (17) << 24 >>> 24);
				}
				d.useTransparent = true;
				$s = 6; continue;
			/* } else if ((_1 === (6)) || (_1 === (14))) { */ case 3:
				if (!((length === 6))) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r$2 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_tuple$1 = _r$2;
				n$1 = _tuple$1[0];
				err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				_r$3 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n$1)); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$3;
				$copySlice(new sliceType$1(d.transparent), $subslice(new sliceType$1(d.tmp), 0, length));
				d.useTransparent = true;
				$s = 6; continue;
			/* } else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) { */ case 4:
				if (length > 256) {
					$s = -1; return new FormatError("bad tRNS length");
				}
				_r$4 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, length)); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$2 = _r$4;
				n$2 = _tuple$2[0];
				err$2 = _tuple$2[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					$s = -1; return err$2;
				}
				_r$5 = d.crc.Write($subslice(new sliceType$1(d.tmp), 0, n$2)); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$5;
				if (d.palette.$length < n$2) {
					d.palette = $subslice(d.palette, 0, n$2);
				}
				i = 0;
				while (true) {
					if (!(i < n$2)) { break; }
					rgba = $clone($assertType((x = d.palette, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), color.RGBA), color.RGBA);
					(x$3 = d.palette, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = (x$1 = new color.NRGBA.ptr(rgba.R, rgba.G, rgba.B, (x$2 = d.tmp, ((i < 0 || i >= x$2.length) ? ($throwRuntimeError("index out of range"), undefined) : x$2[i]))), new x$1.constructor.elem(x$1))));
					i = i + (1) >> 0;
				}
				$s = 6; continue;
			/* } else { */ case 5:
				$s = -1; return new FormatError("tRNS, color type mismatch");
			/* } */ case 6:
		case 1:
		_r$6 = d.verifyChecksum(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		$s = -1; return _r$6;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parsetRNS }; } $f._1 = _1; $f._2 = _2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.i = i; $f.length = length; $f.n = n; $f.n$1 = n$1; $f.n$2 = n$2; $f.rgba = rgba; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parsetRNS = function(length) { return this.$val.parsetRNS(length); };
	decoder.ptr.prototype.Read = function(p) {
		var _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, d, err, err$1, err$2, n, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; n = $f.n; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (p.$length === 0) {
			$s = -1; return [0, $ifaceNil];
		}
		/* while (true) { */ case 1:
			/* if (!(d.idatLength === 0)) { break; } */ if(!(d.idatLength === 0)) { $s = 2; continue; }
			_r = d.verifyChecksum(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [0, err];
			}
			_r$1 = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				$s = -1; return [0, err$1];
			}
			d.idatLength = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4));
			if (!(($bytesToString($subslice(new sliceType$1(d.tmp), 4, 8))) === "IDAT")) {
				$s = -1; return [0, new FormatError("not enough pixel data")];
			}
			$r = d.crc.Reset(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$2 = d.crc.Write($subslice(new sliceType$1(d.tmp), 4, 8)); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
		/* } */ $s = 1; continue; case 2:
		if (((d.idatLength >> 0)) < 0) {
			$s = -1; return [0, new UnsupportedError("IDAT chunk length overflow")];
		}
		_r$3 = d.r.Read($subslice(p, 0, min(p.$length, ((d.idatLength >> 0))))); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$1 = _r$3;
		n = _tuple$1[0];
		err$2 = _tuple$1[1];
		_r$4 = d.crc.Write($subslice(p, 0, n)); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$4;
		d.idatLength = d.idatLength - (((n >>> 0))) >>> 0;
		$s = -1; return [n, err$2];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.Read }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.n = n; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.Read = function(p) { return this.$val.Read(p); };
	decoder.ptr.prototype.decode = function() {
		var _r, _r$1, _r$2, _r$3, _r$4, _r$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, d, err, err$1, i, imagePass, img, n, pass, r, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; d = $f.d; err = $f.err; err$1 = $f.err$1; i = $f.i; imagePass = $f.imagePass; img = $f.img; n = $f.n; pass = $f.pass; r = $f.r; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		d = this;
		_r = zlib.NewReader(d); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [$ifaceNil, err];
		}
		$deferred.push([$methodVal(r, "Close"), []]);
		img = $ifaceNil;
		/* */ if (d.interlace === 0) { $s = 2; continue; }
		/* */ if (d.interlace === 1) { $s = 3; continue; }
		/* */ $s = 4; continue;
		/* if (d.interlace === 0) { */ case 2:
			_r$1 = d.readImagePass(r, 0, false); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			img = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
			$s = 4; continue;
		/* } else if (d.interlace === 1) { */ case 3:
			_r$2 = d.readImagePass($ifaceNil, 0, true); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$2 = _r$2;
			img = _tuple$2[0];
			err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [$ifaceNil, err];
			}
			pass = 0;
			/* while (true) { */ case 7:
				/* if (!(pass < 7)) { break; } */ if(!(pass < 7)) { $s = 8; continue; }
				_r$3 = d.readImagePass(r, pass, false); /* */ $s = 9; case 9: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$3 = _r$3;
				imagePass = _tuple$3[0];
				err$1 = _tuple$3[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return [$ifaceNil, err$1];
				}
				/* */ if (!($interfaceIsEqual(imagePass, $ifaceNil))) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!($interfaceIsEqual(imagePass, $ifaceNil))) { */ case 10:
					$r = d.mergePassInto(img, imagePass, pass); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 11:
				pass = pass + (1) >> 0;
			/* } */ $s = 7; continue; case 8:
		/* } */ case 4:
		n = 0;
		i = 0;
		/* while (true) { */ case 13:
			/* if (!((n === 0) && $interfaceIsEqual(err, $ifaceNil))) { break; } */ if(!((n === 0) && $interfaceIsEqual(err, $ifaceNil))) { $s = 14; continue; }
			if (i === 100) {
				$s = -1; return [$ifaceNil, io.ErrNoProgress];
			}
			_r$4 = r.Read($subslice(new sliceType$1(d.tmp), 0, 1)); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple$4 = _r$4;
			n = _tuple$4[0];
			err = _tuple$4[1];
			i = i + (1) >> 0;
		/* } */ $s = 13; continue; case 14:
		/* */ if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) { */ case 16:
			_r$5 = err.Error(); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, new FormatError((_r$5))];
		/* } */ case 17:
		if (!((n === 0)) || !((d.idatLength === 0))) {
			$s = -1; return [$ifaceNil, new FormatError("too much pixel data")];
		}
		$s = -1; return [img, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [$ifaceNil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.decode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.i = i; $f.imagePass = imagePass; $f.img = img; $f.n = n; $f.pass = pass; $f.r = r; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	decoder.prototype.decode = function() { return this.$val.decode(); };
	decoder.ptr.prototype.readImagePass = function(r, pass, allocateOnly) {
		var _1, _2, _3, _i, _q, _q$1, _q$10, _q$11, _q$12, _q$13, _q$14, _q$2, _q$3, _q$4, _q$5, _q$6, _q$7, _q$8, _q$9, _r, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, a, acol, acol$1, acol$2, acol$3, acol$4, acol$5, acol$6, acol$7, allocateOnly, b, b$1, b$2, b$3, b$4, b$5, b$6, b$7, b$8, b$9, bcol, bcol$1, bcol$2, bitsPerPixel, bytesPerPixel, cdat, cr, d, err, g, gcol, gcol$1, gcol$2, gray, gray16, height, i, i$1, i$2, i$3, i$4, i$5, idx, idx$1, idx$2, img, j, j$1, nrgba, nrgba64, p, p$1, paletted, pass, pdat, pix, pix$1, pixOffset, pr, r, r$1, rcol, rcol$1, rcol$2, rgba, rgba64, rowSize, tb, tb$1, tg, tg$1, tr, tr$1, ty, ty$1, ty$2, ty$3, ty$4, width, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$3, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$4, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$5, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$6, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$7, x$70, x$71, x$72, x$73, x$74, x$8, x$9, x2, x2$1, x2$2, x2$3, x2$4, x2$5, x2$6, x2$7, x2$8, y, y$1, y$2, y$3, y$4, y$5, y$6, y$7, y$8, y$9, ycol, ycol$1, ycol$2, ycol$3, ycol$4, ycol$5, ycol$6, ycol$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _i = $f._i; _q = $f._q; _q$1 = $f._q$1; _q$10 = $f._q$10; _q$11 = $f._q$11; _q$12 = $f._q$12; _q$13 = $f._q$13; _q$14 = $f._q$14; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _q$5 = $f._q$5; _q$6 = $f._q$6; _q$7 = $f._q$7; _q$8 = $f._q$8; _q$9 = $f._q$9; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; a = $f.a; acol = $f.acol; acol$1 = $f.acol$1; acol$2 = $f.acol$2; acol$3 = $f.acol$3; acol$4 = $f.acol$4; acol$5 = $f.acol$5; acol$6 = $f.acol$6; acol$7 = $f.acol$7; allocateOnly = $f.allocateOnly; b = $f.b; b$1 = $f.b$1; b$2 = $f.b$2; b$3 = $f.b$3; b$4 = $f.b$4; b$5 = $f.b$5; b$6 = $f.b$6; b$7 = $f.b$7; b$8 = $f.b$8; b$9 = $f.b$9; bcol = $f.bcol; bcol$1 = $f.bcol$1; bcol$2 = $f.bcol$2; bitsPerPixel = $f.bitsPerPixel; bytesPerPixel = $f.bytesPerPixel; cdat = $f.cdat; cr = $f.cr; d = $f.d; err = $f.err; g = $f.g; gcol = $f.gcol; gcol$1 = $f.gcol$1; gcol$2 = $f.gcol$2; gray = $f.gray; gray16 = $f.gray16; height = $f.height; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; i$5 = $f.i$5; idx = $f.idx; idx$1 = $f.idx$1; idx$2 = $f.idx$2; img = $f.img; j = $f.j; j$1 = $f.j$1; nrgba = $f.nrgba; nrgba64 = $f.nrgba64; p = $f.p; p$1 = $f.p$1; paletted = $f.paletted; pass = $f.pass; pdat = $f.pdat; pix = $f.pix; pix$1 = $f.pix$1; pixOffset = $f.pixOffset; pr = $f.pr; r = $f.r; r$1 = $f.r$1; rcol = $f.rcol; rcol$1 = $f.rcol$1; rcol$2 = $f.rcol$2; rgba = $f.rgba; rgba64 = $f.rgba64; rowSize = $f.rowSize; tb = $f.tb; tb$1 = $f.tb$1; tg = $f.tg; tg$1 = $f.tg$1; tr = $f.tr; tr$1 = $f.tr$1; ty = $f.ty; ty$1 = $f.ty$1; ty$2 = $f.ty$2; ty$3 = $f.ty$3; ty$4 = $f.ty$4; width = $f.width; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$22 = $f.x$22; x$23 = $f.x$23; x$24 = $f.x$24; x$25 = $f.x$25; x$26 = $f.x$26; x$27 = $f.x$27; x$28 = $f.x$28; x$29 = $f.x$29; x$3 = $f.x$3; x$30 = $f.x$30; x$31 = $f.x$31; x$32 = $f.x$32; x$33 = $f.x$33; x$34 = $f.x$34; x$35 = $f.x$35; x$36 = $f.x$36; x$37 = $f.x$37; x$38 = $f.x$38; x$39 = $f.x$39; x$4 = $f.x$4; x$40 = $f.x$40; x$41 = $f.x$41; x$42 = $f.x$42; x$43 = $f.x$43; x$44 = $f.x$44; x$45 = $f.x$45; x$46 = $f.x$46; x$47 = $f.x$47; x$48 = $f.x$48; x$49 = $f.x$49; x$5 = $f.x$5; x$50 = $f.x$50; x$51 = $f.x$51; x$52 = $f.x$52; x$53 = $f.x$53; x$54 = $f.x$54; x$55 = $f.x$55; x$56 = $f.x$56; x$57 = $f.x$57; x$58 = $f.x$58; x$59 = $f.x$59; x$6 = $f.x$6; x$60 = $f.x$60; x$61 = $f.x$61; x$62 = $f.x$62; x$63 = $f.x$63; x$64 = $f.x$64; x$65 = $f.x$65; x$66 = $f.x$66; x$67 = $f.x$67; x$68 = $f.x$68; x$69 = $f.x$69; x$7 = $f.x$7; x$70 = $f.x$70; x$71 = $f.x$71; x$72 = $f.x$72; x$73 = $f.x$73; x$74 = $f.x$74; x$8 = $f.x$8; x$9 = $f.x$9; x2 = $f.x2; x2$1 = $f.x2$1; x2$2 = $f.x2$2; x2$3 = $f.x2$3; x2$4 = $f.x2$4; x2$5 = $f.x2$5; x2$6 = $f.x2$6; x2$7 = $f.x2$7; x2$8 = $f.x2$8; y = $f.y; y$1 = $f.y$1; y$2 = $f.y$2; y$3 = $f.y$3; y$4 = $f.y$4; y$5 = $f.y$5; y$6 = $f.y$6; y$7 = $f.y$7; y$8 = $f.y$8; y$9 = $f.y$9; ycol = $f.ycol; ycol$1 = $f.ycol$1; ycol$2 = $f.ycol$2; ycol$3 = $f.ycol$3; ycol$4 = $f.ycol$4; ycol$5 = $f.ycol$5; ycol$6 = $f.ycol$6; ycol$7 = $f.ycol$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		bitsPerPixel = 0;
		pixOffset = 0;
		gray = ptrType.nil;
		rgba = ptrType$1.nil;
		paletted = ptrType$2.nil;
		nrgba = ptrType$3.nil;
		gray16 = ptrType$4.nil;
		rgba64 = ptrType$5.nil;
		nrgba64 = ptrType$6.nil;
		img = $ifaceNil;
		_tmp = d.width;
		_tmp$1 = d.height;
		width = _tmp;
		height = _tmp$1;
		if ((d.interlace === 1) && !allocateOnly) {
			p = $clone(((pass < 0 || pass >= interlacing.$length) ? ($throwRuntimeError("index out of range"), undefined) : interlacing.$array[interlacing.$offset + pass]), interlaceScan);
			width = (_q = ((((width - p.xOffset >> 0) + p.xFactor >> 0) - 1 >> 0)) / p.xFactor, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			height = (_q$1 = ((((height - p.yOffset >> 0) + p.yFactor >> 0) - 1 >> 0)) / p.yFactor, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			if ((width === 0) || (height === 0)) {
				$s = -1; return [$ifaceNil, $ifaceNil];
			}
		}
		_1 = d.cb;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
			bitsPerPixel = d.depth;
			if (d.useTransparent) {
				nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba;
			} else {
				gray = image.NewGray($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = gray;
			}
		} else if (_1 === (5)) {
			bitsPerPixel = 16;
			nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba;
		} else if (_1 === (6)) {
			bitsPerPixel = 24;
			if (d.useTransparent) {
				nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba;
			} else {
				rgba = image.NewRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = rgba;
			}
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			bitsPerPixel = d.depth;
			paletted = image.NewPaletted($clone(image.Rect(0, 0, width, height), image.Rectangle), d.palette);
			img = paletted;
		} else if (_1 === (11)) {
			bitsPerPixel = 32;
			nrgba = image.NewNRGBA($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba;
		} else if (_1 === (12)) {
			bitsPerPixel = 16;
			if (d.useTransparent) {
				nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba64;
			} else {
				gray16 = image.NewGray16($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = gray16;
			}
		} else if (_1 === (13)) {
			bitsPerPixel = 32;
			nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba64;
		} else if (_1 === (14)) {
			bitsPerPixel = 48;
			if (d.useTransparent) {
				nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = nrgba64;
			} else {
				rgba64 = image.NewRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
				img = rgba64;
			}
		} else if (_1 === (15)) {
			bitsPerPixel = 64;
			nrgba64 = image.NewNRGBA64($clone(image.Rect(0, 0, width, height), image.Rectangle));
			img = nrgba64;
		}
		if (allocateOnly) {
			$s = -1; return [img, $ifaceNil];
		}
		bytesPerPixel = (_q$2 = ((bitsPerPixel + 7 >> 0)) / 8, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
		rowSize = 1 + (_q$3 = ((($imul(bitsPerPixel, width)) + 7 >> 0)) / 8, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		cr = $makeSlice(sliceType$1, rowSize);
		pr = $makeSlice(sliceType$1, rowSize);
		y = 0;
		/* while (true) { */ case 1:
			/* if (!(y < height)) { break; } */ if(!(y < height)) { $s = 2; continue; }
			_r = io.ReadFull(r, cr); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_tuple = _r;
			err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF) || $interfaceIsEqual(err, io.ErrUnexpectedEOF)) {
					$s = -1; return [$ifaceNil, new FormatError("not enough pixel data")];
				}
				$s = -1; return [$ifaceNil, err];
			}
			cdat = $subslice(cr, 1);
			pdat = $subslice(pr, 1);
			_2 = (0 >= cr.$length ? ($throwRuntimeError("index out of range"), undefined) : cr.$array[cr.$offset + 0]);
			if (_2 === (0)) {
			} else if (_2 === (1)) {
				i = bytesPerPixel;
				while (true) {
					if (!(i < cdat.$length)) { break; }
					((i < 0 || i >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i] = (((i < 0 || i >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i]) + ((x = i - bytesPerPixel >> 0, ((x < 0 || x >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x]))) << 24 >>> 24));
					i = i + (1) >> 0;
				}
			} else if (_2 === (2)) {
				_ref = pdat;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$1 = _i;
					p$1 = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					((i$1 < 0 || i$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$1] = (((i$1 < 0 || i$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$1]) + (p$1) << 24 >>> 24));
					_i++;
				}
			} else if (_2 === (3)) {
				i$2 = 0;
				while (true) {
					if (!(i$2 < bytesPerPixel)) { break; }
					((i$2 < 0 || i$2 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$2] = (((i$2 < 0 || i$2 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$2]) + ((_q$4 = ((i$2 < 0 || i$2 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$2]) / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >>> 0 : $throwRuntimeError("integer divide by zero"))) << 24 >>> 24));
					i$2 = i$2 + (1) >> 0;
				}
				i$3 = bytesPerPixel;
				while (true) {
					if (!(i$3 < cdat.$length)) { break; }
					((i$3 < 0 || i$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$3] = (((i$3 < 0 || i$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + i$3]) + ((((_q$5 = (((((x$1 = i$3 - bytesPerPixel >> 0, ((x$1 < 0 || x$1 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$1])) >> 0)) + ((((i$3 < 0 || i$3 >= pdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : pdat.$array[pdat.$offset + i$3]) >> 0)) >> 0)) / 2, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) << 24 >>> 24))) << 24 >>> 24));
					i$3 = i$3 + (1) >> 0;
				}
			} else if (_2 === (4)) {
				filterPaeth(cdat, pdat, bytesPerPixel);
			} else {
				$s = -1; return [$ifaceNil, new FormatError("bad filter type")];
			}
			_3 = d.cb;
			if (_3 === (1)) {
				if (d.useTransparent) {
					ty = d.transparent[1];
					x$2 = 0;
					while (true) {
						if (!(x$2 < width)) { break; }
						b = (x$3 = (_q$6 = x$2 / 8, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$3 < 0 || x$3 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$3]));
						x2 = 0;
						while (true) {
							if (!(x2 < 8 && (x$2 + x2 >> 0) < width)) { break; }
							ycol = ((b >>> 7 << 24 >>> 24)) * 255 << 24 >>> 24;
							acol = 255;
							if (ycol === ty) {
								acol = 0;
							}
							nrgba.SetNRGBA(x$2 + x2 >> 0, y, new color.NRGBA.ptr(ycol, ycol, ycol, acol));
							b = (y$1 = (1), y$1 < 32 ? (b << y$1) : 0) << 24 >>> 24;
							x2 = x2 + (1) >> 0;
						}
						x$2 = x$2 + (8) >> 0;
					}
				} else {
					x$4 = 0;
					while (true) {
						if (!(x$4 < width)) { break; }
						b$1 = (x$5 = (_q$7 = x$4 / 8, (_q$7 === _q$7 && _q$7 !== 1/0 && _q$7 !== -1/0) ? _q$7 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$5 < 0 || x$5 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$5]));
						x2$1 = 0;
						while (true) {
							if (!(x2$1 < 8 && (x$4 + x2$1 >> 0) < width)) { break; }
							gray.SetGray(x$4 + x2$1 >> 0, y, new color.Gray.ptr(((b$1 >>> 7 << 24 >>> 24)) * 255 << 24 >>> 24));
							b$1 = (y$2 = (1), y$2 < 32 ? (b$1 << y$2) : 0) << 24 >>> 24;
							x2$1 = x2$1 + (1) >> 0;
						}
						x$4 = x$4 + (8) >> 0;
					}
				}
			} else if (_3 === (2)) {
				if (d.useTransparent) {
					ty$1 = d.transparent[1];
					x$6 = 0;
					while (true) {
						if (!(x$6 < width)) { break; }
						b$2 = (x$7 = (_q$8 = x$6 / 4, (_q$8 === _q$8 && _q$8 !== 1/0 && _q$8 !== -1/0) ? _q$8 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$7 < 0 || x$7 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$7]));
						x2$2 = 0;
						while (true) {
							if (!(x2$2 < 4 && (x$6 + x2$2 >> 0) < width)) { break; }
							ycol$1 = ((b$2 >>> 6 << 24 >>> 24)) * 85 << 24 >>> 24;
							acol$1 = 255;
							if (ycol$1 === ty$1) {
								acol$1 = 0;
							}
							nrgba.SetNRGBA(x$6 + x2$2 >> 0, y, new color.NRGBA.ptr(ycol$1, ycol$1, ycol$1, acol$1));
							b$2 = (y$3 = (2), y$3 < 32 ? (b$2 << y$3) : 0) << 24 >>> 24;
							x2$2 = x2$2 + (1) >> 0;
						}
						x$6 = x$6 + (4) >> 0;
					}
				} else {
					x$8 = 0;
					while (true) {
						if (!(x$8 < width)) { break; }
						b$3 = (x$9 = (_q$9 = x$8 / 4, (_q$9 === _q$9 && _q$9 !== 1/0 && _q$9 !== -1/0) ? _q$9 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$9 < 0 || x$9 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$9]));
						x2$3 = 0;
						while (true) {
							if (!(x2$3 < 4 && (x$8 + x2$3 >> 0) < width)) { break; }
							gray.SetGray(x$8 + x2$3 >> 0, y, new color.Gray.ptr(((b$3 >>> 6 << 24 >>> 24)) * 85 << 24 >>> 24));
							b$3 = (y$4 = (2), y$4 < 32 ? (b$3 << y$4) : 0) << 24 >>> 24;
							x2$3 = x2$3 + (1) >> 0;
						}
						x$8 = x$8 + (4) >> 0;
					}
				}
			} else if (_3 === (3)) {
				if (d.useTransparent) {
					ty$2 = d.transparent[1];
					x$10 = 0;
					while (true) {
						if (!(x$10 < width)) { break; }
						b$4 = (x$11 = (_q$10 = x$10 / 2, (_q$10 === _q$10 && _q$10 !== 1/0 && _q$10 !== -1/0) ? _q$10 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$11 < 0 || x$11 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$11]));
						x2$4 = 0;
						while (true) {
							if (!(x2$4 < 2 && (x$10 + x2$4 >> 0) < width)) { break; }
							ycol$2 = ((b$4 >>> 4 << 24 >>> 24)) * 17 << 24 >>> 24;
							acol$2 = 255;
							if (ycol$2 === ty$2) {
								acol$2 = 0;
							}
							nrgba.SetNRGBA(x$10 + x2$4 >> 0, y, new color.NRGBA.ptr(ycol$2, ycol$2, ycol$2, acol$2));
							b$4 = (y$5 = (4), y$5 < 32 ? (b$4 << y$5) : 0) << 24 >>> 24;
							x2$4 = x2$4 + (1) >> 0;
						}
						x$10 = x$10 + (2) >> 0;
					}
				} else {
					x$12 = 0;
					while (true) {
						if (!(x$12 < width)) { break; }
						b$5 = (x$13 = (_q$11 = x$12 / 2, (_q$11 === _q$11 && _q$11 !== 1/0 && _q$11 !== -1/0) ? _q$11 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$13 < 0 || x$13 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$13]));
						x2$5 = 0;
						while (true) {
							if (!(x2$5 < 2 && (x$12 + x2$5 >> 0) < width)) { break; }
							gray.SetGray(x$12 + x2$5 >> 0, y, new color.Gray.ptr(((b$5 >>> 4 << 24 >>> 24)) * 17 << 24 >>> 24));
							b$5 = (y$6 = (4), y$6 < 32 ? (b$5 << y$6) : 0) << 24 >>> 24;
							x2$5 = x2$5 + (1) >> 0;
						}
						x$12 = x$12 + (2) >> 0;
					}
				}
			} else if (_3 === (4)) {
				if (d.useTransparent) {
					ty$3 = d.transparent[1];
					x$14 = 0;
					while (true) {
						if (!(x$14 < width)) { break; }
						ycol$3 = ((x$14 < 0 || x$14 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$14]);
						acol$3 = 255;
						if (ycol$3 === ty$3) {
							acol$3 = 0;
						}
						nrgba.SetNRGBA(x$14, y, new color.NRGBA.ptr(ycol$3, ycol$3, ycol$3, acol$3));
						x$14 = x$14 + (1) >> 0;
					}
				} else {
					$copySlice($subslice(gray.Pix, pixOffset), cdat);
					pixOffset = pixOffset + (gray.Stride) >> 0;
				}
			} else if (_3 === (5)) {
				x$15 = 0;
				while (true) {
					if (!(x$15 < width)) { break; }
					ycol$4 = (x$16 = ($imul(2, x$15)) + 0 >> 0, ((x$16 < 0 || x$16 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$16]));
					nrgba.SetNRGBA(x$15, y, new color.NRGBA.ptr(ycol$4, ycol$4, ycol$4, (x$17 = ($imul(2, x$15)) + 1 >> 0, ((x$17 < 0 || x$17 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$17]))));
					x$15 = x$15 + (1) >> 0;
				}
			} else if (_3 === (6)) {
				if (d.useTransparent) {
					_tmp$2 = nrgba.Pix;
					_tmp$3 = pixOffset;
					_tmp$4 = 0;
					pix = _tmp$2;
					i$4 = _tmp$3;
					j = _tmp$4;
					_tmp$5 = d.transparent[1];
					_tmp$6 = d.transparent[3];
					_tmp$7 = d.transparent[5];
					tr = _tmp$5;
					tg = _tmp$6;
					tb = _tmp$7;
					x$18 = 0;
					while (true) {
						if (!(x$18 < width)) { break; }
						r$1 = (x$19 = j + 0 >> 0, ((x$19 < 0 || x$19 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$19]));
						g = (x$20 = j + 1 >> 0, ((x$20 < 0 || x$20 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$20]));
						b$6 = (x$21 = j + 2 >> 0, ((x$21 < 0 || x$21 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$21]));
						a = 255;
						if ((r$1 === tr) && (g === tg) && (b$6 === tb)) {
							a = 0;
						}
						(x$22 = i$4 + 0 >> 0, ((x$22 < 0 || x$22 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$22] = r$1));
						(x$23 = i$4 + 1 >> 0, ((x$23 < 0 || x$23 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$23] = g));
						(x$24 = i$4 + 2 >> 0, ((x$24 < 0 || x$24 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$24] = b$6));
						(x$25 = i$4 + 3 >> 0, ((x$25 < 0 || x$25 >= pix.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix.$array[pix.$offset + x$25] = a));
						i$4 = i$4 + (4) >> 0;
						j = j + (3) >> 0;
						x$18 = x$18 + (1) >> 0;
					}
					pixOffset = pixOffset + (nrgba.Stride) >> 0;
				} else {
					_tmp$8 = rgba.Pix;
					_tmp$9 = pixOffset;
					_tmp$10 = 0;
					pix$1 = _tmp$8;
					i$5 = _tmp$9;
					j$1 = _tmp$10;
					x$26 = 0;
					while (true) {
						if (!(x$26 < width)) { break; }
						(x$28 = i$5 + 0 >> 0, ((x$28 < 0 || x$28 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$28] = (x$27 = j$1 + 0 >> 0, ((x$27 < 0 || x$27 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$27]))));
						(x$30 = i$5 + 1 >> 0, ((x$30 < 0 || x$30 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$30] = (x$29 = j$1 + 1 >> 0, ((x$29 < 0 || x$29 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$29]))));
						(x$32 = i$5 + 2 >> 0, ((x$32 < 0 || x$32 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$32] = (x$31 = j$1 + 2 >> 0, ((x$31 < 0 || x$31 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$31]))));
						(x$33 = i$5 + 3 >> 0, ((x$33 < 0 || x$33 >= pix$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : pix$1.$array[pix$1.$offset + x$33] = 255));
						i$5 = i$5 + (4) >> 0;
						j$1 = j$1 + (3) >> 0;
						x$26 = x$26 + (1) >> 0;
					}
					pixOffset = pixOffset + (rgba.Stride) >> 0;
				}
			} else if (_3 === (7)) {
				x$34 = 0;
				while (true) {
					if (!(x$34 < width)) { break; }
					b$7 = (x$35 = (_q$12 = x$34 / 8, (_q$12 === _q$12 && _q$12 !== 1/0 && _q$12 !== -1/0) ? _q$12 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$35 < 0 || x$35 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$35]));
					x2$6 = 0;
					while (true) {
						if (!(x2$6 < 8 && (x$34 + x2$6 >> 0) < width)) { break; }
						idx = b$7 >>> 7 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$34 + x2$6 >> 0, y, idx);
						b$7 = (y$7 = (1), y$7 < 32 ? (b$7 << y$7) : 0) << 24 >>> 24;
						x2$6 = x2$6 + (1) >> 0;
					}
					x$34 = x$34 + (8) >> 0;
				}
			} else if (_3 === (8)) {
				x$36 = 0;
				while (true) {
					if (!(x$36 < width)) { break; }
					b$8 = (x$37 = (_q$13 = x$36 / 4, (_q$13 === _q$13 && _q$13 !== 1/0 && _q$13 !== -1/0) ? _q$13 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$37 < 0 || x$37 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$37]));
					x2$7 = 0;
					while (true) {
						if (!(x2$7 < 4 && (x$36 + x2$7 >> 0) < width)) { break; }
						idx$1 = b$8 >>> 6 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx$1 >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx$1 >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$36 + x2$7 >> 0, y, idx$1);
						b$8 = (y$8 = (2), y$8 < 32 ? (b$8 << y$8) : 0) << 24 >>> 24;
						x2$7 = x2$7 + (1) >> 0;
					}
					x$36 = x$36 + (4) >> 0;
				}
			} else if (_3 === (9)) {
				x$38 = 0;
				while (true) {
					if (!(x$38 < width)) { break; }
					b$9 = (x$39 = (_q$14 = x$38 / 2, (_q$14 === _q$14 && _q$14 !== 1/0 && _q$14 !== -1/0) ? _q$14 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$39 < 0 || x$39 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$39]));
					x2$8 = 0;
					while (true) {
						if (!(x2$8 < 2 && (x$38 + x2$8 >> 0) < width)) { break; }
						idx$2 = b$9 >>> 4 << 24 >>> 24;
						if (paletted.Palette.$length <= ((idx$2 >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((idx$2 >> 0)) + 1 >> 0));
						}
						paletted.SetColorIndex(x$38 + x2$8 >> 0, y, idx$2);
						b$9 = (y$9 = (4), y$9 < 32 ? (b$9 << y$9) : 0) << 24 >>> 24;
						x2$8 = x2$8 + (1) >> 0;
					}
					x$38 = x$38 + (2) >> 0;
				}
			} else if (_3 === (10)) {
				if (!((paletted.Palette.$length === 255))) {
					x$40 = 0;
					while (true) {
						if (!(x$40 < width)) { break; }
						if (paletted.Palette.$length <= ((((x$40 < 0 || x$40 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$40]) >> 0))) {
							paletted.Palette = $subslice(paletted.Palette, 0, (((((x$40 < 0 || x$40 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$40]) >> 0)) + 1 >> 0));
						}
						x$40 = x$40 + (1) >> 0;
					}
				}
				$copySlice($subslice(paletted.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (paletted.Stride) >> 0;
			} else if (_3 === (11)) {
				$copySlice($subslice(nrgba.Pix, pixOffset), cdat);
				pixOffset = pixOffset + (nrgba.Stride) >> 0;
			} else if (_3 === (12)) {
				if (d.useTransparent) {
					ty$4 = ((((d.transparent[0] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[1] << 16 >>> 16))) >>> 0;
					x$41 = 0;
					while (true) {
						if (!(x$41 < width)) { break; }
						ycol$5 = (((((x$42 = ($imul(2, x$41)) + 0 >> 0, ((x$42 < 0 || x$42 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$42])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$43 = ($imul(2, x$41)) + 1 >> 0, ((x$43 < 0 || x$43 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$43])) << 16 >>> 16))) >>> 0;
						acol$4 = 65535;
						if (ycol$5 === ty$4) {
							acol$4 = 0;
						}
						nrgba64.SetNRGBA64(x$41, y, new color.NRGBA64.ptr(ycol$5, ycol$5, ycol$5, acol$4));
						x$41 = x$41 + (1) >> 0;
					}
				} else {
					x$44 = 0;
					while (true) {
						if (!(x$44 < width)) { break; }
						ycol$6 = (((((x$45 = ($imul(2, x$44)) + 0 >> 0, ((x$45 < 0 || x$45 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$45])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$46 = ($imul(2, x$44)) + 1 >> 0, ((x$46 < 0 || x$46 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$46])) << 16 >>> 16))) >>> 0;
						gray16.SetGray16(x$44, y, new color.Gray16.ptr(ycol$6));
						x$44 = x$44 + (1) >> 0;
					}
				}
			} else if (_3 === (13)) {
				x$47 = 0;
				while (true) {
					if (!(x$47 < width)) { break; }
					ycol$7 = (((((x$48 = ($imul(4, x$47)) + 0 >> 0, ((x$48 < 0 || x$48 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$48])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$49 = ($imul(4, x$47)) + 1 >> 0, ((x$49 < 0 || x$49 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$49])) << 16 >>> 16))) >>> 0;
					acol$5 = (((((x$50 = ($imul(4, x$47)) + 2 >> 0, ((x$50 < 0 || x$50 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$50])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$51 = ($imul(4, x$47)) + 3 >> 0, ((x$51 < 0 || x$51 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$51])) << 16 >>> 16))) >>> 0;
					nrgba64.SetNRGBA64(x$47, y, new color.NRGBA64.ptr(ycol$7, ycol$7, ycol$7, acol$5));
					x$47 = x$47 + (1) >> 0;
				}
			} else if (_3 === (14)) {
				if (d.useTransparent) {
					tr$1 = ((((d.transparent[0] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[1] << 16 >>> 16))) >>> 0;
					tg$1 = ((((d.transparent[2] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[3] << 16 >>> 16))) >>> 0;
					tb$1 = ((((d.transparent[4] << 16 >>> 16)) << 8 << 16 >>> 16) | ((d.transparent[5] << 16 >>> 16))) >>> 0;
					x$52 = 0;
					while (true) {
						if (!(x$52 < width)) { break; }
						rcol = (((((x$53 = ($imul(6, x$52)) + 0 >> 0, ((x$53 < 0 || x$53 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$53])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$54 = ($imul(6, x$52)) + 1 >> 0, ((x$54 < 0 || x$54 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$54])) << 16 >>> 16))) >>> 0;
						gcol = (((((x$55 = ($imul(6, x$52)) + 2 >> 0, ((x$55 < 0 || x$55 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$55])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$56 = ($imul(6, x$52)) + 3 >> 0, ((x$56 < 0 || x$56 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$56])) << 16 >>> 16))) >>> 0;
						bcol = (((((x$57 = ($imul(6, x$52)) + 4 >> 0, ((x$57 < 0 || x$57 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$57])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$58 = ($imul(6, x$52)) + 5 >> 0, ((x$58 < 0 || x$58 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$58])) << 16 >>> 16))) >>> 0;
						acol$6 = 65535;
						if ((rcol === tr$1) && (gcol === tg$1) && (bcol === tb$1)) {
							acol$6 = 0;
						}
						nrgba64.SetNRGBA64(x$52, y, new color.NRGBA64.ptr(rcol, gcol, bcol, acol$6));
						x$52 = x$52 + (1) >> 0;
					}
				} else {
					x$59 = 0;
					while (true) {
						if (!(x$59 < width)) { break; }
						rcol$1 = (((((x$60 = ($imul(6, x$59)) + 0 >> 0, ((x$60 < 0 || x$60 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$60])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$61 = ($imul(6, x$59)) + 1 >> 0, ((x$61 < 0 || x$61 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$61])) << 16 >>> 16))) >>> 0;
						gcol$1 = (((((x$62 = ($imul(6, x$59)) + 2 >> 0, ((x$62 < 0 || x$62 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$62])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$63 = ($imul(6, x$59)) + 3 >> 0, ((x$63 < 0 || x$63 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$63])) << 16 >>> 16))) >>> 0;
						bcol$1 = (((((x$64 = ($imul(6, x$59)) + 4 >> 0, ((x$64 < 0 || x$64 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$64])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$65 = ($imul(6, x$59)) + 5 >> 0, ((x$65 < 0 || x$65 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$65])) << 16 >>> 16))) >>> 0;
						rgba64.SetRGBA64(x$59, y, new color.RGBA64.ptr(rcol$1, gcol$1, bcol$1, 65535));
						x$59 = x$59 + (1) >> 0;
					}
				}
			} else if (_3 === (15)) {
				x$66 = 0;
				while (true) {
					if (!(x$66 < width)) { break; }
					rcol$2 = (((((x$67 = ($imul(8, x$66)) + 0 >> 0, ((x$67 < 0 || x$67 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$67])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$68 = ($imul(8, x$66)) + 1 >> 0, ((x$68 < 0 || x$68 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$68])) << 16 >>> 16))) >>> 0;
					gcol$2 = (((((x$69 = ($imul(8, x$66)) + 2 >> 0, ((x$69 < 0 || x$69 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$69])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$70 = ($imul(8, x$66)) + 3 >> 0, ((x$70 < 0 || x$70 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$70])) << 16 >>> 16))) >>> 0;
					bcol$2 = (((((x$71 = ($imul(8, x$66)) + 4 >> 0, ((x$71 < 0 || x$71 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$71])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$72 = ($imul(8, x$66)) + 5 >> 0, ((x$72 < 0 || x$72 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$72])) << 16 >>> 16))) >>> 0;
					acol$7 = (((((x$73 = ($imul(8, x$66)) + 6 >> 0, ((x$73 < 0 || x$73 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$73])) << 16 >>> 16)) << 8 << 16 >>> 16) | (((x$74 = ($imul(8, x$66)) + 7 >> 0, ((x$74 < 0 || x$74 >= cdat.$length) ? ($throwRuntimeError("index out of range"), undefined) : cdat.$array[cdat.$offset + x$74])) << 16 >>> 16))) >>> 0;
					nrgba64.SetNRGBA64(x$66, y, new color.NRGBA64.ptr(rcol$2, gcol$2, bcol$2, acol$7));
					x$66 = x$66 + (1) >> 0;
				}
			}
			_tmp$11 = cr;
			_tmp$12 = pr;
			pr = _tmp$11;
			cr = _tmp$12;
			y = y + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [img, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.readImagePass }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._i = _i; $f._q = _q; $f._q$1 = _q$1; $f._q$10 = _q$10; $f._q$11 = _q$11; $f._q$12 = _q$12; $f._q$13 = _q$13; $f._q$14 = _q$14; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._q$5 = _q$5; $f._q$6 = _q$6; $f._q$7 = _q$7; $f._q$8 = _q$8; $f._q$9 = _q$9; $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f.a = a; $f.acol = acol; $f.acol$1 = acol$1; $f.acol$2 = acol$2; $f.acol$3 = acol$3; $f.acol$4 = acol$4; $f.acol$5 = acol$5; $f.acol$6 = acol$6; $f.acol$7 = acol$7; $f.allocateOnly = allocateOnly; $f.b = b; $f.b$1 = b$1; $f.b$2 = b$2; $f.b$3 = b$3; $f.b$4 = b$4; $f.b$5 = b$5; $f.b$6 = b$6; $f.b$7 = b$7; $f.b$8 = b$8; $f.b$9 = b$9; $f.bcol = bcol; $f.bcol$1 = bcol$1; $f.bcol$2 = bcol$2; $f.bitsPerPixel = bitsPerPixel; $f.bytesPerPixel = bytesPerPixel; $f.cdat = cdat; $f.cr = cr; $f.d = d; $f.err = err; $f.g = g; $f.gcol = gcol; $f.gcol$1 = gcol$1; $f.gcol$2 = gcol$2; $f.gray = gray; $f.gray16 = gray16; $f.height = height; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.i$5 = i$5; $f.idx = idx; $f.idx$1 = idx$1; $f.idx$2 = idx$2; $f.img = img; $f.j = j; $f.j$1 = j$1; $f.nrgba = nrgba; $f.nrgba64 = nrgba64; $f.p = p; $f.p$1 = p$1; $f.paletted = paletted; $f.pass = pass; $f.pdat = pdat; $f.pix = pix; $f.pix$1 = pix$1; $f.pixOffset = pixOffset; $f.pr = pr; $f.r = r; $f.r$1 = r$1; $f.rcol = rcol; $f.rcol$1 = rcol$1; $f.rcol$2 = rcol$2; $f.rgba = rgba; $f.rgba64 = rgba64; $f.rowSize = rowSize; $f.tb = tb; $f.tb$1 = tb$1; $f.tg = tg; $f.tg$1 = tg$1; $f.tr = tr; $f.tr$1 = tr$1; $f.ty = ty; $f.ty$1 = ty$1; $f.ty$2 = ty$2; $f.ty$3 = ty$3; $f.ty$4 = ty$4; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$22 = x$22; $f.x$23 = x$23; $f.x$24 = x$24; $f.x$25 = x$25; $f.x$26 = x$26; $f.x$27 = x$27; $f.x$28 = x$28; $f.x$29 = x$29; $f.x$3 = x$3; $f.x$30 = x$30; $f.x$31 = x$31; $f.x$32 = x$32; $f.x$33 = x$33; $f.x$34 = x$34; $f.x$35 = x$35; $f.x$36 = x$36; $f.x$37 = x$37; $f.x$38 = x$38; $f.x$39 = x$39; $f.x$4 = x$4; $f.x$40 = x$40; $f.x$41 = x$41; $f.x$42 = x$42; $f.x$43 = x$43; $f.x$44 = x$44; $f.x$45 = x$45; $f.x$46 = x$46; $f.x$47 = x$47; $f.x$48 = x$48; $f.x$49 = x$49; $f.x$5 = x$5; $f.x$50 = x$50; $f.x$51 = x$51; $f.x$52 = x$52; $f.x$53 = x$53; $f.x$54 = x$54; $f.x$55 = x$55; $f.x$56 = x$56; $f.x$57 = x$57; $f.x$58 = x$58; $f.x$59 = x$59; $f.x$6 = x$6; $f.x$60 = x$60; $f.x$61 = x$61; $f.x$62 = x$62; $f.x$63 = x$63; $f.x$64 = x$64; $f.x$65 = x$65; $f.x$66 = x$66; $f.x$67 = x$67; $f.x$68 = x$68; $f.x$69 = x$69; $f.x$7 = x$7; $f.x$70 = x$70; $f.x$71 = x$71; $f.x$72 = x$72; $f.x$73 = x$73; $f.x$74 = x$74; $f.x$8 = x$8; $f.x$9 = x$9; $f.x2 = x2; $f.x2$1 = x2$1; $f.x2$2 = x2$2; $f.x2$3 = x2$3; $f.x2$4 = x2$4; $f.x2$5 = x2$5; $f.x2$6 = x2$6; $f.x2$7 = x2$7; $f.x2$8 = x2$8; $f.y = y; $f.y$1 = y$1; $f.y$2 = y$2; $f.y$3 = y$3; $f.y$4 = y$4; $f.y$5 = y$5; $f.y$6 = y$6; $f.y$7 = y$7; $f.y$8 = y$8; $f.y$9 = y$9; $f.ycol = ycol; $f.ycol$1 = ycol$1; $f.ycol$2 = ycol$2; $f.ycol$3 = ycol$3; $f.ycol$4 = ycol$4; $f.ycol$5 = ycol$5; $f.ycol$6 = ycol$6; $f.ycol$7 = ycol$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.readImagePass = function(r, pass, allocateOnly) { return this.$val.readImagePass(r, pass, allocateOnly); };
	decoder.ptr.prototype.mergePassInto = function(dst, src, pass) {
		var _r, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, bounds, bytesPerPixel, d, d$1, dBase, dst, dstPix, p, pass, rect, s, src, srcPix, stride, target, target$1, target$2, target$3, target$4, target$5, target$6, target$7, target$8, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$22 = $f._tmp$22; _tmp$23 = $f._tmp$23; _tmp$24 = $f._tmp$24; _tmp$25 = $f._tmp$25; _tmp$26 = $f._tmp$26; _tmp$27 = $f._tmp$27; _tmp$28 = $f._tmp$28; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; bounds = $f.bounds; bytesPerPixel = $f.bytesPerPixel; d = $f.d; d$1 = $f.d$1; dBase = $f.dBase; dst = $f.dst; dstPix = $f.dstPix; p = $f.p; pass = $f.pass; rect = $f.rect; s = $f.s; src = $f.src; srcPix = $f.srcPix; stride = $f.stride; target = $f.target; target$1 = $f.target$1; target$2 = $f.target$2; target$3 = $f.target$3; target$4 = $f.target$4; target$5 = $f.target$5; target$6 = $f.target$6; target$7 = $f.target$7; target$8 = $f.target$8; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		p = $clone(((pass < 0 || pass >= interlacing.$length) ? ($throwRuntimeError("index out of range"), undefined) : interlacing.$array[interlacing.$offset + pass]), interlaceScan);
		srcPix = sliceType$1.nil;
		dstPix = sliceType$1.nil;
		stride = 0;
		rect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		bytesPerPixel = 0;
		_ref = dst;
		if ($assertType(_ref, ptrType$7, true)[1]) {
			target = _ref.$val;
			srcPix = $assertType(src, ptrType$7).Pix;
			_tmp = target.Pix;
			_tmp$1 = target.Stride;
			_tmp$2 = $clone(target.Rect, image.Rectangle);
			dstPix = _tmp;
			stride = _tmp$1;
			image.Rectangle.copy(rect, _tmp$2);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			target$1 = _ref.$val;
			srcPix = $assertType(src, ptrType$8).Pix;
			_tmp$3 = target$1.Pix;
			_tmp$4 = target$1.Stride;
			_tmp$5 = $clone(target$1.Rect, image.Rectangle);
			dstPix = _tmp$3;
			stride = _tmp$4;
			image.Rectangle.copy(rect, _tmp$5);
			bytesPerPixel = 2;
		} else if ($assertType(_ref, ptrType, true)[1]) {
			target$2 = _ref.$val;
			srcPix = $assertType(src, ptrType).Pix;
			_tmp$6 = target$2.Pix;
			_tmp$7 = target$2.Stride;
			_tmp$8 = $clone(target$2.Rect, image.Rectangle);
			dstPix = _tmp$6;
			stride = _tmp$7;
			image.Rectangle.copy(rect, _tmp$8);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			target$3 = _ref.$val;
			srcPix = $assertType(src, ptrType$4).Pix;
			_tmp$9 = target$3.Pix;
			_tmp$10 = target$3.Stride;
			_tmp$11 = $clone(target$3.Rect, image.Rectangle);
			dstPix = _tmp$9;
			stride = _tmp$10;
			image.Rectangle.copy(rect, _tmp$11);
			bytesPerPixel = 2;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			target$4 = _ref.$val;
			srcPix = $assertType(src, ptrType$3).Pix;
			_tmp$12 = target$4.Pix;
			_tmp$13 = target$4.Stride;
			_tmp$14 = $clone(target$4.Rect, image.Rectangle);
			dstPix = _tmp$12;
			stride = _tmp$13;
			image.Rectangle.copy(rect, _tmp$14);
			bytesPerPixel = 4;
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			target$5 = _ref.$val;
			srcPix = $assertType(src, ptrType$6).Pix;
			_tmp$15 = target$5.Pix;
			_tmp$16 = target$5.Stride;
			_tmp$17 = $clone(target$5.Rect, image.Rectangle);
			dstPix = _tmp$15;
			stride = _tmp$16;
			image.Rectangle.copy(rect, _tmp$17);
			bytesPerPixel = 8;
		} else if ($assertType(_ref, ptrType$2, true)[1]) {
			target$6 = _ref.$val;
			srcPix = $assertType(src, ptrType$2).Pix;
			_tmp$18 = target$6.Pix;
			_tmp$19 = target$6.Stride;
			_tmp$20 = $clone(target$6.Rect, image.Rectangle);
			dstPix = _tmp$18;
			stride = _tmp$19;
			image.Rectangle.copy(rect, _tmp$20);
			bytesPerPixel = 1;
		} else if ($assertType(_ref, ptrType$1, true)[1]) {
			target$7 = _ref.$val;
			srcPix = $assertType(src, ptrType$1).Pix;
			_tmp$21 = target$7.Pix;
			_tmp$22 = target$7.Stride;
			_tmp$23 = $clone(target$7.Rect, image.Rectangle);
			dstPix = _tmp$21;
			stride = _tmp$22;
			image.Rectangle.copy(rect, _tmp$23);
			bytesPerPixel = 4;
		} else if ($assertType(_ref, ptrType$5, true)[1]) {
			target$8 = _ref.$val;
			srcPix = $assertType(src, ptrType$5).Pix;
			_tmp$24 = target$8.Pix;
			_tmp$25 = target$8.Stride;
			_tmp$26 = $clone(target$8.Rect, image.Rectangle);
			dstPix = _tmp$24;
			stride = _tmp$25;
			image.Rectangle.copy(rect, _tmp$26);
			bytesPerPixel = 8;
		}
		_tmp$27 = 0;
		_r = src.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$28 = $clone(_r, image.Rectangle);
		s = _tmp$27;
		bounds = $clone(_tmp$28, image.Rectangle);
		y = bounds.Min.Y;
		while (true) {
			if (!(y < bounds.Max.Y)) { break; }
			dBase = ($imul((((($imul(y, p.yFactor)) + p.yOffset >> 0) - rect.Min.Y >> 0)), stride)) + ($imul(((p.xOffset - rect.Min.X >> 0)), bytesPerPixel)) >> 0;
			x = bounds.Min.X;
			while (true) {
				if (!(x < bounds.Max.X)) { break; }
				d$1 = dBase + ($imul(($imul(x, p.xFactor)), bytesPerPixel)) >> 0;
				$copySlice($subslice(dstPix, d$1), $subslice(srcPix, s, (s + bytesPerPixel >> 0)));
				s = s + (bytesPerPixel) >> 0;
				x = x + (1) >> 0;
			}
			y = y + (1) >> 0;
		}
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.mergePassInto }; } $f._r = _r; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$22 = _tmp$22; $f._tmp$23 = _tmp$23; $f._tmp$24 = _tmp$24; $f._tmp$25 = _tmp$25; $f._tmp$26 = _tmp$26; $f._tmp$27 = _tmp$27; $f._tmp$28 = _tmp$28; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f.bounds = bounds; $f.bytesPerPixel = bytesPerPixel; $f.d = d; $f.d$1 = d$1; $f.dBase = dBase; $f.dst = dst; $f.dstPix = dstPix; $f.p = p; $f.pass = pass; $f.rect = rect; $f.s = s; $f.src = src; $f.srcPix = srcPix; $f.stride = stride; $f.target = target; $f.target$1 = target$1; $f.target$2 = target$2; $f.target$3 = target$3; $f.target$4 = target$4; $f.target$5 = target$5; $f.target$6 = target$6; $f.target$7 = target$7; $f.target$8 = target$8; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.mergePassInto = function(dst, src, pass) { return this.$val.mergePassInto(dst, src, pass); };
	decoder.ptr.prototype.parseIDAT = function(length) {
		var _r, _r$1, _tuple, d, err, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		err = $ifaceNil;
		d = this;
		d.idatLength = length;
		_r = d.decode(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		d.img = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			$s = -1; return err;
		}
		_r$1 = d.verifyChecksum(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		$s = -1; return err;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIDAT }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIDAT = function(length) { return this.$val.parseIDAT(length); };
	decoder.ptr.prototype.parseIEND = function(length) {
		var _r, d, length, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; length = $f.length; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		if (!((length === 0))) {
			$s = -1; return new FormatError("bad IEND length");
		}
		_r = d.verifyChecksum(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseIEND }; } $f._r = _r; $f.d = d; $f.length = length; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseIEND = function(length) { return this.$val.parseIEND(length); };
	decoder.ptr.prototype.parseChunk = function() {
		var _1, _r, _r$1, _r$10, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple, _tuple$1, d, err, ignored, length, n, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; d = $f.d; err = $f.err; ignored = $f.ignored; length = $f.length; n = $f.n; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		n = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		length = $clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4));
		$r = d.crc.Reset(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = d.crc.Write($subslice(new sliceType$1(d.tmp), 4, 8)); /* */ $s = 3; case 3: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
			_1 = ($bytesToString($subslice(new sliceType$1(d.tmp), 4, 8)));
			/* */ if (_1 === ("IHDR")) { $s = 5; continue; }
			/* */ if (_1 === ("PLTE")) { $s = 6; continue; }
			/* */ if (_1 === ("tRNS")) { $s = 7; continue; }
			/* */ if (_1 === ("IDAT")) { $s = 8; continue; }
			/* */ if (_1 === ("IEND")) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (_1 === ("IHDR")) { */ case 5:
				if (!((d.stage === 0))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 1;
				_r$2 = d.parseIHDR(length); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				$s = -1; return _r$2;
			/* } else if (_1 === ("PLTE")) { */ case 6:
				if (!((d.stage === 1))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 2;
				_r$3 = d.parsePLTE(length); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				$s = -1; return _r$3;
			/* } else if (_1 === ("tRNS")) { */ case 7:
				if (cbPaletted(d.cb)) {
					if (!((d.stage === 2))) {
						$s = -1; return new FormatError(chunkOrderError);
					}
				} else if (!((d.stage === 1))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 3;
				_r$4 = d.parsetRNS(length); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				$s = -1; return _r$4;
			/* } else if (_1 === ("IDAT")) { */ case 8:
				if (d.stage < 1 || d.stage > 4 || ((d.stage === 1) && cbPaletted(d.cb))) {
					$s = -1; return new FormatError(chunkOrderError);
				} else if (d.stage === 4) {
					/* break; */ $s = 4; continue;
				}
				d.stage = 4;
				_r$5 = d.parseIDAT(length); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$s = -1; return _r$5;
			/* } else if (_1 === ("IEND")) { */ case 9:
				if (!((d.stage === 4))) {
					$s = -1; return new FormatError(chunkOrderError);
				}
				d.stage = 5;
				_r$6 = d.parseIEND(length); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				$s = -1; return _r$6;
			/* } */ case 10:
		case 4:
		/* */ if (length > 2147483647) { $s = 16; continue; }
		/* */ $s = 17; continue;
		/* if (length > 2147483647) { */ case 16:
			_r$7 = fmt.Sprintf("Bad chunk length: %d", new sliceType$2([new $Uint32(length)])); /* */ $s = 18; case 18: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			$s = -1; return new FormatError((_r$7));
		/* } */ case 17:
		ignored = arrayType.zero();
		/* while (true) { */ case 19:
			/* if (!(length > 0)) { break; } */ if(!(length > 0)) { $s = 20; continue; }
			_r$8 = io.ReadFull(d.r, $subslice(new sliceType$1(ignored), 0, min(4096, ((length >> 0))))); /* */ $s = 21; case 21: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
			_tuple$1 = _r$8;
			n = _tuple$1[0];
			err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return err;
			}
			_r$9 = d.crc.Write($subslice(new sliceType$1(ignored), 0, n)); /* */ $s = 22; case 22: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
			_r$9;
			length = length - (((n >>> 0))) >>> 0;
		/* } */ $s = 19; continue; case 20:
		_r$10 = d.verifyChecksum(); /* */ $s = 23; case 23: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
		$s = -1; return _r$10;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.parseChunk }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.d = d; $f.err = err; $f.ignored = ignored; $f.length = length; $f.n = n; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.parseChunk = function() { return this.$val.parseChunk(); };
	decoder.ptr.prototype.verifyChecksum = function() {
		var _r, _r$1, _tuple, d, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; d = $f.d; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 4)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		_r$1 = d.crc.Sum32(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!(($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) === _r$1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(($clone(binary.BigEndian, binary.bigEndian).Uint32($subslice(new sliceType$1(d.tmp), 0, 4)) === _r$1))) { */ case 2:
			$s = -1; return new FormatError("invalid checksum");
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.verifyChecksum }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.verifyChecksum = function() { return this.$val.verifyChecksum(); };
	decoder.ptr.prototype.checkHeader = function() {
		var _r, _tuple, d, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; d = $f.d; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = io.ReadFull(d.r, $subslice(new sliceType$1(d.tmp), 0, 8)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return err;
		}
		if (!(($bytesToString($subslice(new sliceType$1(d.tmp), 0, 8))) === "\x89PNG\r\n\x1A\n")) {
			$s = -1; return new FormatError("not a PNG file");
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: decoder.ptr.prototype.checkHeader }; } $f._r = _r; $f._tuple = _tuple; $f.d = d; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	decoder.prototype.checkHeader = function() { return this.$val.checkHeader(); };
	Decode = function(r) {
		var _r, _r$1, _r$2, d, err, err$1, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; d = $f.d; err = $f.err; err$1 = $f.err$1; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d = new decoder.ptr(r, $ifaceNil, _r, 0, 0, 0, color.Palette.nil, 0, 0, 0, arrayType$1.zero(), 0, false, arrayType$2.zero());
		_r$1 = d.checkHeader(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [$ifaceNil, err];
		}
		/* while (true) { */ case 3:
			/* if (!(!((d.stage === 5)))) { break; } */ if(!(!((d.stage === 5)))) { $s = 4; continue; }
			_r$2 = d.parseChunk(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				$s = -1; return [$ifaceNil, err$1];
			}
		/* } */ $s = 3; continue; case 4:
		$s = -1; return [d.img, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Decode }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Decode = Decode;
	DecodeConfig = function(r) {
		var _1, _r, _r$1, _r$2, cm, d, err, err$1, paletted, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; cm = $f.cm; d = $f.d; err = $f.err; err$1 = $f.err$1; paletted = $f.paletted; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = crc32.NewIEEE(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d = new decoder.ptr(r, $ifaceNil, _r, 0, 0, 0, color.Palette.nil, 0, 0, 0, arrayType$1.zero(), 0, false, arrayType$2.zero());
		_r$1 = d.checkHeader(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		err = _r$1;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
			$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err];
		}
		/* while (true) { */ case 3:
			_r$2 = d.parseChunk(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			err$1 = _r$2;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				if ($interfaceIsEqual(err$1, io.EOF)) {
					err$1 = io.ErrUnexpectedEOF;
				}
				$s = -1; return [new image.Config.ptr($ifaceNil, 0, 0), err$1];
			}
			paletted = cbPaletted(d.cb);
			if ((d.stage === 1) && !paletted) {
				/* break; */ $s = 4; continue;
			}
			if ((d.stage === 2) && paletted) {
				/* break; */ $s = 4; continue;
			}
		/* } */ $s = 3; continue; case 4:
		cm = $ifaceNil;
		_1 = d.cb;
		if ((_1 === (1)) || (_1 === (2)) || (_1 === (3)) || (_1 === (4))) {
			cm = color.GrayModel;
		} else if (_1 === (5)) {
			cm = color.NRGBAModel;
		} else if (_1 === (6)) {
			cm = color.RGBAModel;
		} else if ((_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			cm = d.palette;
		} else if (_1 === (11)) {
			cm = color.NRGBAModel;
		} else if (_1 === (12)) {
			cm = color.Gray16Model;
		} else if (_1 === (13)) {
			cm = color.NRGBA64Model;
		} else if (_1 === (14)) {
			cm = color.RGBA64Model;
		} else if (_1 === (15)) {
			cm = color.NRGBA64Model;
		}
		$s = -1; return [new image.Config.ptr(cm, d.width, d.height), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: DecodeConfig }; } $f._1 = _1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.cm = cm; $f.d = d; $f.err = err; $f.err$1 = err$1; $f.paletted = paletted; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DecodeConfig = DecodeConfig;
	init = function() {
		image.RegisterFormat("png", "\x89PNG\r\n\x1A\n", Decode, DecodeConfig);
	};
	ptrType$14.methods = [{prop: "parseIHDR", name: "parseIHDR", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parsePLTE", name: "parsePLTE", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parsetRNS", name: "parsetRNS", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "Read", name: "Read", pkg: "", typ: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "decode", name: "decode", pkg: "image/png", typ: $funcType([], [image.Image, $error], false)}, {prop: "readImagePass", name: "readImagePass", pkg: "image/png", typ: $funcType([io.Reader, $Int, $Bool], [image.Image, $error], false)}, {prop: "mergePassInto", name: "mergePassInto", pkg: "image/png", typ: $funcType([image.Image, image.Image, $Int], [], false)}, {prop: "parseIDAT", name: "parseIDAT", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parseIEND", name: "parseIEND", pkg: "image/png", typ: $funcType([$Uint32], [$error], false)}, {prop: "parseChunk", name: "parseChunk", pkg: "image/png", typ: $funcType([], [$error], false)}, {prop: "verifyChecksum", name: "verifyChecksum", pkg: "image/png", typ: $funcType([], [$error], false)}, {prop: "checkHeader", name: "checkHeader", pkg: "image/png", typ: $funcType([], [$error], false)}];
	FormatError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	UnsupportedError.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	interlaceScan.init("image/png", [{prop: "xFactor", name: "xFactor", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "yFactor", name: "yFactor", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "xOffset", name: "xOffset", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "yOffset", name: "yOffset", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	decoder.init("image/png", [{prop: "r", name: "r", anonymous: false, exported: false, typ: io.Reader, tag: ""}, {prop: "img", name: "img", anonymous: false, exported: false, typ: image.Image, tag: ""}, {prop: "crc", name: "crc", anonymous: false, exported: false, typ: hash.Hash32, tag: ""}, {prop: "width", name: "width", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "height", name: "height", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "depth", name: "depth", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "palette", name: "palette", anonymous: false, exported: false, typ: color.Palette, tag: ""}, {prop: "cb", name: "cb", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "stage", name: "stage", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "idatLength", name: "idatLength", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "tmp", name: "tmp", anonymous: false, exported: false, typ: arrayType$1, tag: ""}, {prop: "interlace", name: "interlace", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "useTransparent", name: "useTransparent", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "transparent", name: "transparent", anonymous: false, exported: false, typ: arrayType$2, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bufio.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = zlib.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = binary.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = hash.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = crc32.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		interlacing = new sliceType([new interlaceScan.ptr(8, 8, 0, 0), new interlaceScan.ptr(8, 8, 4, 0), new interlaceScan.ptr(4, 8, 0, 4), new interlaceScan.ptr(4, 4, 2, 0), new interlaceScan.ptr(2, 4, 0, 2), new interlaceScan.ptr(2, 2, 1, 0), new interlaceScan.ptr(1, 2, 0, 1)]);
		chunkOrderError = "chunk out of order";
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["regexp/syntax"] = (function() {
	var $pkg = {}, $init, bytes, sort, strconv, strings, unicode, utf8, patchList, frag, compiler, Error, ErrorCode, Flags, parser, charGroup, ranges, Prog, InstOp, EmptyOp, Inst, Regexp, Op, sliceType, sliceType$1, sliceType$2, sliceType$3, ptrType, sliceType$4, ptrType$1, sliceType$5, arrayType, arrayType$1, ptrType$2, ptrType$3, sliceType$6, arrayType$2, ptrType$4, ptrType$5, ptrType$6, ptrType$7, anyRuneNotNL, anyRune, anyTable, code1, code2, code3, perlGroup, code4, code5, code6, code7, code8, code9, code10, code11, code12, code13, code14, code15, code16, code17, posixGroup, instOpNames, Compile, minFoldRune, repeatIsValid, cleanAlt, literalRegexp, Parse, isValidCaptureName, isCharClass, matchRune, mergeCharClass, unicodeTable, cleanClass, appendLiteral, appendRange, appendFoldedRange, appendClass, appendFoldedClass, appendNegatedClass, appendTable, appendNegatedTable, negateClass, checkUTF8, nextRune, isalnum, unhex, EmptyOpContext, IsWordChar, wordRune, bw, dumpProg, u32, dumpInst, writeRegexp, escape, simplify1;
	bytes = $packages["bytes"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	patchList = $pkg.patchList = $newType(4, $kindUint32, "syntax.patchList", true, "regexp/syntax", false, null);
	frag = $pkg.frag = $newType(0, $kindStruct, "syntax.frag", true, "regexp/syntax", false, function(i_, out_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.i = 0;
			this.out = 0;
			return;
		}
		this.i = i_;
		this.out = out_;
	});
	compiler = $pkg.compiler = $newType(0, $kindStruct, "syntax.compiler", true, "regexp/syntax", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType.nil;
			return;
		}
		this.p = p_;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "syntax.Error", true, "regexp/syntax", true, function(Code_, Expr_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Code = "";
			this.Expr = "";
			return;
		}
		this.Code = Code_;
		this.Expr = Expr_;
	});
	ErrorCode = $pkg.ErrorCode = $newType(8, $kindString, "syntax.ErrorCode", true, "regexp/syntax", true, null);
	Flags = $pkg.Flags = $newType(2, $kindUint16, "syntax.Flags", true, "regexp/syntax", true, null);
	parser = $pkg.parser = $newType(0, $kindStruct, "syntax.parser", true, "regexp/syntax", false, function(flags_, stack_, free_, numCap_, wholeRegexp_, tmpClass_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.flags = 0;
			this.stack = sliceType$5.nil;
			this.free = ptrType$1.nil;
			this.numCap = 0;
			this.wholeRegexp = "";
			this.tmpClass = sliceType.nil;
			return;
		}
		this.flags = flags_;
		this.stack = stack_;
		this.free = free_;
		this.numCap = numCap_;
		this.wholeRegexp = wholeRegexp_;
		this.tmpClass = tmpClass_;
	});
	charGroup = $pkg.charGroup = $newType(0, $kindStruct, "syntax.charGroup", true, "regexp/syntax", false, function(sign_, class$1_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sign = 0;
			this.class$1 = sliceType.nil;
			return;
		}
		this.sign = sign_;
		this.class$1 = class$1_;
	});
	ranges = $pkg.ranges = $newType(0, $kindStruct, "syntax.ranges", true, "regexp/syntax", false, function(p_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.p = ptrType$2.nil;
			return;
		}
		this.p = p_;
	});
	Prog = $pkg.Prog = $newType(0, $kindStruct, "syntax.Prog", true, "regexp/syntax", true, function(Inst_, Start_, NumCap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = sliceType$4.nil;
			this.Start = 0;
			this.NumCap = 0;
			return;
		}
		this.Inst = Inst_;
		this.Start = Start_;
		this.NumCap = NumCap_;
	});
	InstOp = $pkg.InstOp = $newType(1, $kindUint8, "syntax.InstOp", true, "regexp/syntax", true, null);
	EmptyOp = $pkg.EmptyOp = $newType(1, $kindUint8, "syntax.EmptyOp", true, "regexp/syntax", true, null);
	Inst = $pkg.Inst = $newType(0, $kindStruct, "syntax.Inst", true, "regexp/syntax", true, function(Op_, Out_, Arg_, Rune_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = 0;
			this.Out = 0;
			this.Arg = 0;
			this.Rune = sliceType.nil;
			return;
		}
		this.Op = Op_;
		this.Out = Out_;
		this.Arg = Arg_;
		this.Rune = Rune_;
	});
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "syntax.Regexp", true, "regexp/syntax", true, function(Op_, Flags_, Sub_, Sub0_, Rune_, Rune0_, Min_, Max_, Cap_, Name_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Op = 0;
			this.Flags = 0;
			this.Sub = sliceType$5.nil;
			this.Sub0 = arrayType.zero();
			this.Rune = sliceType.nil;
			this.Rune0 = arrayType$1.zero();
			this.Min = 0;
			this.Max = 0;
			this.Cap = 0;
			this.Name = "";
			return;
		}
		this.Op = Op_;
		this.Flags = Flags_;
		this.Sub = Sub_;
		this.Sub0 = Sub0_;
		this.Rune = Rune_;
		this.Rune0 = Rune0_;
		this.Min = Min_;
		this.Max = Max_;
		this.Cap = Cap_;
		this.Name = Name_;
	});
	Op = $pkg.Op = $newType(1, $kindUint8, "syntax.Op", true, "regexp/syntax", true, null);
	sliceType = $sliceType($Int32);
	sliceType$1 = $sliceType(unicode.Range16);
	sliceType$2 = $sliceType(unicode.Range32);
	sliceType$3 = $sliceType($String);
	ptrType = $ptrType(Prog);
	sliceType$4 = $sliceType(Inst);
	ptrType$1 = $ptrType(Regexp);
	sliceType$5 = $sliceType(ptrType$1);
	arrayType = $arrayType(ptrType$1, 1);
	arrayType$1 = $arrayType($Int32, 2);
	ptrType$2 = $ptrType(sliceType);
	ptrType$3 = $ptrType(unicode.RangeTable);
	sliceType$6 = $sliceType($Uint8);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$4 = $ptrType(compiler);
	ptrType$5 = $ptrType(Error);
	ptrType$6 = $ptrType(parser);
	ptrType$7 = $ptrType(Inst);
	patchList.prototype.next = function(p) {
		var i, l, p, x, x$1;
		l = this.$val;
		i = (x = p.Inst, x$1 = l >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (((l & 1) >>> 0) === 0) {
			return ((i.Out >>> 0));
		}
		return ((i.Arg >>> 0));
	};
	$ptrType(patchList).prototype.next = function(p) { return new patchList(this.$get()).next(p); };
	patchList.prototype.patch = function(p, val) {
		var i, l, p, val, x, x$1;
		l = this.$val;
		while (true) {
			if (!(!((l === 0)))) { break; }
			i = (x = p.Inst, x$1 = l >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			if (((l & 1) >>> 0) === 0) {
				l = ((i.Out >>> 0));
				i.Out = val;
			} else {
				l = ((i.Arg >>> 0));
				i.Arg = val;
			}
		}
	};
	$ptrType(patchList).prototype.patch = function(p, val) { return new patchList(this.$get()).patch(p, val); };
	patchList.prototype.append = function(p, l2) {
		var i, l1, l2, last, next, p, x, x$1;
		l1 = this.$val;
		if (l1 === 0) {
			return l2;
		}
		if (l2 === 0) {
			return l1;
		}
		last = l1;
		while (true) {
			next = new patchList(last).next(p);
			if (next === 0) {
				break;
			}
			last = next;
		}
		i = (x = p.Inst, x$1 = last >>> 1 >>> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (((last & 1) >>> 0) === 0) {
			i.Out = ((l2 >>> 0));
		} else {
			i.Arg = ((l2 >>> 0));
		}
		return l1;
	};
	$ptrType(patchList).prototype.append = function(p, l2) { return new patchList(this.$get()).append(p, l2); };
	Compile = function(re) {
		var c, f, re;
		c = new compiler.ptr(ptrType.nil);
		c.init();
		f = $clone(c.compile(re), frag);
		new patchList(f.out).patch(c.p, c.inst(4).i);
		c.p.Start = ((f.i >> 0));
		return [c.p, $ifaceNil];
	};
	$pkg.Compile = Compile;
	compiler.ptr.prototype.init = function() {
		var c;
		c = this;
		c.p = new Prog.ptr(sliceType$4.nil, 0, 0);
		c.p.NumCap = 2;
		c.inst(5);
	};
	compiler.prototype.init = function() { return this.$val.init(); };
	compiler.ptr.prototype.compile = function(re) {
		var _1, _i, _i$1, _i$2, _ref, _ref$1, _ref$2, bra, c, f, f$1, f$2, f1, i, j, ket, re, sub, sub$1, sub$2, x, x$1, x$2, x$3;
		c = this;
		_1 = re.Op;
		if (_1 === (1)) {
			return c.fail();
		} else if (_1 === (2)) {
			return c.nop();
		} else if (_1 === (3)) {
			if (re.Rune.$length === 0) {
				return c.nop();
			}
			f = new frag.ptr(0, 0);
			_ref = re.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				f1 = $clone(c.rune($subslice(re.Rune, j, (j + 1 >> 0)), re.Flags), frag);
				if (j === 0) {
					frag.copy(f, f1);
				} else {
					frag.copy(f, c.cat($clone(f, frag), $clone(f1, frag)));
				}
				_i++;
			}
			return f;
		} else if (_1 === (4)) {
			return c.rune(re.Rune, re.Flags);
		} else if (_1 === (5)) {
			return c.rune(anyRuneNotNL, 0);
		} else if (_1 === (6)) {
			return c.rune(anyRune, 0);
		} else if (_1 === (7)) {
			return c.empty(1);
		} else if (_1 === (8)) {
			return c.empty(2);
		} else if (_1 === (9)) {
			return c.empty(4);
		} else if (_1 === (10)) {
			return c.empty(8);
		} else if (_1 === (11)) {
			return c.empty(16);
		} else if (_1 === (12)) {
			return c.empty(32);
		} else if (_1 === (13)) {
			bra = $clone(c.cap((((re.Cap << 1 >> 0) >>> 0))), frag);
			sub = $clone(c.compile((x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]))), frag);
			ket = $clone(c.cap(((((re.Cap << 1 >> 0) | 1) >>> 0))), frag);
			return c.cat($clone(c.cat($clone(bra, frag), $clone(sub, frag)), frag), $clone(ket, frag));
		} else if (_1 === (14)) {
			return c.star($clone(c.compile((x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_1 === (15)) {
			return c.plus($clone(c.compile((x$2 = re.Sub, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_1 === (16)) {
			return c.quest($clone(c.compile((x$3 = re.Sub, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0]))), frag), !((((re.Flags & 32) >>> 0) === 0)));
		} else if (_1 === (18)) {
			if (re.Sub.$length === 0) {
				return c.nop();
			}
			f$1 = new frag.ptr(0, 0);
			_ref$1 = re.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i = _i$1;
				sub$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (i === 0) {
					frag.copy(f$1, c.compile(sub$1));
				} else {
					frag.copy(f$1, c.cat($clone(f$1, frag), $clone(c.compile(sub$1), frag)));
				}
				_i$1++;
			}
			return f$1;
		} else if (_1 === (19)) {
			f$2 = new frag.ptr(0, 0);
			_ref$2 = re.Sub;
			_i$2 = 0;
			while (true) {
				if (!(_i$2 < _ref$2.$length)) { break; }
				sub$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
				frag.copy(f$2, c.alt($clone(f$2, frag), $clone(c.compile(sub$2), frag)));
				_i$2++;
			}
			return f$2;
		}
		$panic(new $String("regexp: unhandled case in compile"));
	};
	compiler.prototype.compile = function(re) { return this.$val.compile(re); };
	compiler.ptr.prototype.inst = function(op) {
		var c, f, op;
		c = this;
		f = new frag.ptr(((c.p.Inst.$length >>> 0)), 0);
		c.p.Inst = $append(c.p.Inst, new Inst.ptr(op, 0, 0, sliceType.nil));
		return f;
	};
	compiler.prototype.inst = function(op) { return this.$val.inst(op); };
	compiler.ptr.prototype.nop = function() {
		var c, f;
		c = this;
		f = $clone(c.inst(6), frag);
		f.out = (((f.i << 1 >>> 0) >>> 0));
		return f;
	};
	compiler.prototype.nop = function() { return this.$val.nop(); };
	compiler.ptr.prototype.fail = function() {
		var c;
		c = this;
		return new frag.ptr(0, 0);
	};
	compiler.prototype.fail = function() { return this.$val.fail(); };
	compiler.ptr.prototype.cap = function(arg) {
		var arg, c, f, x, x$1;
		c = this;
		f = $clone(c.inst(2), frag);
		f.out = (((f.i << 1 >>> 0) >>> 0));
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Arg = arg;
		if (c.p.NumCap < (((arg >> 0)) + 1 >> 0)) {
			c.p.NumCap = ((arg >> 0)) + 1 >> 0;
		}
		return f;
	};
	compiler.prototype.cap = function(arg) { return this.$val.cap(arg); };
	compiler.ptr.prototype.cat = function(f1, f2) {
		var c, f1, f2;
		c = this;
		if ((f1.i === 0) || (f2.i === 0)) {
			return new frag.ptr(0, 0);
		}
		new patchList(f1.out).patch(c.p, f2.i);
		return new frag.ptr(f1.i, f2.out);
	};
	compiler.prototype.cat = function(f1, f2) { return this.$val.cat(f1, f2); };
	compiler.ptr.prototype.alt = function(f1, f2) {
		var c, f, f1, f2, i, x, x$1;
		c = this;
		if (f1.i === 0) {
			return f2;
		}
		if (f2.i === 0) {
			return f1;
		}
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		i.Out = f1.i;
		i.Arg = f2.i;
		f.out = new patchList(f1.out).append(c.p, f2.out);
		return f;
	};
	compiler.prototype.alt = function(f1, f2) { return this.$val.alt(f1, f2); };
	compiler.ptr.prototype.quest = function(f1, nongreedy) {
		var c, f, f1, i, nongreedy, x, x$1;
		c = this;
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = (((f.i << 1 >>> 0) >>> 0));
		} else {
			i.Out = f1.i;
			f.out = (((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0));
		}
		f.out = new patchList(f.out).append(c.p, f1.out);
		return f;
	};
	compiler.prototype.quest = function(f1, nongreedy) { return this.$val.quest(f1, nongreedy); };
	compiler.ptr.prototype.star = function(f1, nongreedy) {
		var c, f, f1, i, nongreedy, x, x$1;
		c = this;
		f = $clone(c.inst(0), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (nongreedy) {
			i.Arg = f1.i;
			f.out = (((f.i << 1 >>> 0) >>> 0));
		} else {
			i.Out = f1.i;
			f.out = (((((f.i << 1 >>> 0) | 1) >>> 0) >>> 0));
		}
		new patchList(f1.out).patch(c.p, f.i);
		return f;
	};
	compiler.prototype.star = function(f1, nongreedy) { return this.$val.star(f1, nongreedy); };
	compiler.ptr.prototype.plus = function(f1, nongreedy) {
		var c, f1, nongreedy;
		c = this;
		return new frag.ptr(f1.i, c.star($clone(f1, frag), nongreedy).out);
	};
	compiler.prototype.plus = function(f1, nongreedy) { return this.$val.plus(f1, nongreedy); };
	compiler.ptr.prototype.empty = function(op) {
		var c, f, op, x, x$1;
		c = this;
		f = $clone(c.inst(3), frag);
		(x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Arg = ((op >>> 0));
		f.out = (((f.i << 1 >>> 0) >>> 0));
		return f;
	};
	compiler.prototype.empty = function(op) { return this.$val.empty(op); };
	compiler.ptr.prototype.rune = function(r, flags) {
		var c, f, flags, i, r, x, x$1;
		c = this;
		f = $clone(c.inst(7), frag);
		i = (x = c.p.Inst, x$1 = f.i, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		i.Rune = r;
		flags = (flags & (1)) >>> 0;
		if (!((r.$length === 1)) || (unicode.SimpleFold((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0])) === (0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]))) {
			flags = (flags & ~(1)) << 16 >>> 16;
		}
		i.Arg = ((flags >>> 0));
		f.out = (((f.i << 1 >>> 0) >>> 0));
		if ((((flags & 1) >>> 0) === 0) && ((r.$length === 1) || (r.$length === 2) && ((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === (1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1])))) {
			i.Op = 8;
		} else if ((r.$length === 2) && ((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === 0) && ((1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1]) === 1114111)) {
			i.Op = 9;
		} else if ((r.$length === 4) && ((0 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 0]) === 0) && ((1 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 1]) === 9) && ((2 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 2]) === 11) && ((3 >= r.$length ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + 3]) === 1114111)) {
			i.Op = 10;
		}
		return f;
	};
	compiler.prototype.rune = function(r, flags) { return this.$val.rune(r, flags); };
	Error.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "error parsing regexp: " + new ErrorCode(e.Code).String() + ": `" + e.Expr + "`";
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ErrorCode.prototype.String = function() {
		var e;
		e = this.$val;
		return (e);
	};
	$ptrType(ErrorCode).prototype.String = function() { return new ErrorCode(this.$get()).String(); };
	parser.ptr.prototype.newRegexp = function(op) {
		var op, p, re;
		p = this;
		re = p.free;
		if (!(re === ptrType$1.nil)) {
			p.free = re.Sub0[0];
			Regexp.copy(re, new Regexp.ptr(0, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, ""));
		} else {
			re = new Regexp.ptr(0, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		}
		re.Op = op;
		return re;
	};
	parser.prototype.newRegexp = function(op) { return this.$val.newRegexp(op); };
	parser.ptr.prototype.reuse = function(re) {
		var p, re;
		p = this;
		re.Sub0[0] = p.free;
		p.free = re;
	};
	parser.prototype.reuse = function(re) { return this.$val.reuse(re); };
	parser.ptr.prototype.push = function(re) {
		var p, re, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = this;
		if ((re.Op === 4) && (re.Rune.$length === 2) && ((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === (x$1 = re.Rune, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])))) {
			if (p.maybeConcat((x$16 = re.Rune, (0 >= x$16.$length ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + 0])), (p.flags & ~1) << 16 >>> 16)) {
				return ptrType$1.nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags & ~1) << 16 >>> 16;
		} else if ((re.Op === 4) && (re.Rune.$length === 4) && ((x$2 = re.Rune, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) === (x$3 = re.Rune, (1 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 1]))) && ((x$4 = re.Rune, (2 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 2])) === (x$5 = re.Rune, (3 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 3]))) && (unicode.SimpleFold((x$6 = re.Rune, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0]))) === (x$7 = re.Rune, (2 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 2]))) && (unicode.SimpleFold((x$8 = re.Rune, (2 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 2]))) === (x$9 = re.Rune, (0 >= x$9.$length ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + 0]))) || (re.Op === 4) && (re.Rune.$length === 2) && (((x$10 = re.Rune, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0])) + 1 >> 0) === (x$11 = re.Rune, (1 >= x$11.$length ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + 1]))) && (unicode.SimpleFold((x$12 = re.Rune, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0]))) === (x$13 = re.Rune, (1 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 1]))) && (unicode.SimpleFold((x$14 = re.Rune, (1 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 1]))) === (x$15 = re.Rune, (0 >= x$15.$length ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + 0])))) {
			if (p.maybeConcat((x$17 = re.Rune, (0 >= x$17.$length ? ($throwRuntimeError("index out of range"), undefined) : x$17.$array[x$17.$offset + 0])), (p.flags | 1) >>> 0)) {
				return ptrType$1.nil;
			}
			re.Op = 3;
			re.Rune = $subslice(re.Rune, 0, 1);
			re.Flags = (p.flags | 1) >>> 0;
		} else {
			p.maybeConcat(-1, 0);
		}
		p.stack = $append(p.stack, re);
		return re;
	};
	parser.prototype.push = function(re) { return this.$val.push(re); };
	parser.ptr.prototype.maybeConcat = function(r, flags) {
		var flags, n, p, r, re1, re2, x, x$1, x$2, x$3, x$4;
		p = this;
		n = p.stack.$length;
		if (n < 2) {
			return false;
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		if (!((re1.Op === 3)) || !((re2.Op === 3)) || !((((re1.Flags & 1) >>> 0) === ((re2.Flags & 1) >>> 0)))) {
			return false;
		}
		re2.Rune = $appendSlice(re2.Rune, re1.Rune);
		if (r >= 0) {
			re1.Rune = $subslice(new sliceType(re1.Rune0), 0, 1);
			(x$4 = re1.Rune, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0] = r));
			re1.Flags = flags;
			return true;
		}
		p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
		p.reuse(re1);
		return false;
	};
	parser.prototype.maybeConcat = function(r, flags) { return this.$val.maybeConcat(r, flags); };
	parser.ptr.prototype.newLiteral = function(r, flags) {
		var flags, p, r, re;
		p = this;
		re = p.newRegexp(3);
		re.Flags = flags;
		if (!((((flags & 1) >>> 0) === 0))) {
			r = minFoldRune(r);
		}
		re.Rune0[0] = r;
		re.Rune = $subslice(new sliceType(re.Rune0), 0, 1);
		return re;
	};
	parser.prototype.newLiteral = function(r, flags) { return this.$val.newLiteral(r, flags); };
	minFoldRune = function(r) {
		var min, r, r0;
		if (r < 65 || r > 125251) {
			return r;
		}
		min = r;
		r0 = r;
		r = unicode.SimpleFold(r);
		while (true) {
			if (!(!((r === r0)))) { break; }
			if (min > r) {
				min = r;
			}
			r = unicode.SimpleFold(r);
		}
		return min;
	};
	parser.ptr.prototype.literal = function(r) {
		var p, r;
		p = this;
		p.push(p.newLiteral(r, p.flags));
	};
	parser.prototype.literal = function(r) { return this.$val.literal(r); };
	parser.ptr.prototype.op = function(op) {
		var op, p, re;
		p = this;
		re = p.newRegexp(op);
		re.Flags = p.flags;
		return p.push(re);
	};
	parser.prototype.op = function(op) { return this.$val.op(op); };
	parser.ptr.prototype.repeat = function(op, min, max, before, after, lastRepeat) {
		var after, before, flags, lastRepeat, max, min, n, op, p, re, sub, x, x$1, x$2, x$3, x$4;
		p = this;
		flags = p.flags;
		if (!((((p.flags & 64) >>> 0) === 0))) {
			if (after.length > 0 && (after.charCodeAt(0) === 63)) {
				after = $substring(after, 1);
				flags = (flags ^ (32)) << 16 >>> 16;
			}
			if (!(lastRepeat === "")) {
				return ["", new Error.ptr("invalid nested repetition operator", $substring(lastRepeat, 0, (lastRepeat.length - after.length >> 0)))];
			}
		}
		n = p.stack.$length;
		if (n === 0) {
			return ["", new Error.ptr("missing argument to repetition operator", $substring(before, 0, (before.length - after.length >> 0)))];
		}
		sub = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (sub.Op >= 128) {
			return ["", new Error.ptr("missing argument to repetition operator", $substring(before, 0, (before.length - after.length >> 0)))];
		}
		re = p.newRegexp(op);
		re.Min = min;
		re.Max = max;
		re.Flags = flags;
		re.Sub = $subslice(new sliceType$5(re.Sub0), 0, 1);
		(x$2 = re.Sub, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = sub));
		(x$3 = p.stack, x$4 = n - 1 >> 0, ((x$4 < 0 || x$4 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$4] = re));
		if ((op === 17) && (min >= 2 || max >= 2) && !repeatIsValid(re, 1000)) {
			return ["", new Error.ptr("invalid repeat count", $substring(before, 0, (before.length - after.length >> 0)))];
		}
		return [after, $ifaceNil];
	};
	parser.prototype.repeat = function(op, min, max, before, after, lastRepeat) { return this.$val.repeat(op, min, max, before, after, lastRepeat); };
	repeatIsValid = function(re, n) {
		var _i, _q, _ref, m, n, re, sub;
		if (re.Op === 17) {
			m = re.Max;
			if (m === 0) {
				return true;
			}
			if (m < 0) {
				m = re.Min;
			}
			if (m > n) {
				return false;
			}
			if (m > 0) {
				n = (_q = n / (m), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (!repeatIsValid(sub, n)) {
				return false;
			}
			_i++;
		}
		return true;
	};
	parser.ptr.prototype.concat = function() {
		var _r, _r$1, i, p, subs, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; subs = $f.subs; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		p.maybeConcat(-1, 0);
		i = p.stack.$length;
		while (true) {
			if (!(i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op < 128)) { break; }
			i = i - (1) >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		if (subs.$length === 0) {
			$s = -1; return p.push(p.newRegexp(2));
		}
		_r = p.collapse(subs, 18); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.push(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.concat }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.subs = subs; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.concat = function() { return this.$val.concat(); };
	parser.ptr.prototype.alternate = function() {
		var _r, _r$1, i, p, subs, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; i = $f.i; p = $f.p; subs = $f.subs; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		i = p.stack.$length;
		while (true) {
			if (!(i > 0 && (x = p.stack, x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op < 128)) { break; }
			i = i - (1) >> 0;
		}
		subs = $subslice(p.stack, i);
		p.stack = $subslice(p.stack, 0, i);
		/* */ if (subs.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (subs.$length > 0) { */ case 1:
			$r = cleanAlt((x$2 = subs.$length - 1 >> 0, ((x$2 < 0 || x$2 >= subs.$length) ? ($throwRuntimeError("index out of range"), undefined) : subs.$array[subs.$offset + x$2]))); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		if (subs.$length === 0) {
			$s = -1; return p.push(p.newRegexp(1));
		}
		_r = p.collapse(subs, 19); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = p.push(_r); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.alternate }; } $f._r = _r; $f._r$1 = _r$1; $f.i = i; $f.p = p; $f.subs = subs; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.alternate = function() { return this.$val.alternate(); };
	cleanAlt = function(re) {
		var _1, _r, re, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; re = $f.re; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_1 = re.Op;
			/* */ if (_1 === (4)) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_1 === (4)) { */ case 2:
				_r = cleanClass((re.$ptr_Rune || (re.$ptr_Rune = new ptrType$2(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				re.Rune = _r;
				if ((re.Rune.$length === 2) && ((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 0) && ((x$1 = re.Rune, (1 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 1])) === 1114111)) {
					re.Rune = sliceType.nil;
					re.Op = 6;
					$s = -1; return;
				}
				if ((re.Rune.$length === 4) && ((x$2 = re.Rune, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0])) === 0) && ((x$3 = re.Rune, (1 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 1])) === 9) && ((x$4 = re.Rune, (2 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 2])) === 11) && ((x$5 = re.Rune, (3 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 3])) === 1114111)) {
					re.Rune = sliceType.nil;
					re.Op = 5;
					$s = -1; return;
				}
				if ((re.Rune.$capacity - re.Rune.$length >> 0) > 100) {
					re.Rune = $appendSlice($subslice(new sliceType(re.Rune0), 0, 0), re.Rune);
				}
			/* } */ case 3:
		case 1:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: cleanAlt }; } $f._1 = _1; $f._r = _r; $f.re = re; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.ptr.prototype.collapse = function(subs, op) {
		var _i, _r, _ref, old, op, p, re, sub, subs, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; old = $f.old; op = $f.op; p = $f.p; re = $f.re; sub = $f.sub; subs = $f.subs; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (subs.$length === 1) {
			$s = -1; return (0 >= subs.$length ? ($throwRuntimeError("index out of range"), undefined) : subs.$array[subs.$offset + 0]);
		}
		re = p.newRegexp(op);
		re.Sub = $subslice(new sliceType$5(re.Sub0), 0, 0);
		_ref = subs;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (sub.Op === op) {
				re.Sub = $appendSlice(re.Sub, sub.Sub);
				p.reuse(sub);
			} else {
				re.Sub = $append(re.Sub, sub);
			}
			_i++;
		}
		/* */ if (op === 19) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (op === 19) { */ case 1:
			_r = p.factor(re.Sub); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			re.Sub = _r;
			if (re.Sub.$length === 1) {
				old = re;
				re = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
				p.reuse(old);
			}
		/* } */ case 2:
		$s = -1; return re;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.collapse }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.old = old; $f.op = op; $f.p = p; $f.re = re; $f.sub = sub; $f.subs = subs; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.collapse = function(subs, op) { return this.$val.collapse(subs, op); };
	parser.ptr.prototype.factor = function(sub) {
		var _i, _r, _r$1, _ref, _tmp, _tmp$1, _tuple, first, i, i$1, i$2, i$3, ifirst, iflags, istr, j, j$1, j$2, j$3, max, out, p, prefix, prefix$1, re, re$1, reuse, same, start, str, strflags, sub, suffix, suffix$1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; first = $f.first; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; ifirst = $f.ifirst; iflags = $f.iflags; istr = $f.istr; j = $f.j; j$1 = $f.j$1; j$2 = $f.j$2; j$3 = $f.j$3; max = $f.max; out = $f.out; p = $f.p; prefix = $f.prefix; prefix$1 = $f.prefix$1; re = $f.re; re$1 = $f.re$1; reuse = $f.reuse; same = $f.same; start = $f.start; str = $f.str; strflags = $f.strflags; sub = $f.sub; suffix = $f.suffix; suffix$1 = $f.suffix$1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		if (sub.$length < 2) {
			$s = -1; return sub;
		}
		str = sliceType.nil;
		strflags = 0;
		start = 0;
		out = $subslice(sub, 0, 0);
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i <= sub.$length)) { break; } */ if(!(i <= sub.$length)) { $s = 2; continue; }
			istr = sliceType.nil;
			iflags = 0;
			/* */ if (i < sub.$length) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (i < sub.$length) { */ case 3:
				_tuple = p.leadingString(((i < 0 || i >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i]));
				istr = _tuple[0];
				iflags = _tuple[1];
				if (iflags === strflags) {
					same = 0;
					while (true) {
						if (!(same < str.$length && same < istr.$length && (((same < 0 || same >= str.$length) ? ($throwRuntimeError("index out of range"), undefined) : str.$array[str.$offset + same]) === ((same < 0 || same >= istr.$length) ? ($throwRuntimeError("index out of range"), undefined) : istr.$array[istr.$offset + same])))) { break; }
						same = same + (1) >> 0;
					}
					if (same > 0) {
						str = $subslice(str, 0, same);
						i = i + (1) >> 0;
						/* continue; */ $s = 1; continue;
					}
				}
			/* } */ case 4:
			/* */ if (i === start) { $s = 5; continue; }
			/* */ if (i === (start + 1 >> 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (i === start) { */ case 5:
				$s = 8; continue;
			/* } else if (i === (start + 1 >> 0)) { */ case 6:
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
				$s = 8; continue;
			/* } else { */ case 7:
				prefix = p.newRegexp(3);
				prefix.Flags = strflags;
				prefix.Rune = $appendSlice($subslice(prefix.Rune, 0, 0), str);
				j = start;
				while (true) {
					if (!(j < i)) { break; }
					((j < 0 || j >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j] = p.removeLeadingString(((j < 0 || j >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j]), str.$length));
					j = j + (1) >> 0;
				}
				_r = p.collapse($subslice(sub, start, i), 19); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				suffix = _r;
				re = p.newRegexp(18);
				re.Sub = $append($subslice(re.Sub, 0, 0), prefix, suffix);
				out = $append(out, re);
			/* } */ case 8:
			start = i;
			str = istr;
			strflags = iflags;
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		first = ptrType$1.nil;
		i$1 = 0;
		/* while (true) { */ case 10:
			/* if (!(i$1 <= sub.$length)) { break; } */ if(!(i$1 <= sub.$length)) { $s = 11; continue; }
			ifirst = ptrType$1.nil;
			/* */ if (i$1 < sub.$length) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (i$1 < sub.$length) { */ case 12:
				ifirst = p.leadingRegexp(((i$1 < 0 || i$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$1]));
				if (!(first === ptrType$1.nil) && first.Equal(ifirst) && (isCharClass(first) || ((first.Op === 17) && (first.Min === first.Max) && isCharClass((x = first.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])))))) {
					i$1 = i$1 + (1) >> 0;
					/* continue; */ $s = 10; continue;
				}
			/* } */ case 13:
			/* */ if (i$1 === start) { $s = 14; continue; }
			/* */ if (i$1 === (start + 1 >> 0)) { $s = 15; continue; }
			/* */ $s = 16; continue;
			/* if (i$1 === start) { */ case 14:
				$s = 17; continue;
			/* } else if (i$1 === (start + 1 >> 0)) { */ case 15:
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
				$s = 17; continue;
			/* } else { */ case 16:
				prefix$1 = first;
				j$1 = start;
				while (true) {
					if (!(j$1 < i$1)) { break; }
					reuse = !((j$1 === start));
					((j$1 < 0 || j$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$1] = p.removeLeadingRegexp(((j$1 < 0 || j$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$1]), reuse));
					j$1 = j$1 + (1) >> 0;
				}
				_r$1 = p.collapse($subslice(sub, start, i$1), 19); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				suffix$1 = _r$1;
				re$1 = p.newRegexp(18);
				re$1.Sub = $append($subslice(re$1.Sub, 0, 0), prefix$1, suffix$1);
				out = $append(out, re$1);
			/* } */ case 17:
			start = i$1;
			first = ifirst;
			i$1 = i$1 + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		i$2 = 0;
		/* while (true) { */ case 19:
			/* if (!(i$2 <= sub.$length)) { break; } */ if(!(i$2 <= sub.$length)) { $s = 20; continue; }
			/* */ if (i$2 < sub.$length && isCharClass(((i$2 < 0 || i$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$2]))) { $s = 21; continue; }
			/* */ $s = 22; continue;
			/* if (i$2 < sub.$length && isCharClass(((i$2 < 0 || i$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$2]))) { */ case 21:
				i$2 = i$2 + (1) >> 0;
				/* continue; */ $s = 19; continue;
			/* } */ case 22:
			/* */ if (i$2 === start) { $s = 23; continue; }
			/* */ if (i$2 === (start + 1 >> 0)) { $s = 24; continue; }
			/* */ $s = 25; continue;
			/* if (i$2 === start) { */ case 23:
				$s = 26; continue;
			/* } else if (i$2 === (start + 1 >> 0)) { */ case 24:
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
				$s = 26; continue;
			/* } else { */ case 25:
				max = start;
				j$2 = start + 1 >> 0;
				while (true) {
					if (!(j$2 < i$2)) { break; }
					if (((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]).Op < ((j$2 < 0 || j$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$2]).Op || (((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]).Op === ((j$2 < 0 || j$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$2]).Op) && ((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]).Rune.$length < ((j$2 < 0 || j$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$2]).Rune.$length) {
						max = j$2;
					}
					j$2 = j$2 + (1) >> 0;
				}
				_tmp = ((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max]);
				_tmp$1 = ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]);
				((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start] = _tmp);
				((max < 0 || max >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + max] = _tmp$1);
				j$3 = start + 1 >> 0;
				while (true) {
					if (!(j$3 < i$2)) { break; }
					mergeCharClass(((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]), ((j$3 < 0 || j$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$3]));
					p.reuse(((j$3 < 0 || j$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + j$3]));
					j$3 = j$3 + (1) >> 0;
				}
				$r = cleanAlt(((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				out = $append(out, ((start < 0 || start >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + start]));
			/* } */ case 26:
			if (i$2 < sub.$length) {
				out = $append(out, ((i$2 < 0 || i$2 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$2]));
			}
			start = i$2 + 1 >> 0;
			i$2 = i$2 + (1) >> 0;
		/* } */ $s = 19; continue; case 20:
		sub = out;
		start = 0;
		out = $subslice(sub, 0, 0);
		_ref = sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$3 = _i;
			if ((i$3 + 1 >> 0) < sub.$length && (((i$3 < 0 || i$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$3]).Op === 2) && ((x$1 = i$3 + 1 >> 0, ((x$1 < 0 || x$1 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + x$1])).Op === 2)) {
				_i++;
				continue;
			}
			out = $append(out, ((i$3 < 0 || i$3 >= sub.$length) ? ($throwRuntimeError("index out of range"), undefined) : sub.$array[sub.$offset + i$3]));
			_i++;
		}
		sub = out;
		$s = -1; return sub;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.factor }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.first = first; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.ifirst = ifirst; $f.iflags = iflags; $f.istr = istr; $f.j = j; $f.j$1 = j$1; $f.j$2 = j$2; $f.j$3 = j$3; $f.max = max; $f.out = out; $f.p = p; $f.prefix = prefix; $f.prefix$1 = prefix$1; $f.re = re; $f.re$1 = re$1; $f.reuse = reuse; $f.same = same; $f.start = start; $f.str = str; $f.strflags = strflags; $f.sub = sub; $f.suffix = suffix; $f.suffix$1 = suffix$1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.factor = function(sub) { return this.$val.factor(sub); };
	parser.ptr.prototype.leadingString = function(re) {
		var p, re, x;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			re = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
		}
		if (!((re.Op === 3))) {
			return [sliceType.nil, 0];
		}
		return [re.Rune, (re.Flags & 1) >>> 0];
	};
	parser.prototype.leadingString = function(re) { return this.$val.leadingString(re); };
	parser.ptr.prototype.removeLeadingString = function(re, n) {
		var _1, n, old, p, re, sub, x, x$1, x$2;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			sub = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			sub = p.removeLeadingString(sub, n);
			(x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = sub));
			if (sub.Op === 2) {
				p.reuse(sub);
				_1 = re.Sub.$length;
				if ((_1 === (0)) || (_1 === (1))) {
					re.Op = 2;
					re.Sub = sliceType$5.nil;
				} else if (_1 === (2)) {
					old = re;
					re = (x$2 = re.Sub, (1 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 1]));
					p.reuse(old);
				} else {
					$copySlice(re.Sub, $subslice(re.Sub, 1));
					re.Sub = $subslice(re.Sub, 0, (re.Sub.$length - 1 >> 0));
				}
			}
			return re;
		}
		if (re.Op === 3) {
			re.Rune = $subslice(re.Rune, 0, $copySlice(re.Rune, $subslice(re.Rune, n)));
			if (re.Rune.$length === 0) {
				re.Op = 2;
			}
		}
		return re;
	};
	parser.prototype.removeLeadingString = function(re, n) { return this.$val.removeLeadingString(re, n); };
	parser.ptr.prototype.leadingRegexp = function(re) {
		var p, re, sub, x;
		p = this;
		if (re.Op === 2) {
			return ptrType$1.nil;
		}
		if ((re.Op === 18) && re.Sub.$length > 0) {
			sub = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			if (sub.Op === 2) {
				return ptrType$1.nil;
			}
			return sub;
		}
		return re;
	};
	parser.prototype.leadingRegexp = function(re) { return this.$val.leadingRegexp(re); };
	parser.ptr.prototype.removeLeadingRegexp = function(re, reuse) {
		var _1, old, p, re, reuse, x, x$1;
		p = this;
		if ((re.Op === 18) && re.Sub.$length > 0) {
			if (reuse) {
				p.reuse((x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])));
			}
			re.Sub = $subslice(re.Sub, 0, $copySlice(re.Sub, $subslice(re.Sub, 1)));
			_1 = re.Sub.$length;
			if (_1 === (0)) {
				re.Op = 2;
				re.Sub = sliceType$5.nil;
			} else if (_1 === (1)) {
				old = re;
				re = (x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0]));
				p.reuse(old);
			}
			return re;
		}
		if (reuse) {
			p.reuse(re);
		}
		return p.newRegexp(2);
	};
	parser.prototype.removeLeadingRegexp = function(re, reuse) { return this.$val.removeLeadingRegexp(re, reuse); };
	literalRegexp = function(s, flags) {
		var _i, _ref, _rune, c, flags, re, s;
		re = new Regexp.ptr(3, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		re.Flags = flags;
		re.Rune = $subslice(new sliceType(re.Rune0), 0, 0);
		_ref = s;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (re.Rune.$length >= re.Rune.$capacity) {
				re.Rune = (new sliceType($stringToRunes(s)));
				break;
			}
			re.Rune = $append(re.Rune, c);
			_i += _rune[1];
		}
		return re;
	};
	Parse = function(s, flags) {
		var _1, _2, _3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _struct, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, after, after$1, before, before$1, c, c$1, err, err$1, err$2, err$3, flags, i, lastRepeat, lit, max, min, n, ok, op, p, r, r$1, re, repeat, rest, rest$1, rest$2, s, t, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _struct = $f._struct; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; after = $f.after; after$1 = $f.after$1; before = $f.before; before$1 = $f.before$1; c = $f.c; c$1 = $f.c$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; err$3 = $f.err$3; flags = $f.flags; i = $f.i; lastRepeat = $f.lastRepeat; lit = $f.lit; max = $f.max; min = $f.min; n = $f.n; ok = $f.ok; op = $f.op; p = $f.p; r = $f.r; r$1 = $f.r$1; re = $f.re; repeat = $f.repeat; rest = $f.rest; rest$1 = $f.rest$1; rest$2 = $f.rest$2; s = $f.s; t = $f.t; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		if (!((((flags & 2) >>> 0) === 0))) {
			err = checkUTF8(s);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$1.nil, err];
			}
			$s = -1; return [literalRegexp(s, flags), $ifaceNil];
		}
		p = new parser.ptr(0, sliceType$5.nil, ptrType$1.nil, 0, "", sliceType.nil);
		err$1 = $ifaceNil;
		c = 0;
		op = 0;
		lastRepeat = "";
		p.flags = flags;
		p.wholeRegexp = s;
		t = s;
		/* while (true) { */ case 1:
			/* if (!(!(t === ""))) { break; } */ if(!(!(t === ""))) { $s = 2; continue; }
			repeat = "";
				_1 = t.charCodeAt(0);
				/* */ if (_1 === (40)) { $s = 4; continue; }
				/* */ if (_1 === (124)) { $s = 5; continue; }
				/* */ if (_1 === (41)) { $s = 6; continue; }
				/* */ if (_1 === (94)) { $s = 7; continue; }
				/* */ if (_1 === (36)) { $s = 8; continue; }
				/* */ if (_1 === (46)) { $s = 9; continue; }
				/* */ if (_1 === (91)) { $s = 10; continue; }
				/* */ if ((_1 === (42)) || (_1 === (43)) || (_1 === (63))) { $s = 11; continue; }
				/* */ if (_1 === (123)) { $s = 12; continue; }
				/* */ if (_1 === (92)) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_1 === (40)) { */ case 4:
					if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2 && (t.charCodeAt(1) === 63)) {
						_tuple = p.parsePerlFlags(t);
						t = _tuple[0];
						err$1 = _tuple[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							$s = -1; return [ptrType$1.nil, err$1];
						}
						/* break; */ $s = 3; continue;
					}
					p.numCap = p.numCap + (1) >> 0;
					p.op(128).Cap = p.numCap;
					t = $substring(t, 1);
					$s = 15; continue;
				/* } else if (_1 === (124)) { */ case 5:
					_r = p.parseVerticalBar(); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					err$1 = _r;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					t = $substring(t, 1);
					$s = 15; continue;
				/* } else if (_1 === (41)) { */ case 6:
					_r$1 = p.parseRightParen(); /* */ $s = 17; case 17: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					err$1 = _r$1;
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					t = $substring(t, 1);
					$s = 15; continue;
				/* } else if (_1 === (94)) { */ case 7:
					if (!((((p.flags & 16) >>> 0) === 0))) {
						p.op(9);
					} else {
						p.op(7);
					}
					t = $substring(t, 1);
					$s = 15; continue;
				/* } else if (_1 === (36)) { */ case 8:
					if (!((((p.flags & 16) >>> 0) === 0))) {
						_struct = p.op(10);
						_struct.Flags = (_struct.Flags | (256)) >>> 0;
					} else {
						p.op(8);
					}
					t = $substring(t, 1);
					$s = 15; continue;
				/* } else if (_1 === (46)) { */ case 9:
					if (!((((p.flags & 8) >>> 0) === 0))) {
						p.op(6);
					} else {
						p.op(5);
					}
					t = $substring(t, 1);
					$s = 15; continue;
				/* } else if (_1 === (91)) { */ case 10:
					_r$2 = p.parseClass(t); /* */ $s = 18; case 18: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$1 = _r$2;
					t = _tuple$1[0];
					err$1 = _tuple$1[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					$s = 15; continue;
				/* } else if ((_1 === (42)) || (_1 === (43)) || (_1 === (63))) { */ case 11:
					before = t;
					_2 = t.charCodeAt(0);
					if (_2 === (42)) {
						op = 14;
					} else if (_2 === (43)) {
						op = 15;
					} else if (_2 === (63)) {
						op = 16;
					}
					after = $substring(t, 1);
					_tuple$2 = p.repeat(op, 0, 0, before, after, lastRepeat);
					after = _tuple$2[0];
					err$1 = _tuple$2[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					repeat = before;
					t = after;
					$s = 15; continue;
				/* } else if (_1 === (123)) { */ case 12:
					op = 17;
					before$1 = t;
					_tuple$3 = p.parseRepeat(t);
					min = _tuple$3[0];
					max = _tuple$3[1];
					after$1 = _tuple$3[2];
					ok = _tuple$3[3];
					if (!ok) {
						p.literal(123);
						t = $substring(t, 1);
						/* break; */ $s = 3; continue;
					}
					if (min < 0 || min > 1000 || max > 1000 || max >= 0 && min > max) {
						$s = -1; return [ptrType$1.nil, new Error.ptr("invalid repeat count", $substring(before$1, 0, (before$1.length - after$1.length >> 0)))];
					}
					_tuple$4 = p.repeat(op, min, max, before$1, after$1, lastRepeat);
					after$1 = _tuple$4[0];
					err$1 = _tuple$4[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					repeat = before$1;
					t = after$1;
					$s = 15; continue;
				/* } else if (_1 === (92)) { */ case 13:
					if (!((((p.flags & 64) >>> 0) === 0)) && t.length >= 2) {
						_3 = t.charCodeAt(1);
						if (_3 === (65)) {
							p.op(9);
							t = $substring(t, 2);
							/* break BigSwitch; */ $s = 3; continue s;
						} else if (_3 === (98)) {
							p.op(11);
							t = $substring(t, 2);
							/* break BigSwitch; */ $s = 3; continue s;
						} else if (_3 === (66)) {
							p.op(12);
							t = $substring(t, 2);
							/* break BigSwitch; */ $s = 3; continue s;
						} else if (_3 === (67)) {
							$s = -1; return [ptrType$1.nil, new Error.ptr("invalid escape sequence", $substring(t, 0, 2))];
						} else if (_3 === (81)) {
							lit = "";
							i = strings.Index(t, "\\E");
							if (i < 0) {
								lit = $substring(t, 2);
								t = "";
							} else {
								lit = $substring(t, 2, i);
								t = $substring(t, (i + 2 >> 0));
							}
							while (true) {
								if (!(!(lit === ""))) { break; }
								_tuple$5 = nextRune(lit);
								c$1 = _tuple$5[0];
								rest = _tuple$5[1];
								err$2 = _tuple$5[2];
								if (!($interfaceIsEqual(err$2, $ifaceNil))) {
									$s = -1; return [ptrType$1.nil, err$2];
								}
								p.literal(c$1);
								lit = rest;
							}
							/* break BigSwitch; */ $s = 3; continue s;
						} else if (_3 === (122)) {
							p.op(10);
							t = $substring(t, 2);
							/* break BigSwitch; */ $s = 3; continue s;
						}
					}
					re = p.newRegexp(4);
					re.Flags = p.flags;
					/* */ if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (t.length >= 2 && ((t.charCodeAt(1) === 112) || (t.charCodeAt(1) === 80))) { */ case 19:
						_r$3 = p.parseUnicodeClass(t, $subslice(new sliceType(re.Rune0), 0, 0)); /* */ $s = 21; case 21: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
						_tuple$6 = _r$3;
						r = _tuple$6[0];
						rest$1 = _tuple$6[1];
						err$3 = _tuple$6[2];
						if (!($interfaceIsEqual(err$3, $ifaceNil))) {
							$s = -1; return [ptrType$1.nil, err$3];
						}
						if (!(r === sliceType.nil)) {
							re.Rune = r;
							t = rest$1;
							p.push(re);
							/* break BigSwitch; */ $s = 3; continue s;
						}
					/* } */ case 20:
					_r$4 = p.parsePerlClassEscape(t, $subslice(new sliceType(re.Rune0), 0, 0)); /* */ $s = 22; case 22: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$7 = _r$4;
					r$1 = _tuple$7[0];
					rest$2 = _tuple$7[1];
					if (!(r$1 === sliceType.nil)) {
						re.Rune = r$1;
						t = rest$2;
						p.push(re);
						/* break BigSwitch; */ $s = 3; continue s;
					}
					p.reuse(re);
					_tuple$8 = p.parseEscape(t);
					c = _tuple$8[0];
					t = _tuple$8[1];
					err$1 = _tuple$8[2];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					p.literal(c);
					$s = 15; continue;
				/* } else { */ case 14:
					_tuple$9 = nextRune(t);
					c = _tuple$9[0];
					t = _tuple$9[1];
					err$1 = _tuple$9[2];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						$s = -1; return [ptrType$1.nil, err$1];
					}
					p.literal(c);
				/* } */ case 15:
			case 3:
			lastRepeat = repeat;
		/* } */ $s = 1; continue; case 2:
		_r$5 = p.concat(); /* */ $s = 23; case 23: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		_r$5;
		_r$6 = p.swapVerticalBar(); /* */ $s = 26; case 26: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
		/* */ if (_r$6) { $s = 24; continue; }
		/* */ $s = 25; continue;
		/* if (_r$6) { */ case 24:
			p.stack = $subslice(p.stack, 0, (p.stack.$length - 1 >> 0));
		/* } */ case 25:
		_r$7 = p.alternate(); /* */ $s = 27; case 27: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
		_r$7;
		n = p.stack.$length;
		if (!((n === 1))) {
			$s = -1; return [ptrType$1.nil, new Error.ptr("missing closing )", s)];
		}
		$s = -1; return [(x = p.stack, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Parse }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._struct = _struct; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.after = after; $f.after$1 = after$1; $f.before = before; $f.before$1 = before$1; $f.c = c; $f.c$1 = c$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.err$3 = err$3; $f.flags = flags; $f.i = i; $f.lastRepeat = lastRepeat; $f.lit = lit; $f.max = max; $f.min = min; $f.n = n; $f.ok = ok; $f.op = op; $f.p = p; $f.r = r; $f.r$1 = r$1; $f.re = re; $f.repeat = repeat; $f.rest = rest; $f.rest$1 = rest$1; $f.rest$2 = rest$2; $f.s = s; $f.t = t; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Parse = Parse;
	parser.ptr.prototype.parseRepeat = function(s) {
		var _tuple, _tuple$1, max, min, ok, ok1, p, rest, s;
		min = 0;
		max = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || !((s.charCodeAt(0) === 123))) {
			return [min, max, rest, ok];
		}
		s = $substring(s, 1);
		ok1 = false;
		_tuple = p.parseInt(s);
		min = _tuple[0];
		s = _tuple[1];
		ok1 = _tuple[2];
		if (!ok1) {
			return [min, max, rest, ok];
		}
		if (s === "") {
			return [min, max, rest, ok];
		}
		if (!((s.charCodeAt(0) === 44))) {
			max = min;
		} else {
			s = $substring(s, 1);
			if (s === "") {
				return [min, max, rest, ok];
			}
			if (s.charCodeAt(0) === 125) {
				max = -1;
			} else {
				_tuple$1 = p.parseInt(s);
				max = _tuple$1[0];
				s = _tuple$1[1];
				ok1 = _tuple$1[2];
				if (!ok1) {
					return [min, max, rest, ok];
				} else if (max < 0) {
					min = -1;
				}
			}
		}
		if (s === "" || !((s.charCodeAt(0) === 125))) {
			return [min, max, rest, ok];
		}
		rest = $substring(s, 1);
		ok = true;
		return [min, max, rest, ok];
	};
	parser.prototype.parseRepeat = function(s) { return this.$val.parseRepeat(s); };
	parser.ptr.prototype.parsePerlFlags = function(s) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, c, capture, end, err, flags, name, p, re, rest, s, sawFlag, sign, t;
		rest = "";
		err = $ifaceNil;
		p = this;
		t = s;
		if (t.length > 4 && (t.charCodeAt(2) === 80) && (t.charCodeAt(3) === 60)) {
			end = strings.IndexRune(t, 62);
			if (end < 0) {
				err = checkUTF8(t);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = "";
					_tmp$1 = err;
					rest = _tmp;
					err = _tmp$1;
					return [rest, err];
				}
				_tmp$2 = "";
				_tmp$3 = new Error.ptr("invalid named capture", s);
				rest = _tmp$2;
				err = _tmp$3;
				return [rest, err];
			}
			capture = $substring(t, 0, (end + 1 >> 0));
			name = $substring(t, 4, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = "";
				_tmp$5 = err;
				rest = _tmp$4;
				err = _tmp$5;
				return [rest, err];
			}
			if (!isValidCaptureName(name)) {
				_tmp$6 = "";
				_tmp$7 = new Error.ptr("invalid named capture", capture);
				rest = _tmp$6;
				err = _tmp$7;
				return [rest, err];
			}
			p.numCap = p.numCap + (1) >> 0;
			re = p.op(128);
			re.Cap = p.numCap;
			re.Name = name;
			_tmp$8 = $substring(t, (end + 1 >> 0));
			_tmp$9 = $ifaceNil;
			rest = _tmp$8;
			err = _tmp$9;
			return [rest, err];
		}
		c = 0;
		t = $substring(t, 2);
		flags = p.flags;
		sign = 1;
		sawFlag = false;
		Loop:
		while (true) {
			if (!(!(t === ""))) { break; }
			_tuple = nextRune(t);
			c = _tuple[0];
			t = _tuple[1];
			err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$10 = "";
				_tmp$11 = err;
				rest = _tmp$10;
				err = _tmp$11;
				return [rest, err];
			}
			_1 = c;
			if (_1 === (105)) {
				flags = (flags | (1)) >>> 0;
				sawFlag = true;
			} else if (_1 === (109)) {
				flags = (flags & ~(16)) << 16 >>> 16;
				sawFlag = true;
			} else if (_1 === (115)) {
				flags = (flags | (8)) >>> 0;
				sawFlag = true;
			} else if (_1 === (85)) {
				flags = (flags | (32)) >>> 0;
				sawFlag = true;
			} else if (_1 === (45)) {
				if (sign < 0) {
					break Loop;
				}
				sign = -1;
				flags = ~flags << 16 >>> 16;
				sawFlag = false;
			} else if ((_1 === (58)) || (_1 === (41))) {
				if (sign < 0) {
					if (!sawFlag) {
						break Loop;
					}
					flags = ~flags << 16 >>> 16;
				}
				if (c === 58) {
					p.op(128);
				}
				p.flags = flags;
				_tmp$12 = t;
				_tmp$13 = $ifaceNil;
				rest = _tmp$12;
				err = _tmp$13;
				return [rest, err];
			} else {
				break Loop;
			}
		}
		_tmp$14 = "";
		_tmp$15 = new Error.ptr("invalid or unsupported Perl syntax", $substring(s, 0, (s.length - t.length >> 0)));
		rest = _tmp$14;
		err = _tmp$15;
		return [rest, err];
	};
	parser.prototype.parsePerlFlags = function(s) { return this.$val.parsePerlFlags(s); };
	isValidCaptureName = function(name) {
		var _i, _ref, _rune, c, name;
		if (name === "") {
			return false;
		}
		_ref = name;
		_i = 0;
		while (true) {
			if (!(_i < _ref.length)) { break; }
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (!((c === 95)) && !isalnum(c)) {
				return false;
			}
			_i += _rune[1];
		}
		return true;
	};
	parser.ptr.prototype.parseInt = function(s) {
		var i, n, ok, p, rest, s, t;
		n = 0;
		rest = "";
		ok = false;
		p = this;
		if (s === "" || s.charCodeAt(0) < 48 || 57 < s.charCodeAt(0)) {
			return [n, rest, ok];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 48) && 48 <= s.charCodeAt(1) && s.charCodeAt(1) <= 57) {
			return [n, rest, ok];
		}
		t = s;
		while (true) {
			if (!(!(s === "") && 48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57)) { break; }
			s = $substring(s, 1);
		}
		rest = s;
		ok = true;
		t = $substring(t, 0, (t.length - s.length >> 0));
		i = 0;
		while (true) {
			if (!(i < t.length)) { break; }
			if (n >= 100000000) {
				n = -1;
				break;
			}
			n = (($imul(n, 10)) + ((t.charCodeAt(i) >> 0)) >> 0) - 48 >> 0;
			i = i + (1) >> 0;
		}
		return [n, rest, ok];
	};
	parser.prototype.parseInt = function(s) { return this.$val.parseInt(s); };
	isCharClass = function(re) {
		var re;
		return (re.Op === 3) && (re.Rune.$length === 1) || (re.Op === 4) || (re.Op === 5) || (re.Op === 6);
	};
	matchRune = function(re, r) {
		var _1, i, r, re, x, x$1, x$2, x$3;
		_1 = re.Op;
		if (_1 === (3)) {
			return (re.Rune.$length === 1) && ((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === r);
		} else if (_1 === (4)) {
			i = 0;
			while (true) {
				if (!(i < re.Rune.$length)) { break; }
				if ((x$1 = re.Rune, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])) <= r && r <= (x$2 = re.Rune, x$3 = i + 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]))) {
					return true;
				}
				i = i + (2) >> 0;
			}
			return false;
		} else if (_1 === (5)) {
			return !((r === 10));
		} else if (_1 === (6)) {
			return true;
		}
		return false;
	};
	parser.ptr.prototype.parseVerticalBar = function() {
		var _r, _r$1, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.concat(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = p.swapVerticalBar(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (!_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!_r$1) { */ case 2:
			p.op(129);
		/* } */ case 3:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseVerticalBar }; } $f._r = _r; $f._r$1 = _r$1; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseVerticalBar = function() { return this.$val.parseVerticalBar(); };
	mergeCharClass = function(dst, src) {
		var _1, dst, src, x, x$1, x$2, x$3, x$4;
		switch (0) { default:
			_1 = dst.Op;
			if (_1 === (6)) {
			} else if (_1 === (5)) {
				if (matchRune(src, 10)) {
					dst.Op = 6;
				}
			} else if (_1 === (4)) {
				if (src.Op === 3) {
					dst.Rune = appendLiteral(dst.Rune, (x = src.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])), src.Flags);
				} else {
					dst.Rune = appendClass(dst.Rune, src.Rune);
				}
			} else if (_1 === (3)) {
				if (((x$1 = src.Rune, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) === (x$2 = dst.Rune, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))) && (src.Flags === dst.Flags)) {
					break;
				}
				dst.Op = 4;
				dst.Rune = appendLiteral($subslice(dst.Rune, 0, 0), (x$3 = dst.Rune, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])), dst.Flags);
				dst.Rune = appendLiteral(dst.Rune, (x$4 = src.Rune, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])), src.Flags);
			}
		}
	};
	parser.ptr.prototype.swapVerticalBar = function() {
		var _tmp, _tmp$1, n, p, re1, re1$1, re2, re3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; n = $f.n; p = $f.p; re1 = $f.re1; re1$1 = $f.re1$1; re2 = $f.re2; re3 = $f.re3; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$17 = $f.x$17; x$18 = $f.x$18; x$19 = $f.x$19; x$2 = $f.x$2; x$20 = $f.x$20; x$21 = $f.x$21; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		n = p.stack.$length;
		if (n >= 3 && ((x = p.stack, x$1 = n - 2 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op === 129) && isCharClass((x$2 = p.stack, x$3 = n - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]))) && isCharClass((x$4 = p.stack, x$5 = n - 3 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])))) {
			re1 = (x$6 = p.stack, x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7]));
			re3 = (x$8 = p.stack, x$9 = n - 3 >> 0, ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9]));
			if (re1.Op > re3.Op) {
				_tmp = re3;
				_tmp$1 = re1;
				re1 = _tmp;
				re3 = _tmp$1;
				(x$10 = p.stack, x$11 = n - 3 >> 0, ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11] = re3));
			}
			mergeCharClass(re3, re1);
			p.reuse(re1);
			p.stack = $subslice(p.stack, 0, (n - 1 >> 0));
			$s = -1; return true;
		}
		/* */ if (n >= 2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (n >= 2) { */ case 1:
			re1$1 = (x$12 = p.stack, x$13 = n - 1 >> 0, ((x$13 < 0 || x$13 >= x$12.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + x$13]));
			re2 = (x$14 = p.stack, x$15 = n - 2 >> 0, ((x$15 < 0 || x$15 >= x$14.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + x$15]));
			/* */ if (re2.Op === 129) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (re2.Op === 129) { */ case 3:
				/* */ if (n >= 3) { $s = 5; continue; }
				/* */ $s = 6; continue;
				/* if (n >= 3) { */ case 5:
					$r = cleanAlt((x$16 = p.stack, x$17 = n - 3 >> 0, ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17]))); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 6:
				(x$18 = p.stack, x$19 = n - 2 >> 0, ((x$19 < 0 || x$19 >= x$18.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$18.$array[x$18.$offset + x$19] = re1$1));
				(x$20 = p.stack, x$21 = n - 1 >> 0, ((x$21 < 0 || x$21 >= x$20.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$20.$array[x$20.$offset + x$21] = re2));
				$s = -1; return true;
			/* } */ case 4:
		/* } */ case 2:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.swapVerticalBar }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.n = n; $f.p = p; $f.re1 = re1; $f.re1$1 = re1$1; $f.re2 = re2; $f.re3 = re3; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$17 = x$17; $f.x$18 = x$18; $f.x$19 = x$19; $f.x$2 = x$2; $f.x$20 = x$20; $f.x$21 = x$21; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.swapVerticalBar = function() { return this.$val.swapVerticalBar(); };
	parser.ptr.prototype.parseRightParen = function() {
		var _r, _r$1, _r$2, n, p, re1, re2, x, x$1, x$2, x$3, x$4, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; n = $f.n; p = $f.p; re1 = $f.re1; re2 = $f.re2; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		_r = p.concat(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_r$1 = p.swapVerticalBar(); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		/* */ if (_r$1) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (_r$1) { */ case 2:
			p.stack = $subslice(p.stack, 0, (p.stack.$length - 1 >> 0));
		/* } */ case 3:
		_r$2 = p.alternate(); /* */ $s = 5; case 5: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		n = p.stack.$length;
		if (n < 2) {
			$s = -1; return new Error.ptr("unexpected )", p.wholeRegexp);
		}
		re1 = (x = p.stack, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		re2 = (x$2 = p.stack, x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3]));
		p.stack = $subslice(p.stack, 0, (n - 2 >> 0));
		if (!((re2.Op === 128))) {
			$s = -1; return new Error.ptr("unexpected )", p.wholeRegexp);
		}
		p.flags = re2.Flags;
		if (re2.Cap === 0) {
			p.push(re1);
		} else {
			re2.Op = 13;
			re2.Sub = $subslice(new sliceType$5(re2.Sub0), 0, 1);
			(x$4 = re2.Sub, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0] = re1));
			p.push(re2);
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseRightParen }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.n = n; $f.p = p; $f.re1 = re1; $f.re2 = re2; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseRightParen = function() { return this.$val.parseRightParen(); };
	parser.ptr.prototype.parseEscape = function(s) {
		var _1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, c, err, i, nhex, p, r, rest, s, t, v, x, y;
		r = 0;
		rest = "";
		err = $ifaceNil;
		p = this;
		t = $substring(s, 1);
		if (t === "") {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("trailing backslash at end of expression", "");
			r = _tmp;
			rest = _tmp$1;
			err = _tmp$2;
			return [r, rest, err];
		}
		_tuple = nextRune(t);
		c = _tuple[0];
		t = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$3 = 0;
			_tmp$4 = "";
			_tmp$5 = err;
			r = _tmp$3;
			rest = _tmp$4;
			err = _tmp$5;
			return [r, rest, err];
		}
		Switch:
		switch (0) { default:
			_1 = c;
			if ((_1 === (49)) || (_1 === (50)) || (_1 === (51)) || (_1 === (52)) || (_1 === (53)) || (_1 === (54)) || (_1 === (55))) {
				if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
					break;
				}
				r = c - 48 >> 0;
				i = 1;
				while (true) {
					if (!(i < 3)) { break; }
					if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
						break;
					}
					r = (($imul(r, 8)) + ((t.charCodeAt(0) >> 0)) >> 0) - 48 >> 0;
					t = $substring(t, 1);
					i = i + (1) >> 0;
				}
				_tmp$6 = r;
				_tmp$7 = t;
				_tmp$8 = $ifaceNil;
				r = _tmp$6;
				rest = _tmp$7;
				err = _tmp$8;
				return [r, rest, err];
			} else if (_1 === (48)) {
				r = c - 48 >> 0;
				i = 1;
				while (true) {
					if (!(i < 3)) { break; }
					if (t === "" || t.charCodeAt(0) < 48 || t.charCodeAt(0) > 55) {
						break;
					}
					r = (($imul(r, 8)) + ((t.charCodeAt(0) >> 0)) >> 0) - 48 >> 0;
					t = $substring(t, 1);
					i = i + (1) >> 0;
				}
				_tmp$9 = r;
				_tmp$10 = t;
				_tmp$11 = $ifaceNil;
				r = _tmp$9;
				rest = _tmp$10;
				err = _tmp$11;
				return [r, rest, err];
			} else if (_1 === (120)) {
				if (t === "") {
					break;
				}
				_tuple$1 = nextRune(t);
				c = _tuple$1[0];
				t = _tuple$1[1];
				err = _tuple$1[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$12 = 0;
					_tmp$13 = "";
					_tmp$14 = err;
					r = _tmp$12;
					rest = _tmp$13;
					err = _tmp$14;
					return [r, rest, err];
				}
				if (c === 123) {
					nhex = 0;
					r = 0;
					while (true) {
						if (t === "") {
							break Switch;
						}
						_tuple$2 = nextRune(t);
						c = _tuple$2[0];
						t = _tuple$2[1];
						err = _tuple$2[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							_tmp$15 = 0;
							_tmp$16 = "";
							_tmp$17 = err;
							r = _tmp$15;
							rest = _tmp$16;
							err = _tmp$17;
							return [r, rest, err];
						}
						if (c === 125) {
							break;
						}
						v = unhex(c);
						if (v < 0) {
							break Switch;
						}
						r = ($imul(r, 16)) + v >> 0;
						if (r > 1114111) {
							break Switch;
						}
						nhex = nhex + (1) >> 0;
					}
					if (nhex === 0) {
						break Switch;
					}
					_tmp$18 = r;
					_tmp$19 = t;
					_tmp$20 = $ifaceNil;
					r = _tmp$18;
					rest = _tmp$19;
					err = _tmp$20;
					return [r, rest, err];
				}
				x = unhex(c);
				_tuple$3 = nextRune(t);
				c = _tuple$3[0];
				t = _tuple$3[1];
				err = _tuple$3[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$21 = 0;
					_tmp$22 = "";
					_tmp$23 = err;
					r = _tmp$21;
					rest = _tmp$22;
					err = _tmp$23;
					return [r, rest, err];
				}
				y = unhex(c);
				if (x < 0 || y < 0) {
					break;
				}
				_tmp$24 = ($imul(x, 16)) + y >> 0;
				_tmp$25 = t;
				_tmp$26 = $ifaceNil;
				r = _tmp$24;
				rest = _tmp$25;
				err = _tmp$26;
				return [r, rest, err];
			} else if (_1 === (97)) {
				_tmp$27 = 7;
				_tmp$28 = t;
				_tmp$29 = err;
				r = _tmp$27;
				rest = _tmp$28;
				err = _tmp$29;
				return [r, rest, err];
			} else if (_1 === (102)) {
				_tmp$30 = 12;
				_tmp$31 = t;
				_tmp$32 = err;
				r = _tmp$30;
				rest = _tmp$31;
				err = _tmp$32;
				return [r, rest, err];
			} else if (_1 === (110)) {
				_tmp$33 = 10;
				_tmp$34 = t;
				_tmp$35 = err;
				r = _tmp$33;
				rest = _tmp$34;
				err = _tmp$35;
				return [r, rest, err];
			} else if (_1 === (114)) {
				_tmp$36 = 13;
				_tmp$37 = t;
				_tmp$38 = err;
				r = _tmp$36;
				rest = _tmp$37;
				err = _tmp$38;
				return [r, rest, err];
			} else if (_1 === (116)) {
				_tmp$39 = 9;
				_tmp$40 = t;
				_tmp$41 = err;
				r = _tmp$39;
				rest = _tmp$40;
				err = _tmp$41;
				return [r, rest, err];
			} else if (_1 === (118)) {
				_tmp$42 = 11;
				_tmp$43 = t;
				_tmp$44 = err;
				r = _tmp$42;
				rest = _tmp$43;
				err = _tmp$44;
				return [r, rest, err];
			} else if (c < 128 && !isalnum(c)) {
				_tmp$45 = c;
				_tmp$46 = t;
				_tmp$47 = $ifaceNil;
				r = _tmp$45;
				rest = _tmp$46;
				err = _tmp$47;
				return [r, rest, err];
			}
		}
		_tmp$48 = 0;
		_tmp$49 = "";
		_tmp$50 = new Error.ptr("invalid escape sequence", $substring(s, 0, (s.length - t.length >> 0)));
		r = _tmp$48;
		rest = _tmp$49;
		err = _tmp$50;
		return [r, rest, err];
	};
	parser.prototype.parseEscape = function(s) { return this.$val.parseEscape(s); };
	parser.ptr.prototype.parseClassChar = function(s, wholeClass) {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, err, p, r, rest, s, wholeClass;
		r = 0;
		rest = "";
		err = $ifaceNil;
		p = this;
		if (s === "") {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("missing closing ]", wholeClass);
			r = _tmp;
			rest = _tmp$1;
			err = _tmp$2;
			return [r, rest, err];
		}
		if (s.charCodeAt(0) === 92) {
			_tuple = p.parseEscape(s);
			r = _tuple[0];
			rest = _tuple[1];
			err = _tuple[2];
			return [r, rest, err];
		}
		_tuple$1 = nextRune(s);
		r = _tuple$1[0];
		rest = _tuple$1[1];
		err = _tuple$1[2];
		return [r, rest, err];
	};
	parser.prototype.parseClassChar = function(s, wholeClass) { return this.$val.parseClassChar(s, wholeClass); };
	parser.ptr.prototype.parsePerlClassEscape = function(s, r) {
		var _entry, _r, _tmp, _tmp$1, g, out, p, r, rest, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; g = $f.g; out = $f.out; p = $f.p; r = $f.r; rest = $f.rest; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = sliceType.nil;
		rest = "";
		p = this;
		if ((((p.flags & 64) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92))) {
			$s = -1; return [out, rest];
		}
		g = $clone((_entry = perlGroup[$String.keyFor($substring(s, 0, 2))], _entry !== undefined ? _entry.v : new charGroup.ptr(0, sliceType.nil)), charGroup);
		if (g.sign === 0) {
			$s = -1; return [out, rest];
		}
		_r = p.appendGroup(r, $clone(g, charGroup)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp = _r;
		_tmp$1 = $substring(s, 2);
		out = _tmp;
		rest = _tmp$1;
		$s = -1; return [out, rest];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parsePerlClassEscape }; } $f._entry = _entry; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.g = g; $f.out = out; $f.p = p; $f.r = r; $f.rest = rest; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parsePerlClassEscape = function(s, r) { return this.$val.parsePerlClassEscape(s, r); };
	parser.ptr.prototype.parseNamedClass = function(s, r) {
		var _entry, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err, g, i, name, out, p, r, rest, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; err = $f.err; g = $f.g; i = $f.i; name = $f.name; out = $f.out; p = $f.p; r = $f.r; rest = $f.rest; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = sliceType.nil;
		rest = "";
		err = $ifaceNil;
		p = this;
		if (s.length < 2 || !((s.charCodeAt(0) === 91)) || !((s.charCodeAt(1) === 58))) {
			$s = -1; return [out, rest, err];
		}
		i = strings.Index($substring(s, 2), ":]");
		if (i < 0) {
			$s = -1; return [out, rest, err];
		}
		i = i + (2) >> 0;
		_tmp = $substring(s, 0, (i + 2 >> 0));
		_tmp$1 = $substring(s, (i + 2 >> 0));
		name = _tmp;
		s = _tmp$1;
		g = $clone((_entry = posixGroup[$String.keyFor(name)], _entry !== undefined ? _entry.v : new charGroup.ptr(0, sliceType.nil)), charGroup);
		if (g.sign === 0) {
			_tmp$2 = sliceType.nil;
			_tmp$3 = "";
			_tmp$4 = new Error.ptr("invalid character class range", name);
			out = _tmp$2;
			rest = _tmp$3;
			err = _tmp$4;
			$s = -1; return [out, rest, err];
		}
		_r = p.appendGroup(r, $clone(g, charGroup)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tmp$5 = _r;
		_tmp$6 = s;
		_tmp$7 = $ifaceNil;
		out = _tmp$5;
		rest = _tmp$6;
		err = _tmp$7;
		$s = -1; return [out, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseNamedClass }; } $f._entry = _entry; $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f.err = err; $f.g = g; $f.i = i; $f.name = name; $f.out = out; $f.p = p; $f.r = r; $f.rest = rest; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseNamedClass = function(s, r) { return this.$val.parseNamedClass(s, r); };
	parser.ptr.prototype.appendGroup = function(r, g) {
		var _r, g, p, r, tmp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; g = $f.g; p = $f.p; r = $f.r; tmp = $f.tmp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this;
		/* */ if (((p.flags & 1) >>> 0) === 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (((p.flags & 1) >>> 0) === 0) { */ case 1:
			if (g.sign < 0) {
				r = appendNegatedClass(r, g.class$1);
			} else {
				r = appendClass(r, g.class$1);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendFoldedClass(tmp, g.class$1);
			p.tmpClass = tmp;
			_r = cleanClass((p.$ptr_tmpClass || (p.$ptr_tmpClass = new ptrType$2(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tmp = _r;
			if (g.sign < 0) {
				r = appendNegatedClass(r, tmp);
			} else {
				r = appendClass(r, tmp);
			}
		/* } */ case 3:
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.appendGroup }; } $f._r = _r; $f.g = g; $f.p = p; $f.r = r; $f.tmp = tmp; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.appendGroup = function(r, g) { return this.$val.appendGroup(r, g); };
	unicodeTable = function(name) {
		var _entry, _entry$1, _entry$2, _entry$3, name, t, t$1;
		if (name === "Any") {
			return [anyTable, anyTable];
		}
		t = (_entry = unicode.Categories[$String.keyFor(name)], _entry !== undefined ? _entry.v : ptrType$3.nil);
		if (!(t === ptrType$3.nil)) {
			return [t, (_entry$1 = unicode.FoldCategory[$String.keyFor(name)], _entry$1 !== undefined ? _entry$1.v : ptrType$3.nil)];
		}
		t$1 = (_entry$2 = unicode.Scripts[$String.keyFor(name)], _entry$2 !== undefined ? _entry$2.v : ptrType$3.nil);
		if (!(t$1 === ptrType$3.nil)) {
			return [t$1, (_entry$3 = unicode.FoldScript[$String.keyFor(name)], _entry$3 !== undefined ? _entry$3.v : ptrType$3.nil)];
		}
		return [ptrType$3.nil, ptrType$3.nil];
	};
	parser.ptr.prototype.parseUnicodeClass = function(s, r) {
		var _r, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, c, end, err, fold, name, out, p, r, rest, s, seq, sign, t, tab, tmp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; c = $f.c; end = $f.end; err = $f.err; fold = $f.fold; name = $f.name; out = $f.out; p = $f.p; r = $f.r; rest = $f.rest; s = $f.s; seq = $f.seq; sign = $f.sign; t = $f.t; tab = $f.tab; tmp = $f.tmp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = sliceType.nil;
		rest = "";
		err = $ifaceNil;
		p = this;
		if ((((p.flags & 128) >>> 0) === 0) || s.length < 2 || !((s.charCodeAt(0) === 92)) || !((s.charCodeAt(1) === 112)) && !((s.charCodeAt(1) === 80))) {
			$s = -1; return [out, rest, err];
		}
		sign = 1;
		if (s.charCodeAt(1) === 80) {
			sign = -1;
		}
		t = $substring(s, 2);
		_tuple = nextRune(t);
		c = _tuple[0];
		t = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [out, rest, err];
		}
		_tmp = "";
		_tmp$1 = "";
		seq = _tmp;
		name = _tmp$1;
		if (!((c === 123))) {
			seq = $substring(s, 0, (s.length - t.length >> 0));
			name = $substring(seq, 2);
		} else {
			end = strings.IndexRune(s, 125);
			if (end < 0) {
				err = checkUTF8(s);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					$s = -1; return [out, rest, err];
				}
				_tmp$2 = sliceType.nil;
				_tmp$3 = "";
				_tmp$4 = new Error.ptr("invalid character class range", s);
				out = _tmp$2;
				rest = _tmp$3;
				err = _tmp$4;
				$s = -1; return [out, rest, err];
			}
			_tmp$5 = $substring(s, 0, (end + 1 >> 0));
			_tmp$6 = $substring(s, (end + 1 >> 0));
			seq = _tmp$5;
			t = _tmp$6;
			name = $substring(s, 3, end);
			err = checkUTF8(name);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [out, rest, err];
			}
		}
		if (!(name === "") && (name.charCodeAt(0) === 94)) {
			sign = -sign;
			name = $substring(name, 1);
		}
		_tuple$1 = unicodeTable(name);
		tab = _tuple$1[0];
		fold = _tuple$1[1];
		if (tab === ptrType$3.nil) {
			_tmp$7 = sliceType.nil;
			_tmp$8 = "";
			_tmp$9 = new Error.ptr("invalid character class range", seq);
			out = _tmp$7;
			rest = _tmp$8;
			err = _tmp$9;
			$s = -1; return [out, rest, err];
		}
		/* */ if ((((p.flags & 1) >>> 0) === 0) || fold === ptrType$3.nil) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ((((p.flags & 1) >>> 0) === 0) || fold === ptrType$3.nil) { */ case 1:
			if (sign > 0) {
				r = appendTable(r, tab);
			} else {
				r = appendNegatedTable(r, tab);
			}
			$s = 3; continue;
		/* } else { */ case 2:
			tmp = $subslice(p.tmpClass, 0, 0);
			tmp = appendTable(tmp, tab);
			tmp = appendTable(tmp, fold);
			p.tmpClass = tmp;
			_r = cleanClass((p.$ptr_tmpClass || (p.$ptr_tmpClass = new ptrType$2(function() { return this.$target.tmpClass; }, function($v) { this.$target.tmpClass = $v; }, p)))); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			tmp = _r;
			if (sign > 0) {
				r = appendClass(r, tmp);
			} else {
				r = appendNegatedClass(r, tmp);
			}
		/* } */ case 3:
		_tmp$10 = r;
		_tmp$11 = t;
		_tmp$12 = $ifaceNil;
		out = _tmp$10;
		rest = _tmp$11;
		err = _tmp$12;
		$s = -1; return [out, rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseUnicodeClass }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.c = c; $f.end = end; $f.err = err; $f.fold = fold; $f.name = name; $f.out = out; $f.p = p; $f.r = r; $f.rest = rest; $f.s = s; $f.seq = seq; $f.sign = sign; $f.t = t; $f.tab = tab; $f.tmp = tmp; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseUnicodeClass = function(s, r) { return this.$val.parseUnicodeClass(s, r); };
	parser.ptr.prototype.parseClass = function(s) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, class$1, err, err$1, err$2, first, hi, lo, nclass, nclass$1, nclass$2, nt, nt$1, nt$2, p, re, rest, rng, s, sign, size, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$10 = $f._tmp$10; _tmp$11 = $f._tmp$11; _tmp$12 = $f._tmp$12; _tmp$13 = $f._tmp$13; _tmp$14 = $f._tmp$14; _tmp$15 = $f._tmp$15; _tmp$16 = $f._tmp$16; _tmp$17 = $f._tmp$17; _tmp$18 = $f._tmp$18; _tmp$19 = $f._tmp$19; _tmp$2 = $f._tmp$2; _tmp$20 = $f._tmp$20; _tmp$21 = $f._tmp$21; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; class$1 = $f.class$1; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; first = $f.first; hi = $f.hi; lo = $f.lo; nclass = $f.nclass; nclass$1 = $f.nclass$1; nclass$2 = $f.nclass$2; nt = $f.nt; nt$1 = $f.nt$1; nt$2 = $f.nt$2; p = $f.p; re = $f.re; rest = $f.rest; rng = $f.rng; s = $f.s; sign = $f.sign; size = $f.size; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rest = "";
		err = $ifaceNil;
		p = this;
		t = $substring(s, 1);
		re = p.newRegexp(4);
		re.Flags = p.flags;
		re.Rune = $subslice(new sliceType(re.Rune0), 0, 0);
		sign = 1;
		if (!(t === "") && (t.charCodeAt(0) === 94)) {
			sign = -1;
			t = $substring(t, 1);
			if (((p.flags & 4) >>> 0) === 0) {
				re.Rune = $append(re.Rune, 10, 10);
			}
		}
		class$1 = re.Rune;
		first = true;
		/* while (true) { */ case 1:
			/* if (!(t === "" || !((t.charCodeAt(0) === 93)) || first)) { break; } */ if(!(t === "" || !((t.charCodeAt(0) === 93)) || first)) { $s = 2; continue; }
			if (!(t === "") && (t.charCodeAt(0) === 45) && (((p.flags & 64) >>> 0) === 0) && !first && ((t.length === 1) || !((t.charCodeAt(1) === 93)))) {
				_tuple = utf8.DecodeRuneInString($substring(t, 1));
				size = _tuple[1];
				_tmp = "";
				_tmp$1 = new Error.ptr("invalid character class range", $substring(t, 0, (1 + size >> 0)));
				rest = _tmp;
				err = _tmp$1;
				$s = -1; return [rest, err];
			}
			first = false;
			/* */ if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (t.length > 2 && (t.charCodeAt(0) === 91) && (t.charCodeAt(1) === 58)) { */ case 3:
				_r = p.parseNamedClass(t, class$1); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_tuple$1 = _r;
				nclass = _tuple$1[0];
				nt = _tuple$1[1];
				err$1 = _tuple$1[2];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp$2 = "";
					_tmp$3 = err$1;
					rest = _tmp$2;
					err = _tmp$3;
					$s = -1; return [rest, err];
				}
				if (!(nclass === sliceType.nil)) {
					_tmp$4 = nclass;
					_tmp$5 = nt;
					class$1 = _tmp$4;
					t = _tmp$5;
					/* continue; */ $s = 1; continue;
				}
			/* } */ case 4:
			_r$1 = p.parseUnicodeClass(t, class$1); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$2 = _r$1;
			nclass$1 = _tuple$2[0];
			nt$1 = _tuple$2[1];
			err$2 = _tuple$2[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$6 = "";
				_tmp$7 = err$2;
				rest = _tmp$6;
				err = _tmp$7;
				$s = -1; return [rest, err];
			}
			/* */ if (!(nclass$1 === sliceType.nil)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if (!(nclass$1 === sliceType.nil)) { */ case 7:
				_tmp$8 = nclass$1;
				_tmp$9 = nt$1;
				class$1 = _tmp$8;
				t = _tmp$9;
				/* continue; */ $s = 1; continue;
			/* } */ case 8:
			_r$2 = p.parsePerlClassEscape(t, class$1); /* */ $s = 9; case 9: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_tuple$3 = _r$2;
			nclass$2 = _tuple$3[0];
			nt$2 = _tuple$3[1];
			if (!(nclass$2 === sliceType.nil)) {
				_tmp$10 = nclass$2;
				_tmp$11 = nt$2;
				class$1 = _tmp$10;
				t = _tmp$11;
				/* continue; */ $s = 1; continue;
			}
			rng = t;
			_tmp$12 = 0;
			_tmp$13 = 0;
			lo = _tmp$12;
			hi = _tmp$13;
			_tuple$4 = p.parseClassChar(t, s);
			lo = _tuple$4[0];
			t = _tuple$4[1];
			err$2 = _tuple$4[2];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$14 = "";
				_tmp$15 = err$2;
				rest = _tmp$14;
				err = _tmp$15;
				$s = -1; return [rest, err];
			}
			hi = lo;
			if (t.length >= 2 && (t.charCodeAt(0) === 45) && !((t.charCodeAt(1) === 93))) {
				t = $substring(t, 1);
				_tuple$5 = p.parseClassChar(t, s);
				hi = _tuple$5[0];
				t = _tuple$5[1];
				err$2 = _tuple$5[2];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$16 = "";
					_tmp$17 = err$2;
					rest = _tmp$16;
					err = _tmp$17;
					$s = -1; return [rest, err];
				}
				if (hi < lo) {
					rng = $substring(rng, 0, (rng.length - t.length >> 0));
					_tmp$18 = "";
					_tmp$19 = new Error.ptr("invalid character class range", rng);
					rest = _tmp$18;
					err = _tmp$19;
					$s = -1; return [rest, err];
				}
			}
			if (((p.flags & 1) >>> 0) === 0) {
				class$1 = appendRange(class$1, lo, hi);
			} else {
				class$1 = appendFoldedRange(class$1, lo, hi);
			}
		/* } */ $s = 1; continue; case 2:
		t = $substring(t, 1);
		re.Rune = class$1;
		_r$3 = cleanClass((re.$ptr_Rune || (re.$ptr_Rune = new ptrType$2(function() { return this.$target.Rune; }, function($v) { this.$target.Rune = $v; }, re)))); /* */ $s = 10; case 10: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		class$1 = _r$3;
		if (sign < 0) {
			class$1 = negateClass(class$1);
		}
		re.Rune = class$1;
		p.push(re);
		_tmp$20 = t;
		_tmp$21 = $ifaceNil;
		rest = _tmp$20;
		err = _tmp$21;
		$s = -1; return [rest, err];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parser.ptr.prototype.parseClass }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$10 = _tmp$10; $f._tmp$11 = _tmp$11; $f._tmp$12 = _tmp$12; $f._tmp$13 = _tmp$13; $f._tmp$14 = _tmp$14; $f._tmp$15 = _tmp$15; $f._tmp$16 = _tmp$16; $f._tmp$17 = _tmp$17; $f._tmp$18 = _tmp$18; $f._tmp$19 = _tmp$19; $f._tmp$2 = _tmp$2; $f._tmp$20 = _tmp$20; $f._tmp$21 = _tmp$21; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.class$1 = class$1; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.first = first; $f.hi = hi; $f.lo = lo; $f.nclass = nclass; $f.nclass$1 = nclass$1; $f.nclass$2 = nclass$2; $f.nt = nt; $f.nt$1 = nt$1; $f.nt$2 = nt$2; $f.p = p; $f.re = re; $f.rest = rest; $f.rng = rng; $f.s = s; $f.sign = sign; $f.size = size; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	parser.prototype.parseClass = function(s) { return this.$val.parseClass(s); };
	cleanClass = function(rp) {
		var _tmp, _tmp$1, hi, i, lo, r, rp, w, x, x$1, x$2, x$3, x$4, x$5, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; hi = $f.hi; i = $f.i; lo = $f.lo; r = $f.r; rp = $f.rp; w = $f.w; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = sort.Sort((x = new ranges.ptr(rp), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		r = rp.$get();
		if (r.$length < 2) {
			$s = -1; return r;
		}
		w = 2;
		i = 2;
		while (true) {
			if (!(i < r.$length)) { break; }
			_tmp = ((i < 0 || i >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + i]);
			_tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$1]));
			lo = _tmp;
			hi = _tmp$1;
			if (lo <= ((x$2 = w - 1 >> 0, ((x$2 < 0 || x$2 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$2])) + 1 >> 0)) {
				if (hi > (x$3 = w - 1 >> 0, ((x$3 < 0 || x$3 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$3]))) {
					(x$4 = w - 1 >> 0, ((x$4 < 0 || x$4 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$4] = hi));
				}
				i = i + (2) >> 0;
				continue;
			}
			((w < 0 || w >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + w] = lo);
			(x$5 = w + 1 >> 0, ((x$5 < 0 || x$5 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$5] = hi));
			w = w + (2) >> 0;
			i = i + (2) >> 0;
		}
		$s = -1; return $subslice(r, 0, w);
		/* */ } return; } if ($f === undefined) { $f = { $blk: cleanClass }; } $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.hi = hi; $f.i = i; $f.lo = lo; $f.r = r; $f.rp = rp; $f.w = w; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.$s = $s; $f.$r = $r; return $f;
	};
	appendLiteral = function(r, x, flags) {
		var flags, r, x;
		if (!((((flags & 1) >>> 0) === 0))) {
			return appendFoldedRange(r, x, x);
		}
		return appendRange(r, x, x);
	};
	appendRange = function(r, lo, hi) {
		var _tmp, _tmp$1, hi, i, lo, n, r, rhi, rlo, x, x$1, x$2, x$3;
		n = r.$length;
		i = 2;
		while (true) {
			if (!(i <= 4)) { break; }
			if (n >= i) {
				_tmp = (x = n - i >> 0, ((x < 0 || x >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x]));
				_tmp$1 = (x$1 = (n - i >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$1]));
				rlo = _tmp;
				rhi = _tmp$1;
				if (lo <= (rhi + 1 >> 0) && rlo <= (hi + 1 >> 0)) {
					if (lo < rlo) {
						(x$2 = n - i >> 0, ((x$2 < 0 || x$2 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$2] = lo));
					}
					if (hi > rhi) {
						(x$3 = (n - i >> 0) + 1 >> 0, ((x$3 < 0 || x$3 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$3] = hi));
					}
					return r;
				}
			}
			i = i + (2) >> 0;
		}
		return $append(r, lo, hi);
	};
	appendFoldedRange = function(r, lo, hi) {
		var c, f, hi, lo, r;
		if (lo <= 65 && hi >= 125251) {
			return appendRange(r, lo, hi);
		}
		if (hi < 65 || lo > 125251) {
			return appendRange(r, lo, hi);
		}
		if (lo < 65) {
			r = appendRange(r, lo, 64);
			lo = 65;
		}
		if (hi > 125251) {
			r = appendRange(r, 125252, hi);
			hi = 125251;
		}
		c = lo;
		while (true) {
			if (!(c <= hi)) { break; }
			r = appendRange(r, c, c);
			f = unicode.SimpleFold(c);
			while (true) {
				if (!(!((f === c)))) { break; }
				r = appendRange(r, f, f);
				f = unicode.SimpleFold(f);
			}
			c = c + (1) >> 0;
		}
		return r;
	};
	appendClass = function(r, x) {
		var i, r, x, x$1;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			r = appendRange(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			i = i + (2) >> 0;
		}
		return r;
	};
	appendFoldedClass = function(r, x) {
		var i, r, x, x$1;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			r = appendFoldedRange(r, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]), (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])));
			i = i + (2) >> 0;
		}
		return r;
	};
	appendNegatedClass = function(r, x) {
		var _tmp, _tmp$1, hi, i, lo, nextLo, r, x, x$1;
		nextLo = 0;
		i = 0;
		while (true) {
			if (!(i < x.$length)) { break; }
			_tmp = ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i]);
			_tmp$1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			lo = _tmp;
			hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				r = appendRange(r, nextLo, lo - 1 >> 0);
			}
			nextLo = hi + 1 >> 0;
			i = i + (2) >> 0;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	appendTable = function(r, x) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, c$1, hi, hi$1, lo, lo$1, r, stride, stride$1, x, xr, xr$1;
		_ref = x.R16;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			xr = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), unicode.Range16);
			_tmp = ((xr.Lo >> 0));
			_tmp$1 = ((xr.Hi >> 0));
			_tmp$2 = ((xr.Stride >> 0));
			lo = _tmp;
			hi = _tmp$1;
			stride = _tmp$2;
			if (stride === 1) {
				r = appendRange(r, lo, hi);
				_i++;
				continue;
			}
			c = lo;
			while (true) {
				if (!(c <= hi)) { break; }
				r = appendRange(r, c, c);
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			xr$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), unicode.Range32);
			_tmp$3 = ((xr$1.Lo >> 0));
			_tmp$4 = ((xr$1.Hi >> 0));
			_tmp$5 = ((xr$1.Stride >> 0));
			lo$1 = _tmp$3;
			hi$1 = _tmp$4;
			stride$1 = _tmp$5;
			if (stride$1 === 1) {
				r = appendRange(r, lo$1, hi$1);
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (true) {
				if (!(c$1 <= hi$1)) { break; }
				r = appendRange(r, c$1, c$1);
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		return r;
	};
	appendNegatedTable = function(r, x) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, c$1, hi, hi$1, lo, lo$1, nextLo, r, stride, stride$1, x, xr, xr$1;
		nextLo = 0;
		_ref = x.R16;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			xr = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), unicode.Range16);
			_tmp = ((xr.Lo >> 0));
			_tmp$1 = ((xr.Hi >> 0));
			_tmp$2 = ((xr.Stride >> 0));
			lo = _tmp;
			hi = _tmp$1;
			stride = _tmp$2;
			if (stride === 1) {
				if (nextLo <= (lo - 1 >> 0)) {
					r = appendRange(r, nextLo, lo - 1 >> 0);
				}
				nextLo = hi + 1 >> 0;
				_i++;
				continue;
			}
			c = lo;
			while (true) {
				if (!(c <= hi)) { break; }
				if (nextLo <= (c - 1 >> 0)) {
					r = appendRange(r, nextLo, c - 1 >> 0);
				}
				nextLo = c + 1 >> 0;
				c = c + (stride) >> 0;
			}
			_i++;
		}
		_ref$1 = x.R32;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			xr$1 = $clone(((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]), unicode.Range32);
			_tmp$3 = ((xr$1.Lo >> 0));
			_tmp$4 = ((xr$1.Hi >> 0));
			_tmp$5 = ((xr$1.Stride >> 0));
			lo$1 = _tmp$3;
			hi$1 = _tmp$4;
			stride$1 = _tmp$5;
			if (stride$1 === 1) {
				if (nextLo <= (lo$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, lo$1 - 1 >> 0);
				}
				nextLo = hi$1 + 1 >> 0;
				_i$1++;
				continue;
			}
			c$1 = lo$1;
			while (true) {
				if (!(c$1 <= hi$1)) { break; }
				if (nextLo <= (c$1 - 1 >> 0)) {
					r = appendRange(r, nextLo, c$1 - 1 >> 0);
				}
				nextLo = c$1 + 1 >> 0;
				c$1 = c$1 + (stride$1) >> 0;
			}
			_i$1++;
		}
		if (nextLo <= 1114111) {
			r = appendRange(r, nextLo, 1114111);
		}
		return r;
	};
	negateClass = function(r) {
		var _tmp, _tmp$1, hi, i, lo, nextLo, r, w, x, x$1;
		nextLo = 0;
		w = 0;
		i = 0;
		while (true) {
			if (!(i < r.$length)) { break; }
			_tmp = ((i < 0 || i >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + i]);
			_tmp$1 = (x = i + 1 >> 0, ((x < 0 || x >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x]));
			lo = _tmp;
			hi = _tmp$1;
			if (nextLo <= (lo - 1 >> 0)) {
				((w < 0 || w >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + w] = nextLo);
				(x$1 = w + 1 >> 0, ((x$1 < 0 || x$1 >= r.$length) ? ($throwRuntimeError("index out of range"), undefined) : r.$array[r.$offset + x$1] = (lo - 1 >> 0)));
				w = w + (2) >> 0;
			}
			nextLo = hi + 1 >> 0;
			i = i + (2) >> 0;
		}
		r = $subslice(r, 0, w);
		if (nextLo <= 1114111) {
			r = $append(r, nextLo, 1114111);
		}
		return r;
	};
	ranges.ptr.prototype.Less = function(i, j) {
		var i, j, p, ra, x, x$1;
		ra = this;
		p = ra.p.$get();
		i = $imul(i, (2));
		j = $imul(j, (2));
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]) || (((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) === ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j])) && (x = i + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x])) > (x$1 = j + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]));
	};
	ranges.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	ranges.ptr.prototype.Len = function() {
		var _q, ra;
		ra = this;
		return (_q = ra.p.$get().$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	ranges.prototype.Len = function() { return this.$val.Len(); };
	ranges.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, p, ra, x, x$1, x$2, x$3;
		ra = this;
		p = ra.p.$get();
		i = $imul(i, (2));
		j = $imul(j, (2));
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = (x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x]));
		_tmp$2 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		_tmp$3 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$1]));
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		(x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$2] = _tmp$1));
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$2);
		(x$3 = j + 1 >> 0, ((x$3 < 0 || x$3 >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + x$3] = _tmp$3));
	};
	ranges.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	checkUTF8 = function(s) {
		var _tuple, rune, s, size;
		while (true) {
			if (!(!(s === ""))) { break; }
			_tuple = utf8.DecodeRuneInString(s);
			rune = _tuple[0];
			size = _tuple[1];
			if ((rune === 65533) && (size === 1)) {
				return new Error.ptr("invalid UTF-8", s);
			}
			s = $substring(s, size);
		}
		return $ifaceNil;
	};
	nextRune = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, c, err, s, size, t;
		c = 0;
		t = "";
		err = $ifaceNil;
		_tuple = utf8.DecodeRuneInString(s);
		c = _tuple[0];
		size = _tuple[1];
		if ((c === 65533) && (size === 1)) {
			_tmp = 0;
			_tmp$1 = "";
			_tmp$2 = new Error.ptr("invalid UTF-8", s);
			c = _tmp;
			t = _tmp$1;
			err = _tmp$2;
			return [c, t, err];
		}
		_tmp$3 = c;
		_tmp$4 = $substring(s, size);
		_tmp$5 = $ifaceNil;
		c = _tmp$3;
		t = _tmp$4;
		err = _tmp$5;
		return [c, t, err];
	};
	isalnum = function(c) {
		var c;
		return 48 <= c && c <= 57 || 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	unhex = function(c) {
		var c;
		if (48 <= c && c <= 57) {
			return c - 48 >> 0;
		}
		if (97 <= c && c <= 102) {
			return (c - 97 >> 0) + 10 >> 0;
		}
		if (65 <= c && c <= 70) {
			return (c - 65 >> 0) + 10 >> 0;
		}
		return -1;
	};
	InstOp.prototype.String = function() {
		var i;
		i = this.$val;
		if (((i >>> 0)) >= ((instOpNames.$length >>> 0))) {
			return "";
		}
		return ((i < 0 || i >= instOpNames.$length) ? ($throwRuntimeError("index out of range"), undefined) : instOpNames.$array[instOpNames.$offset + i]);
	};
	$ptrType(InstOp).prototype.String = function() { return new InstOp(this.$get()).String(); };
	EmptyOpContext = function(r1, r2) {
		var boundary, op, r1, r2;
		op = 32;
		boundary = 0;
		if (IsWordChar(r1)) {
			boundary = 1;
		} else if ((r1 === 10)) {
			op = (op | (1)) >>> 0;
		} else if (r1 < 0) {
			op = (op | (5)) >>> 0;
		}
		if (IsWordChar(r2)) {
			boundary = (boundary ^ (1)) << 24 >>> 24;
		} else if ((r2 === 10)) {
			op = (op | (2)) >>> 0;
		} else if (r2 < 0) {
			op = (op | (10)) >>> 0;
		}
		if (!((boundary === 0))) {
			op = (op ^ (48)) << 24 >>> 24;
		}
		return op;
	};
	$pkg.EmptyOpContext = EmptyOpContext;
	IsWordChar = function(r) {
		var r;
		return 65 <= r && r <= 90 || 97 <= r && r <= 122 || 48 <= r && r <= 57 || (r === 95);
	};
	$pkg.IsWordChar = IsWordChar;
	Prog.ptr.prototype.String = function() {
		var b, p;
		p = this;
		b = new bytes.Buffer.ptr(sliceType$6.nil, 0, 0, arrayType$2.zero());
		dumpProg(b, p);
		return b.String();
	};
	Prog.prototype.String = function() { return this.$val.String(); };
	Prog.ptr.prototype.skipNop = function(pc) {
		var i, p, pc, x, x$1;
		p = this;
		i = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
		while (true) {
			if (!((i.Op === 6) || (i.Op === 2))) { break; }
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc]));
		}
		return [i, pc];
	};
	Prog.prototype.skipNop = function(pc) { return this.$val.skipNop(pc); };
	Inst.ptr.prototype.op = function() {
		var _1, i, op;
		i = this;
		op = i.Op;
		_1 = op;
		if ((_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			op = 7;
		}
		return op;
	};
	Inst.prototype.op = function() { return this.$val.op(); };
	Prog.ptr.prototype.Prefix = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, buf, complete, i, p, prefix, x;
		prefix = "";
		complete = false;
		p = this;
		_tuple = p.skipNop(((p.Start >>> 0)));
		i = _tuple[0];
		if (!((i.op() === 7)) || !((i.Rune.$length === 1))) {
			_tmp = "";
			_tmp$1 = i.Op === 4;
			prefix = _tmp;
			complete = _tmp$1;
			return [prefix, complete];
		}
		buf = new bytes.Buffer.ptr(sliceType$6.nil, 0, 0, arrayType$2.zero());
		while (true) {
			if (!((i.op() === 7) && (i.Rune.$length === 1) && (((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { break; }
			buf.WriteRune((x = i.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])));
			_tuple$1 = p.skipNop(i.Out);
			i = _tuple$1[0];
		}
		_tmp$2 = buf.String();
		_tmp$3 = i.Op === 4;
		prefix = _tmp$2;
		complete = _tmp$3;
		return [prefix, complete];
	};
	Prog.prototype.Prefix = function() { return this.$val.Prefix(); };
	Prog.ptr.prototype.StartCond = function() {
		var _1, flag, i, p, pc, x, x$1;
		p = this;
		flag = 0;
		pc = ((p.Start >>> 0));
		i = (x = p.Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
		Loop:
		while (true) {
			_1 = i.Op;
			if (_1 === (3)) {
				flag = (flag | (((i.Arg << 24 >>> 24)))) >>> 0;
			} else if (_1 === (5)) {
				return 255;
			} else if ((_1 === (2)) || (_1 === (6))) {
			} else {
				break Loop;
			}
			pc = i.Out;
			i = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc]));
		}
		return flag;
	};
	Prog.prototype.StartCond = function() { return this.$val.StartCond(); };
	Inst.ptr.prototype.MatchRune = function(r) {
		var i, r;
		i = this;
		return !((i.MatchRunePos(r) === -1));
	};
	Inst.prototype.MatchRune = function(r) { return this.$val.MatchRune(r); };
	Inst.ptr.prototype.MatchRunePos = function(r) {
		var _q, _q$1, _q$2, c, hi, i, j, lo, m, r, r0, r1, rune, x, x$1, x$2;
		i = this;
		rune = i.Rune;
		if (rune.$length === 1) {
			r0 = (0 >= rune.$length ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + 0]);
			if (r === r0) {
				return 0;
			}
			if (!((((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
				r1 = unicode.SimpleFold(r0);
				while (true) {
					if (!(!((r1 === r0)))) { break; }
					if (r === r1) {
						return 0;
					}
					r1 = unicode.SimpleFold(r1);
				}
			}
			return -1;
		}
		j = 0;
		while (true) {
			if (!(j < rune.$length && j <= 8)) { break; }
			if (r < ((j < 0 || j >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + j])) {
				return -1;
			}
			if (r <= (x = j + 1 >> 0, ((x < 0 || x >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + x]))) {
				return (_q = j / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			}
			j = j + (2) >> 0;
		}
		lo = 0;
		hi = (_q$1 = rune.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			if (!(lo < hi)) { break; }
			m = lo + (_q$2 = ((hi - lo >> 0)) / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			c = (x$1 = $imul(2, m), ((x$1 < 0 || x$1 >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + x$1]));
			if (c <= r) {
				if (r <= (x$2 = ($imul(2, m)) + 1 >> 0, ((x$2 < 0 || x$2 >= rune.$length) ? ($throwRuntimeError("index out of range"), undefined) : rune.$array[rune.$offset + x$2]))) {
					return m;
				}
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		return -1;
	};
	Inst.prototype.MatchRunePos = function(r) { return this.$val.MatchRunePos(r); };
	wordRune = function(r) {
		var r;
		return (r === 95) || (65 <= r && r <= 90) || (97 <= r && r <= 122) || (48 <= r && r <= 57);
	};
	Inst.ptr.prototype.MatchEmptyWidth = function(before, after) {
		var _1, after, before, i;
		i = this;
		_1 = ((i.Arg << 24 >>> 24));
		if (_1 === (1)) {
			return (before === 10) || (before === -1);
		} else if (_1 === (2)) {
			return (after === 10) || (after === -1);
		} else if (_1 === (4)) {
			return before === -1;
		} else if (_1 === (8)) {
			return after === -1;
		} else if (_1 === (16)) {
			return !(wordRune(before) === wordRune(after));
		} else if (_1 === (32)) {
			return wordRune(before) === wordRune(after);
		}
		$panic(new $String("unknown empty width arg"));
	};
	Inst.prototype.MatchEmptyWidth = function(before, after) { return this.$val.MatchEmptyWidth(before, after); };
	Inst.ptr.prototype.String = function() {
		var b, i;
		i = this;
		b = new bytes.Buffer.ptr(sliceType$6.nil, 0, 0, arrayType$2.zero());
		dumpInst(b, i);
		return b.String();
	};
	Inst.prototype.String = function() { return this.$val.String(); };
	bw = function(b, args) {
		var _i, _ref, args, b, s;
		_ref = args;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			s = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			b.WriteString(s);
			_i++;
		}
	};
	dumpProg = function(b, p) {
		var _i, _ref, b, i, j, p, pc, x;
		_ref = p.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			j = _i;
			i = (x = p.Inst, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			pc = strconv.Itoa(j);
			if (pc.length < 3) {
				b.WriteString($substring("   ", pc.length));
			}
			if (j === p.Start) {
				pc = pc + ("*");
			}
			bw(b, new sliceType$3([pc, "\t"]));
			dumpInst(b, i);
			bw(b, new sliceType$3(["\n"]));
			_i++;
		}
	};
	u32 = function(i) {
		var i;
		return strconv.FormatUint((new $Uint64(0, i)), 10);
	};
	dumpInst = function(b, i) {
		var _1, b, i;
		_1 = i.Op;
		if (_1 === (0)) {
			bw(b, new sliceType$3(["alt -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_1 === (1)) {
			bw(b, new sliceType$3(["altmatch -> ", u32(i.Out), ", ", u32(i.Arg)]));
		} else if (_1 === (2)) {
			bw(b, new sliceType$3(["cap ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_1 === (3)) {
			bw(b, new sliceType$3(["empty ", u32(i.Arg), " -> ", u32(i.Out)]));
		} else if (_1 === (4)) {
			bw(b, new sliceType$3(["match"]));
		} else if (_1 === (5)) {
			bw(b, new sliceType$3(["fail"]));
		} else if (_1 === (6)) {
			bw(b, new sliceType$3(["nop -> ", u32(i.Out)]));
		} else if (_1 === (7)) {
			if (i.Rune === sliceType.nil) {
				bw(b, new sliceType$3(["rune <nil>"]));
			}
			bw(b, new sliceType$3(["rune ", strconv.QuoteToASCII(($runesToString(i.Rune)))]));
			if (!((((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) {
				bw(b, new sliceType$3(["/i"]));
			}
			bw(b, new sliceType$3([" -> ", u32(i.Out)]));
		} else if (_1 === (8)) {
			bw(b, new sliceType$3(["rune1 ", strconv.QuoteToASCII(($runesToString(i.Rune))), " -> ", u32(i.Out)]));
		} else if (_1 === (9)) {
			bw(b, new sliceType$3(["any -> ", u32(i.Out)]));
		} else if (_1 === (10)) {
			bw(b, new sliceType$3(["anynotnl -> ", u32(i.Out)]));
		}
	};
	Regexp.ptr.prototype.Equal = function(y) {
		var _1, _i, _i$1, _ref, _ref$1, i, i$1, r, sub, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y;
		x = this;
		if (x === ptrType$1.nil || y === ptrType$1.nil) {
			return x === y;
		}
		if (!((x.Op === y.Op))) {
			return false;
		}
		_1 = x.Op;
		if (_1 === (10)) {
			if (!((((x.Flags & 256) >>> 0) === ((y.Flags & 256) >>> 0)))) {
				return false;
			}
		} else if ((_1 === (3)) || (_1 === (4))) {
			if (!((x.Rune.$length === y.Rune.$length))) {
				return false;
			}
			_ref = x.Rune;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				if (!((r === (x$1 = y.Rune, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i]))))) {
					return false;
				}
				_i++;
			}
		} else if ((_1 === (19)) || (_1 === (18))) {
			if (!((x.Sub.$length === y.Sub.$length))) {
				return false;
			}
			_ref$1 = x.Sub;
			_i$1 = 0;
			while (true) {
				if (!(_i$1 < _ref$1.$length)) { break; }
				i$1 = _i$1;
				sub = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!sub.Equal((x$2 = y.Sub, ((i$1 < 0 || i$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
		} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16))) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !(x$3 = x.Sub, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])).Equal((x$4 = y.Sub, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])))) {
				return false;
			}
		} else if (_1 === (17)) {
			if (!((((x.Flags & 32) >>> 0) === ((y.Flags & 32) >>> 0))) || !((x.Min === y.Min)) || !((x.Max === y.Max)) || !(x$5 = x.Sub, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0])).Equal((x$6 = y.Sub, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0])))) {
				return false;
			}
		} else if (_1 === (13)) {
			if (!((x.Cap === y.Cap)) || !(x.Name === y.Name) || !(x$7 = x.Sub, (0 >= x$7.$length ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + 0])).Equal((x$8 = y.Sub, (0 >= x$8.$length ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + 0])))) {
				return false;
			}
		}
		return true;
	};
	Regexp.prototype.Equal = function(y) { return this.$val.Equal(y); };
	writeRegexp = function(b, re) {
		var _1, _2, _i, _i$1, _i$2, _r, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$2, _tmp$3, b, hi, hi$1, i, i$1, i$2, lo, lo$1, r, re, sub, sub$1, sub$2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		switch (0) { default:
			_1 = re.Op;
			if (_1 === (1)) {
				b.WriteString("[^\\x00-\\x{10FFFF}]");
			} else if (_1 === (2)) {
				b.WriteString("(?:)");
			} else if (_1 === (3)) {
				if (!((((re.Flags & 1) >>> 0) === 0))) {
					b.WriteString("(?i:");
				}
				_ref = re.Rune;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					escape(b, r, false);
					_i++;
				}
				if (!((((re.Flags & 1) >>> 0) === 0))) {
					b.WriteString(")");
				}
			} else if (_1 === (4)) {
				if (!(((_r = re.Rune.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
					b.WriteString("[invalid char class]");
					break;
				}
				b.WriteRune(91);
				if (re.Rune.$length === 0) {
					b.WriteString("^\\x00-\\x{10FFFF}");
				} else if (((x = re.Rune, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])) === 0) && ((x$1 = re.Rune, x$2 = re.Rune.$length - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === 1114111)) {
					b.WriteRune(94);
					i = 1;
					while (true) {
						if (!(i < (re.Rune.$length - 1 >> 0))) { break; }
						_tmp = (x$3 = re.Rune, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i])) + 1 >> 0;
						_tmp$1 = (x$4 = re.Rune, x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])) - 1 >> 0;
						lo = _tmp;
						hi = _tmp$1;
						escape(b, lo, lo === 45);
						if (!((lo === hi))) {
							b.WriteRune(45);
							escape(b, hi, hi === 45);
						}
						i = i + (2) >> 0;
					}
				} else {
					i$1 = 0;
					while (true) {
						if (!(i$1 < re.Rune.$length)) { break; }
						_tmp$2 = (x$6 = re.Rune, ((i$1 < 0 || i$1 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i$1]));
						_tmp$3 = (x$7 = re.Rune, x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8]));
						lo$1 = _tmp$2;
						hi$1 = _tmp$3;
						escape(b, lo$1, lo$1 === 45);
						if (!((lo$1 === hi$1))) {
							b.WriteRune(45);
							escape(b, hi$1, hi$1 === 45);
						}
						i$1 = i$1 + (2) >> 0;
					}
				}
				b.WriteRune(93);
			} else if (_1 === (5)) {
				b.WriteString("(?-s:.)");
			} else if (_1 === (6)) {
				b.WriteString("(?s:.)");
			} else if (_1 === (7)) {
				b.WriteString("(?m:^)");
			} else if (_1 === (8)) {
				b.WriteString("(?m:$)");
			} else if (_1 === (9)) {
				b.WriteString("\\A");
			} else if (_1 === (10)) {
				if (!((((re.Flags & 256) >>> 0) === 0))) {
					b.WriteString("(?-m:$)");
				} else {
					b.WriteString("\\z");
				}
			} else if (_1 === (11)) {
				b.WriteString("\\b");
			} else if (_1 === (12)) {
				b.WriteString("\\B");
			} else if (_1 === (13)) {
				if (!(re.Name === "")) {
					b.WriteString("(?P<");
					b.WriteString(re.Name);
					b.WriteRune(62);
				} else {
					b.WriteRune(40);
				}
				if (!(((x$9 = re.Sub, (0 >= x$9.$length ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + 0])).Op === 2))) {
					writeRegexp(b, (x$10 = re.Sub, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0])));
				}
				b.WriteRune(41);
			} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16)) || (_1 === (17))) {
				sub = (x$11 = re.Sub, (0 >= x$11.$length ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + 0]));
				if (sub.Op > 13 || (sub.Op === 3) && sub.Rune.$length > 1) {
					b.WriteString("(?:");
					writeRegexp(b, sub);
					b.WriteString(")");
				} else {
					writeRegexp(b, sub);
				}
				_2 = re.Op;
				if (_2 === (14)) {
					b.WriteRune(42);
				} else if (_2 === (15)) {
					b.WriteRune(43);
				} else if (_2 === (16)) {
					b.WriteRune(63);
				} else if (_2 === (17)) {
					b.WriteRune(123);
					b.WriteString(strconv.Itoa(re.Min));
					if (!((re.Max === re.Min))) {
						b.WriteRune(44);
						if (re.Max >= 0) {
							b.WriteString(strconv.Itoa(re.Max));
						}
					}
					b.WriteRune(125);
				}
				if (!((((re.Flags & 32) >>> 0) === 0))) {
					b.WriteRune(63);
				}
			} else if (_1 === (18)) {
				_ref$1 = re.Sub;
				_i$1 = 0;
				while (true) {
					if (!(_i$1 < _ref$1.$length)) { break; }
					sub$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (sub$1.Op === 19) {
						b.WriteString("(?:");
						writeRegexp(b, sub$1);
						b.WriteString(")");
					} else {
						writeRegexp(b, sub$1);
					}
					_i$1++;
				}
			} else if (_1 === (19)) {
				_ref$2 = re.Sub;
				_i$2 = 0;
				while (true) {
					if (!(_i$2 < _ref$2.$length)) { break; }
					i$2 = _i$2;
					sub$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$2.$array[_ref$2.$offset + _i$2]);
					if (i$2 > 0) {
						b.WriteRune(124);
					}
					writeRegexp(b, sub$2);
					_i$2++;
				}
			} else {
				b.WriteString("<invalid op" + strconv.Itoa(((re.Op >> 0))) + ">");
			}
		}
	};
	Regexp.ptr.prototype.String = function() {
		var b, re;
		re = this;
		b = new bytes.Buffer.ptr(sliceType$6.nil, 0, 0, arrayType$2.zero());
		writeRegexp(b, re);
		return b.String();
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	escape = function(b, r, force) {
		var _1, b, force, r, s;
		if (unicode.IsPrint(r)) {
			if (strings.ContainsRune("\\.+*?()|[]{}^$", r) || force) {
				b.WriteRune(92);
			}
			b.WriteRune(r);
			return;
		}
		switch (0) { default:
			_1 = r;
			if (_1 === (7)) {
				b.WriteString("\\a");
			} else if (_1 === (12)) {
				b.WriteString("\\f");
			} else if (_1 === (10)) {
				b.WriteString("\\n");
			} else if (_1 === (13)) {
				b.WriteString("\\r");
			} else if (_1 === (9)) {
				b.WriteString("\\t");
			} else if (_1 === (11)) {
				b.WriteString("\\v");
			} else {
				if (r < 256) {
					b.WriteString("\\x");
					s = strconv.FormatInt((new $Int64(0, r)), 16);
					if (s.length === 1) {
						b.WriteRune(48);
					}
					b.WriteString(s);
					break;
				}
				b.WriteString("\\x{");
				b.WriteString(strconv.FormatInt((new $Int64(0, r)), 16));
				b.WriteString("}");
			}
		}
	};
	Regexp.ptr.prototype.MaxCap = function() {
		var _i, _ref, m, n, re, sub;
		re = this;
		m = 0;
		if (re.Op === 13) {
			m = re.Cap;
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			n = sub.MaxCap();
			if (m < n) {
				m = n;
			}
			_i++;
		}
		return m;
	};
	Regexp.prototype.MaxCap = function() { return this.$val.MaxCap(); };
	Regexp.ptr.prototype.CapNames = function() {
		var names, re;
		re = this;
		names = $makeSlice(sliceType$3, (re.MaxCap() + 1 >> 0));
		re.capNames(names);
		return names;
	};
	Regexp.prototype.CapNames = function() { return this.$val.CapNames(); };
	Regexp.ptr.prototype.capNames = function(names) {
		var _i, _ref, names, re, sub, x;
		re = this;
		if (re.Op === 13) {
			(x = re.Cap, ((x < 0 || x >= names.$length) ? ($throwRuntimeError("index out of range"), undefined) : names.$array[names.$offset + x] = re.Name));
		}
		_ref = re.Sub;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			sub.capNames(names);
			_i++;
		}
	};
	Regexp.prototype.capNames = function(names) { return this.$val.capNames(names); };
	Regexp.ptr.prototype.Simplify = function() {
		var _1, _i, _ref, i, i$1, i$2, i$3, nre, nre$1, nre2, nsub, prefix, re, sub, sub$1, sub$2, suffix, x, x$1;
		re = this;
		if (re === ptrType$1.nil) {
			return ptrType$1.nil;
		}
		_1 = re.Op;
		if ((_1 === (13)) || (_1 === (18)) || (_1 === (19))) {
			nre = re;
			_ref = re.Sub;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				sub = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
				nsub = sub.Simplify();
				if (nre === re && !(nsub === sub)) {
					nre = new Regexp.ptr(0, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
					Regexp.copy(nre, re);
					nre.Rune = sliceType.nil;
					nre.Sub = $appendSlice($subslice(new sliceType$5(nre.Sub0), 0, 0), $subslice(re.Sub, 0, i));
				}
				if (!(nre === re)) {
					nre.Sub = $append(nre.Sub, nsub);
				}
				_i++;
			}
			return nre;
		} else if ((_1 === (14)) || (_1 === (15)) || (_1 === (16))) {
			sub$1 = (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0])).Simplify();
			return simplify1(re.Op, re.Flags, sub$1, re);
		} else if (_1 === (17)) {
			if ((re.Min === 0) && (re.Max === 0)) {
				return new Regexp.ptr(2, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
			}
			sub$2 = (x$1 = re.Sub, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).Simplify();
			if (re.Max === -1) {
				if (re.Min === 0) {
					return simplify1(14, re.Flags, sub$2, ptrType$1.nil);
				}
				if (re.Min === 1) {
					return simplify1(15, re.Flags, sub$2, ptrType$1.nil);
				}
				nre$1 = new Regexp.ptr(18, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
				nre$1.Sub = $subslice(new sliceType$5(nre$1.Sub0), 0, 0);
				i$1 = 0;
				while (true) {
					if (!(i$1 < (re.Min - 1 >> 0))) { break; }
					nre$1.Sub = $append(nre$1.Sub, sub$2);
					i$1 = i$1 + (1) >> 0;
				}
				nre$1.Sub = $append(nre$1.Sub, simplify1(15, re.Flags, sub$2, ptrType$1.nil));
				return nre$1;
			}
			if ((re.Min === 1) && (re.Max === 1)) {
				return sub$2;
			}
			prefix = ptrType$1.nil;
			if (re.Min > 0) {
				prefix = new Regexp.ptr(18, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
				prefix.Sub = $subslice(new sliceType$5(prefix.Sub0), 0, 0);
				i$2 = 0;
				while (true) {
					if (!(i$2 < re.Min)) { break; }
					prefix.Sub = $append(prefix.Sub, sub$2);
					i$2 = i$2 + (1) >> 0;
				}
			}
			if (re.Max > re.Min) {
				suffix = simplify1(16, re.Flags, sub$2, ptrType$1.nil);
				i$3 = re.Min + 1 >> 0;
				while (true) {
					if (!(i$3 < re.Max)) { break; }
					nre2 = new Regexp.ptr(18, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
					nre2.Sub = $append($subslice(new sliceType$5(nre2.Sub0), 0, 0), sub$2, suffix);
					suffix = simplify1(16, re.Flags, nre2, ptrType$1.nil);
					i$3 = i$3 + (1) >> 0;
				}
				if (prefix === ptrType$1.nil) {
					return suffix;
				}
				prefix.Sub = $append(prefix.Sub, suffix);
			}
			if (!(prefix === ptrType$1.nil)) {
				return prefix;
			}
			return new Regexp.ptr(1, 0, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		}
		return re;
	};
	Regexp.prototype.Simplify = function() { return this.$val.Simplify(); };
	simplify1 = function(op, flags, sub, re) {
		var flags, op, re, sub, x;
		if (sub.Op === 2) {
			return sub;
		}
		if ((op === sub.Op) && (((flags & 32) >>> 0) === ((sub.Flags & 32) >>> 0))) {
			return sub;
		}
		if (!(re === ptrType$1.nil) && (re.Op === op) && (((re.Flags & 32) >>> 0) === ((flags & 32) >>> 0)) && sub === (x = re.Sub, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]))) {
			return re;
		}
		re = new Regexp.ptr(op, flags, sliceType$5.nil, arrayType.zero(), sliceType.nil, arrayType$1.zero(), 0, 0, 0, "");
		re.Sub = $append($subslice(new sliceType$5(re.Sub0), 0, 0), sub);
		return re;
	};
	patchList.methods = [{prop: "next", name: "next", pkg: "regexp/syntax", typ: $funcType([ptrType], [patchList], false)}, {prop: "patch", name: "patch", pkg: "regexp/syntax", typ: $funcType([ptrType, $Uint32], [], false)}, {prop: "append", name: "append", pkg: "regexp/syntax", typ: $funcType([ptrType, patchList], [patchList], false)}];
	ptrType$4.methods = [{prop: "init", name: "init", pkg: "regexp/syntax", typ: $funcType([], [], false)}, {prop: "compile", name: "compile", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [frag], false)}, {prop: "inst", name: "inst", pkg: "regexp/syntax", typ: $funcType([InstOp], [frag], false)}, {prop: "nop", name: "nop", pkg: "regexp/syntax", typ: $funcType([], [frag], false)}, {prop: "fail", name: "fail", pkg: "regexp/syntax", typ: $funcType([], [frag], false)}, {prop: "cap", name: "cap", pkg: "regexp/syntax", typ: $funcType([$Uint32], [frag], false)}, {prop: "cat", name: "cat", pkg: "regexp/syntax", typ: $funcType([frag, frag], [frag], false)}, {prop: "alt", name: "alt", pkg: "regexp/syntax", typ: $funcType([frag, frag], [frag], false)}, {prop: "quest", name: "quest", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "star", name: "star", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "plus", name: "plus", pkg: "regexp/syntax", typ: $funcType([frag, $Bool], [frag], false)}, {prop: "empty", name: "empty", pkg: "regexp/syntax", typ: $funcType([EmptyOp], [frag], false)}, {prop: "rune", name: "rune", pkg: "regexp/syntax", typ: $funcType([sliceType, Flags], [frag], false)}];
	ptrType$5.methods = [{prop: "Error", name: "Error", pkg: "", typ: $funcType([], [$String], false)}];
	ErrorCode.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "newRegexp", name: "newRegexp", pkg: "regexp/syntax", typ: $funcType([Op], [ptrType$1], false)}, {prop: "reuse", name: "reuse", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [], false)}, {prop: "push", name: "push", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "maybeConcat", name: "maybeConcat", pkg: "regexp/syntax", typ: $funcType([$Int32, Flags], [$Bool], false)}, {prop: "newLiteral", name: "newLiteral", pkg: "regexp/syntax", typ: $funcType([$Int32, Flags], [ptrType$1], false)}, {prop: "literal", name: "literal", pkg: "regexp/syntax", typ: $funcType([$Int32], [], false)}, {prop: "op", name: "op", pkg: "regexp/syntax", typ: $funcType([Op], [ptrType$1], false)}, {prop: "repeat", name: "repeat", pkg: "regexp/syntax", typ: $funcType([Op, $Int, $Int, $String, $String, $String], [$String, $error], false)}, {prop: "concat", name: "concat", pkg: "regexp/syntax", typ: $funcType([], [ptrType$1], false)}, {prop: "alternate", name: "alternate", pkg: "regexp/syntax", typ: $funcType([], [ptrType$1], false)}, {prop: "collapse", name: "collapse", pkg: "regexp/syntax", typ: $funcType([sliceType$5, Op], [ptrType$1], false)}, {prop: "factor", name: "factor", pkg: "regexp/syntax", typ: $funcType([sliceType$5], [sliceType$5], false)}, {prop: "leadingString", name: "leadingString", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [sliceType, Flags], false)}, {prop: "removeLeadingString", name: "removeLeadingString", pkg: "regexp/syntax", typ: $funcType([ptrType$1, $Int], [ptrType$1], false)}, {prop: "leadingRegexp", name: "leadingRegexp", pkg: "regexp/syntax", typ: $funcType([ptrType$1], [ptrType$1], false)}, {prop: "removeLeadingRegexp", name: "removeLeadingRegexp", pkg: "regexp/syntax", typ: $funcType([ptrType$1, $Bool], [ptrType$1], false)}, {prop: "parseRepeat", name: "parseRepeat", pkg: "regexp/syntax", typ: $funcType([$String], [$Int, $Int, $String, $Bool], false)}, {prop: "parsePerlFlags", name: "parsePerlFlags", pkg: "regexp/syntax", typ: $funcType([$String], [$String, $error], false)}, {prop: "parseInt", name: "parseInt", pkg: "regexp/syntax", typ: $funcType([$String], [$Int, $String, $Bool], false)}, {prop: "parseVerticalBar", name: "parseVerticalBar", pkg: "regexp/syntax", typ: $funcType([], [$error], false)}, {prop: "swapVerticalBar", name: "swapVerticalBar", pkg: "regexp/syntax", typ: $funcType([], [$Bool], false)}, {prop: "parseRightParen", name: "parseRightParen", pkg: "regexp/syntax", typ: $funcType([], [$error], false)}, {prop: "parseEscape", name: "parseEscape", pkg: "regexp/syntax", typ: $funcType([$String], [$Int32, $String, $error], false)}, {prop: "parseClassChar", name: "parseClassChar", pkg: "regexp/syntax", typ: $funcType([$String, $String], [$Int32, $String, $error], false)}, {prop: "parsePerlClassEscape", name: "parsePerlClassEscape", pkg: "regexp/syntax", typ: $funcType([$String, sliceType], [sliceType, $String], false)}, {prop: "parseNamedClass", name: "parseNamedClass", pkg: "regexp/syntax", typ: $funcType([$String, sliceType], [sliceType, $String, $error], false)}, {prop: "appendGroup", name: "appendGroup", pkg: "regexp/syntax", typ: $funcType([sliceType, charGroup], [sliceType], false)}, {prop: "parseUnicodeClass", name: "parseUnicodeClass", pkg: "regexp/syntax", typ: $funcType([$String, sliceType], [sliceType, $String, $error], false)}, {prop: "parseClass", name: "parseClass", pkg: "regexp/syntax", typ: $funcType([$String], [$String, $error], false)}];
	ranges.methods = [{prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "skipNop", name: "skipNop", pkg: "regexp/syntax", typ: $funcType([$Uint32], [ptrType$7, $Uint32], false)}, {prop: "Prefix", name: "Prefix", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "StartCond", name: "StartCond", pkg: "", typ: $funcType([], [EmptyOp], false)}];
	InstOp.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "op", name: "op", pkg: "regexp/syntax", typ: $funcType([], [InstOp], false)}, {prop: "MatchRune", name: "MatchRune", pkg: "", typ: $funcType([$Int32], [$Bool], false)}, {prop: "MatchRunePos", name: "MatchRunePos", pkg: "", typ: $funcType([$Int32], [$Int], false)}, {prop: "MatchEmptyWidth", name: "MatchEmptyWidth", pkg: "", typ: $funcType([$Int32, $Int32], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Equal", name: "Equal", pkg: "", typ: $funcType([ptrType$1], [$Bool], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "MaxCap", name: "MaxCap", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "CapNames", name: "CapNames", pkg: "", typ: $funcType([], [sliceType$3], false)}, {prop: "capNames", name: "capNames", pkg: "regexp/syntax", typ: $funcType([sliceType$3], [], false)}, {prop: "Simplify", name: "Simplify", pkg: "", typ: $funcType([], [ptrType$1], false)}];
	frag.init("regexp/syntax", [{prop: "i", name: "i", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "out", name: "out", anonymous: false, exported: false, typ: patchList, tag: ""}]);
	compiler.init("regexp/syntax", [{prop: "p", name: "p", anonymous: false, exported: false, typ: ptrType, tag: ""}]);
	Error.init("", [{prop: "Code", name: "Code", anonymous: false, exported: true, typ: ErrorCode, tag: ""}, {prop: "Expr", name: "Expr", anonymous: false, exported: true, typ: $String, tag: ""}]);
	parser.init("regexp/syntax", [{prop: "flags", name: "flags", anonymous: false, exported: false, typ: Flags, tag: ""}, {prop: "stack", name: "stack", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "free", name: "free", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "numCap", name: "numCap", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "wholeRegexp", name: "wholeRegexp", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "tmpClass", name: "tmpClass", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	charGroup.init("regexp/syntax", [{prop: "sign", name: "sign", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "class$1", name: "class", anonymous: false, exported: false, typ: sliceType, tag: ""}]);
	ranges.init("regexp/syntax", [{prop: "p", name: "p", anonymous: false, exported: false, typ: ptrType$2, tag: ""}]);
	Prog.init("", [{prop: "Inst", name: "Inst", anonymous: false, exported: true, typ: sliceType$4, tag: ""}, {prop: "Start", name: "Start", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "NumCap", name: "NumCap", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	Inst.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: InstOp, tag: ""}, {prop: "Out", name: "Out", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Arg", name: "Arg", anonymous: false, exported: true, typ: $Uint32, tag: ""}, {prop: "Rune", name: "Rune", anonymous: false, exported: true, typ: sliceType, tag: ""}]);
	Regexp.init("", [{prop: "Op", name: "Op", anonymous: false, exported: true, typ: Op, tag: ""}, {prop: "Flags", name: "Flags", anonymous: false, exported: true, typ: Flags, tag: ""}, {prop: "Sub", name: "Sub", anonymous: false, exported: true, typ: sliceType$5, tag: ""}, {prop: "Sub0", name: "Sub0", anonymous: false, exported: true, typ: arrayType, tag: ""}, {prop: "Rune", name: "Rune", anonymous: false, exported: true, typ: sliceType, tag: ""}, {prop: "Rune0", name: "Rune0", anonymous: false, exported: true, typ: arrayType$1, tag: ""}, {prop: "Min", name: "Min", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Max", name: "Max", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Cap", name: "Cap", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "Name", name: "Name", anonymous: false, exported: true, typ: $String, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		anyRuneNotNL = new sliceType([0, 9, 11, 1114111]);
		anyRune = new sliceType([0, 1114111]);
		anyTable = new unicode.RangeTable.ptr(new sliceType$1([new unicode.Range16.ptr(0, 65535, 1)]), new sliceType$2([new unicode.Range32.ptr(65536, 1114111, 1)]), 0);
		code1 = new sliceType([48, 57]);
		code2 = new sliceType([9, 10, 12, 13, 32, 32]);
		code3 = new sliceType([48, 57, 65, 90, 95, 95, 97, 122]);
		perlGroup = $makeMap($String.keyFor, [{ k: "\\d", v: new charGroup.ptr(1, code1) }, { k: "\\D", v: new charGroup.ptr(-1, code1) }, { k: "\\s", v: new charGroup.ptr(1, code2) }, { k: "\\S", v: new charGroup.ptr(-1, code2) }, { k: "\\w", v: new charGroup.ptr(1, code3) }, { k: "\\W", v: new charGroup.ptr(-1, code3) }]);
		code4 = new sliceType([48, 57, 65, 90, 97, 122]);
		code5 = new sliceType([65, 90, 97, 122]);
		code6 = new sliceType([0, 127]);
		code7 = new sliceType([9, 9, 32, 32]);
		code8 = new sliceType([0, 31, 127, 127]);
		code9 = new sliceType([48, 57]);
		code10 = new sliceType([33, 126]);
		code11 = new sliceType([97, 122]);
		code12 = new sliceType([32, 126]);
		code13 = new sliceType([33, 47, 58, 64, 91, 96, 123, 126]);
		code14 = new sliceType([9, 13, 32, 32]);
		code15 = new sliceType([65, 90]);
		code16 = new sliceType([48, 57, 65, 90, 95, 95, 97, 122]);
		code17 = new sliceType([48, 57, 65, 70, 97, 102]);
		posixGroup = $makeMap($String.keyFor, [{ k: "[:alnum:]", v: new charGroup.ptr(1, code4) }, { k: "[:^alnum:]", v: new charGroup.ptr(-1, code4) }, { k: "[:alpha:]", v: new charGroup.ptr(1, code5) }, { k: "[:^alpha:]", v: new charGroup.ptr(-1, code5) }, { k: "[:ascii:]", v: new charGroup.ptr(1, code6) }, { k: "[:^ascii:]", v: new charGroup.ptr(-1, code6) }, { k: "[:blank:]", v: new charGroup.ptr(1, code7) }, { k: "[:^blank:]", v: new charGroup.ptr(-1, code7) }, { k: "[:cntrl:]", v: new charGroup.ptr(1, code8) }, { k: "[:^cntrl:]", v: new charGroup.ptr(-1, code8) }, { k: "[:digit:]", v: new charGroup.ptr(1, code9) }, { k: "[:^digit:]", v: new charGroup.ptr(-1, code9) }, { k: "[:graph:]", v: new charGroup.ptr(1, code10) }, { k: "[:^graph:]", v: new charGroup.ptr(-1, code10) }, { k: "[:lower:]", v: new charGroup.ptr(1, code11) }, { k: "[:^lower:]", v: new charGroup.ptr(-1, code11) }, { k: "[:print:]", v: new charGroup.ptr(1, code12) }, { k: "[:^print:]", v: new charGroup.ptr(-1, code12) }, { k: "[:punct:]", v: new charGroup.ptr(1, code13) }, { k: "[:^punct:]", v: new charGroup.ptr(-1, code13) }, { k: "[:space:]", v: new charGroup.ptr(1, code14) }, { k: "[:^space:]", v: new charGroup.ptr(-1, code14) }, { k: "[:upper:]", v: new charGroup.ptr(1, code15) }, { k: "[:^upper:]", v: new charGroup.ptr(-1, code15) }, { k: "[:word:]", v: new charGroup.ptr(1, code16) }, { k: "[:^word:]", v: new charGroup.ptr(-1, code16) }, { k: "[:xdigit:]", v: new charGroup.ptr(1, code17) }, { k: "[:^xdigit:]", v: new charGroup.ptr(-1, code17) }]);
		instOpNames = new sliceType$3(["InstAlt", "InstAltMatch", "InstCapture", "InstEmptyWidth", "InstMatch", "InstFail", "InstNop", "InstRune", "InstRune1", "InstRuneAny", "InstRuneAnyNotNL"]);
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["regexp"] = (function() {
	var $pkg = {}, $init, bytes, nosync, io, syntax, sort, strconv, strings, unicode, utf8, job, bitState, queue, entry, thread, machine, onePassProg, onePassInst, queueOnePass, runeSlice, Regexp, regexpRO, input, inputString, inputBytes, inputReader, arrayType, arrayType$1, ptrType, sliceType, sliceType$1, ptrType$1, ptrType$2, sliceType$2, sliceType$3, ptrType$3, sliceType$4, ptrType$4, sliceType$5, sliceType$6, ptrType$5, ptrType$6, arrayType$2, ptrType$7, sliceType$7, ptrType$8, sliceType$8, ptrType$9, sliceType$9, sliceType$10, ptrType$10, sliceType$11, arrayType$3, arrayType$4, sliceType$12, sliceType$13, sliceType$14, sliceType$15, ptrType$11, funcType, funcType$1, funcType$2, funcType$3, ptrType$12, ptrType$13, ptrType$14, notBacktrack, arrayNoInts, noRune, noNext, anyRuneNotNL, anyRune, notOnePass, specialBytes, maxBitStateLen, newBitState, shouldBacktrack, progMachine, onePassPrefix, onePassNext, iop, newQueue, mergeRuneSets, cleanupOnePass, onePassCopy, makeOnePass, compileOnePass, Compile, compile, init, extract;
	bytes = $packages["bytes"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	syntax = $packages["regexp/syntax"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	job = $pkg.job = $newType(0, $kindStruct, "regexp.job", true, "regexp", false, function(pc_, arg_, pos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pc = 0;
			this.arg = 0;
			this.pos = 0;
			return;
		}
		this.pc = pc_;
		this.arg = arg_;
		this.pos = pos_;
	});
	bitState = $pkg.bitState = $newType(0, $kindStruct, "regexp.bitState", true, "regexp", false, function(prog_, end_, cap_, jobs_, visited_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.prog = ptrType$2.nil;
			this.end = 0;
			this.cap = sliceType$2.nil;
			this.jobs = sliceType$3.nil;
			this.visited = sliceType$1.nil;
			return;
		}
		this.prog = prog_;
		this.end = end_;
		this.cap = cap_;
		this.jobs = jobs_;
		this.visited = visited_;
	});
	queue = $pkg.queue = $newType(0, $kindStruct, "regexp.queue", true, "regexp", false, function(sparse_, dense_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sparse = sliceType$1.nil;
			this.dense = sliceType$4.nil;
			return;
		}
		this.sparse = sparse_;
		this.dense = dense_;
	});
	entry = $pkg.entry = $newType(0, $kindStruct, "regexp.entry", true, "regexp", false, function(pc_, t_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.pc = 0;
			this.t = ptrType$4.nil;
			return;
		}
		this.pc = pc_;
		this.t = t_;
	});
	thread = $pkg.thread = $newType(0, $kindStruct, "regexp.thread", true, "regexp", false, function(inst_, cap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.inst = ptrType$5.nil;
			this.cap = sliceType$2.nil;
			return;
		}
		this.inst = inst_;
		this.cap = cap_;
	});
	machine = $pkg.machine = $newType(0, $kindStruct, "regexp.machine", true, "regexp", false, function(re_, p_, op_, maxBitStateLen_, b_, q0_, q1_, pool_, matched_, matchcap_, inputBytes_, inputString_, inputReader_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.re = ptrType$3.nil;
			this.p = ptrType$2.nil;
			this.op = ptrType$1.nil;
			this.maxBitStateLen = 0;
			this.b = ptrType.nil;
			this.q0 = new queue.ptr(sliceType$1.nil, sliceType$4.nil);
			this.q1 = new queue.ptr(sliceType$1.nil, sliceType$4.nil);
			this.pool = sliceType$5.nil;
			this.matched = false;
			this.matchcap = sliceType$2.nil;
			this.inputBytes = new inputBytes.ptr(sliceType$6.nil);
			this.inputString = new inputString.ptr("");
			this.inputReader = new inputReader.ptr($ifaceNil, false, 0);
			return;
		}
		this.re = re_;
		this.p = p_;
		this.op = op_;
		this.maxBitStateLen = maxBitStateLen_;
		this.b = b_;
		this.q0 = q0_;
		this.q1 = q1_;
		this.pool = pool_;
		this.matched = matched_;
		this.matchcap = matchcap_;
		this.inputBytes = inputBytes_;
		this.inputString = inputString_;
		this.inputReader = inputReader_;
	});
	onePassProg = $pkg.onePassProg = $newType(0, $kindStruct, "regexp.onePassProg", true, "regexp", false, function(Inst_, Start_, NumCap_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = sliceType$7.nil;
			this.Start = 0;
			this.NumCap = 0;
			return;
		}
		this.Inst = Inst_;
		this.Start = Start_;
		this.NumCap = NumCap_;
	});
	onePassInst = $pkg.onePassInst = $newType(0, $kindStruct, "regexp.onePassInst", true, "regexp", false, function(Inst_, Next_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Inst = new syntax.Inst.ptr(0, 0, 0, sliceType.nil);
			this.Next = sliceType$1.nil;
			return;
		}
		this.Inst = Inst_;
		this.Next = Next_;
	});
	queueOnePass = $pkg.queueOnePass = $newType(0, $kindStruct, "regexp.queueOnePass", true, "regexp", false, function(sparse_, dense_, size_, nextIndex_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.sparse = sliceType$1.nil;
			this.dense = sliceType$1.nil;
			this.size = 0;
			this.nextIndex = 0;
			return;
		}
		this.sparse = sparse_;
		this.dense = dense_;
		this.size = size_;
		this.nextIndex = nextIndex_;
	});
	runeSlice = $pkg.runeSlice = $newType(12, $kindSlice, "regexp.runeSlice", true, "regexp", false, null);
	Regexp = $pkg.Regexp = $newType(0, $kindStruct, "regexp.Regexp", true, "regexp", true, function(regexpRO_, mu_, machine_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.regexpRO = new regexpRO.ptr("", ptrType$2.nil, ptrType$1.nil, "", sliceType$6.nil, false, 0, 0, 0, 0, sliceType$10.nil, false);
			this.mu = new nosync.Mutex.ptr(false);
			this.machine = sliceType$11.nil;
			return;
		}
		this.regexpRO = regexpRO_;
		this.mu = mu_;
		this.machine = machine_;
	});
	regexpRO = $pkg.regexpRO = $newType(0, $kindStruct, "regexp.regexpRO", true, "regexp", false, function(expr_, prog_, onepass_, prefix_, prefixBytes_, prefixComplete_, prefixRune_, prefixEnd_, cond_, numSubexp_, subexpNames_, longest_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.expr = "";
			this.prog = ptrType$2.nil;
			this.onepass = ptrType$1.nil;
			this.prefix = "";
			this.prefixBytes = sliceType$6.nil;
			this.prefixComplete = false;
			this.prefixRune = 0;
			this.prefixEnd = 0;
			this.cond = 0;
			this.numSubexp = 0;
			this.subexpNames = sliceType$10.nil;
			this.longest = false;
			return;
		}
		this.expr = expr_;
		this.prog = prog_;
		this.onepass = onepass_;
		this.prefix = prefix_;
		this.prefixBytes = prefixBytes_;
		this.prefixComplete = prefixComplete_;
		this.prefixRune = prefixRune_;
		this.prefixEnd = prefixEnd_;
		this.cond = cond_;
		this.numSubexp = numSubexp_;
		this.subexpNames = subexpNames_;
		this.longest = longest_;
	});
	input = $pkg.input = $newType(8, $kindInterface, "regexp.input", true, "regexp", false, null);
	inputString = $pkg.inputString = $newType(0, $kindStruct, "regexp.inputString", true, "regexp", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = "";
			return;
		}
		this.str = str_;
	});
	inputBytes = $pkg.inputBytes = $newType(0, $kindStruct, "regexp.inputBytes", true, "regexp", false, function(str_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.str = sliceType$6.nil;
			return;
		}
		this.str = str_;
	});
	inputReader = $pkg.inputReader = $newType(0, $kindStruct, "regexp.inputReader", true, "regexp", false, function(r_, atEOT_, pos_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.r = $ifaceNil;
			this.atEOT = false;
			this.pos = 0;
			return;
		}
		this.r = r_;
		this.atEOT = atEOT_;
		this.pos = pos_;
	});
	arrayType = $arrayType($Int, 0);
	arrayType$1 = $arrayType($Uint8, 16);
	ptrType = $ptrType(bitState);
	sliceType = $sliceType($Int32);
	sliceType$1 = $sliceType($Uint32);
	ptrType$1 = $ptrType(onePassProg);
	ptrType$2 = $ptrType(syntax.Prog);
	sliceType$2 = $sliceType($Int);
	sliceType$3 = $sliceType(job);
	ptrType$3 = $ptrType(Regexp);
	sliceType$4 = $sliceType(entry);
	ptrType$4 = $ptrType(thread);
	sliceType$5 = $sliceType(ptrType$4);
	sliceType$6 = $sliceType($Uint8);
	ptrType$5 = $ptrType(syntax.Inst);
	ptrType$6 = $ptrType($Int);
	arrayType$2 = $arrayType($Uint8, 64);
	ptrType$7 = $ptrType(queueOnePass);
	sliceType$7 = $sliceType(onePassInst);
	ptrType$8 = $ptrType($Uint32);
	sliceType$8 = $sliceType(sliceType);
	ptrType$9 = $ptrType(sliceType);
	sliceType$9 = $sliceType($Bool);
	sliceType$10 = $sliceType($String);
	ptrType$10 = $ptrType(machine);
	sliceType$11 = $sliceType(ptrType$10);
	arrayType$3 = $arrayType($Int, 2);
	arrayType$4 = $arrayType($Int, 4);
	sliceType$12 = $sliceType(sliceType$6);
	sliceType$13 = $sliceType(sliceType$2);
	sliceType$14 = $sliceType(sliceType$12);
	sliceType$15 = $sliceType(sliceType$10);
	ptrType$11 = $ptrType(queue);
	funcType = $funcType([$String], [$String], false);
	funcType$1 = $funcType([sliceType$6, sliceType$2], [sliceType$6], false);
	funcType$2 = $funcType([sliceType$6], [sliceType$6], false);
	funcType$3 = $funcType([sliceType$2], [], false);
	ptrType$12 = $ptrType(inputString);
	ptrType$13 = $ptrType(inputBytes);
	ptrType$14 = $ptrType(inputReader);
	maxBitStateLen = function(prog) {
		var _q, prog;
		if (!shouldBacktrack(prog)) {
			return 0;
		}
		return (_q = 262144 / prog.Inst.$length, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	newBitState = function(prog) {
		var prog;
		if (!shouldBacktrack(prog)) {
			return notBacktrack;
		}
		return new bitState.ptr(prog, 0, sliceType$2.nil, sliceType$3.nil, sliceType$1.nil);
	};
	shouldBacktrack = function(prog) {
		var prog;
		return prog.Inst.$length <= 500;
	};
	bitState.ptr.prototype.reset = function(end, ncap) {
		var _i, _i$1, _q, _ref, _ref$1, b, end, i, i$1, ncap, visitedSize, x, x$1;
		b = this;
		b.end = end;
		if (b.jobs.$capacity === 0) {
			b.jobs = $makeSlice(sliceType$3, 0, 256);
		} else {
			b.jobs = $subslice(b.jobs, 0, 0);
		}
		visitedSize = (_q = (((($imul(b.prog.Inst.$length, ((end + 1 >> 0)))) + 32 >> 0) - 1 >> 0)) / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (b.visited.$capacity < visitedSize) {
			b.visited = $makeSlice(sliceType$1, visitedSize, 8192);
		} else {
			b.visited = $subslice(b.visited, 0, visitedSize);
			_ref = b.visited;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				(x = b.visited, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i] = 0));
				_i++;
			}
		}
		if (b.cap.$capacity < ncap) {
			b.cap = $makeSlice(sliceType$2, ncap);
		} else {
			b.cap = $subslice(b.cap, 0, ncap);
		}
		_ref$1 = b.cap;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			i$1 = _i$1;
			(x$1 = b.cap, ((i$1 < 0 || i$1 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i$1] = -1));
			_i$1++;
		}
	};
	bitState.prototype.reset = function(end, ncap) { return this.$val.reset(end, ncap); };
	bitState.ptr.prototype.shouldVisit = function(pc, pos) {
		var _index, _q, _q$1, b, n, pc, pos, x, x$1, x$2, x$3, y, y$1;
		b = this;
		n = (((($imul(((pc >> 0)), ((b.end + 1 >> 0)))) + pos >> 0) >>> 0));
		if (!(((((x = b.visited, x$1 = (_q = n / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) & (((y = (((n & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
			return false;
		}
		_index = (_q$1 = n / 32, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		(x$3 = b.visited, ((_index < 0 || _index >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + _index] = (((x$2 = b.visited, ((_index < 0 || _index >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + _index])) | (((y$1 = (((n & 31) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0)));
		return true;
	};
	bitState.prototype.shouldVisit = function(pc, pos) { return this.$val.shouldVisit(pc, pos); };
	bitState.ptr.prototype.push = function(pc, pos, arg) {
		var arg, b, pc, pos, x;
		b = this;
		if ((x = b.prog.Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc])).Op === 5) {
			return;
		}
		if ((arg === 0) && !b.shouldVisit(pc, pos)) {
			return;
		}
		b.jobs = $append(b.jobs, new job.ptr(pc, arg, pos));
	};
	bitState.prototype.push = function(pc, pos, arg) { return this.$val.push(pc, pos, arg); };
	machine.ptr.prototype.tryBacktrack = function(b, i, pc, pos) {
		var _1, _2, _3, _4, _r, _r$1, _r$2, _r$3, _r$4, _tuple, _tuple$1, _tuple$2, _tuple$3, arg, b, i, inst, l, longest, m, pc, pc$1, pos, pos$1, r, r$1, r$2, r$3, width, width$1, width$2, width$3, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _2 = $f._2; _3 = $f._3; _4 = $f._4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; arg = $f.arg; b = $f.b; i = $f.i; inst = $f.inst; l = $f.l; longest = $f.longest; m = $f.m; pc = $f.pc; pc$1 = $f.pc$1; pos = $f.pos; pos$1 = $f.pos$1; r = $f.r; r$1 = $f.r$1; r$2 = $f.r$2; r$3 = $f.r$3; width = $f.width; width$1 = $f.width$1; width$2 = $f.width$2; width$3 = $f.width$3; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		longest = m.re.regexpRO.longest;
		m.matched = false;
		b.push(pc, pos, 0);
		/* while (true) { */ case 1:
			/* if (!(b.jobs.$length > 0)) { break; } */ if(!(b.jobs.$length > 0)) { $s = 2; continue; }
			l = b.jobs.$length - 1 >> 0;
			pc$1 = (x = b.jobs, ((l < 0 || l >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + l])).pc;
			pos$1 = (x$1 = b.jobs, ((l < 0 || l >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + l])).pos;
			arg = (x$2 = b.jobs, ((l < 0 || l >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + l])).arg;
			b.jobs = $subslice(b.jobs, 0, l);
			/* goto Skip */ $s = 3; continue;
			/* CheckAndLoop: */ case 4:
			if (!b.shouldVisit(pc$1, pos$1)) {
				/* continue; */ $s = 1; continue;
			}
			/* Skip: */ case 3:
			inst = $clone((x$3 = b.prog.Inst, ((pc$1 < 0 || pc$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc$1])), syntax.Inst);
				_1 = inst.Op;
				/* */ if (_1 === (5)) { $s = 6; continue; }
				/* */ if (_1 === (0)) { $s = 7; continue; }
				/* */ if (_1 === (1)) { $s = 8; continue; }
				/* */ if (_1 === (7)) { $s = 9; continue; }
				/* */ if (_1 === (8)) { $s = 10; continue; }
				/* */ if (_1 === (10)) { $s = 11; continue; }
				/* */ if (_1 === (9)) { $s = 12; continue; }
				/* */ if (_1 === (2)) { $s = 13; continue; }
				/* */ if (_1 === (3)) { $s = 14; continue; }
				/* */ if (_1 === (6)) { $s = 15; continue; }
				/* */ if (_1 === (4)) { $s = 16; continue; }
				/* */ $s = 17; continue;
				/* if (_1 === (5)) { */ case 6:
					$panic(new $String("unexpected InstFail"));
					$s = 18; continue;
				/* } else if (_1 === (0)) { */ case 7:
						_2 = arg;
						/* */ if (_2 === (0)) { $s = 20; continue; }
						/* */ if (_2 === (1)) { $s = 21; continue; }
						/* */ $s = 22; continue;
						/* if (_2 === (0)) { */ case 20:
							b.push(pc$1, pos$1, 1);
							pc$1 = inst.Out;
							/* goto CheckAndLoop */ $s = 4; continue;
							$s = 22; continue;
						/* } else if (_2 === (1)) { */ case 21:
							arg = 0;
							pc$1 = inst.Arg;
							/* goto CheckAndLoop */ $s = 4; continue;
						/* } */ case 22:
					case 19:
					$panic(new $String("bad arg in InstAlt"));
					$s = 18; continue;
				/* } else if (_1 === (1)) { */ case 8:
						_3 = (x$4 = b.prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])).Op;
						/* */ if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10))) { $s = 24; continue; }
						/* */ $s = 25; continue;
						/* if ((_3 === (7)) || (_3 === (8)) || (_3 === (9)) || (_3 === (10))) { */ case 24:
							b.push(inst.Arg, pos$1, 0);
							pc$1 = inst.Arg;
							pos$1 = b.end;
							/* goto CheckAndLoop */ $s = 4; continue;
						/* } */ case 25:
					case 23:
					b.push(inst.Out, b.end, 0);
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (7)) { */ case 9:
					_r = i.step(pos$1); /* */ $s = 26; case 26: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					_tuple = _r;
					r = _tuple[0];
					width = _tuple[1];
					/* */ if (!inst.MatchRune(r)) { $s = 27; continue; }
					/* */ $s = 28; continue;
					/* if (!inst.MatchRune(r)) { */ case 27:
						/* continue; */ $s = 1; continue;
					/* } */ case 28:
					pos$1 = pos$1 + (width) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (8)) { */ case 10:
					_r$1 = i.step(pos$1); /* */ $s = 29; case 29: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_tuple$1 = _r$1;
					r$1 = _tuple$1[0];
					width$1 = _tuple$1[1];
					/* */ if (!((r$1 === (x$6 = inst.Rune, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0]))))) { $s = 30; continue; }
					/* */ $s = 31; continue;
					/* if (!((r$1 === (x$6 = inst.Rune, (0 >= x$6.$length ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + 0]))))) { */ case 30:
						/* continue; */ $s = 1; continue;
					/* } */ case 31:
					pos$1 = pos$1 + (width$1) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (10)) { */ case 11:
					_r$2 = i.step(pos$1); /* */ $s = 32; case 32: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple$2 = _r$2;
					r$2 = _tuple$2[0];
					width$2 = _tuple$2[1];
					/* */ if ((r$2 === 10) || (r$2 === -1)) { $s = 33; continue; }
					/* */ $s = 34; continue;
					/* if ((r$2 === 10) || (r$2 === -1)) { */ case 33:
						/* continue; */ $s = 1; continue;
					/* } */ case 34:
					pos$1 = pos$1 + (width$2) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (9)) { */ case 12:
					_r$3 = i.step(pos$1); /* */ $s = 35; case 35: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					_tuple$3 = _r$3;
					r$3 = _tuple$3[0];
					width$3 = _tuple$3[1];
					/* */ if (r$3 === -1) { $s = 36; continue; }
					/* */ $s = 37; continue;
					/* if (r$3 === -1) { */ case 36:
						/* continue; */ $s = 1; continue;
					/* } */ case 37:
					pos$1 = pos$1 + (width$3) >> 0;
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (2)) { */ case 13:
						_4 = arg;
						/* */ if (_4 === (0)) { $s = 39; continue; }
						/* */ if (_4 === (1)) { $s = 40; continue; }
						/* */ $s = 41; continue;
						/* if (_4 === (0)) { */ case 39:
							if (0 <= inst.Arg && inst.Arg < ((b.cap.$length >>> 0))) {
								b.push(pc$1, (x$7 = b.cap, x$8 = inst.Arg, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])), 1);
								(x$9 = b.cap, x$10 = inst.Arg, ((x$10 < 0 || x$10 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + x$10] = pos$1));
							}
							pc$1 = inst.Out;
							/* goto CheckAndLoop */ $s = 4; continue;
							$s = 41; continue;
						/* } else if (_4 === (1)) { */ case 40:
							(x$11 = b.cap, x$12 = inst.Arg, ((x$12 < 0 || x$12 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + x$12] = pos$1));
							/* continue; */ $s = 1; continue;
						/* } */ case 41:
					case 38:
					$panic(new $String("bad arg in InstCapture"));
					$s = 18; continue;
				/* } else if (_1 === (3)) { */ case 14:
					_r$4 = i.context(pos$1); /* */ $s = 44; case 44: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!((((((inst.Arg << 24 >>> 24)) & ~_r$4) << 24 >>> 24) === 0))) { $s = 42; continue; }
					/* */ $s = 43; continue;
					/* if (!((((((inst.Arg << 24 >>> 24)) & ~_r$4) << 24 >>> 24) === 0))) { */ case 42:
						/* continue; */ $s = 1; continue;
					/* } */ case 43:
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (6)) { */ case 15:
					pc$1 = inst.Out;
					/* goto CheckAndLoop */ $s = 4; continue;
					$s = 18; continue;
				/* } else if (_1 === (4)) { */ case 16:
					if (b.cap.$length === 0) {
						m.matched = true;
						$s = -1; return m.matched;
					}
					if (b.cap.$length > 1) {
						(x$13 = b.cap, (1 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 1] = pos$1));
					}
					if (!m.matched || (longest && pos$1 > 0 && pos$1 > (x$14 = m.matchcap, (1 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 1])))) {
						$copySlice(m.matchcap, b.cap);
					}
					m.matched = true;
					if (!longest) {
						$s = -1; return m.matched;
					}
					if (pos$1 === b.end) {
						$s = -1; return m.matched;
					}
					/* continue; */ $s = 1; continue;
					$s = 18; continue;
				/* } else { */ case 17:
					$panic(new $String("bad inst"));
				/* } */ case 18:
			case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return m.matched;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.tryBacktrack }; } $f._1 = _1; $f._2 = _2; $f._3 = _3; $f._4 = _4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f.arg = arg; $f.b = b; $f.i = i; $f.inst = inst; $f.l = l; $f.longest = longest; $f.m = m; $f.pc = pc; $f.pc$1 = pc$1; $f.pos = pos; $f.pos$1 = pos$1; $f.r = r; $f.r$1 = r$1; $f.r$2 = r$2; $f.r$3 = r$3; $f.width = width; $f.width$1 = width$1; $f.width$2 = width$2; $f.width$3 = width$3; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.tryBacktrack = function(b, i, pc, pos) { return this.$val.tryBacktrack(b, i, pc, pos); };
	machine.ptr.prototype.backtrack = function(i, pos, end, ncap) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _ref, _tuple, advance, b, end, i, i$1, m, ncap, pos, startCond, width, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _tuple = $f._tuple; advance = $f.advance; b = $f.b; end = $f.end; i = $f.i; i$1 = $f.i$1; m = $f.m; ncap = $f.ncap; pos = $f.pos; startCond = $f.startCond; width = $f.width; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = i.canCheckPrefix(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		/* */ if (!_r) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!_r) { */ case 1:
			$panic(new $String("backtrack called for a RuneReader"));
		/* } */ case 2:
		startCond = m.re.regexpRO.cond;
		if (startCond === 255) {
			$s = -1; return false;
		}
		if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
			$s = -1; return false;
		}
		b = m.b;
		b.reset(end, ncap);
		m.matchcap = $subslice(m.matchcap, 0, ncap);
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		/* */ if (!((((startCond & 4) >>> 0) === 0))) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if (!((((startCond & 4) >>> 0) === 0))) { */ case 4:
			if (b.cap.$length > 0) {
				(x$1 = b.cap, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = pos));
			}
			_r$1 = m.tryBacktrack(b, i, ((m.p.Start >>> 0)), pos); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			$s = -1; return _r$1;
		/* } */ case 5:
		width = -1;
		/* while (true) { */ case 7:
			/* if (!(pos <= end && !((width === 0)))) { break; } */ if(!(pos <= end && !((width === 0)))) { $s = 8; continue; }
			/* */ if (m.re.regexpRO.prefix.length > 0) { $s = 9; continue; }
			/* */ $s = 10; continue;
			/* if (m.re.regexpRO.prefix.length > 0) { */ case 9:
				_r$2 = i.index(m.re, pos); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				advance = _r$2;
				if (advance < 0) {
					$s = -1; return false;
				}
				pos = pos + (advance) >> 0;
			/* } */ case 10:
			if (b.cap.$length > 0) {
				(x$2 = b.cap, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0] = pos));
			}
			_r$3 = m.tryBacktrack(b, i, ((m.p.Start >>> 0)), pos); /* */ $s = 14; case 14: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			/* */ if (_r$3) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if (_r$3) { */ case 12:
				$s = -1; return true;
			/* } */ case 13:
			_r$4 = i.step(pos); /* */ $s = 15; case 15: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_tuple = _r$4;
			width = _tuple[1];
			pos = pos + (width) >> 0;
		/* } */ $s = 7; continue; case 8:
		$s = -1; return false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.backtrack }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._tuple = _tuple; $f.advance = advance; $f.b = b; $f.end = end; $f.i = i; $f.i$1 = i$1; $f.m = m; $f.ncap = ncap; $f.pos = pos; $f.startCond = startCond; $f.width = width; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.backtrack = function(i, pos, end, ncap) { return this.$val.backtrack(i, pos, end, ncap); };
	machine.ptr.prototype.newInputBytes = function(b) {
		var b, m;
		m = this;
		m.inputBytes.str = b;
		return m.inputBytes;
	};
	machine.prototype.newInputBytes = function(b) { return this.$val.newInputBytes(b); };
	machine.ptr.prototype.newInputString = function(s) {
		var m, s;
		m = this;
		m.inputString.str = s;
		return m.inputString;
	};
	machine.prototype.newInputString = function(s) { return this.$val.newInputString(s); };
	machine.ptr.prototype.newInputReader = function(r) {
		var m, r;
		m = this;
		m.inputReader.r = r;
		m.inputReader.atEOT = false;
		m.inputReader.pos = 0;
		return m.inputReader;
	};
	machine.prototype.newInputReader = function(r) { return this.$val.newInputReader(r); };
	progMachine = function(p, op) {
		var m, n, ncap, op, p;
		m = new machine.ptr(ptrType$3.nil, p, op, 0, ptrType.nil, new queue.ptr(sliceType$1.nil, sliceType$4.nil), new queue.ptr(sliceType$1.nil, sliceType$4.nil), sliceType$5.nil, false, sliceType$2.nil, new inputBytes.ptr(sliceType$6.nil), new inputString.ptr(""), new inputReader.ptr($ifaceNil, false, 0));
		n = m.p.Inst.$length;
		queue.copy(m.q0, new queue.ptr($makeSlice(sliceType$1, n), $makeSlice(sliceType$4, 0, n)));
		queue.copy(m.q1, new queue.ptr($makeSlice(sliceType$1, n), $makeSlice(sliceType$4, 0, n)));
		ncap = p.NumCap;
		if (ncap < 2) {
			ncap = 2;
		}
		if (op === notOnePass) {
			m.maxBitStateLen = maxBitStateLen(p);
		}
		m.matchcap = $makeSlice(sliceType$2, ncap);
		return m;
	};
	machine.ptr.prototype.init = function(ncap) {
		var _i, _ref, m, ncap, t;
		m = this;
		_ref = m.pool;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			t = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			t.cap = $subslice(t.cap, 0, ncap);
			_i++;
		}
		m.matchcap = $subslice(m.matchcap, 0, ncap);
	};
	machine.prototype.init = function(ncap) { return this.$val.init(ncap); };
	machine.ptr.prototype.alloc = function(i) {
		var i, m, n, t, x, x$1;
		m = this;
		t = ptrType$4.nil;
		n = m.pool.$length;
		if (n > 0) {
			t = (x = m.pool, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			m.pool = $subslice(m.pool, 0, (n - 1 >> 0));
		} else {
			t = new thread.ptr(ptrType$5.nil, sliceType$2.nil);
			t.cap = $makeSlice(sliceType$2, m.matchcap.$length, m.matchcap.$capacity);
		}
		t.inst = i;
		return t;
	};
	machine.prototype.alloc = function(i) { return this.$val.alloc(i); };
	machine.ptr.prototype.match = function(i, pos) {
		var _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, advance, flag, i, i$1, m, nextq, pos, r, r1, runq, startCond, width, width1, x, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tmp$6 = $f._tmp$6; _tmp$7 = $f._tmp$7; _tmp$8 = $f._tmp$8; _tmp$9 = $f._tmp$9; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _v = $f._v; advance = $f.advance; flag = $f.flag; i = $f.i; i$1 = $f.i$1; m = $f.m; nextq = $f.nextq; pos = $f.pos; r = $f.r; r1 = $f.r1; runq = $f.runq; startCond = $f.startCond; width = $f.width; width1 = $f.width1; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		startCond = m.re.regexpRO.cond;
		if (startCond === 255) {
			$s = -1; return false;
		}
		m.matched = false;
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		_tmp = m.q0;
		_tmp$1 = m.q1;
		runq = _tmp;
		nextq = _tmp$1;
		_tmp$2 = -1;
		_tmp$3 = -1;
		r = _tmp$2;
		r1 = _tmp$3;
		_tmp$4 = 0;
		_tmp$5 = 0;
		width = _tmp$4;
		width1 = _tmp$5;
		_r = i.step(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		width = _tuple[1];
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = i.step(pos + width >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			r1 = _tuple$1[0];
			width1 = _tuple$1[1];
		/* } */ case 3:
		flag = 0;
		/* */ if (pos === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (pos === 0) { */ case 5:
			flag = syntax.EmptyOpContext(-1, r);
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = i.context(pos); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			flag = _r$2;
		/* } */ case 7:
		/* while (true) { */ case 9:
			/* */ if (runq.dense.$length === 0) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (runq.dense.$length === 0) { */ case 11:
				if (!((((startCond & 4) >>> 0) === 0)) && !((pos === 0))) {
					/* break; */ $s = 10; continue;
				}
				if (m.matched) {
					/* break; */ $s = 10; continue;
				}
				if (!(m.re.regexpRO.prefix.length > 0 && !((r1 === m.re.regexpRO.prefixRune)))) { _v = false; $s = 15; continue s; }
				_r$3 = i.canCheckPrefix(); /* */ $s = 16; case 16: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_v = _r$3; case 15:
				/* */ if (_v) { $s = 13; continue; }
				/* */ $s = 14; continue;
				/* if (_v) { */ case 13:
					_r$4 = i.index(m.re, pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					advance = _r$4;
					if (advance < 0) {
						/* break; */ $s = 10; continue;
					}
					pos = pos + (advance) >> 0;
					_r$5 = i.step(pos); /* */ $s = 18; case 18: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$2 = _r$5;
					r = _tuple$2[0];
					width = _tuple$2[1];
					_r$6 = i.step(pos + width >> 0); /* */ $s = 19; case 19: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$3 = _r$6;
					r1 = _tuple$3[0];
					width1 = _tuple$3[1];
				/* } */ case 14:
			/* } */ case 12:
			if (!m.matched) {
				if (m.matchcap.$length > 0) {
					(x$1 = m.matchcap, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0] = pos));
				}
				m.add(runq, ((m.p.Start >>> 0)), pos, m.matchcap, flag, ptrType$4.nil);
			}
			flag = syntax.EmptyOpContext(r, r1);
			m.step(runq, nextq, pos, pos + width >> 0, r, flag);
			if (width === 0) {
				/* break; */ $s = 10; continue;
			}
			if ((m.matchcap.$length === 0) && m.matched) {
				/* break; */ $s = 10; continue;
			}
			pos = pos + (width) >> 0;
			_tmp$6 = r1;
			_tmp$7 = width1;
			r = _tmp$6;
			width = _tmp$7;
			/* */ if (!((r === -1))) { $s = 20; continue; }
			/* */ $s = 21; continue;
			/* if (!((r === -1))) { */ case 20:
				_r$7 = i.step(pos + width >> 0); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_tuple$4 = _r$7;
				r1 = _tuple$4[0];
				width1 = _tuple$4[1];
			/* } */ case 21:
			_tmp$8 = nextq;
			_tmp$9 = runq;
			runq = _tmp$8;
			nextq = _tmp$9;
		/* } */ $s = 9; continue; case 10:
		m.clear(nextq);
		$s = -1; return m.matched;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.match }; } $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tmp$6 = _tmp$6; $f._tmp$7 = _tmp$7; $f._tmp$8 = _tmp$8; $f._tmp$9 = _tmp$9; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._v = _v; $f.advance = advance; $f.flag = flag; $f.i = i; $f.i$1 = i$1; $f.m = m; $f.nextq = nextq; $f.pos = pos; $f.r = r; $f.r1 = r1; $f.runq = runq; $f.startCond = startCond; $f.width = width; $f.width1 = width1; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.match = function(i, pos) { return this.$val.match(i, pos); };
	machine.ptr.prototype.clear = function(q) {
		var _i, _ref, d, m, q;
		m = this;
		_ref = q.dense;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			d = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
			if (!(d.t === ptrType$4.nil)) {
				m.pool = $append(m.pool, d.t);
			}
			_i++;
		}
		q.dense = $subslice(q.dense, 0, 0);
	};
	machine.prototype.clear = function(q) { return this.$val.clear(q); };
	machine.ptr.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) {
		var _1, _i, _ref, add, c, d, d$1, i, j, longest, m, nextCond, nextPos, nextq, pos, runq, t, x, x$1, x$2, x$3, x$4, x$5;
		m = this;
		longest = m.re.regexpRO.longest;
		j = 0;
		while (true) {
			if (!(j < runq.dense.$length)) { break; }
			d = (x = runq.dense, ((j < 0 || j >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + j]));
			t = d.t;
			if (t === ptrType$4.nil) {
				j = j + (1) >> 0;
				continue;
			}
			if (longest && m.matched && t.cap.$length > 0 && (x$1 = m.matchcap, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])) < (x$2 = t.cap, (0 >= x$2.$length ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + 0]))) {
				m.pool = $append(m.pool, t);
				j = j + (1) >> 0;
				continue;
			}
			i = t.inst;
			add = false;
			_1 = i.Op;
			if (_1 === (4)) {
				if (t.cap.$length > 0 && (!longest || !m.matched || (x$3 = m.matchcap, (1 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 1])) < pos)) {
					(x$4 = t.cap, (1 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 1] = pos));
					$copySlice(m.matchcap, t.cap);
				}
				if (!longest) {
					_ref = $subslice(runq.dense, (j + 1 >> 0));
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						d$1 = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), entry);
						if (!(d$1.t === ptrType$4.nil)) {
							m.pool = $append(m.pool, d$1.t);
						}
						_i++;
					}
					runq.dense = $subslice(runq.dense, 0, 0);
				}
				m.matched = true;
			} else if (_1 === (7)) {
				add = i.MatchRune(c);
			} else if (_1 === (8)) {
				add = c === (x$5 = i.Rune, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]));
			} else if (_1 === (9)) {
				add = true;
			} else if (_1 === (10)) {
				add = !((c === 10));
			} else {
				$panic(new $String("bad inst"));
			}
			if (add) {
				t = m.add(nextq, i.Out, nextPos, t.cap, nextCond, t);
			}
			if (!(t === ptrType$4.nil)) {
				m.pool = $append(m.pool, t);
			}
			j = j + (1) >> 0;
		}
		runq.dense = $subslice(runq.dense, 0, 0);
	};
	machine.prototype.step = function(runq, nextq, pos, nextPos, c, nextCond) { return this.$val.step(runq, nextq, pos, nextPos, c, nextCond); };
	machine.ptr.prototype.add = function(q, pc, pos, cap, cond, t) {
		var _1, cap, cond, d, i, j, j$1, m, opos, pc, pos, q, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		m = this;
		if (pc === 0) {
			return t;
		}
		j = (x = q.sparse, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
		if (j < ((q.dense.$length >>> 0)) && ((x$1 = q.dense, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j])).pc === pc)) {
			return t;
		}
		j$1 = q.dense.$length;
		q.dense = $subslice(q.dense, 0, (j$1 + 1 >> 0));
		d = (x$2 = q.dense, ((j$1 < 0 || j$1 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j$1]));
		d.t = ptrType$4.nil;
		d.pc = pc;
		(x$3 = q.sparse, ((pc < 0 || pc >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc] = ((j$1 >>> 0))));
		i = (x$4 = m.p.Inst, ((pc < 0 || pc >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + pc]));
		_1 = i.Op;
		if (_1 === (5)) {
		} else if ((_1 === (0)) || (_1 === (1))) {
			t = m.add(q, i.Out, pos, cap, cond, t);
			t = m.add(q, i.Arg, pos, cap, cond, t);
		} else if (_1 === (3)) {
			if (((((i.Arg << 24 >>> 24)) & ~cond) << 24 >>> 24) === 0) {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if (_1 === (6)) {
			t = m.add(q, i.Out, pos, cap, cond, t);
		} else if (_1 === (2)) {
			if (((i.Arg >> 0)) < cap.$length) {
				opos = (x$5 = i.Arg, ((x$5 < 0 || x$5 >= cap.$length) ? ($throwRuntimeError("index out of range"), undefined) : cap.$array[cap.$offset + x$5]));
				(x$6 = i.Arg, ((x$6 < 0 || x$6 >= cap.$length) ? ($throwRuntimeError("index out of range"), undefined) : cap.$array[cap.$offset + x$6] = pos));
				m.add(q, i.Out, pos, cap, cond, ptrType$4.nil);
				(x$7 = i.Arg, ((x$7 < 0 || x$7 >= cap.$length) ? ($throwRuntimeError("index out of range"), undefined) : cap.$array[cap.$offset + x$7] = opos));
			} else {
				t = m.add(q, i.Out, pos, cap, cond, t);
			}
		} else if ((_1 === (4)) || (_1 === (7)) || (_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			if (t === ptrType$4.nil) {
				t = m.alloc(i);
			} else {
				t.inst = i;
			}
			if (cap.$length > 0 && !((x$8 = t.cap, $indexPtr(x$8.$array, x$8.$offset + 0, ptrType$6)) === $indexPtr(cap.$array, cap.$offset + 0, ptrType$6))) {
				$copySlice(t.cap, cap);
			}
			d.t = t;
			t = ptrType$4.nil;
		} else {
			$panic(new $String("unhandled"));
		}
		return t;
	};
	machine.prototype.add = function(q, pc, pos, cap, cond, t) { return this.$val.add(q, pc, pos, cap, cond, t); };
	machine.ptr.prototype.onepass = function(i, pos, ncap) {
		var _1, _i, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _v, flag, i, i$1, inst, m, ncap, pc, pos, r, r1, startCond, width, width1, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _ref = $f._ref; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tmp$4 = $f._tmp$4; _tmp$5 = $f._tmp$5; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _v = $f._v; flag = $f.flag; i = $f.i; i$1 = $f.i$1; inst = $f.inst; m = $f.m; ncap = $f.ncap; pc = $f.pc; pos = $f.pos; r = $f.r; r1 = $f.r1; startCond = $f.startCond; width = $f.width; width1 = $f.width1; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		inst = [inst];
		m = this;
		startCond = m.re.regexpRO.cond;
		if (startCond === 255) {
			$s = -1; return false;
		}
		m.matched = false;
		m.matchcap = $subslice(m.matchcap, 0, ncap);
		_ref = m.matchcap;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i$1 = _i;
			(x = m.matchcap, ((i$1 < 0 || i$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i$1] = -1));
			_i++;
		}
		_tmp = -1;
		_tmp$1 = -1;
		r = _tmp;
		r1 = _tmp$1;
		_tmp$2 = 0;
		_tmp$3 = 0;
		width = _tmp$2;
		width1 = _tmp$3;
		_r = i.step(pos); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		width = _tuple[1];
		/* */ if (!((r === -1))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!((r === -1))) { */ case 2:
			_r$1 = i.step(pos + width >> 0); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple$1 = _r$1;
			r1 = _tuple$1[0];
			width1 = _tuple$1[1];
		/* } */ case 3:
		flag = 0;
		/* */ if (pos === 0) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (pos === 0) { */ case 5:
			flag = syntax.EmptyOpContext(-1, r);
			$s = 7; continue;
		/* } else { */ case 6:
			_r$2 = i.context(pos); /* */ $s = 8; case 8: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			flag = _r$2;
		/* } */ case 7:
		pc = m.op.Start;
		inst[0] = $clone((x$1 = m.op.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc])), onePassInst);
		if (!((pos === 0) && (((((inst[0].Inst.Arg << 24 >>> 24)) & ~flag) << 24 >>> 24) === 0) && m.re.regexpRO.prefix.length > 0)) { _v = false; $s = 11; continue s; }
		_r$3 = i.canCheckPrefix(); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_v = _r$3; case 11:
		/* */ if (_v) { $s = 9; continue; }
		/* */ $s = 10; continue;
		/* if (_v) { */ case 9:
			_r$4 = i.hasPrefix(m.re); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			/* */ if (_r$4) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (_r$4) { */ case 13:
				pos = pos + (m.re.regexpRO.prefix.length) >> 0;
				_r$5 = i.step(pos); /* */ $s = 17; case 17: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_tuple$2 = _r$5;
				r = _tuple$2[0];
				width = _tuple$2[1];
				_r$6 = i.step(pos + width >> 0); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_tuple$3 = _r$6;
				r1 = _tuple$3[0];
				width1 = _tuple$3[1];
				_r$7 = i.context(pos); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				flag = _r$7;
				pc = ((m.re.regexpRO.prefixEnd >> 0));
				$s = 15; continue;
			/* } else { */ case 14:
				$s = -1; return m.matched;
			/* } */ case 15:
		/* } */ case 10:
		/* while (true) { */ case 20:
			onePassInst.copy(inst[0], (x$2 = m.op.Inst, ((pc < 0 || pc >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + pc])));
			pc = ((inst[0].Inst.Out >> 0));
				_1 = inst[0].Inst.Op;
				/* */ if (_1 === (4)) { $s = 23; continue; }
				/* */ if (_1 === (7)) { $s = 24; continue; }
				/* */ if (_1 === (8)) { $s = 25; continue; }
				/* */ if (_1 === (9)) { $s = 26; continue; }
				/* */ if (_1 === (10)) { $s = 27; continue; }
				/* */ if ((_1 === (0)) || (_1 === (1))) { $s = 28; continue; }
				/* */ if (_1 === (5)) { $s = 29; continue; }
				/* */ if (_1 === (6)) { $s = 30; continue; }
				/* */ if (_1 === (3)) { $s = 31; continue; }
				/* */ if (_1 === (2)) { $s = 32; continue; }
				/* */ $s = 33; continue;
				/* if (_1 === (4)) { */ case 23:
					m.matched = true;
					if (m.matchcap.$length > 0) {
						(x$3 = m.matchcap, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0] = 0));
						(x$4 = m.matchcap, (1 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 1] = pos));
					}
					$s = -1; return m.matched;
				/* } else if (_1 === (7)) { */ case 24:
					if (!inst[0].Inst.MatchRune(r)) {
						$s = -1; return m.matched;
					}
					$s = 34; continue;
				/* } else if (_1 === (8)) { */ case 25:
					if (!((r === (x$5 = inst[0].Inst.Rune, (0 >= x$5.$length ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + 0]))))) {
						$s = -1; return m.matched;
					}
					$s = 34; continue;
				/* } else if (_1 === (9)) { */ case 26:
					$s = 34; continue;
				/* } else if (_1 === (10)) { */ case 27:
					if (r === 10) {
						$s = -1; return m.matched;
					}
					$s = 34; continue;
				/* } else if ((_1 === (0)) || (_1 === (1))) { */ case 28:
					pc = ((onePassNext(inst[0], r) >> 0));
					/* continue; */ $s = 20; continue;
					$s = 34; continue;
				/* } else if (_1 === (5)) { */ case 29:
					$s = -1; return m.matched;
				/* } else if (_1 === (6)) { */ case 30:
					/* continue; */ $s = 20; continue;
					$s = 34; continue;
				/* } else if (_1 === (3)) { */ case 31:
					if (!((((((inst[0].Inst.Arg << 24 >>> 24)) & ~flag) << 24 >>> 24) === 0))) {
						$s = -1; return m.matched;
					}
					/* continue; */ $s = 20; continue;
					$s = 34; continue;
				/* } else if (_1 === (2)) { */ case 32:
					if (((inst[0].Inst.Arg >> 0)) < m.matchcap.$length) {
						(x$6 = m.matchcap, x$7 = inst[0].Inst.Arg, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7] = pos));
					}
					/* continue; */ $s = 20; continue;
					$s = 34; continue;
				/* } else { */ case 33:
					$panic(new $String("bad inst"));
				/* } */ case 34:
			case 22:
			if (width === 0) {
				/* break; */ $s = 21; continue;
			}
			flag = syntax.EmptyOpContext(r, r1);
			pos = pos + (width) >> 0;
			_tmp$4 = r1;
			_tmp$5 = width1;
			r = _tmp$4;
			width = _tmp$5;
			/* */ if (!((r === -1))) { $s = 35; continue; }
			/* */ $s = 36; continue;
			/* if (!((r === -1))) { */ case 35:
				_r$8 = i.step(pos + width >> 0); /* */ $s = 37; case 37: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$4 = _r$8;
				r1 = _tuple$4[0];
				width1 = _tuple$4[1];
			/* } */ case 36:
		/* } */ $s = 20; continue; case 21:
		$s = -1; return m.matched;
		/* */ } return; } if ($f === undefined) { $f = { $blk: machine.ptr.prototype.onepass }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._ref = _ref; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tmp$4 = _tmp$4; $f._tmp$5 = _tmp$5; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._v = _v; $f.flag = flag; $f.i = i; $f.i$1 = i$1; $f.inst = inst; $f.m = m; $f.ncap = ncap; $f.pc = pc; $f.pos = pos; $f.r = r; $f.r1 = r1; $f.startCond = startCond; $f.width = width; $f.width1 = width1; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	machine.prototype.onepass = function(i, pos, ncap) { return this.$val.onepass(i, pos, ncap); };
	Regexp.ptr.prototype.doMatch = function(r, b, s) {
		var _r, b, r, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; r = $f.r; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute(r, b, s, 0, 0, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return !(_r === sliceType$2.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.doMatch }; } $f._r = _r; $f.b = b; $f.r = r; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.doMatch = function(r, b, s) { return this.$val.doMatch(r, b, s); };
	Regexp.ptr.prototype.doExecute = function(r, b, s, pos, ncap, dstCap) {
		var _r, _r$1, _r$2, b, dstCap, i, m, ncap, pos, r, re, s, size, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; dstCap = $f.dstCap; i = $f.i; m = $f.m; ncap = $f.ncap; pos = $f.pos; r = $f.r; re = $f.re; s = $f.s; size = $f.size; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		m = re.get();
		i = $ifaceNil;
		size = 0;
		if (!($interfaceIsEqual(r, $ifaceNil))) {
			i = m.newInputReader(r);
		} else if (!(b === sliceType$6.nil)) {
			i = m.newInputBytes(b);
			size = b.$length;
		} else {
			i = m.newInputString(s);
			size = s.length;
		}
		/* */ if (!(m.op === notOnePass)) { $s = 1; continue; }
		/* */ if (size < m.maxBitStateLen && $interfaceIsEqual(r, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!(m.op === notOnePass)) { */ case 1:
			_r = m.onepass(i, pos, ncap); /* */ $s = 7; case 7: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!_r) { */ case 5:
				re.put(m);
				$s = -1; return sliceType$2.nil;
			/* } */ case 6:
			$s = 4; continue;
		/* } else if (size < m.maxBitStateLen && $interfaceIsEqual(r, $ifaceNil)) { */ case 2:
			if (m.b === ptrType.nil) {
				m.b = newBitState(m.p);
			}
			_r$1 = m.backtrack(i, pos, size, ncap); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (!_r$1) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!_r$1) { */ case 8:
				re.put(m);
				$s = -1; return sliceType$2.nil;
			/* } */ case 9:
			$s = 4; continue;
		/* } else { */ case 3:
			m.init(ncap);
			_r$2 = m.match(i, pos); /* */ $s = 13; case 13: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			/* */ if (!_r$2) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!_r$2) { */ case 11:
				re.put(m);
				$s = -1; return sliceType$2.nil;
			/* } */ case 12:
		/* } */ case 4:
		dstCap = $appendSlice(dstCap, m.matchcap);
		if (dstCap === sliceType$2.nil) {
			dstCap = $subslice(new sliceType$2(arrayNoInts), 0, 0);
		}
		re.put(m);
		$s = -1; return dstCap;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.doExecute }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.dstCap = dstCap; $f.i = i; $f.m = m; $f.ncap = ncap; $f.pos = pos; $f.r = r; $f.re = re; $f.s = s; $f.size = size; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.doExecute = function(r, b, s, pos, ncap, dstCap) { return this.$val.doExecute(r, b, s, pos, ncap, dstCap); };
	onePassPrefix = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, buf, complete, i, p, pc, prefix, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		prefix = "";
		complete = false;
		pc = 0;
		i = (x = p.Inst, x$1 = p.Start, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		if (!((i.Op === 3)) || ((((((i.Arg << 24 >>> 24))) & 4) >>> 0) === 0)) {
			_tmp = "";
			_tmp$1 = i.Op === 4;
			_tmp$2 = ((p.Start >>> 0));
			prefix = _tmp;
			complete = _tmp$1;
			pc = _tmp$2;
			return [prefix, complete, pc];
		}
		pc = i.Out;
		i = (x$2 = p.Inst, ((pc < 0 || pc >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + pc]));
		while (true) {
			if (!(i.Op === 6)) { break; }
			pc = i.Out;
			i = (x$3 = p.Inst, ((pc < 0 || pc >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc]));
		}
		if (!((iop(i) === 7)) || !((i.Rune.$length === 1))) {
			_tmp$3 = "";
			_tmp$4 = i.Op === 4;
			_tmp$5 = ((p.Start >>> 0));
			prefix = _tmp$3;
			complete = _tmp$4;
			pc = _tmp$5;
			return [prefix, complete, pc];
		}
		buf = new bytes.Buffer.ptr(sliceType$6.nil, 0, 0, arrayType$2.zero());
		while (true) {
			if (!((iop(i) === 7) && (i.Rune.$length === 1) && (((((i.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { break; }
			buf.WriteRune((x$4 = i.Rune, (0 >= x$4.$length ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + 0])));
			_tmp$6 = i.Out;
			_tmp$7 = (x$5 = p.Inst, x$6 = i.Out, ((x$6 < 0 || x$6 >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + x$6]));
			pc = _tmp$6;
			i = _tmp$7;
		}
		if ((i.Op === 3) && !((((((i.Arg << 24 >>> 24)) & 8) >>> 0) === 0)) && ((x$7 = p.Inst, x$8 = i.Out, ((x$8 < 0 || x$8 >= x$7.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$7.$array[x$7.$offset + x$8])).Op === 4)) {
			complete = true;
		}
		_tmp$8 = buf.String();
		_tmp$9 = complete;
		_tmp$10 = pc;
		prefix = _tmp$8;
		complete = _tmp$9;
		pc = _tmp$10;
		return [prefix, complete, pc];
	};
	onePassNext = function(i, r) {
		var i, next, r, x;
		next = i.Inst.MatchRunePos(r);
		if (next >= 0) {
			return (x = i.Next, ((next < 0 || next >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + next]));
		}
		if (i.Inst.Op === 1) {
			return i.Inst.Out;
		}
		return 0;
	};
	iop = function(i) {
		var _1, i, op;
		op = i.Op;
		_1 = op;
		if ((_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
			op = 7;
		}
		return op;
	};
	queueOnePass.ptr.prototype.empty = function() {
		var q;
		q = this;
		return q.nextIndex >= q.size;
	};
	queueOnePass.prototype.empty = function() { return this.$val.empty(); };
	queueOnePass.ptr.prototype.next = function() {
		var n, q, x, x$1;
		n = 0;
		q = this;
		n = (x = q.dense, x$1 = q.nextIndex, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
		q.nextIndex = q.nextIndex + (1) >>> 0;
		return n;
	};
	queueOnePass.prototype.next = function() { return this.$val.next(); };
	queueOnePass.ptr.prototype.clear = function() {
		var q;
		q = this;
		q.size = 0;
		q.nextIndex = 0;
	};
	queueOnePass.prototype.clear = function() { return this.$val.clear(); };
	queueOnePass.ptr.prototype.contains = function(u) {
		var q, u, x, x$1, x$2, x$3;
		q = this;
		if (u >= ((q.sparse.$length >>> 0))) {
			return false;
		}
		return (x = q.sparse, ((u < 0 || u >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + u])) < q.size && ((x$1 = q.dense, x$2 = (x$3 = q.sparse, ((u < 0 || u >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + u])), ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2])) === u);
	};
	queueOnePass.prototype.contains = function(u) { return this.$val.contains(u); };
	queueOnePass.ptr.prototype.insert = function(u) {
		var q, u;
		q = this;
		if (!q.contains(u)) {
			q.insertNew(u);
		}
	};
	queueOnePass.prototype.insert = function(u) { return this.$val.insert(u); };
	queueOnePass.ptr.prototype.insertNew = function(u) {
		var q, u, x, x$1, x$2;
		q = this;
		if (u >= ((q.sparse.$length >>> 0))) {
			return;
		}
		(x = q.sparse, ((u < 0 || u >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + u] = q.size));
		(x$1 = q.dense, x$2 = q.size, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2] = u));
		q.size = q.size + (1) >>> 0;
	};
	queueOnePass.prototype.insertNew = function(u) { return this.$val.insertNew(u); };
	newQueue = function(size) {
		var q, size;
		q = ptrType$7.nil;
		q = new queueOnePass.ptr($makeSlice(sliceType$1, size), $makeSlice(sliceType$1, size), 0, 0);
		return q;
	};
	mergeRuneSets = function(leftRunes, rightRunes, leftPC, rightPC) {
		var _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, extend, ix, leftLen, leftPC, leftRunes, lx, merged, next, ok, rightLen, rightPC, rightRunes, rx, x, x$1, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; extend = $f.extend; ix = $f.ix; leftLen = $f.leftLen; leftPC = $f.leftPC; leftRunes = $f.leftRunes; lx = $f.lx; merged = $f.merged; next = $f.next; ok = $f.ok; rightLen = $f.rightLen; rightPC = $f.rightPC; rightRunes = $f.rightRunes; rx = $f.rx; x = $f.x; x$1 = $f.x$1; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		ix = [ix];
		lx = [lx];
		merged = [merged];
		next = [next];
		ok = [ok];
		rx = [rx];
		leftLen = leftRunes.$get().$length;
		rightLen = rightRunes.$get().$length;
		if (!(((leftLen & 1) === 0)) || !(((rightLen & 1) === 0))) {
			$panic(new $String("mergeRuneSets odd length []rune"));
		}
		_tmp = 0;
		_tmp$1 = 0;
		lx[0] = _tmp;
		rx[0] = _tmp$1;
		merged[0] = $makeSlice(sliceType, 0);
		next[0] = $makeSlice(sliceType$1, 0);
		ok[0] = true;
		$deferred.push([(function(ix, lx, merged, next, ok, rx) { return function() {
			if (!ok[0]) {
				merged[0] = sliceType.nil;
				next[0] = sliceType$1.nil;
			}
		}; })(ix, lx, merged, next, ok, rx), []]);
		ix[0] = -1;
		extend = (function(ix, lx, merged, next, ok, rx) { return function(newLow, newArray, pc) {
			var newArray, newLow, pc, x, x$1, x$2, x$3, x$4, x$5;
			if (ix[0] > 0 && (x = newArray.$get(), x$1 = newLow.$get(), ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) <= ((ix[0] < 0 || ix[0] >= merged[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : merged[0].$array[merged[0].$offset + ix[0]])) {
				return false;
			}
			merged[0] = $append(merged[0], (x$2 = newArray.$get(), x$3 = newLow.$get(), ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])), (x$4 = newArray.$get(), x$5 = newLow.$get() + 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])));
			newLow.$set(newLow.$get() + (2) >> 0);
			ix[0] = ix[0] + (2) >> 0;
			next[0] = $append(next[0], pc);
			return true;
		}; })(ix, lx, merged, next, ok, rx);
		/* while (true) { */ case 1:
			/* if (!(lx[0] < leftLen || rx[0] < rightLen)) { break; } */ if(!(lx[0] < leftLen || rx[0] < rightLen)) { $s = 2; continue; }
				/* */ if (rx[0] >= rightLen) { $s = 4; continue; }
				/* */ if (lx[0] >= leftLen) { $s = 5; continue; }
				/* */ if ((x = rightRunes.$get(), ((rx[0] < 0 || rx[0] >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + rx[0]])) < (x$1 = leftRunes.$get(), ((lx[0] < 0 || lx[0] >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + lx[0]]))) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (rx[0] >= rightLen) { */ case 4:
					_r = extend((lx.$ptr || (lx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, lx))), leftRunes, leftPC); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					ok[0] = _r;
					$s = 8; continue;
				/* } else if (lx[0] >= leftLen) { */ case 5:
					_r$1 = extend((rx.$ptr || (rx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rx))), rightRunes, rightPC); /* */ $s = 10; case 10: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					ok[0] = _r$1;
					$s = 8; continue;
				/* } else if ((x = rightRunes.$get(), ((rx[0] < 0 || rx[0] >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + rx[0]])) < (x$1 = leftRunes.$get(), ((lx[0] < 0 || lx[0] >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + lx[0]]))) { */ case 6:
					_r$2 = extend((rx.$ptr || (rx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, rx))), rightRunes, rightPC); /* */ $s = 11; case 11: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					ok[0] = _r$2;
					$s = 8; continue;
				/* } else { */ case 7:
					_r$3 = extend((lx.$ptr || (lx.$ptr = new ptrType$6(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, lx))), leftRunes, leftPC); /* */ $s = 12; case 12: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ok[0] = _r$3;
				/* } */ case 8:
			case 3:
			if (!ok[0]) {
				$s = -1; return [noRune, noNext];
			}
		/* } */ $s = 1; continue; case 2:
		$s = -1; return [merged[0], next[0]];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [sliceType.nil, sliceType$1.nil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: mergeRuneSets }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f.extend = extend; $f.ix = ix; $f.leftLen = leftLen; $f.leftPC = leftPC; $f.leftRunes = leftRunes; $f.lx = lx; $f.merged = merged; $f.next = next; $f.ok = ok; $f.rightLen = rightLen; $f.rightPC = rightPC; $f.rightRunes = rightRunes; $f.rx = rx; $f.x = x; $f.x$1 = x$1; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	cleanupOnePass = function(prog, original) {
		var _1, _i, _ref, instOriginal, ix, original, prog, x, x$1, x$2;
		_ref = original.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			ix = _i;
			instOriginal = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			_1 = instOriginal.Op;
			if ((_1 === (0)) || (_1 === (1)) || (_1 === (7))) {
			} else if ((_1 === (2)) || (_1 === (3)) || (_1 === (6)) || (_1 === (4)) || (_1 === (5))) {
				(x = prog.Inst, ((ix < 0 || ix >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + ix])).Next = sliceType$1.nil;
			} else if ((_1 === (8)) || (_1 === (9)) || (_1 === (10))) {
				(x$1 = prog.Inst, ((ix < 0 || ix >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + ix])).Next = sliceType$1.nil;
				onePassInst.copy((x$2 = prog.Inst, ((ix < 0 || ix >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + ix])), new onePassInst.ptr($clone(instOriginal, syntax.Inst), sliceType$1.nil));
			}
			_i++;
		}
	};
	onePassCopy = function(prog) {
		var _1, _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, i, inst, instAlt, instOther, p, p_A_Alt, p_A_Other, p_B_Alt, p_B_Other, patch, pc, prog, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		p = new onePassProg.ptr($makeSlice(sliceType$7, prog.Inst.$length), prog.Start, prog.NumCap);
		_ref = prog.Inst;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			inst = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			onePassInst.copy((x = p.Inst, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])), new onePassInst.ptr($clone(inst, syntax.Inst), sliceType$1.nil));
			_i++;
		}
		_ref$1 = p.Inst;
		_i$1 = 0;
		while (true) {
			if (!(_i$1 < _ref$1.$length)) { break; }
			pc = _i$1;
			_1 = (x$1 = p.Inst, ((pc < 0 || pc >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + pc])).Inst.Op;
			if ((_1 === (0)) || (_1 === (1))) {
				p_A_Other = (x$2 = (x$3 = p.Inst, ((pc < 0 || pc >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + pc])), (x$2.$ptr_Out || (x$2.$ptr_Out = new ptrType$8(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, x$2))));
				p_A_Alt = (x$4 = (x$5 = p.Inst, ((pc < 0 || pc >= x$5.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$5.$array[x$5.$offset + pc])), (x$4.$ptr_Arg || (x$4.$ptr_Arg = new ptrType$8(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, x$4))));
				instAlt = $clone((x$6 = p.Inst, x$7 = p_A_Alt.$get(), ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])), onePassInst);
				if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
					_tmp = p_A_Other;
					_tmp$1 = p_A_Alt;
					p_A_Alt = _tmp;
					p_A_Other = _tmp$1;
					onePassInst.copy(instAlt, (x$8 = p.Inst, x$9 = p_A_Alt.$get(), ((x$9 < 0 || x$9 >= x$8.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$8.$array[x$8.$offset + x$9])));
					if (!((instAlt.Inst.Op === 0) || (instAlt.Inst.Op === 1))) {
						_i$1++;
						continue;
					}
				}
				instOther = $clone((x$10 = p.Inst, x$11 = p_A_Other.$get(), ((x$11 < 0 || x$11 >= x$10.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + x$11])), onePassInst);
				if ((instOther.Inst.Op === 0) || (instOther.Inst.Op === 1)) {
					_i$1++;
					continue;
				}
				p_B_Alt = (x$12 = (x$13 = p.Inst, x$14 = p_A_Alt.$get(), ((x$14 < 0 || x$14 >= x$13.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + x$14])), (x$12.$ptr_Out || (x$12.$ptr_Out = new ptrType$8(function() { return this.$target.Inst.Out; }, function($v) { this.$target.Inst.Out = $v; }, x$12))));
				p_B_Other = (x$15 = (x$16 = p.Inst, x$17 = p_A_Alt.$get(), ((x$17 < 0 || x$17 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + x$17])), (x$15.$ptr_Arg || (x$15.$ptr_Arg = new ptrType$8(function() { return this.$target.Inst.Arg; }, function($v) { this.$target.Inst.Arg = $v; }, x$15))));
				patch = false;
				if (instAlt.Inst.Out === ((pc >>> 0))) {
					patch = true;
				} else if (instAlt.Inst.Arg === ((pc >>> 0))) {
					patch = true;
					_tmp$2 = p_B_Other;
					_tmp$3 = p_B_Alt;
					p_B_Alt = _tmp$2;
					p_B_Other = _tmp$3;
				}
				if (patch) {
					p_B_Alt.$set(p_A_Other.$get());
				}
				if (p_A_Other.$get() === p_B_Alt.$get()) {
					p_A_Alt.$set(p_B_Other.$get());
				}
			} else {
				_i$1++;
				continue;
			}
			_i$1++;
		}
		return p;
	};
	runeSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(runeSlice).prototype.Len = function() { return this.$get().Len(); };
	runeSlice.prototype.Less = function(i, j) {
		var i, j, p;
		p = this;
		return ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
	};
	$ptrType(runeSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	runeSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j]);
		_tmp$1 = ((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i]);
		((i < 0 || i >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + i] = _tmp);
		((j < 0 || j >= p.$length) ? ($throwRuntimeError("index out of range"), undefined) : p.$array[p.$offset + j] = _tmp$1);
	};
	$ptrType(runeSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	makeOnePass = function(p) {
		var _i, _r, _ref, check, i, instQueue, m, onePassRunes, p, pc, visitQueue, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; check = $f.check; i = $f.i; instQueue = $f.instQueue; m = $f.m; onePassRunes = $f.onePassRunes; p = $f.p; pc = $f.pc; visitQueue = $f.visitQueue; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		check = [check];
		instQueue = [instQueue];
		onePassRunes = [onePassRunes];
		p = [p];
		visitQueue = [visitQueue];
		if (p[0].Inst.$length >= 1000) {
			$s = -1; return notOnePass;
		}
		instQueue[0] = newQueue(p[0].Inst.$length);
		visitQueue[0] = newQueue(p[0].Inst.$length);
		check[0] = $throwNilPointerError;
		onePassRunes[0] = $makeSlice(sliceType$8, p[0].Inst.$length);
		check[0] = (function(check, instQueue, onePassRunes, p, visitQueue) { return function $b(pc, m) {
			var _1, _i, _i$1, _i$2, _i$3, _i$4, _q, _q$1, _q$2, _q$3, _q$4, _r, _r$1, _r$2, _r$3, _r$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _v, i, i$1, i$2, i$3, i$4, inst, m, matchArg, matchOut, ok, pc, r0, r0$1, r1, r1$1, runes, runes$1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _i$1 = $f._i$1; _i$2 = $f._i$2; _i$3 = $f._i$3; _i$4 = $f._i$4; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _q$4 = $f._q$4; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; _ref$1 = $f._ref$1; _ref$2 = $f._ref$2; _ref$3 = $f._ref$3; _ref$4 = $f._ref$4; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tmp$3 = $f._tmp$3; _tuple = $f._tuple; _v = $f._v; i = $f.i; i$1 = $f.i$1; i$2 = $f.i$2; i$3 = $f.i$3; i$4 = $f.i$4; inst = $f.inst; m = $f.m; matchArg = $f.matchArg; matchOut = $f.matchOut; ok = $f.ok; pc = $f.pc; r0 = $f.r0; r0$1 = $f.r0$1; r1 = $f.r1; r1$1 = $f.r1$1; runes = $f.runes; runes$1 = $f.runes$1; x = $f.x; x$1 = $f.x$1; x$10 = $f.x$10; x$11 = $f.x$11; x$12 = $f.x$12; x$13 = $f.x$13; x$14 = $f.x$14; x$15 = $f.x$15; x$16 = $f.x$16; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; x$8 = $f.x$8; x$9 = $f.x$9; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			ok = false;
			ok = true;
			inst = (x = p[0].Inst, ((pc < 0 || pc >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pc]));
			if (visitQueue[0].contains(pc)) {
				$s = -1; return ok;
			}
			visitQueue[0].insert(pc);
				_1 = inst.Inst.Op;
				/* */ if ((_1 === (0)) || (_1 === (1))) { $s = 2; continue; }
				/* */ if ((_1 === (2)) || (_1 === (6))) { $s = 3; continue; }
				/* */ if (_1 === (3)) { $s = 4; continue; }
				/* */ if ((_1 === (4)) || (_1 === (5))) { $s = 5; continue; }
				/* */ if (_1 === (7)) { $s = 6; continue; }
				/* */ if (_1 === (8)) { $s = 7; continue; }
				/* */ if (_1 === (9)) { $s = 8; continue; }
				/* */ if (_1 === (10)) { $s = 9; continue; }
				/* */ $s = 10; continue;
				/* if ((_1 === (0)) || (_1 === (1))) { */ case 2:
					_r = check[0](inst.Inst.Out, m); /* */ $s = 12; case 12: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
					if (!(_r)) { _v = false; $s = 11; continue s; }
					_r$1 = check[0](inst.Inst.Arg, m); /* */ $s = 13; case 13: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_v = _r$1; case 11:
					ok = _v;
					matchOut = (x$1 = inst.Inst.Out, ((x$1 < 0 || x$1 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$1]));
					matchArg = (x$2 = inst.Inst.Arg, ((x$2 < 0 || x$2 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$2]));
					if (matchOut && matchArg) {
						ok = false;
						/* break; */ $s = 1; continue;
					}
					if (matchArg) {
						_tmp = inst.Inst.Arg;
						_tmp$1 = inst.Inst.Out;
						inst.Inst.Out = _tmp;
						inst.Inst.Arg = _tmp$1;
						_tmp$2 = matchArg;
						_tmp$3 = matchOut;
						matchOut = _tmp$2;
						matchArg = _tmp$3;
					}
					if (matchOut) {
						((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = true);
						inst.Inst.Op = 1;
					}
					_r$2 = mergeRuneSets($indexPtr(onePassRunes[0].$array, onePassRunes[0].$offset + inst.Inst.Out, ptrType$9), $indexPtr(onePassRunes[0].$array, onePassRunes[0].$offset + inst.Inst.Arg, ptrType$9), inst.Inst.Out, inst.Inst.Arg); /* */ $s = 14; case 14: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					_tuple = _r$2;
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = _tuple[0]);
					inst.Next = _tuple[1];
					if (inst.Next.$length > 0 && ((x$3 = inst.Next, (0 >= x$3.$length ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + 0])) === 4294967295)) {
						ok = false;
						/* break; */ $s = 1; continue;
					}
					$s = 10; continue;
				/* } else if ((_1 === (2)) || (_1 === (6))) { */ case 3:
					_r$3 = check[0](inst.Inst.Out, m); /* */ $s = 15; case 15: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
					ok = _r$3;
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = (x$4 = inst.Inst.Out, ((x$4 < 0 || x$4 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$4])));
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType([]), (x$5 = inst.Inst.Out, ((x$5 < 0 || x$5 >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + x$5]))));
					inst.Next = $makeSlice(sliceType$1, ((_q = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref = inst.Next;
					_i = 0;
					while (true) {
						if (!(_i < _ref.$length)) { break; }
						i = _i;
						(x$6 = inst.Next, ((i < 0 || i >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + i] = inst.Inst.Out));
						_i++;
					}
					$s = 10; continue;
				/* } else if (_1 === (3)) { */ case 4:
					_r$4 = check[0](inst.Inst.Out, m); /* */ $s = 16; case 16: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					ok = _r$4;
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = (x$7 = inst.Inst.Out, ((x$7 < 0 || x$7 >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + x$7])));
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType([]), (x$8 = inst.Inst.Out, ((x$8 < 0 || x$8 >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + x$8]))));
					inst.Next = $makeSlice(sliceType$1, ((_q$1 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$1 = inst.Next;
					_i$1 = 0;
					while (true) {
						if (!(_i$1 < _ref$1.$length)) { break; }
						i$1 = _i$1;
						(x$9 = inst.Next, ((i$1 < 0 || i$1 >= x$9.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$9.$array[x$9.$offset + i$1] = inst.Inst.Out));
						_i$1++;
					}
					$s = 10; continue;
				/* } else if ((_1 === (4)) || (_1 === (5))) { */ case 5:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = (inst.Inst.Op === 4));
					$s = 10; continue;
				/* } else if (_1 === (7)) { */ case 6:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					if (inst.Inst.Rune.$length === 0) {
						((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = new sliceType([]));
						inst.Next = new sliceType$1([inst.Inst.Out]);
						/* break; */ $s = 1; continue;
					}
					runes = $makeSlice(sliceType, 0);
					/* */ if ((inst.Inst.Rune.$length === 1) && !((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { $s = 17; continue; }
					/* */ $s = 18; continue;
					/* if ((inst.Inst.Rune.$length === 1) && !((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { */ case 17:
						r0 = (x$10 = inst.Inst.Rune, (0 >= x$10.$length ? ($throwRuntimeError("index out of range"), undefined) : x$10.$array[x$10.$offset + 0]));
						runes = $append(runes, r0, r0);
						r1 = unicode.SimpleFold(r0);
						while (true) {
							if (!(!((r1 === r0)))) { break; }
							runes = $append(runes, r1, r1);
							r1 = unicode.SimpleFold(r1);
						}
						$r = sort.Sort(($subslice(new runeSlice(runes.$array), runes.$offset, runes.$offset + runes.$length))); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 19; continue;
					/* } else { */ case 18:
						runes = $appendSlice(runes, inst.Inst.Rune);
					/* } */ case 19:
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = runes);
					inst.Next = $makeSlice(sliceType$1, ((_q$2 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$2 = inst.Next;
					_i$2 = 0;
					while (true) {
						if (!(_i$2 < _ref$2.$length)) { break; }
						i$2 = _i$2;
						(x$11 = inst.Next, ((i$2 < 0 || i$2 >= x$11.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$11.$array[x$11.$offset + i$2] = inst.Inst.Out));
						_i$2++;
					}
					inst.Inst.Op = 7;
					$s = 10; continue;
				/* } else if (_1 === (8)) { */ case 7:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					runes$1 = new sliceType([]);
					/* */ if (!((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!((((((inst.Inst.Arg << 16 >>> 16)) & 1) >>> 0) === 0))) { */ case 21:
						r0$1 = (x$12 = inst.Inst.Rune, (0 >= x$12.$length ? ($throwRuntimeError("index out of range"), undefined) : x$12.$array[x$12.$offset + 0]));
						runes$1 = $append(runes$1, r0$1, r0$1);
						r1$1 = unicode.SimpleFold(r0$1);
						while (true) {
							if (!(!((r1$1 === r0$1)))) { break; }
							runes$1 = $append(runes$1, r1$1, r1$1);
							r1$1 = unicode.SimpleFold(r1$1);
						}
						$r = sort.Sort(($subslice(new runeSlice(runes$1.$array), runes$1.$offset, runes$1.$offset + runes$1.$length))); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 23; continue;
					/* } else { */ case 22:
						runes$1 = $append(runes$1, (x$13 = inst.Inst.Rune, (0 >= x$13.$length ? ($throwRuntimeError("index out of range"), undefined) : x$13.$array[x$13.$offset + 0])), (x$14 = inst.Inst.Rune, (0 >= x$14.$length ? ($throwRuntimeError("index out of range"), undefined) : x$14.$array[x$14.$offset + 0])));
					/* } */ case 23:
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = runes$1);
					inst.Next = $makeSlice(sliceType$1, ((_q$3 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$3 = inst.Next;
					_i$3 = 0;
					while (true) {
						if (!(_i$3 < _ref$3.$length)) { break; }
						i$3 = _i$3;
						(x$15 = inst.Next, ((i$3 < 0 || i$3 >= x$15.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$15.$array[x$15.$offset + i$3] = inst.Inst.Out));
						_i$3++;
					}
					inst.Inst.Op = 7;
					$s = 10; continue;
				/* } else if (_1 === (9)) { */ case 8:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType([]), anyRune));
					inst.Next = new sliceType$1([inst.Inst.Out]);
					$s = 10; continue;
				/* } else if (_1 === (10)) { */ case 9:
					((pc < 0 || pc >= m.$length) ? ($throwRuntimeError("index out of range"), undefined) : m.$array[m.$offset + pc] = false);
					if (inst.Next.$length > 0) {
						/* break; */ $s = 1; continue;
					}
					instQueue[0].insert(inst.Inst.Out);
					((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc] = $appendSlice(new sliceType([]), anyRuneNotNL));
					inst.Next = $makeSlice(sliceType$1, ((_q$4 = ((pc < 0 || pc >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + pc]).$length / 2, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0));
					_ref$4 = inst.Next;
					_i$4 = 0;
					while (true) {
						if (!(_i$4 < _ref$4.$length)) { break; }
						i$4 = _i$4;
						(x$16 = inst.Next, ((i$4 < 0 || i$4 >= x$16.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$16.$array[x$16.$offset + i$4] = inst.Inst.Out));
						_i$4++;
					}
				/* } */ case 10:
			case 1:
			$s = -1; return ok;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._1 = _1; $f._i = _i; $f._i$1 = _i$1; $f._i$2 = _i$2; $f._i$3 = _i$3; $f._i$4 = _i$4; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._q$4 = _q$4; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f._ref$1 = _ref$1; $f._ref$2 = _ref$2; $f._ref$3 = _ref$3; $f._ref$4 = _ref$4; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tmp$3 = _tmp$3; $f._tuple = _tuple; $f._v = _v; $f.i = i; $f.i$1 = i$1; $f.i$2 = i$2; $f.i$3 = i$3; $f.i$4 = i$4; $f.inst = inst; $f.m = m; $f.matchArg = matchArg; $f.matchOut = matchOut; $f.ok = ok; $f.pc = pc; $f.r0 = r0; $f.r0$1 = r0$1; $f.r1 = r1; $f.r1$1 = r1$1; $f.runes = runes; $f.runes$1 = runes$1; $f.x = x; $f.x$1 = x$1; $f.x$10 = x$10; $f.x$11 = x$11; $f.x$12 = x$12; $f.x$13 = x$13; $f.x$14 = x$14; $f.x$15 = x$15; $f.x$16 = x$16; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.x$8 = x$8; $f.x$9 = x$9; $f.$s = $s; $f.$r = $r; return $f;
		}; })(check, instQueue, onePassRunes, p, visitQueue);
		instQueue[0].clear();
		instQueue[0].insert(((p[0].Start >>> 0)));
		m = $makeSlice(sliceType$9, p[0].Inst.$length);
		/* while (true) { */ case 1:
			/* if (!(!instQueue[0].empty())) { break; } */ if(!(!instQueue[0].empty())) { $s = 2; continue; }
			visitQueue[0].clear();
			pc = instQueue[0].next();
			_r = check[0](pc, m); /* */ $s = 5; case 5: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (!_r) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (!_r) { */ case 3:
				p[0] = notOnePass;
				/* break; */ $s = 2; continue;
			/* } */ case 4:
		/* } */ $s = 1; continue; case 2:
		if (!(p[0] === notOnePass)) {
			_ref = p[0].Inst;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				i = _i;
				(x = p[0].Inst, ((i < 0 || i >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + i])).Inst.Rune = ((i < 0 || i >= onePassRunes[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : onePassRunes[0].$array[onePassRunes[0].$offset + i]);
				_i++;
			}
		}
		$s = -1; return p[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: makeOnePass }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.check = check; $f.i = i; $f.instQueue = instQueue; $f.m = m; $f.onePassRunes = onePassRunes; $f.p = p; $f.pc = pc; $f.visitQueue = visitQueue; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	compileOnePass = function(prog) {
		var _1, _i, _r, _ref, inst, opOut, p, prog, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _i = $f._i; _r = $f._r; _ref = $f._ref; inst = $f.inst; opOut = $f.opOut; p = $f.p; prog = $f.prog; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; x$3 = $f.x$3; x$4 = $f.x$4; x$5 = $f.x$5; x$6 = $f.x$6; x$7 = $f.x$7; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = ptrType$1.nil;
		if (prog.Start === 0) {
			p = notOnePass;
			$s = -1; return p;
		}
		if (!(((x = prog.Inst, x$1 = prog.Start, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])).Op === 3)) || !(((((((x$2 = prog.Inst, x$3 = prog.Start, ((x$3 < 0 || x$3 >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + x$3])).Arg << 24 >>> 24)) & 4) >>> 0) === 4))) {
			p = notOnePass;
			$s = -1; return p;
		}
		_ref = prog.Inst;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			inst = $clone(((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]), syntax.Inst);
			opOut = (x$4 = prog.Inst, x$5 = inst.Out, ((x$5 < 0 || x$5 >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + x$5])).Op;
			_1 = inst.Op;
			if ((_1 === (0)) || (_1 === (1))) {
				if ((opOut === 4) || ((x$6 = prog.Inst, x$7 = inst.Arg, ((x$7 < 0 || x$7 >= x$6.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$6.$array[x$6.$offset + x$7])).Op === 4)) {
					p = notOnePass;
					$s = -1; return p;
				}
			} else if (_1 === (3)) {
				if (opOut === 4) {
					if (((((inst.Arg << 24 >>> 24)) & 8) >>> 0) === 8) {
						_i++;
						/* continue; */ $s = 1; continue;
					}
					p = notOnePass;
					$s = -1; return p;
				}
			} else if (opOut === 4) {
				p = notOnePass;
				$s = -1; return p;
			}
			_i++;
		/* } */ $s = 1; continue; case 2:
		p = onePassCopy(prog);
		_r = makeOnePass(p); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		p = _r;
		if (!(p === notOnePass)) {
			cleanupOnePass(p, prog);
		}
		p = p;
		$s = -1; return p;
		/* */ } return; } if ($f === undefined) { $f = { $blk: compileOnePass }; } $f._1 = _1; $f._i = _i; $f._r = _r; $f._ref = _ref; $f.inst = inst; $f.opOut = opOut; $f.p = p; $f.prog = prog; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.x$3 = x$3; $f.x$4 = x$4; $f.x$5 = x$5; $f.x$6 = x$6; $f.x$7 = x$7; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.ptr.prototype.String = function() {
		var re;
		re = this;
		return re.regexpRO.expr;
	};
	Regexp.prototype.String = function() { return this.$val.String(); };
	Regexp.ptr.prototype.Copy = function() {
		var re;
		re = this;
		return new Regexp.ptr($clone(re.regexpRO, regexpRO), new nosync.Mutex.ptr(false), sliceType$11.nil);
	};
	Regexp.prototype.Copy = function() { return this.$val.Copy(); };
	Compile = function(expr) {
		var _r, expr, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; expr = $f.expr; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = compile(expr, 212, false); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Compile }; } $f._r = _r; $f.expr = expr; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Compile = Compile;
	Regexp.ptr.prototype.Longest = function() {
		var re;
		re = this;
		re.regexpRO.longest = true;
	};
	Regexp.prototype.Longest = function() { return this.$val.Longest(); };
	compile = function(expr, mode, longest) {
		var _r, _r$1, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, capNames, err, expr, longest, maxCap, mode, prog, re, regexp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; _tuple$2 = $f._tuple$2; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; capNames = $f.capNames; err = $f.err; expr = $f.expr; longest = $f.longest; maxCap = $f.maxCap; mode = $f.mode; prog = $f.prog; re = $f.re; regexp = $f.regexp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = syntax.Parse(expr, mode); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		re = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
		}
		maxCap = re.MaxCap();
		capNames = re.CapNames();
		re = re.Simplify();
		_tuple$1 = syntax.Compile(re);
		prog = _tuple$1[0];
		err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$s = -1; return [ptrType$3.nil, err];
		}
		_r$1 = compileOnePass(prog); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		regexp = new Regexp.ptr(new regexpRO.ptr(expr, prog, _r$1, "", sliceType$6.nil, false, 0, 0, prog.StartCond(), maxCap, capNames, longest), new nosync.Mutex.ptr(false), sliceType$11.nil);
		if (regexp.regexpRO.onepass === notOnePass) {
			_tuple$2 = prog.Prefix();
			regexp.regexpRO.prefix = _tuple$2[0];
			regexp.regexpRO.prefixComplete = _tuple$2[1];
		} else {
			_tuple$3 = onePassPrefix(prog);
			regexp.regexpRO.prefix = _tuple$3[0];
			regexp.regexpRO.prefixComplete = _tuple$3[1];
			regexp.regexpRO.prefixEnd = _tuple$3[2];
		}
		if (!(regexp.regexpRO.prefix === "")) {
			regexp.regexpRO.prefixBytes = (new sliceType$6($stringToBytes(regexp.regexpRO.prefix)));
			_tuple$4 = utf8.DecodeRuneInString(regexp.regexpRO.prefix);
			regexp.regexpRO.prefixRune = _tuple$4[0];
		}
		$s = -1; return [regexp, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: compile }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f._tuple$2 = _tuple$2; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f.capNames = capNames; $f.err = err; $f.expr = expr; $f.longest = longest; $f.maxCap = maxCap; $f.mode = mode; $f.prog = prog; $f.re = re; $f.regexp = regexp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.ptr.prototype.get = function() {
		var n, re, x, x$1, z, z$1;
		re = this;
		re.mu.Lock();
		n = re.machine.$length;
		if (n > 0) {
			z = (x = re.machine, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1]));
			re.machine = $subslice(re.machine, 0, (n - 1 >> 0));
			re.mu.Unlock();
			return z;
		}
		re.mu.Unlock();
		z$1 = progMachine(re.regexpRO.prog, re.regexpRO.onepass);
		z$1.re = re;
		return z$1;
	};
	Regexp.prototype.get = function() { return this.$val.get(); };
	Regexp.ptr.prototype.put = function(z) {
		var re, z;
		re = this;
		re.mu.Lock();
		re.machine = $append(re.machine, z);
		re.mu.Unlock();
	};
	Regexp.prototype.put = function(z) { return this.$val.put(z); };
	Regexp.ptr.prototype.NumSubexp = function() {
		var re;
		re = this;
		return re.regexpRO.numSubexp;
	};
	Regexp.prototype.NumSubexp = function() { return this.$val.NumSubexp(); };
	Regexp.ptr.prototype.SubexpNames = function() {
		var re;
		re = this;
		return re.regexpRO.subexpNames;
	};
	Regexp.prototype.SubexpNames = function() { return this.$val.SubexpNames(); };
	inputString.ptr.prototype.step = function(pos) {
		var c, i, pos;
		i = this;
		if (pos < i.str.length) {
			c = i.str.charCodeAt(pos);
			if (c < 128) {
				return [((c >> 0)), 1];
			}
			return utf8.DecodeRuneInString($substring(i.str, pos));
		}
		return [-1, 0];
	};
	inputString.prototype.step = function(pos) { return this.$val.step(pos); };
	inputString.ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputString.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputString.ptr.prototype.hasPrefix = function(re) {
		var i, re;
		i = this;
		return strings.HasPrefix(i.str, re.regexpRO.prefix);
	};
	inputString.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputString.ptr.prototype.index = function(re, pos) {
		var i, pos, re;
		i = this;
		return strings.Index($substring(i.str, pos), re.regexpRO.prefix);
	};
	inputString.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputString.ptr.prototype.context = function(pos) {
		var _tmp, _tmp$1, _tuple, _tuple$1, i, pos, r1, r2;
		i = this;
		_tmp = -1;
		_tmp$1 = -1;
		r1 = _tmp;
		r2 = _tmp$1;
		if ((((pos - 1 >> 0) >>> 0)) < ((i.str.length >>> 0))) {
			r1 = ((i.str.charCodeAt((pos - 1 >> 0)) >> 0));
			if (r1 >= 128) {
				_tuple = utf8.DecodeLastRuneInString($substring(i.str, 0, pos));
				r1 = _tuple[0];
			}
		}
		if (((pos >>> 0)) < ((i.str.length >>> 0))) {
			r2 = ((i.str.charCodeAt(pos) >> 0));
			if (r2 >= 128) {
				_tuple$1 = utf8.DecodeRuneInString($substring(i.str, pos));
				r2 = _tuple$1[0];
			}
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputString.prototype.context = function(pos) { return this.$val.context(pos); };
	inputBytes.ptr.prototype.step = function(pos) {
		var c, i, pos, x;
		i = this;
		if (pos < i.str.$length) {
			c = (x = i.str, ((pos < 0 || pos >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + pos]));
			if (c < 128) {
				return [((c >> 0)), 1];
			}
			return utf8.DecodeRune($subslice(i.str, pos));
		}
		return [-1, 0];
	};
	inputBytes.prototype.step = function(pos) { return this.$val.step(pos); };
	inputBytes.ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return true;
	};
	inputBytes.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputBytes.ptr.prototype.hasPrefix = function(re) {
		var i, re;
		i = this;
		return bytes.HasPrefix(i.str, re.regexpRO.prefixBytes);
	};
	inputBytes.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputBytes.ptr.prototype.index = function(re, pos) {
		var i, pos, re;
		i = this;
		return bytes.Index($subslice(i.str, pos), re.regexpRO.prefixBytes);
	};
	inputBytes.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputBytes.ptr.prototype.context = function(pos) {
		var _tmp, _tmp$1, _tuple, _tuple$1, i, pos, r1, r2, x, x$1, x$2;
		i = this;
		_tmp = -1;
		_tmp$1 = -1;
		r1 = _tmp;
		r2 = _tmp$1;
		if ((((pos - 1 >> 0) >>> 0)) < ((i.str.$length >>> 0))) {
			r1 = (((x = i.str, x$1 = pos - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + x$1])) >> 0));
			if (r1 >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(i.str, 0, pos));
				r1 = _tuple[0];
			}
		}
		if (((pos >>> 0)) < ((i.str.$length >>> 0))) {
			r2 = (((x$2 = i.str, ((pos < 0 || pos >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + pos])) >> 0));
			if (r2 >= 128) {
				_tuple$1 = utf8.DecodeRune($subslice(i.str, pos));
				r2 = _tuple$1[0];
			}
		}
		return syntax.EmptyOpContext(r1, r2);
	};
	inputBytes.prototype.context = function(pos) { return this.$val.context(pos); };
	inputReader.ptr.prototype.step = function(pos) {
		var _r, _tuple, err, i, pos, r, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; i = $f.i; pos = $f.pos; r = $f.r; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		i = this;
		if (!i.atEOT && !((pos === i.pos))) {
			$s = -1; return [-1, 0];
		}
		_r = i.r.ReadRune(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		r = _tuple[0];
		w = _tuple[1];
		err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			i.atEOT = true;
			$s = -1; return [-1, 0];
		}
		i.pos = i.pos + (w) >> 0;
		$s = -1; return [r, w];
		/* */ } return; } if ($f === undefined) { $f = { $blk: inputReader.ptr.prototype.step }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.i = i; $f.pos = pos; $f.r = r; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	inputReader.prototype.step = function(pos) { return this.$val.step(pos); };
	inputReader.ptr.prototype.canCheckPrefix = function() {
		var i;
		i = this;
		return false;
	};
	inputReader.prototype.canCheckPrefix = function() { return this.$val.canCheckPrefix(); };
	inputReader.ptr.prototype.hasPrefix = function(re) {
		var i, re;
		i = this;
		return false;
	};
	inputReader.prototype.hasPrefix = function(re) { return this.$val.hasPrefix(re); };
	inputReader.ptr.prototype.index = function(re, pos) {
		var i, pos, re;
		i = this;
		return -1;
	};
	inputReader.prototype.index = function(re, pos) { return this.$val.index(re, pos); };
	inputReader.ptr.prototype.context = function(pos) {
		var i, pos;
		i = this;
		return 0;
	};
	inputReader.prototype.context = function(pos) { return this.$val.context(pos); };
	Regexp.ptr.prototype.LiteralPrefix = function() {
		var _tmp, _tmp$1, complete, prefix, re;
		prefix = "";
		complete = false;
		re = this;
		_tmp = re.regexpRO.prefix;
		_tmp$1 = re.regexpRO.prefixComplete;
		prefix = _tmp;
		complete = _tmp$1;
		return [prefix, complete];
	};
	Regexp.prototype.LiteralPrefix = function() { return this.$val.LiteralPrefix(); };
	Regexp.ptr.prototype.MatchReader = function(r) {
		var _r, r, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; r = $f.r; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doMatch(r, sliceType$6.nil, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.MatchReader }; } $f._r = _r; $f.r = r; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.MatchReader = function(r) { return this.$val.MatchReader(r); };
	Regexp.ptr.prototype.MatchString = function(s) {
		var _r, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doMatch($ifaceNil, sliceType$6.nil, s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.MatchString }; } $f._r = _r; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.MatchString = function(s) { return this.$val.MatchString(s); };
	Regexp.ptr.prototype.Match = function(b) {
		var _r, b, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doMatch($ifaceNil, b, ""); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.Match }; } $f._r = _r; $f.b = b; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.Match = function(b) { return this.$val.Match(b); };
	Regexp.ptr.prototype.ReplaceAllString = function(src, repl) {
		var _r, b, n, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; n = $f.n; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = [re];
		repl = [repl];
		src = [src];
		re[0] = this;
		n = 2;
		if (strings.Contains(repl[0], "$")) {
			n = $imul(2, ((re[0].regexpRO.numSubexp + 1 >> 0)));
		}
		_r = re[0].replaceAll(sliceType$6.nil, src[0], n, (function(re, repl, src) { return function(dst, match) {
			var dst, match;
			return re[0].expand(dst, repl[0], sliceType$6.nil, src[0], match);
		}; })(re, repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllString }; } $f._r = _r; $f.b = b; $f.n = n; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllString = function(src, repl) { return this.$val.ReplaceAllString(src, repl); };
	Regexp.ptr.prototype.ReplaceAllLiteralString = function(src, repl) {
		var _r, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		re = this;
		_r = re.replaceAll(sliceType$6.nil, src, 2, (function(repl) { return function(dst, match) {
			var dst, match;
			return $appendSlice(dst, repl[0]);
		}; })(repl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return ($bytesToString(_r));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllLiteralString }; } $f._r = _r; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllLiteralString = function(src, repl) { return this.$val.ReplaceAllLiteralString(src, repl); };
	Regexp.ptr.prototype.ReplaceAllStringFunc = function(src, repl) {
		var _r, b, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		src = [src];
		re = this;
		_r = re.replaceAll(sliceType$6.nil, src[0], 2, (function(repl, src) { return function $b(dst, match) {
			var _arg, _arg$1, _r, dst, match, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; dst = $f.dst; match = $f.match; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = dst;
			_r = repl[0]($substring(src[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			$s = -1; return $appendSlice(_arg, _arg$1);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.dst = dst; $f.match = match; $f.$s = $s; $f.$r = $r; return $f;
		}; })(repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return ($bytesToString(b));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllStringFunc }; } $f._r = _r; $f.b = b; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllStringFunc = function(src, repl) { return this.$val.ReplaceAllStringFunc(src, repl); };
	Regexp.ptr.prototype.replaceAll = function(bsrc, src, nmatch, repl) {
		var _r, _r$1, _tuple, _tuple$1, a, bsrc, buf, dstCap, endPos, lastMatchEnd, nmatch, re, repl, searchPos, src, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; a = $f.a; bsrc = $f.bsrc; buf = $f.buf; dstCap = $f.dstCap; endPos = $f.endPos; lastMatchEnd = $f.lastMatchEnd; nmatch = $f.nmatch; re = $f.re; repl = $f.repl; searchPos = $f.searchPos; src = $f.src; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		lastMatchEnd = 0;
		searchPos = 0;
		buf = sliceType$6.nil;
		endPos = 0;
		if (!(bsrc === sliceType$6.nil)) {
			endPos = bsrc.$length;
		} else {
			endPos = src.length;
		}
		if (nmatch > re.regexpRO.prog.NumCap) {
			nmatch = re.regexpRO.prog.NumCap;
		}
		dstCap = arrayType$3.zero();
		/* while (true) { */ case 1:
			/* if (!(searchPos <= endPos)) { break; } */ if(!(searchPos <= endPos)) { $s = 2; continue; }
			_r = re.doExecute($ifaceNil, bsrc, src, searchPos, nmatch, $subslice(new sliceType$2(dstCap), 0, 0)); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			a = _r;
			if (a.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			if (!(bsrc === sliceType$6.nil)) {
				buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0])));
			} else {
				buf = $appendSlice(buf, $substring(src, lastMatchEnd, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0])));
			}
			/* */ if ((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) > lastMatchEnd || ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === 0)) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if ((1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]) > lastMatchEnd || ((0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]) === 0)) { */ case 4:
				_r$1 = repl(buf, a); /* */ $s = 6; case 6: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				buf = _r$1;
			/* } */ case 5:
			lastMatchEnd = (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
			width = 0;
			if (!(bsrc === sliceType$6.nil)) {
				_tuple = utf8.DecodeRune($subslice(bsrc, searchPos));
				width = _tuple[1];
			} else {
				_tuple$1 = utf8.DecodeRuneInString($substring(src, searchPos));
				width = _tuple$1[1];
			}
			if ((searchPos + width >> 0) > (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1])) {
				searchPos = searchPos + (width) >> 0;
			} else if ((searchPos + 1 >> 0) > (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1])) {
				searchPos = searchPos + (1) >> 0;
			} else {
				searchPos = (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]);
			}
		/* } */ $s = 1; continue; case 2:
		if (!(bsrc === sliceType$6.nil)) {
			buf = $appendSlice(buf, $subslice(bsrc, lastMatchEnd));
		} else {
			buf = $appendSlice(buf, $substring(src, lastMatchEnd));
		}
		$s = -1; return buf;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.replaceAll }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.a = a; $f.bsrc = bsrc; $f.buf = buf; $f.dstCap = dstCap; $f.endPos = endPos; $f.lastMatchEnd = lastMatchEnd; $f.nmatch = nmatch; $f.re = re; $f.repl = repl; $f.searchPos = searchPos; $f.src = src; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.replaceAll = function(bsrc, src, nmatch, repl) { return this.$val.replaceAll(bsrc, src, nmatch, repl); };
	Regexp.ptr.prototype.ReplaceAll = function(src, repl) {
		var _r, b, n, re, repl, src, srepl, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; b = $f.b; n = $f.n; re = $f.re; repl = $f.repl; src = $f.src; srepl = $f.srepl; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = [re];
		repl = [repl];
		src = [src];
		srepl = [srepl];
		re[0] = this;
		n = 2;
		if (bytes.IndexByte(repl[0], 36) >= 0) {
			n = $imul(2, ((re[0].regexpRO.numSubexp + 1 >> 0)));
		}
		srepl[0] = "";
		_r = re[0].replaceAll(src[0], "", n, (function(re, repl, src, srepl) { return function(dst, match) {
			var dst, match;
			if (!((srepl[0].length === repl[0].$length))) {
				srepl[0] = ($bytesToString(repl[0]));
			}
			return re[0].expand(dst, srepl[0], src[0], "", match);
		}; })(re, repl, src, srepl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		b = _r;
		$s = -1; return b;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAll }; } $f._r = _r; $f.b = b; $f.n = n; $f.re = re; $f.repl = repl; $f.src = src; $f.srepl = srepl; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAll = function(src, repl) { return this.$val.ReplaceAll(src, repl); };
	Regexp.ptr.prototype.ReplaceAllLiteral = function(src, repl) {
		var _r, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		re = this;
		_r = re.replaceAll(src, "", 2, (function(repl) { return function(dst, match) {
			var dst, match;
			return $appendSlice(dst, repl[0]);
		}; })(repl)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllLiteral }; } $f._r = _r; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllLiteral = function(src, repl) { return this.$val.ReplaceAllLiteral(src, repl); };
	Regexp.ptr.prototype.ReplaceAllFunc = function(src, repl) {
		var _r, re, repl, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; re = $f.re; repl = $f.repl; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		repl = [repl];
		src = [src];
		re = this;
		_r = re.replaceAll(src[0], "", 2, (function(repl, src) { return function $b(dst, match) {
			var _arg, _arg$1, _r, dst, match, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; dst = $f.dst; match = $f.match; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = dst;
			_r = repl[0]($subslice(src[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$1 = _r;
			$s = -1; return $appendSlice(_arg, _arg$1);
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f.dst = dst; $f.match = match; $f.$s = $s; $f.$r = $r; return $f;
		}; })(repl, src)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.ReplaceAllFunc }; } $f._r = _r; $f.re = re; $f.repl = repl; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.ReplaceAllFunc = function(src, repl) { return this.$val.ReplaceAllFunc(src, repl); };
	init = function() {
		var _i, _index, _q, _r, _ref, b, y;
		_ref = (new sliceType$6($stringToBytes("\\.+*?()|[]{}^$")));
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			b = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_index = (_r = b % 16, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
			((_index < 0 || _index >= specialBytes.length) ? ($throwRuntimeError("index out of range"), undefined) : specialBytes[_index] = ((((_index < 0 || _index >= specialBytes.length) ? ($throwRuntimeError("index out of range"), undefined) : specialBytes[_index]) | (((y = ((_q = b / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) << 24 >>> 24))) >>> 0));
			_i++;
		}
	};
	Regexp.ptr.prototype.pad = function(a) {
		var a, n, re;
		re = this;
		if (a === sliceType$2.nil) {
			return sliceType$2.nil;
		}
		n = $imul(((1 + re.regexpRO.numSubexp >> 0)), 2);
		while (true) {
			if (!(a.$length < n)) { break; }
			a = $append(a, -1);
		}
		return a;
	};
	Regexp.prototype.pad = function(a) { return this.$val.pad(a); };
	Regexp.ptr.prototype.allMatches = function(s, b, n, deliver) {
		var _r, _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, accept, b, deliver, end, i, matches, n, pos, prevMatchEnd, re, s, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tmp$2 = $f._tmp$2; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; accept = $f.accept; b = $f.b; deliver = $f.deliver; end = $f.end; i = $f.i; matches = $f.matches; n = $f.n; pos = $f.pos; prevMatchEnd = $f.prevMatchEnd; re = $f.re; s = $f.s; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		end = 0;
		if (b === sliceType$6.nil) {
			end = s.length;
		} else {
			end = b.$length;
		}
		_tmp = 0;
		_tmp$1 = 0;
		_tmp$2 = -1;
		pos = _tmp;
		i = _tmp$1;
		prevMatchEnd = _tmp$2;
		/* while (true) { */ case 1:
			/* if (!(i < n && pos <= end)) { break; } */ if(!(i < n && pos <= end)) { $s = 2; continue; }
			_r = re.doExecute($ifaceNil, b, s, pos, re.regexpRO.prog.NumCap, sliceType$2.nil); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			matches = _r;
			if (matches.$length === 0) {
				/* break; */ $s = 2; continue;
			}
			accept = true;
			if ((1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]) === pos) {
				if ((0 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 0]) === prevMatchEnd) {
					accept = false;
				}
				width = 0;
				if (b === sliceType$6.nil) {
					_tuple = utf8.DecodeRuneInString($substring(s, pos, end));
					width = _tuple[1];
				} else {
					_tuple$1 = utf8.DecodeRune($subslice(b, pos, end));
					width = _tuple$1[1];
				}
				if (width > 0) {
					pos = pos + (width) >> 0;
				} else {
					pos = end + 1 >> 0;
				}
			} else {
				pos = (1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]);
			}
			prevMatchEnd = (1 >= matches.$length ? ($throwRuntimeError("index out of range"), undefined) : matches.$array[matches.$offset + 1]);
			/* */ if (accept) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (accept) { */ case 4:
				$r = deliver(re.pad(matches)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
			/* } */ case 5:
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.allMatches }; } $f._r = _r; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tmp$2 = _tmp$2; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.accept = accept; $f.b = b; $f.deliver = deliver; $f.end = end; $f.i = i; $f.matches = matches; $f.n = n; $f.pos = pos; $f.prevMatchEnd = prevMatchEnd; $f.re = re; $f.s = s; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.allMatches = function(s, b, n, deliver) { return this.$val.allMatches(s, b, n, deliver); };
	Regexp.ptr.prototype.Find = function(b) {
		var _r, a, b, dstCap, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; b = $f.b; dstCap = $f.dstCap; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$3.zero();
		_r = re.doExecute($ifaceNil, b, "", 0, 2, $subslice(new sliceType$2(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			$s = -1; return sliceType$6.nil;
		}
		$s = -1; return $subslice(b, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.Find }; } $f._r = _r; $f.a = a; $f.b = b; $f.dstCap = dstCap; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.Find = function(b) { return this.$val.Find(b); };
	Regexp.ptr.prototype.FindIndex = function(b) {
		var _r, a, b, loc, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; b = $f.b; loc = $f.loc; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		loc = sliceType$2.nil;
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, 2, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			loc = sliceType$2.nil;
			$s = -1; return loc;
		}
		loc = $subslice(a, 0, 2);
		$s = -1; return loc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindIndex }; } $f._r = _r; $f.a = a; $f.b = b; $f.loc = loc; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindIndex = function(b) { return this.$val.FindIndex(b); };
	Regexp.ptr.prototype.FindString = function(s) {
		var _r, a, dstCap, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; dstCap = $f.dstCap; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$3.zero();
		_r = re.doExecute($ifaceNil, sliceType$6.nil, s, 0, 2, $subslice(new sliceType$2(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			$s = -1; return "";
		}
		$s = -1; return $substring(s, (0 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 0]), (1 >= a.$length ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + 1]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindString }; } $f._r = _r; $f.a = a; $f.dstCap = dstCap; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindString = function(s) { return this.$val.FindString(s); };
	Regexp.ptr.prototype.FindStringIndex = function(s) {
		var _r, a, loc, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; loc = $f.loc; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		loc = sliceType$2.nil;
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$6.nil, s, 0, 2, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			loc = sliceType$2.nil;
			$s = -1; return loc;
		}
		loc = $subslice(a, 0, 2);
		$s = -1; return loc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindStringIndex }; } $f._r = _r; $f.a = a; $f.loc = loc; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindStringIndex = function(s) { return this.$val.FindStringIndex(s); };
	Regexp.ptr.prototype.FindReaderIndex = function(r) {
		var _r, a, loc, r, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; a = $f.a; loc = $f.loc; r = $f.r; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		loc = sliceType$2.nil;
		re = this;
		_r = re.doExecute(r, sliceType$6.nil, "", 0, 2, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			loc = sliceType$2.nil;
			$s = -1; return loc;
		}
		loc = $subslice(a, 0, 2);
		$s = -1; return loc;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindReaderIndex }; } $f._r = _r; $f.a = a; $f.loc = loc; $f.r = r; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindReaderIndex = function(r) { return this.$val.FindReaderIndex(r); };
	Regexp.ptr.prototype.FindSubmatch = function(b) {
		var _i, _r, _ref, a, b, dstCap, i, re, ret, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; b = $f.b; dstCap = $f.dstCap; i = $f.i; re = $f.re; ret = $f.ret; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$4.zero();
		_r = re.doExecute($ifaceNil, b, "", 0, re.regexpRO.prog.NumCap, $subslice(new sliceType$2(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			$s = -1; return sliceType$12.nil;
		}
		ret = $makeSlice(sliceType$12, (1 + re.regexpRO.numSubexp >> 0));
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (($imul(2, i)) < a.$length && (x = $imul(2, i), ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x])) >= 0) {
				((i < 0 || i >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i] = $subslice(b, (x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$1])), (x$2 = ($imul(2, i)) + 1 >> 0, ((x$2 < 0 || x$2 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$2]))));
			}
			_i++;
		}
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindSubmatch }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.b = b; $f.dstCap = dstCap; $f.i = i; $f.re = re; $f.ret = ret; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindSubmatch = function(b) { return this.$val.FindSubmatch(b); };
	Regexp.ptr.prototype.Expand = function(dst, template, src, match) {
		var dst, match, re, src, template;
		re = this;
		return re.expand(dst, ($bytesToString(template)), src, "", match);
	};
	Regexp.prototype.Expand = function(dst, template, src, match) { return this.$val.Expand(dst, template, src, match); };
	Regexp.ptr.prototype.ExpandString = function(dst, template, src, match) {
		var dst, match, re, src, template;
		re = this;
		return re.expand(dst, template, sliceType$6.nil, src, match);
	};
	Regexp.prototype.ExpandString = function(dst, template, src, match) { return this.$val.ExpandString(dst, template, src, match); };
	Regexp.ptr.prototype.expand = function(dst, template, bsrc, src, match) {
		var _i, _ref, _tuple, bsrc, dst, i, i$1, match, name, namei, num, ok, re, rest, src, template, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		re = this;
		while (true) {
			if (!(template.length > 0)) { break; }
			i = strings.Index(template, "$");
			if (i < 0) {
				break;
			}
			dst = $appendSlice(dst, $substring(template, 0, i));
			template = $substring(template, i);
			if (template.length > 1 && (template.charCodeAt(1) === 36)) {
				dst = $append(dst, 36);
				template = $substring(template, 2);
				continue;
			}
			_tuple = extract(template);
			name = _tuple[0];
			num = _tuple[1];
			rest = _tuple[2];
			ok = _tuple[3];
			if (!ok) {
				dst = $append(dst, 36);
				template = $substring(template, 1);
				continue;
			}
			template = rest;
			if (num >= 0) {
				if ((($imul(2, num)) + 1 >> 0) < match.$length && (x = $imul(2, num), ((x < 0 || x >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x])) >= 0) {
					if (!(bsrc === sliceType$6.nil)) {
						dst = $appendSlice(dst, $subslice(bsrc, (x$1 = $imul(2, num), ((x$1 < 0 || x$1 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, num)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$2]))));
					} else {
						dst = $appendSlice(dst, $substring(src, (x$3 = $imul(2, num), ((x$3 < 0 || x$3 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$3])), (x$4 = ($imul(2, num)) + 1 >> 0, ((x$4 < 0 || x$4 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$4]))));
					}
				}
			} else {
				_ref = re.regexpRO.subexpNames;
				_i = 0;
				while (true) {
					if (!(_i < _ref.$length)) { break; }
					i$1 = _i;
					namei = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
					if (name === namei && (($imul(2, i$1)) + 1 >> 0) < match.$length && (x$5 = $imul(2, i$1), ((x$5 < 0 || x$5 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$5])) >= 0) {
						if (!(bsrc === sliceType$6.nil)) {
							dst = $appendSlice(dst, $subslice(bsrc, (x$6 = $imul(2, i$1), ((x$6 < 0 || x$6 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$6])), (x$7 = ($imul(2, i$1)) + 1 >> 0, ((x$7 < 0 || x$7 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$7]))));
						} else {
							dst = $appendSlice(dst, $substring(src, (x$8 = $imul(2, i$1), ((x$8 < 0 || x$8 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$8])), (x$9 = ($imul(2, i$1)) + 1 >> 0, ((x$9 < 0 || x$9 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$9]))));
						}
						break;
					}
					_i++;
				}
			}
		}
		dst = $appendSlice(dst, template);
		return dst;
	};
	Regexp.prototype.expand = function(dst, template, bsrc, src, match) { return this.$val.expand(dst, template, bsrc, src, match); };
	extract = function(str) {
		var _tuple, brace, i, i$1, name, num, ok, rest, rune, size, str;
		name = "";
		num = 0;
		rest = "";
		ok = false;
		if (str.length < 2 || !((str.charCodeAt(0) === 36))) {
			return [name, num, rest, ok];
		}
		brace = false;
		if (str.charCodeAt(1) === 123) {
			brace = true;
			str = $substring(str, 2);
		} else {
			str = $substring(str, 1);
		}
		i = 0;
		while (true) {
			if (!(i < str.length)) { break; }
			_tuple = utf8.DecodeRuneInString($substring(str, i));
			rune = _tuple[0];
			size = _tuple[1];
			if (!unicode.IsLetter(rune) && !unicode.IsDigit(rune) && !((rune === 95))) {
				break;
			}
			i = i + (size) >> 0;
		}
		if (i === 0) {
			return [name, num, rest, ok];
		}
		name = $substring(str, 0, i);
		if (brace) {
			if (i >= str.length || !((str.charCodeAt(i) === 125))) {
				return [name, num, rest, ok];
			}
			i = i + (1) >> 0;
		}
		num = 0;
		i$1 = 0;
		while (true) {
			if (!(i$1 < name.length)) { break; }
			if (name.charCodeAt(i$1) < 48 || 57 < name.charCodeAt(i$1) || num >= 100000000) {
				num = -1;
				break;
			}
			num = (($imul(num, 10)) + ((name.charCodeAt(i$1) >> 0)) >> 0) - 48 >> 0;
			i$1 = i$1 + (1) >> 0;
		}
		if ((name.charCodeAt(0) === 48) && name.length > 1) {
			num = -1;
		}
		rest = $substring(str, i);
		ok = true;
		return [name, num, rest, ok];
	};
	Regexp.ptr.prototype.FindSubmatchIndex = function(b) {
		var _r, _r$1, b, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; b = $f.b; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, b, "", 0, re.regexpRO.prog.NumCap, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindSubmatchIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.b = b; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindSubmatchIndex = function(b) { return this.$val.FindSubmatchIndex(b); };
	Regexp.ptr.prototype.FindStringSubmatch = function(s) {
		var _i, _r, _ref, a, dstCap, i, re, ret, s, x, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; a = $f.a; dstCap = $f.dstCap; i = $f.i; re = $f.re; ret = $f.ret; s = $f.s; x = $f.x; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		dstCap = arrayType$4.zero();
		_r = re.doExecute($ifaceNil, sliceType$6.nil, s, 0, re.regexpRO.prog.NumCap, $subslice(new sliceType$2(dstCap), 0, 0)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		a = _r;
		if (a === sliceType$2.nil) {
			$s = -1; return sliceType$10.nil;
		}
		ret = $makeSlice(sliceType$10, (1 + re.regexpRO.numSubexp >> 0));
		_ref = ret;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if (($imul(2, i)) < a.$length && (x = $imul(2, i), ((x < 0 || x >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x])) >= 0) {
				((i < 0 || i >= ret.$length) ? ($throwRuntimeError("index out of range"), undefined) : ret.$array[ret.$offset + i] = $substring(s, (x$1 = $imul(2, i), ((x$1 < 0 || x$1 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$1])), (x$2 = ($imul(2, i)) + 1 >> 0, ((x$2 < 0 || x$2 >= a.$length) ? ($throwRuntimeError("index out of range"), undefined) : a.$array[a.$offset + x$2]))));
			}
			_i++;
		}
		$s = -1; return ret;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindStringSubmatch }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.a = a; $f.dstCap = dstCap; $f.i = i; $f.re = re; $f.ret = ret; $f.s = s; $f.x = x; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindStringSubmatch = function(s) { return this.$val.FindStringSubmatch(s); };
	Regexp.ptr.prototype.FindStringSubmatchIndex = function(s) {
		var _r, _r$1, re, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; re = $f.re; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute($ifaceNil, sliceType$6.nil, s, 0, re.regexpRO.prog.NumCap, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindStringSubmatchIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.re = re; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindStringSubmatchIndex = function(s) { return this.$val.FindStringSubmatchIndex(s); };
	Regexp.ptr.prototype.FindReaderSubmatchIndex = function(r) {
		var _r, _r$1, r, re, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; r = $f.r; re = $f.re; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		_r = re.doExecute(r, sliceType$6.nil, "", 0, re.regexpRO.prog.NumCap, sliceType$2.nil); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r$1 = re.pad(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		$s = -1; return _r$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindReaderSubmatchIndex }; } $f._r = _r; $f._r$1 = _r$1; $f.r = r; $f.re = re; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindReaderSubmatchIndex = function(r) { return this.$val.FindReaderSubmatchIndex(r); };
	Regexp.ptr.prototype.FindAll = function(b, n) {
		var b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		result = [result];
		re = this;
		if (n < 0) {
			n = b[0].$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$12, 0, 10);
		$r = re.allMatches("", b[0], n, (function(b, result) { return function(match) {
			var match;
			result[0] = $append(result[0], $subslice(b[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1])));
		}; })(b, result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$12.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAll }; } $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAll = function(b, n) { return this.$val.FindAll(b, n); };
	Regexp.ptr.prototype.FindAllIndex = function(b, n) {
		var b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = b.$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$13, 0, 10);
		$r = re.allMatches("", b, n, (function(result) { return function(match) {
			var match;
			result[0] = $append(result[0], $subslice(match, 0, 2));
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$13.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllIndex }; } $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllIndex = function(b, n) { return this.$val.FindAllIndex(b, n); };
	Regexp.ptr.prototype.FindAllString = function(s, n) {
		var n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		s = [s];
		re = this;
		if (n < 0) {
			n = s[0].length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$10, 0, 10);
		$r = re.allMatches(s[0], sliceType$6.nil, n, (function(result, s) { return function(match) {
			var match;
			result[0] = $append(result[0], $substring(s[0], (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]), (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1])));
		}; })(result, s)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$10.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllString }; } $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllString = function(s, n) { return this.$val.FindAllString(s, n); };
	Regexp.ptr.prototype.FindAllStringIndex = function(s, n) {
		var n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$13, 0, 10);
		$r = re.allMatches(s, sliceType$6.nil, n, (function(result) { return function(match) {
			var match;
			result[0] = $append(result[0], $subslice(match, 0, 2));
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$13.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllStringIndex }; } $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllStringIndex = function(s, n) { return this.$val.FindAllStringIndex(s, n); };
	Regexp.ptr.prototype.FindAllSubmatch = function(b, n) {
		var b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		result = [result];
		re = this;
		if (n < 0) {
			n = b[0].$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$14, 0, 10);
		$r = re.allMatches("", b[0], n, (function(b, result) { return function(match) {
			var _i, _q, _ref, j, match, slice, x, x$1, x$2;
			slice = $makeSlice(sliceType$12, (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = slice;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				if ((x = $imul(2, j), ((x < 0 || x >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x])) >= 0) {
					((j < 0 || j >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + j] = $subslice(b[0], (x$1 = $imul(2, j), ((x$1 < 0 || x$1 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, j)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$2]))));
				}
				_i++;
			}
			result[0] = $append(result[0], slice);
		}; })(b, result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$14.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllSubmatch }; } $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllSubmatch = function(b, n) { return this.$val.FindAllSubmatch(b, n); };
	Regexp.ptr.prototype.FindAllSubmatchIndex = function(b, n) {
		var b, n, re, result, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; b = $f.b; n = $f.n; re = $f.re; result = $f.result; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = b.$length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$13, 0, 10);
		$r = re.allMatches("", b, n, (function(result) { return function(match) {
			var match;
			result[0] = $append(result[0], match);
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$13.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllSubmatchIndex }; } $f.b = b; $f.n = n; $f.re = re; $f.result = result; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllSubmatchIndex = function(b, n) { return this.$val.FindAllSubmatchIndex(b, n); };
	Regexp.ptr.prototype.FindAllStringSubmatch = function(s, n) {
		var n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		s = [s];
		re = this;
		if (n < 0) {
			n = s[0].length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$15, 0, 10);
		$r = re.allMatches(s[0], sliceType$6.nil, n, (function(result, s) { return function(match) {
			var _i, _q, _ref, j, match, slice, x, x$1, x$2;
			slice = $makeSlice(sliceType$10, (_q = match.$length / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
			_ref = slice;
			_i = 0;
			while (true) {
				if (!(_i < _ref.$length)) { break; }
				j = _i;
				if ((x = $imul(2, j), ((x < 0 || x >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x])) >= 0) {
					((j < 0 || j >= slice.$length) ? ($throwRuntimeError("index out of range"), undefined) : slice.$array[slice.$offset + j] = $substring(s[0], (x$1 = $imul(2, j), ((x$1 < 0 || x$1 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$1])), (x$2 = ($imul(2, j)) + 1 >> 0, ((x$2 < 0 || x$2 >= match.$length) ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + x$2]))));
				}
				_i++;
			}
			result[0] = $append(result[0], slice);
		}; })(result, s)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$15.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllStringSubmatch }; } $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllStringSubmatch = function(s, n) { return this.$val.FindAllStringSubmatch(s, n); };
	Regexp.ptr.prototype.FindAllStringSubmatchIndex = function(s, n) {
		var n, re, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; n = $f.n; re = $f.re; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		result = [result];
		re = this;
		if (n < 0) {
			n = s.length + 1 >> 0;
		}
		result[0] = $makeSlice(sliceType$13, 0, 10);
		$r = re.allMatches(s, sliceType$6.nil, n, (function(result) { return function(match) {
			var match;
			result[0] = $append(result[0], match);
		}; })(result)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		if (result[0].$length === 0) {
			$s = -1; return sliceType$13.nil;
		}
		$s = -1; return result[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.FindAllStringSubmatchIndex }; } $f.n = n; $f.re = re; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.FindAllStringSubmatchIndex = function(s, n) { return this.$val.FindAllStringSubmatchIndex(s, n); };
	Regexp.ptr.prototype.Split = function(s, n) {
		var _i, _r, _ref, beg, end, match, matches, n, re, s, strings$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r = $f._r; _ref = $f._ref; beg = $f.beg; end = $f.end; match = $f.match; matches = $f.matches; n = $f.n; re = $f.re; s = $f.s; strings$1 = $f.strings$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		re = this;
		if (n === 0) {
			$s = -1; return sliceType$10.nil;
		}
		if (re.regexpRO.expr.length > 0 && (s.length === 0)) {
			$s = -1; return new sliceType$10([""]);
		}
		_r = re.FindAllStringIndex(s, n); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		matches = _r;
		strings$1 = $makeSlice(sliceType$10, 0, matches.$length);
		beg = 0;
		end = 0;
		_ref = matches;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			match = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			if (n > 0 && strings$1.$length >= (n - 1 >> 0)) {
				break;
			}
			end = (0 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 0]);
			if (!(((1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]) === 0))) {
				strings$1 = $append(strings$1, $substring(s, beg, end));
			}
			beg = (1 >= match.$length ? ($throwRuntimeError("index out of range"), undefined) : match.$array[match.$offset + 1]);
			_i++;
		}
		if (!((end === s.length))) {
			strings$1 = $append(strings$1, $substring(s, beg));
		}
		$s = -1; return strings$1;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Regexp.ptr.prototype.Split }; } $f._i = _i; $f._r = _r; $f._ref = _ref; $f.beg = beg; $f.end = end; $f.match = match; $f.matches = matches; $f.n = n; $f.re = re; $f.s = s; $f.strings$1 = strings$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Regexp.prototype.Split = function(s, n) { return this.$val.Split(s, n); };
	ptrType.methods = [{prop: "reset", name: "reset", pkg: "regexp", typ: $funcType([$Int, $Int], [], false)}, {prop: "shouldVisit", name: "shouldVisit", pkg: "regexp", typ: $funcType([$Uint32, $Int], [$Bool], false)}, {prop: "push", name: "push", pkg: "regexp", typ: $funcType([$Uint32, $Int, $Int], [], false)}];
	ptrType$10.methods = [{prop: "tryBacktrack", name: "tryBacktrack", pkg: "regexp", typ: $funcType([ptrType, input, $Uint32, $Int], [$Bool], false)}, {prop: "backtrack", name: "backtrack", pkg: "regexp", typ: $funcType([input, $Int, $Int, $Int], [$Bool], false)}, {prop: "newInputBytes", name: "newInputBytes", pkg: "regexp", typ: $funcType([sliceType$6], [input], false)}, {prop: "newInputString", name: "newInputString", pkg: "regexp", typ: $funcType([$String], [input], false)}, {prop: "newInputReader", name: "newInputReader", pkg: "regexp", typ: $funcType([io.RuneReader], [input], false)}, {prop: "init", name: "init", pkg: "regexp", typ: $funcType([$Int], [], false)}, {prop: "alloc", name: "alloc", pkg: "regexp", typ: $funcType([ptrType$5], [ptrType$4], false)}, {prop: "match", name: "match", pkg: "regexp", typ: $funcType([input, $Int], [$Bool], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([ptrType$11], [], false)}, {prop: "step", name: "step", pkg: "regexp", typ: $funcType([ptrType$11, ptrType$11, $Int, $Int, $Int32, syntax.EmptyOp], [], false)}, {prop: "add", name: "add", pkg: "regexp", typ: $funcType([ptrType$11, $Uint32, $Int, sliceType$2, syntax.EmptyOp, ptrType$4], [ptrType$4], false)}, {prop: "onepass", name: "onepass", pkg: "regexp", typ: $funcType([input, $Int, $Int], [$Bool], false)}];
	ptrType$7.methods = [{prop: "empty", name: "empty", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "next", name: "next", pkg: "regexp", typ: $funcType([], [$Uint32], false)}, {prop: "clear", name: "clear", pkg: "regexp", typ: $funcType([], [], false)}, {prop: "contains", name: "contains", pkg: "regexp", typ: $funcType([$Uint32], [$Bool], false)}, {prop: "insert", name: "insert", pkg: "regexp", typ: $funcType([$Uint32], [], false)}, {prop: "insertNew", name: "insertNew", pkg: "regexp", typ: $funcType([$Uint32], [], false)}];
	runeSlice.methods = [{prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}];
	ptrType$3.methods = [{prop: "doMatch", name: "doMatch", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$6, $String], [$Bool], false)}, {prop: "doExecute", name: "doExecute", pkg: "regexp", typ: $funcType([io.RuneReader, sliceType$6, $String, $Int, $Int, sliceType$2], [sliceType$2], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "Longest", name: "Longest", pkg: "", typ: $funcType([], [], false)}, {prop: "get", name: "get", pkg: "regexp", typ: $funcType([], [ptrType$10], false)}, {prop: "put", name: "put", pkg: "regexp", typ: $funcType([ptrType$10], [], false)}, {prop: "NumSubexp", name: "NumSubexp", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SubexpNames", name: "SubexpNames", pkg: "", typ: $funcType([], [sliceType$10], false)}, {prop: "LiteralPrefix", name: "LiteralPrefix", pkg: "", typ: $funcType([], [$String, $Bool], false)}, {prop: "MatchReader", name: "MatchReader", pkg: "", typ: $funcType([io.RuneReader], [$Bool], false)}, {prop: "MatchString", name: "MatchString", pkg: "", typ: $funcType([$String], [$Bool], false)}, {prop: "Match", name: "Match", pkg: "", typ: $funcType([sliceType$6], [$Bool], false)}, {prop: "ReplaceAllString", name: "ReplaceAllString", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ReplaceAllLiteralString", name: "ReplaceAllLiteralString", pkg: "", typ: $funcType([$String, $String], [$String], false)}, {prop: "ReplaceAllStringFunc", name: "ReplaceAllStringFunc", pkg: "", typ: $funcType([$String, funcType], [$String], false)}, {prop: "replaceAll", name: "replaceAll", pkg: "regexp", typ: $funcType([sliceType$6, $String, $Int, funcType$1], [sliceType$6], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", typ: $funcType([sliceType$6, sliceType$6], [sliceType$6], false)}, {prop: "ReplaceAllLiteral", name: "ReplaceAllLiteral", pkg: "", typ: $funcType([sliceType$6, sliceType$6], [sliceType$6], false)}, {prop: "ReplaceAllFunc", name: "ReplaceAllFunc", pkg: "", typ: $funcType([sliceType$6, funcType$2], [sliceType$6], false)}, {prop: "pad", name: "pad", pkg: "regexp", typ: $funcType([sliceType$2], [sliceType$2], false)}, {prop: "allMatches", name: "allMatches", pkg: "regexp", typ: $funcType([$String, sliceType$6, $Int, funcType$3], [], false)}, {prop: "Find", name: "Find", pkg: "", typ: $funcType([sliceType$6], [sliceType$6], false)}, {prop: "FindIndex", name: "FindIndex", pkg: "", typ: $funcType([sliceType$6], [sliceType$2], false)}, {prop: "FindString", name: "FindString", pkg: "", typ: $funcType([$String], [$String], false)}, {prop: "FindStringIndex", name: "FindStringIndex", pkg: "", typ: $funcType([$String], [sliceType$2], false)}, {prop: "FindReaderIndex", name: "FindReaderIndex", pkg: "", typ: $funcType([io.RuneReader], [sliceType$2], false)}, {prop: "FindSubmatch", name: "FindSubmatch", pkg: "", typ: $funcType([sliceType$6], [sliceType$12], false)}, {prop: "Expand", name: "Expand", pkg: "", typ: $funcType([sliceType$6, sliceType$6, sliceType$6, sliceType$2], [sliceType$6], false)}, {prop: "ExpandString", name: "ExpandString", pkg: "", typ: $funcType([sliceType$6, $String, $String, sliceType$2], [sliceType$6], false)}, {prop: "expand", name: "expand", pkg: "regexp", typ: $funcType([sliceType$6, $String, sliceType$6, $String, sliceType$2], [sliceType$6], false)}, {prop: "FindSubmatchIndex", name: "FindSubmatchIndex", pkg: "", typ: $funcType([sliceType$6], [sliceType$2], false)}, {prop: "FindStringSubmatch", name: "FindStringSubmatch", pkg: "", typ: $funcType([$String], [sliceType$10], false)}, {prop: "FindStringSubmatchIndex", name: "FindStringSubmatchIndex", pkg: "", typ: $funcType([$String], [sliceType$2], false)}, {prop: "FindReaderSubmatchIndex", name: "FindReaderSubmatchIndex", pkg: "", typ: $funcType([io.RuneReader], [sliceType$2], false)}, {prop: "FindAll", name: "FindAll", pkg: "", typ: $funcType([sliceType$6, $Int], [sliceType$12], false)}, {prop: "FindAllIndex", name: "FindAllIndex", pkg: "", typ: $funcType([sliceType$6, $Int], [sliceType$13], false)}, {prop: "FindAllString", name: "FindAllString", pkg: "", typ: $funcType([$String, $Int], [sliceType$10], false)}, {prop: "FindAllStringIndex", name: "FindAllStringIndex", pkg: "", typ: $funcType([$String, $Int], [sliceType$13], false)}, {prop: "FindAllSubmatch", name: "FindAllSubmatch", pkg: "", typ: $funcType([sliceType$6, $Int], [sliceType$14], false)}, {prop: "FindAllSubmatchIndex", name: "FindAllSubmatchIndex", pkg: "", typ: $funcType([sliceType$6, $Int], [sliceType$13], false)}, {prop: "FindAllStringSubmatch", name: "FindAllStringSubmatch", pkg: "", typ: $funcType([$String, $Int], [sliceType$15], false)}, {prop: "FindAllStringSubmatchIndex", name: "FindAllStringSubmatchIndex", pkg: "", typ: $funcType([$String, $Int], [sliceType$13], false)}, {prop: "Split", name: "Split", pkg: "", typ: $funcType([$String, $Int], [sliceType$10], false)}];
	ptrType$12.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}];
	ptrType$13.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}];
	ptrType$14.methods = [{prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}, {prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}];
	job.init("regexp", [{prop: "pc", name: "pc", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "arg", name: "arg", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	bitState.init("regexp", [{prop: "prog", name: "prog", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "end", name: "end", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "jobs", name: "jobs", anonymous: false, exported: false, typ: sliceType$3, tag: ""}, {prop: "visited", name: "visited", anonymous: false, exported: false, typ: sliceType$1, tag: ""}]);
	queue.init("regexp", [{prop: "sparse", name: "sparse", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "dense", name: "dense", anonymous: false, exported: false, typ: sliceType$4, tag: ""}]);
	entry.init("regexp", [{prop: "pc", name: "pc", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "t", name: "t", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	thread.init("regexp", [{prop: "inst", name: "inst", anonymous: false, exported: false, typ: ptrType$5, tag: ""}, {prop: "cap", name: "cap", anonymous: false, exported: false, typ: sliceType$2, tag: ""}]);
	machine.init("regexp", [{prop: "re", name: "re", anonymous: false, exported: false, typ: ptrType$3, tag: ""}, {prop: "p", name: "p", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "op", name: "op", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "maxBitStateLen", name: "maxBitStateLen", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "b", name: "b", anonymous: false, exported: false, typ: ptrType, tag: ""}, {prop: "q0", name: "q0", anonymous: false, exported: false, typ: queue, tag: ""}, {prop: "q1", name: "q1", anonymous: false, exported: false, typ: queue, tag: ""}, {prop: "pool", name: "pool", anonymous: false, exported: false, typ: sliceType$5, tag: ""}, {prop: "matched", name: "matched", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "matchcap", name: "matchcap", anonymous: false, exported: false, typ: sliceType$2, tag: ""}, {prop: "inputBytes", name: "inputBytes", anonymous: false, exported: false, typ: inputBytes, tag: ""}, {prop: "inputString", name: "inputString", anonymous: false, exported: false, typ: inputString, tag: ""}, {prop: "inputReader", name: "inputReader", anonymous: false, exported: false, typ: inputReader, tag: ""}]);
	onePassProg.init("", [{prop: "Inst", name: "Inst", anonymous: false, exported: true, typ: sliceType$7, tag: ""}, {prop: "Start", name: "Start", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "NumCap", name: "NumCap", anonymous: false, exported: true, typ: $Int, tag: ""}]);
	onePassInst.init("", [{prop: "Inst", name: "Inst", anonymous: true, exported: true, typ: syntax.Inst, tag: ""}, {prop: "Next", name: "Next", anonymous: false, exported: true, typ: sliceType$1, tag: ""}]);
	queueOnePass.init("regexp", [{prop: "sparse", name: "sparse", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "dense", name: "dense", anonymous: false, exported: false, typ: sliceType$1, tag: ""}, {prop: "size", name: "size", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "nextIndex", name: "nextIndex", anonymous: false, exported: false, typ: $Uint32, tag: ""}]);
	runeSlice.init($Int32);
	Regexp.init("regexp", [{prop: "regexpRO", name: "regexpRO", anonymous: true, exported: false, typ: regexpRO, tag: ""}, {prop: "mu", name: "mu", anonymous: false, exported: false, typ: nosync.Mutex, tag: ""}, {prop: "machine", name: "machine", anonymous: false, exported: false, typ: sliceType$11, tag: ""}]);
	regexpRO.init("regexp", [{prop: "expr", name: "expr", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "prog", name: "prog", anonymous: false, exported: false, typ: ptrType$2, tag: ""}, {prop: "onepass", name: "onepass", anonymous: false, exported: false, typ: ptrType$1, tag: ""}, {prop: "prefix", name: "prefix", anonymous: false, exported: false, typ: $String, tag: ""}, {prop: "prefixBytes", name: "prefixBytes", anonymous: false, exported: false, typ: sliceType$6, tag: ""}, {prop: "prefixComplete", name: "prefixComplete", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "prefixRune", name: "prefixRune", anonymous: false, exported: false, typ: $Int32, tag: ""}, {prop: "prefixEnd", name: "prefixEnd", anonymous: false, exported: false, typ: $Uint32, tag: ""}, {prop: "cond", name: "cond", anonymous: false, exported: false, typ: syntax.EmptyOp, tag: ""}, {prop: "numSubexp", name: "numSubexp", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "subexpNames", name: "subexpNames", anonymous: false, exported: false, typ: sliceType$10, tag: ""}, {prop: "longest", name: "longest", anonymous: false, exported: false, typ: $Bool, tag: ""}]);
	input.init([{prop: "canCheckPrefix", name: "canCheckPrefix", pkg: "regexp", typ: $funcType([], [$Bool], false)}, {prop: "context", name: "context", pkg: "regexp", typ: $funcType([$Int], [syntax.EmptyOp], false)}, {prop: "hasPrefix", name: "hasPrefix", pkg: "regexp", typ: $funcType([ptrType$3], [$Bool], false)}, {prop: "index", name: "index", pkg: "regexp", typ: $funcType([ptrType$3, $Int], [$Int], false)}, {prop: "step", name: "step", pkg: "regexp", typ: $funcType([$Int], [$Int32, $Int], false)}]);
	inputString.init("regexp", [{prop: "str", name: "str", anonymous: false, exported: false, typ: $String, tag: ""}]);
	inputBytes.init("regexp", [{prop: "str", name: "str", anonymous: false, exported: false, typ: sliceType$6, tag: ""}]);
	inputReader.init("regexp", [{prop: "r", name: "r", anonymous: false, exported: false, typ: io.RuneReader, tag: ""}, {prop: "atEOT", name: "atEOT", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "pos", name: "pos", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = bytes.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = nosync.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = syntax.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sort.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = unicode.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = utf8.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		arrayNoInts = arrayType.zero();
		specialBytes = arrayType$1.zero();
		notBacktrack = ptrType.nil;
		noRune = new sliceType([]);
		noNext = new sliceType$1([4294967295]);
		anyRuneNotNL = new sliceType([0, 9, 11, 1114111]);
		anyRune = new sliceType([0, 1114111]);
		notOnePass = ptrType$1.nil;
		init();
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/render"] = (function() {
	var $pkg = {}, $init, heap, json, errors, fmt, colorrange, polyclip, gift, truetype, alg, dlog, event, fileutil, oakerr, physics, fonts, timing, font, fixed, image, color, draw, gif, jpeg, png, math, rand, filepath, regexp, strconv, strings, sync, time, Sheet, RenderableHeap, DrawStack, Addable, FontGenerator, Font, Layered, LayeredPoint, Modification, Modifiable, Renderable, Sprite, Text, stringerIntPointer, stringStringer, sliceType, sliceType$1, sliceType$2, ptrType$1, ptrType$2, ptrType$4, sliceType$5, sliceType$6, sliceType$8, sliceType$9, sliceType$12, ptrType$6, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, mapType$1, ptrType$14, sliceType$16, sliceType$17, ptrType$20, ptrType$21, ptrType$22, debugMap, resetDraw, emptyRenderable, usingDrawPolygon, drawPolygon, initialDrawStack, fontdir, defaultHinting, defaultSize, defaultDPI, defaultColor, defaultFontFile, binaryFonts, loadedFonts, regexpSingleNumber, regexpTwoNumbers, supportedFileEndings, wd, dir, loadedImages, loadedSheets, defaultPad, loadLock, x, _r, _tuple, _r$1, _tuple$1, _r$2, _tuple$2, NewColorBox, NewHeap, InDrawPolygon, ResetDrawStack, Draw, PreDraw, DefFont, SetFontDefaults, parseFontHinting, FontColor, LoadFont, NewLayeredPoint, loadImage, LoadSheet, subImage, BatchLoad, parseAliasFile, parseLoadFolderName, GiftFilter, ShinyDraw, NewEmptySprite, NewSprite;
	heap = $packages["container/heap"];
	json = $packages["encoding/json"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	colorrange = $packages["github.com/200sc/go-dist/colorrange"];
	polyclip = $packages["github.com/akavel/polyclip-go"];
	gift = $packages["github.com/disintegration/gift"];
	truetype = $packages["github.com/golang/freetype/truetype"];
	alg = $packages["github.com/oakmound/oak/alg"];
	dlog = $packages["github.com/oakmound/oak/dlog"];
	event = $packages["github.com/oakmound/oak/event"];
	fileutil = $packages["github.com/oakmound/oak/fileutil"];
	oakerr = $packages["github.com/oakmound/oak/oakerr"];
	physics = $packages["github.com/oakmound/oak/physics"];
	fonts = $packages["github.com/oakmound/oak/render/internal/fonts"];
	timing = $packages["github.com/oakmound/oak/timing"];
	font = $packages["golang.org/x/image/font"];
	fixed = $packages["golang.org/x/image/math/fixed"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	gif = $packages["image/gif"];
	jpeg = $packages["image/jpeg"];
	png = $packages["image/png"];
	math = $packages["math"];
	rand = $packages["math/rand"];
	filepath = $packages["path/filepath"];
	regexp = $packages["regexp"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	time = $packages["time"];
	Sheet = $pkg.Sheet = $newType(12, $kindSlice, "render.Sheet", true, "github.com/oakmound/oak/render", true, null);
	RenderableHeap = $pkg.RenderableHeap = $newType(0, $kindStruct, "render.RenderableHeap", true, "github.com/oakmound/oak/render", true, function(rs_, toPush_, static$2_, addLock_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rs = sliceType$8.nil;
			this.toPush = sliceType$8.nil;
			this.static$2 = false;
			this.addLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
			return;
		}
		this.rs = rs_;
		this.toPush = toPush_;
		this.static$2 = static$2_;
		this.addLock = addLock_;
	});
	DrawStack = $pkg.DrawStack = $newType(0, $kindStruct, "render.DrawStack", true, "github.com/oakmound/oak/render", true, function(as_, toPush_, toPop_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.as = sliceType.nil;
			this.toPush = sliceType.nil;
			this.toPop = 0;
			return;
		}
		this.as = as_;
		this.toPush = toPush_;
		this.toPop = toPop_;
	});
	Addable = $pkg.Addable = $newType(8, $kindInterface, "render.Addable", true, "github.com/oakmound/oak/render", true, null);
	FontGenerator = $pkg.FontGenerator = $newType(0, $kindStruct, "render.FontGenerator", true, "github.com/oakmound/oak/render", true, function(File_, Color_, Size_, Hinting_, DPI_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.File = "";
			this.Color = $ifaceNil;
			this.Size = 0;
			this.Hinting = "";
			this.DPI = 0;
			return;
		}
		this.File = File_;
		this.Color = Color_;
		this.Size = Size_;
		this.Hinting = Hinting_;
		this.DPI = DPI_;
	});
	Font = $pkg.Font = $newType(0, $kindStruct, "render.Font", true, "github.com/oakmound/oak/render", true, function(FontGenerator_, Drawer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.FontGenerator = new FontGenerator.ptr("", $ifaceNil, 0, "", 0);
			this.Drawer = new font.Drawer.ptr($ifaceNil, $ifaceNil, $ifaceNil, new fixed.Point26_6.ptr(0, 0));
			return;
		}
		this.FontGenerator = FontGenerator_;
		this.Drawer = Drawer_;
	});
	Layered = $pkg.Layered = $newType(0, $kindStruct, "render.Layered", true, "github.com/oakmound/oak/render", true, function(layer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.layer = 0;
			return;
		}
		this.layer = layer_;
	});
	LayeredPoint = $pkg.LayeredPoint = $newType(0, $kindStruct, "render.LayeredPoint", true, "github.com/oakmound/oak/render", true, function(Vector_, Layered_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Vector = new physics.Vector.ptr(ptrType$1.nil, ptrType$1.nil, 0, 0);
			this.Layered = new Layered.ptr(0);
			return;
		}
		this.Vector = Vector_;
		this.Layered = Layered_;
	});
	Modification = $pkg.Modification = $newType(4, $kindFunc, "render.Modification", true, "github.com/oakmound/oak/render", true, null);
	Modifiable = $pkg.Modifiable = $newType(8, $kindInterface, "render.Modifiable", true, "github.com/oakmound/oak/render", true, null);
	Renderable = $pkg.Renderable = $newType(8, $kindInterface, "render.Renderable", true, "github.com/oakmound/oak/render", true, null);
	Sprite = $pkg.Sprite = $newType(0, $kindStruct, "render.Sprite", true, "github.com/oakmound/oak/render", true, function(LayeredPoint_, r_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LayeredPoint = new LayeredPoint.ptr(new physics.Vector.ptr(ptrType$1.nil, ptrType$1.nil, 0, 0), new Layered.ptr(0));
			this.r = ptrType$4.nil;
			return;
		}
		this.LayeredPoint = LayeredPoint_;
		this.r = r_;
	});
	Text = $pkg.Text = $newType(0, $kindStruct, "render.Text", true, "github.com/oakmound/oak/render", true, function(LayeredPoint_, text_, d_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.LayeredPoint = new LayeredPoint.ptr(new physics.Vector.ptr(ptrType$1.nil, ptrType$1.nil, 0, 0), new Layered.ptr(0));
			this.text = $ifaceNil;
			this.d = ptrType$8.nil;
			return;
		}
		this.LayeredPoint = LayeredPoint_;
		this.text = text_;
		this.d = d_;
	});
	stringerIntPointer = $pkg.stringerIntPointer = $newType(0, $kindStruct, "render.stringerIntPointer", true, "github.com/oakmound/oak/render", false, function(v_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.v = ptrType$10.nil;
			return;
		}
		this.v = v_;
	});
	stringStringer = $pkg.stringStringer = $newType(8, $kindString, "render.stringStringer", true, "github.com/oakmound/oak/render", false, null);
	sliceType = $sliceType(Addable);
	sliceType$1 = $sliceType($String);
	sliceType$2 = $sliceType(gift.Filter);
	ptrType$1 = $ptrType($Float64);
	ptrType$2 = $ptrType(Sheet);
	ptrType$4 = $ptrType(image.RGBA);
	sliceType$5 = $sliceType(ptrType$4);
	sliceType$6 = $sliceType($Uint8);
	sliceType$8 = $sliceType(Renderable);
	sliceType$9 = $sliceType($Float64);
	sliceType$12 = $sliceType($emptyInterface);
	ptrType$6 = $ptrType(truetype.Font);
	ptrType$8 = $ptrType(Font);
	ptrType$9 = $ptrType(Text);
	ptrType$10 = $ptrType($Int);
	ptrType$11 = $ptrType(Layered);
	ptrType$12 = $ptrType(LayeredPoint);
	ptrType$13 = $ptrType(Sprite);
	mapType$1 = $mapType($String, $String);
	ptrType$14 = $ptrType(mapType$1);
	sliceType$16 = $sliceType(ptrType$9);
	sliceType$17 = $sliceType(Modification);
	ptrType$20 = $ptrType(RenderableHeap);
	ptrType$21 = $ptrType(DrawStack);
	ptrType$22 = $ptrType(FontGenerator);
	$ptrType(Sheet).prototype.SubSprite = function(x$1, y) {
		var sh, x$1, x$2, x$3, y;
		sh = this;
		return NewSprite(0, 0, (x$2 = (x$3 = sh.$get(), ((x$1 < 0 || x$1 >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + x$1])), ((y < 0 || y >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + y])));
	};
	NewColorBox = function(w, h, c) {
		var c, h, rect, rgba, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; c = $f.c; h = $f.h; rect = $f.rect; rgba = $f.rgba; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rect = $clone(image.Rect(0, 0, w, h), image.Rectangle);
		rgba = image.NewRGBA($clone(rect, image.Rectangle));
		$r = draw.Draw(rgba, $clone(rect, image.Rectangle), image.NewUniform(c), new image.Point.ptr(0, 0), 1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return NewSprite(0, 0, rgba);
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewColorBox }; } $f.c = c; $f.h = h; $f.rect = rect; $f.rgba = rgba; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewColorBox = NewColorBox;
	NewHeap = function(static$1) {
		var rh, static$1;
		rh = new RenderableHeap.ptr(sliceType$8.nil, sliceType$8.nil, false, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0));
		rh.rs = $makeSlice(sliceType$8, 0);
		rh.toPush = $makeSlice(sliceType$8, 0);
		rh.static$2 = static$1;
		sync.RWMutex.copy(rh.addLock, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0));
		return rh;
	};
	$pkg.NewHeap = NewHeap;
	RenderableHeap.ptr.prototype.Add = function(r, layer) {
		var layer, r, rh, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; layer = $f.layer; r = $f.r; rh = $f.rh; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rh = this;
		$r = r.SetLayer(layer); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rh.addLock.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		rh.toPush = $append(rh.toPush, r);
		$r = rh.addLock.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RenderableHeap.ptr.prototype.Add }; } $f.layer = layer; $f.r = r; $f.rh = rh; $f.$s = $s; $f.$r = $r; return $f;
	};
	RenderableHeap.prototype.Add = function(r, layer) { return this.$val.Add(r, layer); };
	RenderableHeap.ptr.prototype.Replace = function(r1, r2, layer) {
		var _r$3, layer, r1, r2, rh, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; layer = $f.layer; r1 = $f.r1; r2 = $f.r2; rh = $f.rh; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rh = this;
		_r$3 = rh.Add(r2, layer); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$r = r1.UnDraw(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RenderableHeap.ptr.prototype.Replace }; } $f._r$3 = _r$3; $f.layer = layer; $f.r1 = r1; $f.r2 = r2; $f.rh = rh; $f.$s = $s; $f.$r = $r; return $f;
	};
	RenderableHeap.prototype.Replace = function(r1, r2, layer) { return this.$val.Replace(r1, r2, layer); };
	RenderableHeap.ptr.prototype.Len = function() {
		var rh;
		rh = this;
		return rh.rs.$length;
	};
	RenderableHeap.prototype.Len = function() { return this.$val.Len(); };
	RenderableHeap.ptr.prototype.Less = function(i, j) {
		var _r$3, _r$4, i, j, rh, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; i = $f.i; j = $f.j; rh = $f.rh; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rh = this;
		_r$3 = (x$1 = rh.rs, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i])).GetLayer(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = (x$2 = rh.rs, ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j])).GetLayer(); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		$s = -1; return _r$3 < _r$4;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RenderableHeap.ptr.prototype.Less }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.i = i; $f.j = j; $f.rh = rh; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	RenderableHeap.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	RenderableHeap.ptr.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, i, j, rh, x$1, x$2, x$3, x$4;
		rh = this;
		_tmp = (x$1 = rh.rs, ((j < 0 || j >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + j]));
		_tmp$1 = (x$2 = rh.rs, ((i < 0 || i >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + i]));
		(x$3 = rh.rs, ((i < 0 || i >= x$3.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$3.$array[x$3.$offset + i] = _tmp));
		(x$4 = rh.rs, ((j < 0 || j >= x$4.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$4.$array[x$4.$offset + j] = _tmp$1));
	};
	RenderableHeap.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	RenderableHeap.ptr.prototype.Push = function(r) {
		var r, rh;
		rh = this;
		if ($interfaceIsEqual(r, $ifaceNil)) {
			return;
		}
		rh.rs = $append(rh.rs, $assertType(r, Renderable));
	};
	RenderableHeap.prototype.Push = function(r) { return this.$val.Push(r); };
	RenderableHeap.ptr.prototype.Pop = function() {
		var n, rh, x$1, x$2, x$3;
		rh = this;
		n = rh.rs.$length;
		x$3 = (x$1 = rh.rs, x$2 = n - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + x$2]));
		rh.rs = $subslice(rh.rs, 0, (n - 1 >> 0));
		return x$3;
	};
	RenderableHeap.prototype.Pop = function() { return this.$val.Pop(); };
	RenderableHeap.ptr.prototype.PreDraw = function() {
		var _i, _ref, r, rh, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; r = $f.r; rh = $f.rh; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rh = this;
		$r = rh.addLock.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_ref = rh.toPush;
		_i = 0;
		/* while (true) { */ case 2:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 3; continue; }
			r = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			/* */ if (!($interfaceIsEqual(r, $ifaceNil))) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (!($interfaceIsEqual(r, $ifaceNil))) { */ case 4:
				$r = heap.Push(rh, r); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 5:
			_i++;
		/* } */ $s = 2; continue; case 3:
		rh.toPush = $makeSlice(sliceType$8, 0);
		$r = rh.addLock.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RenderableHeap.ptr.prototype.PreDraw }; } $f._i = _i; $f._ref = _ref; $f.r = r; $f.rh = rh; $f.$s = $s; $f.$r = $r; return $f;
	};
	RenderableHeap.prototype.PreDraw = function() { return this.$val.PreDraw(); };
	RenderableHeap.ptr.prototype.Copy = function() {
		var rh;
		rh = this;
		return NewHeap(rh.static$2);
	};
	RenderableHeap.prototype.Copy = function() { return this.$val.Copy(); };
	RenderableHeap.ptr.prototype.draw = function(world, viewPos, screenW, screenH) {
		var _r$10, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple$3, h, intf, newRh, r, r$1, rh, rp, screenH, screenW, viewPos, vx, vy, w, world, x$1, x2, y, y2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$10 = $f._r$10; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple$3 = $f._tuple$3; h = $f.h; intf = $f.intf; newRh = $f.newRh; r = $f.r; r$1 = $f.r$1; rh = $f.rh; rp = $f.rp; screenH = $f.screenH; screenW = $f.screenW; viewPos = $f.viewPos; vx = $f.vx; vy = $f.vy; w = $f.w; world = $f.world; x$1 = $f.x$1; x2 = $f.x2; y = $f.y; y2 = $f.y2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		rh = this;
		newRh = new RenderableHeap.ptr(sliceType$8.nil, sliceType$8.nil, false, new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0));
		/* */ if (rh.static$2) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (rh.static$2) { */ case 1:
			/* while (true) { */ case 4:
				/* if (!(rh.Len() > 0)) { break; } */ if(!(rh.Len() > 0)) { $s = 5; continue; }
				_r$3 = heap.Pop(rh); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				rp = _r$3;
				/* */ if (!($interfaceIsEqual(rp, $ifaceNil))) { $s = 7; continue; }
				/* */ $s = 8; continue;
				/* if (!($interfaceIsEqual(rp, $ifaceNil))) { */ case 7:
					r = $assertType(rp, Renderable);
					_r$4 = r.GetLayer(); /* */ $s = 11; case 11: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					/* */ if (!((_r$4 === -1000))) { $s = 9; continue; }
					/* */ $s = 10; continue;
					/* if (!((_r$4 === -1000))) { */ case 9:
						$r = r.Draw(world); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = heap.Push(newRh, r); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 10:
				/* } */ case 8:
			/* } */ $s = 4; continue; case 5:
			$s = 3; continue;
		/* } else { */ case 2:
			vx = (-viewPos.X);
			vy = (-viewPos.Y);
			/* while (true) { */ case 14:
				/* if (!(rh.Len() > 0)) { break; } */ if(!(rh.Len() > 0)) { $s = 15; continue; }
				_r$5 = heap.Pop(rh); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				intf = _r$5;
				/* */ if (!($interfaceIsEqual(intf, $ifaceNil))) { $s = 17; continue; }
				/* */ $s = 18; continue;
				/* if (!($interfaceIsEqual(intf, $ifaceNil))) { */ case 17:
					r$1 = $assertType(intf, Renderable);
					_r$6 = r$1.GetLayer(); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					/* */ if (!((_r$6 === -1000))) { $s = 19; continue; }
					/* */ $s = 20; continue;
					/* if (!((_r$6 === -1000))) { */ case 19:
						_r$7 = r$1.GetX(); /* */ $s = 22; case 22: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
						x2 = ((_r$7 >> 0));
						_r$8 = r$1.GetY(); /* */ $s = 23; case 23: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
						y2 = ((_r$8 >> 0));
						_r$9 = r$1.GetDims(); /* */ $s = 24; case 24: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
						_tuple$3 = _r$9;
						w = _tuple$3[0];
						h = _tuple$3[1];
						x$1 = w + x2 >> 0;
						y = h + y2 >> 0;
						/* */ if (x$1 > viewPos.X && y > viewPos.Y && x2 < (viewPos.X + screenW >> 0) && y2 < (viewPos.Y + screenH >> 0)) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (x$1 > viewPos.X && y > viewPos.Y && x2 < (viewPos.X + screenW >> 0) && y2 < (viewPos.Y + screenH >> 0)) { */ case 25:
							_r$10 = InDrawPolygon(x$1, y, x2, y2); /* */ $s = 29; case 29: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
							/* */ if (_r$10) { $s = 27; continue; }
							/* */ $s = 28; continue;
							/* if (_r$10) { */ case 27:
								$r = r$1.DrawOffset(world, vx, vy); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* } */ case 28:
						/* } */ case 26:
						$r = heap.Push(newRh, r$1); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 20:
				/* } */ case 18:
			/* } */ $s = 14; continue; case 15:
		/* } */ case 3:
		rh.rs = newRh.rs;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: RenderableHeap.ptr.prototype.draw }; } $f._r$10 = _r$10; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple$3 = _tuple$3; $f.h = h; $f.intf = intf; $f.newRh = newRh; $f.r = r; $f.r$1 = r$1; $f.rh = rh; $f.rp = rp; $f.screenH = screenH; $f.screenW = screenW; $f.viewPos = viewPos; $f.vx = vx; $f.vy = vy; $f.w = w; $f.world = world; $f.x$1 = x$1; $f.x2 = x2; $f.y = y; $f.y2 = y2; $f.$s = $s; $f.$r = $r; return $f;
	};
	RenderableHeap.prototype.draw = function(world, viewPos, screenW, screenH) { return this.$val.draw(world, viewPos, screenW, screenH); };
	InDrawPolygon = function(xi, yi, x2i, y2i) {
		var _r$3, intsct, p2, x$1, x2, x2i, xi, y, y2, y2i, yi, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; intsct = $f.intsct; p2 = $f.p2; x$1 = $f.x$1; x2 = $f.x2; x2i = $f.x2i; xi = $f.xi; y = $f.y; y2 = $f.y2; y2i = $f.y2i; yi = $f.yi; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (usingDrawPolygon) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (usingDrawPolygon) { */ case 1:
			x$1 = (xi);
			y = (yi);
			x2 = (x2i);
			y2 = (y2i);
			p2 = new polyclip.Polygon([new polyclip.Contour([new polyclip.Point.ptr(x$1, y), new polyclip.Point.ptr(x$1, y2), new polyclip.Point.ptr(x2, y2), new polyclip.Point.ptr(x2, y)])]);
			_r$3 = drawPolygon.Construct(1, p2); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			intsct = _r$3;
			$s = -1; return !((intsct.$length === 0));
		/* } */ case 2:
		$s = -1; return true;
		/* */ } return; } if ($f === undefined) { $f = { $blk: InDrawPolygon }; } $f._r$3 = _r$3; $f.intsct = intsct; $f.p2 = p2; $f.x$1 = x$1; $f.x2 = x2; $f.x2i = x2i; $f.xi = xi; $f.y = y; $f.y2 = y2; $f.y2i = y2i; $f.yi = yi; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.InDrawPolygon = InDrawPolygon;
	ResetDrawStack = function() {
		var _r$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = initialDrawStack.Copy(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$pkg.GlobalDrawStack = _r$3;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ResetDrawStack }; } $f._r$3 = _r$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ResetDrawStack = ResetDrawStack;
	DrawStack.ptr.prototype.Draw = function(world, view, w, h) {
		var _i, _ref, a, ds, h, view, w, world, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; ds = $f.ds; h = $f.h; view = $f.view; w = $f.w; world = $f.world; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ds = this;
		_ref = ds.as;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = a.draw(world, $clone(view, image.Point), w, h); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DrawStack.ptr.prototype.Draw }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.ds = ds; $f.h = h; $f.view = view; $f.w = w; $f.world = world; $f.$s = $s; $f.$r = $r; return $f;
	};
	DrawStack.prototype.Draw = function(world, view, w, h) { return this.$val.Draw(world, view, w, h); };
	Draw = function(r, l) {
		var _arg, _arg$1, _r$3, _r$4, _r$5, l, r, x$1, x$2, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; l = $f.l; r = $f.r; x$1 = $f.x$1; x$2 = $f.x$2; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if ($interfaceIsEqual(r, $ifaceNil)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if ($interfaceIsEqual(r, $ifaceNil)) { */ case 1:
			$r = dlog.Error(new sliceType$12([new $String("Tried to draw nil")])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, errors.New("Tried to draw nil")];
		/* } */ case 2:
		/* */ if ($pkg.GlobalDrawStack.as.$length === 1) { $s = 4; continue; }
		/* */ $s = 5; continue;
		/* if ($pkg.GlobalDrawStack.as.$length === 1) { */ case 4:
			_r$3 = (x$1 = $pkg.GlobalDrawStack.as, (0 >= x$1.$length ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + 0])).Add(r, l); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			$s = -1; return [_r$3, $ifaceNil];
		/* } */ case 5:
		/* */ if (l < 0 || l >= $pkg.GlobalDrawStack.as.$length) { $s = 7; continue; }
		/* */ $s = 8; continue;
		/* if (l < 0 || l >= $pkg.GlobalDrawStack.as.$length) { */ case 7:
			$r = dlog.Error(new sliceType$12([new $String("Layer"), new $Int(l), new $String("does not exist on global draw stack")])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [$ifaceNil, errors.New("Layer does not exist on stack")];
		/* } */ case 8:
		_arg = r;
		_r$4 = r.GetLayer(); /* */ $s = 10; case 10: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = _r$4;
		_r$5 = (x$2 = $pkg.GlobalDrawStack.as, ((l < 0 || l >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + l])).Add(_arg, _arg$1); /* */ $s = 11; case 11: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return [_r$5, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: Draw }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.l = l; $f.r = r; $f.x$1 = x$1; $f.x$2 = x$2; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Draw = Draw;
	DrawStack.ptr.prototype.Push = function(a) {
		var a, ds;
		ds = this;
		ds.toPush = $append(ds.toPush, a);
	};
	DrawStack.prototype.Push = function(a) { return this.$val.Push(a); };
	DrawStack.ptr.prototype.Pop = function() {
		var ds;
		ds = this;
		ds.toPop = ds.toPop + (1) >> 0;
	};
	DrawStack.prototype.Pop = function() { return this.$val.Pop(); };
	DrawStack.ptr.prototype.PreDraw = function() {
		var _i, _ref, a, ds, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _ref = $f._ref; a = $f.a; ds = $f.ds; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ds = this;
		if (ds.toPop > 0) {
			ds.as = $subslice(ds.as, 0, (ds.as.$length - ds.toPop >> 0));
			ds.toPop = 0;
		}
		if (ds.toPush.$length > 0) {
			ds.as = $appendSlice(ds.as, ds.toPush);
			ds.toPush = new sliceType([]);
		}
		_ref = ds.as;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			$r = a.PreDraw(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DrawStack.ptr.prototype.PreDraw }; } $f._i = _i; $f._ref = _ref; $f.a = a; $f.ds = ds; $f.$s = $s; $f.$r = $r; return $f;
	};
	DrawStack.prototype.PreDraw = function() { return this.$val.PreDraw(); };
	DrawStack.ptr.prototype.Copy = function() {
		var _i, _r$3, _ref, a, ds, ds2, i, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$3 = $f._r$3; _ref = $f._ref; a = $f.a; ds = $f.ds; ds2 = $f.ds2; i = $f.i; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		ds = this;
		ds2 = new DrawStack.ptr(sliceType.nil, sliceType.nil, 0);
		ds2.as = $makeSlice(sliceType, ds.as.$length);
		_ref = ds.as;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			i = _i;
			a = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = a.Copy(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			(x$1 = ds2.as, ((i < 0 || i >= x$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$1.$array[x$1.$offset + i] = _r$3));
			_i++;
		/* } */ $s = 1; continue; case 2:
		ds2.toPop = ds.toPop;
		ds2.toPush = ds.toPush;
		$s = -1; return ds2;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DrawStack.ptr.prototype.Copy }; } $f._i = _i; $f._r$3 = _r$3; $f._ref = _ref; $f.a = a; $f.ds = ds; $f.ds2 = ds2; $f.i = i; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	DrawStack.prototype.Copy = function() { return this.$val.Copy(); };
	PreDraw = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (resetDraw) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (resetDraw) { */ case 1:
			$r = ResetDrawStack(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			resetDraw = false;
			$s = 3; continue;
		/* } else { */ case 2:
			$r = $pkg.GlobalDrawStack.PreDraw(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: PreDraw }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.PreDraw = PreDraw;
	DefFont = function() {
		var _r$3, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = $pkg.DefFontGenerator.Generate(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: DefFont }; } $f._r$3 = _r$3; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.DefFont = DefFont;
	FontGenerator.ptr.prototype.Generate = function() {
		var _arg, _arg$1, _r$3, _r$4, _r$5, dir$1, fg, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; dir$1 = $f.dir$1; fg = $f.fg; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fg = this;
		dir$1 = fontdir;
		if (fg.File === "") {
			if (!(defaultFontFile === "")) {
				fg.File = defaultFontFile;
			} else {
				dir$1 = filepath.Join(new sliceType$1(["default_assets", "font"]));
				fg.File = "luxisr.ttf";
			}
		}
		if (fg.Size === 0) {
			fg.Size = defaultSize;
		}
		if (fg.DPI === 0) {
			fg.DPI = defaultDPI;
		}
		if ($interfaceIsEqual(fg.Color, $ifaceNil)) {
			fg.Color = defaultColor;
		}
		_r$3 = LoadFont(dir$1, fg.File); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg = _r$3;
		_r$4 = parseFontHinting(fg.Hinting); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = new truetype.Options.ptr(fg.Size, fg.DPI, _r$4, 0, 0, 0);
		_r$5 = truetype.NewFace(_arg, _arg$1); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		$s = -1; return new Font.ptr($clone(fg, FontGenerator), new font.Drawer.ptr($ifaceNil, fg.Color, _r$5, new fixed.Point26_6.ptr(0, 0)));
		/* */ } return; } if ($f === undefined) { $f = { $blk: FontGenerator.ptr.prototype.Generate }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.dir$1 = dir$1; $f.fg = fg; $f.$s = $s; $f.$r = $r; return $f;
	};
	FontGenerator.prototype.Generate = function() { return this.$val.Generate(); };
	FontGenerator.ptr.prototype.Copy = function() {
		var fg, newFg;
		fg = this;
		newFg = new FontGenerator.ptr("", $ifaceNil, 0, "", 0);
		FontGenerator.copy(newFg, fg);
		return newFg;
	};
	FontGenerator.prototype.Copy = function() { return this.$val.Copy(); };
	Font.ptr.prototype.Refresh = function() {
		var _r$3, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.FontGenerator.Generate(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		Font.copy(f, _r$3);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.Refresh }; } $f._r$3 = _r$3; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.Refresh = function() { return this.$val.Refresh(); };
	Font.ptr.prototype.Copy = function() {
		var _r$3, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		_r$3 = f.FontGenerator.Generate(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return _r$3;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.Copy }; } $f._r$3 = _r$3; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.Copy = function() { return this.$val.Copy(); };
	Font.ptr.prototype.Reset = function() {
		var _r$3, f, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; f = $f.f; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		f = this;
		FontGenerator.copy(f.FontGenerator, new FontGenerator.ptr("", $ifaceNil, 0, "", 0));
		_r$3 = f.FontGenerator.Generate(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		Font.copy(f, _r$3);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Font.ptr.prototype.Reset }; } $f._r$3 = _r$3; $f.f = f; $f.$s = $s; $f.$r = $r; return $f;
	};
	Font.prototype.Reset = function() { return this.$val.Reset(); };
	SetFontDefaults = function(wd$1, assetPath, fontPath, hinting, color$1, file, size, dpi) {
		var _r$3, _r$4, assetPath, color$1, dpi, file, fontPath, hinting, size, wd$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; assetPath = $f.assetPath; color$1 = $f.color$1; dpi = $f.dpi; file = $f.file; fontPath = $f.fontPath; hinting = $f.hinting; size = $f.size; wd$1 = $f.wd$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		fontdir = filepath.Join(new sliceType$1([wd$1, assetPath, fontPath]));
		_r$3 = parseFontHinting(hinting); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		defaultHinting = _r$3;
		defaultSize = size;
		defaultDPI = dpi;
		_r$4 = FontColor(color$1); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		defaultColor = _r$4;
		defaultFontFile = file;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetFontDefaults }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f.assetPath = assetPath; $f.color$1 = color$1; $f.dpi = dpi; $f.file = file; $f.fontPath = fontPath; $f.hinting = hinting; $f.size = size; $f.wd$1 = wd$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetFontDefaults = SetFontDefaults;
	parseFontHinting = function(hintType) {
		var _1, _r$3, faceHinting, hintType, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; faceHinting = $f.faceHinting; hintType = $f.hintType; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		faceHinting = 0;
		_r$3 = strings.ToLower(hintType); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		hintType = _r$3;
			_1 = hintType;
			/* */ if (_1 === ("none")) { $s = 3; continue; }
			/* */ if (_1 === ("vertical")) { $s = 4; continue; }
			/* */ if (_1 === ("full")) { $s = 5; continue; }
			/* */ if (_1 === ("")) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (_1 === ("none")) { */ case 3:
				faceHinting = 0;
				$s = 8; continue;
			/* } else if (_1 === ("vertical")) { */ case 4:
				faceHinting = 1;
				$s = 8; continue;
			/* } else if (_1 === ("full")) { */ case 5:
				faceHinting = 2;
				$s = 8; continue;
			/* } else if (_1 === ("")) { */ case 6:
				faceHinting = 0;
				$s = 8; continue;
			/* } else { */ case 7:
				$r = dlog.Error(new sliceType$12([new $String("Unable to parse font hinting, "), new $String(hintType)])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				faceHinting = 0;
			/* } */ case 8:
		case 2:
		faceHinting = faceHinting;
		$s = -1; return faceHinting;
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseFontHinting }; } $f._1 = _1; $f._r$3 = _r$3; $f.faceHinting = faceHinting; $f.hintType = hintType; $f.$s = $s; $f.$r = $r; return $f;
	};
	FontColor = function(s) {
		var _1, _r$3, s, x$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r$3 = $f._r$3; s = $f.s; x$1 = $f.x$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = strings.ToLower(s); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		s = _r$3;
		_1 = s;
		if (_1 === ("white")) {
			$s = -1; return image.White;
		} else if (_1 === ("black")) {
			$s = -1; return image.Black;
		} else if (_1 === ("green")) {
			$s = -1; return image.NewUniform((x$1 = new color.RGBA.ptr(0, 255, 0, 255), new x$1.constructor.elem(x$1)));
		} else {
			$s = -1; return defaultColor;
		}
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: FontColor }; } $f._1 = _1; $f._r$3 = _r$3; $f.s = s; $f.x$1 = x$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.FontColor = FontColor;
	LoadFont = function(dir$1, fontFile) {
		var _entry, _entry$1, _key, _r$3, _r$4, _r$5, _r$6, _r$7, _tuple$3, _tuple$4, _tuple$5, _tuple$6, dir$1, err, font$1, fontBytes, fontFile, ok, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; dir$1 = $f.dir$1; err = $f.err; font$1 = $f.font$1; fontBytes = $f.fontBytes; fontFile = $f.fontFile; ok = $f.ok; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tuple$3 = (_entry = loadedFonts[$String.keyFor(fontFile)], _entry !== undefined ? [_entry.v, true] : [ptrType$6.nil, false]);
		ok = _tuple$3[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			fontBytes = sliceType$6.nil;
			err = $ifaceNil;
			/* */ if (dir$1 === filepath.Join(new sliceType$1(["default_assets", "font"]))) { $s = 3; continue; }
			/* */ $s = 4; continue;
			/* if (dir$1 === filepath.Join(new sliceType$1(["default_assets", "font"]))) { */ case 3:
				_r$3 = binaryFonts(filepath.Join(new sliceType$1([dir$1, fontFile]))); /* */ $s = 6; case 6: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_tuple$4 = _r$3;
				fontBytes = _tuple$4[0];
				err = _tuple$4[1];
				$s = 5; continue;
			/* } else { */ case 4:
				_r$4 = fileutil.ReadFile(filepath.Join(new sliceType$1([dir$1, fontFile]))); /* */ $s = 7; case 7: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_tuple$5 = _r$4;
				fontBytes = _tuple$5[0];
				err = _tuple$5[1];
			/* } */ case 5:
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 8:
				_r$5 = err.Error(); /* */ $s = 10; case 10: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				$r = dlog.Error(new sliceType$12([new $String(_r$5)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return ptrType$6.nil;
			/* } */ case 9:
			_r$6 = truetype.Parse(fontBytes); /* */ $s = 12; case 12: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			_tuple$6 = _r$6;
			font$1 = _tuple$6[0];
			err = _tuple$6[1];
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 13:
				_r$7 = err.Error(); /* */ $s = 15; case 15: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				$r = dlog.Error(new sliceType$12([new $String(_r$7)])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return ptrType$6.nil;
			/* } */ case 14:
			_key = fontFile; (loadedFonts || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: font$1 };
		/* } */ case 2:
		$s = -1; return (_entry$1 = loadedFonts[$String.keyFor(fontFile)], _entry$1 !== undefined ? _entry$1.v : ptrType$6.nil);
		/* */ } return; } if ($f === undefined) { $f = { $blk: LoadFont }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f.dir$1 = dir$1; $f.err = err; $f.font$1 = font$1; $f.fontBytes = fontBytes; $f.fontFile = fontFile; $f.ok = ok; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.LoadFont = LoadFont;
	Layered.ptr.prototype.GetLayer = function() {
		var ld;
		ld = this;
		if (ld === ptrType$11.nil) {
			return -1000;
		}
		return ld.layer;
	};
	Layered.prototype.GetLayer = function() { return this.$val.GetLayer(); };
	Layered.ptr.prototype.SetLayer = function(l) {
		var l, ld;
		ld = this;
		ld.layer = l;
	};
	Layered.prototype.SetLayer = function(l) { return this.$val.SetLayer(l); };
	Layered.ptr.prototype.UnDraw = function() {
		var ld;
		ld = this;
		ld.layer = -1000;
	};
	Layered.prototype.UnDraw = function() { return this.$val.UnDraw(); };
	NewLayeredPoint = function(x$1, y, l) {
		var l, x$1, y;
		return new LayeredPoint.ptr($clone(physics.NewVector(x$1, y), physics.Vector), new Layered.ptr(l));
	};
	$pkg.NewLayeredPoint = NewLayeredPoint;
	LayeredPoint.ptr.prototype.GetLayer = function() {
		var ldp;
		ldp = this;
		if (ldp === ptrType$12.nil) {
			return -1000;
		}
		return ldp.Layered.GetLayer();
	};
	LayeredPoint.prototype.GetLayer = function() { return this.$val.GetLayer(); };
	LayeredPoint.ptr.prototype.Copy = function() {
		var ldp, ldp2;
		ldp = this;
		ldp2 = new LayeredPoint.ptr(new physics.Vector.ptr(ptrType$1.nil, ptrType$1.nil, 0, 0), new Layered.ptr(0));
		physics.Vector.copy(ldp2.Vector, $clone(ldp.Vector, physics.Vector).Copy());
		Layered.copy(ldp2.Layered, ldp.Layered);
		return ldp2;
	};
	LayeredPoint.prototype.Copy = function() { return this.$val.Copy(); };
	LayeredPoint.ptr.prototype.ShiftX = function(x$1) {
		var ldp, x$1;
		ldp = this;
		$clone(ldp.Vector, physics.Vector).ShiftX(x$1);
	};
	LayeredPoint.prototype.ShiftX = function(x$1) { return this.$val.ShiftX(x$1); };
	LayeredPoint.ptr.prototype.ShiftY = function(y) {
		var ldp, y;
		ldp = this;
		$clone(ldp.Vector, physics.Vector).ShiftY(y);
	};
	LayeredPoint.prototype.ShiftY = function(y) { return this.$val.ShiftY(y); };
	LayeredPoint.ptr.prototype.SetPos = function(x$1, y) {
		var ldp, x$1, y;
		ldp = this;
		$clone(ldp.Vector, physics.Vector).SetPos(x$1, y);
	};
	LayeredPoint.prototype.SetPos = function(x$1, y) { return this.$val.SetPos(x$1, y); };
	LayeredPoint.ptr.prototype.GetDims = function() {
		var ldp;
		ldp = this;
		return [6, 6];
	};
	LayeredPoint.prototype.GetDims = function() { return this.$val.GetDims(); };
	LayeredPoint.ptr.prototype.String = function() {
		var l, ldp, x$1, y;
		ldp = this;
		x$1 = strconv.FormatFloat($clone(ldp.Vector, physics.Vector).X(), 102, 2, 32);
		y = strconv.FormatFloat($clone(ldp.Vector, physics.Vector).Y(), 102, 2, 32);
		l = strconv.Itoa(ldp.Layered.layer);
		return "X(): " + x$1 + ", Y(): " + y + ", L: " + l;
	};
	LayeredPoint.prototype.String = function() { return this.$val.String(); };
	loadImage = function(directory, fileName) {
		var _1, _arg, _arg$1, _arg$2, _entry, _entry$1, _key, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, bounds, directory, err, ext, fileName, img, imgFile, ok, r, rgba, x$1, y, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _entry = $f._entry; _entry$1 = $f._entry$1; _key = $f._key; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; bounds = $f.bounds; directory = $f.directory; err = $f.err; ext = $f.ext; fileName = $f.fileName; img = $f.img; imgFile = $f.imgFile; ok = $f.ok; r = $f.r; rgba = $f.rgba; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		err = [err];
		imgFile = [imgFile];
		$r = loadLock.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple$3 = (_entry = loadedImages[$String.keyFor(fileName)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		ok = _tuple$3[1];
		/* */ if (!ok) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!ok) { */ case 2:
			_r$3 = fileutil.Open(filepath.Join(new sliceType$1([directory, fileName]))); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$4 = _r$3;
			imgFile[0] = _tuple$4[0];
			err[0] = _tuple$4[1];
			/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 5:
				$r = loadLock.Unlock(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$4.nil, err[0]];
			/* } */ case 6:
			$deferred.push([(function(err, imgFile) { return function $b() {
				var _r$4, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$4 = $f._r$4; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r$4 = imgFile[0].Close(); /* */ $s = 1; case 1: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				err[0] = _r$4;
				/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 2:
					$r = dlog.Error(new sliceType$12([err[0]])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 3:
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$4 = _r$4; $f.$s = $s; $f.$r = $r; return $f;
			}; })(err, imgFile), []]);
			ext = $substring(fileName, (fileName.length - 4 >> 0));
			img = $ifaceNil;
				_1 = ext;
				/* */ if (_1 === (".png")) { $s = 9; continue; }
				/* */ if (_1 === (".gif")) { $s = 10; continue; }
				/* */ if (_1 === ("jpeg") || _1 === (".jpg")) { $s = 11; continue; }
				/* */ $s = 12; continue;
				/* if (_1 === (".png")) { */ case 9:
					_r$4 = png.Decode(imgFile[0]); /* */ $s = 13; case 13: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
					_tuple$5 = _r$4;
					img = _tuple$5[0];
					err[0] = _tuple$5[1];
					$s = 12; continue;
				/* } else if (_1 === (".gif")) { */ case 10:
					_r$5 = gif.Decode(imgFile[0]); /* */ $s = 14; case 14: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
					_tuple$6 = _r$5;
					img = _tuple$6[0];
					err[0] = _tuple$6[1];
					$s = 12; continue;
				/* } else if (_1 === ("jpeg") || _1 === (".jpg")) { */ case 11:
					_r$6 = jpeg.Decode(imgFile[0]); /* */ $s = 15; case 15: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
					_tuple$7 = _r$6;
					img = _tuple$7[0];
					err[0] = _tuple$7[1];
				/* } */ case 12:
			case 8:
			/* */ if (!($interfaceIsEqual(err[0], $ifaceNil))) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* if (!($interfaceIsEqual(err[0], $ifaceNil))) { */ case 16:
				$r = loadLock.Unlock(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return [ptrType$4.nil, err[0]];
			/* } */ case 17:
			_r$7 = img.Bounds(); /* */ $s = 19; case 19: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
			bounds = $clone(_r$7, image.Rectangle);
			rgba = image.NewRGBA($clone(bounds, image.Rectangle));
			x$1 = 0;
			/* while (true) { */ case 20:
				/* if (!(x$1 < bounds.Max.X)) { break; } */ if(!(x$1 < bounds.Max.X)) { $s = 21; continue; }
				y = 0;
				/* while (true) { */ case 22:
					/* if (!(y < bounds.Max.Y)) { break; } */ if(!(y < bounds.Max.Y)) { $s = 23; continue; }
					_arg = x$1;
					_arg$1 = y;
					_r$8 = img.At(x$1, y); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$9 = color.RGBAModel.Convert(_r$8); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$2 = _r$9;
					$r = rgba.Set(_arg, _arg$1, _arg$2); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					y = y + (1) >> 0;
				/* } */ $s = 22; continue; case 23:
				x$1 = x$1 + (1) >> 0;
			/* } */ $s = 20; continue; case 21:
			_key = fileName; (loadedImages || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: rgba };
			$r = dlog.Verb(new sliceType$12([new $String("Loaded filename: "), new $String(fileName)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 3:
		r = (_entry$1 = loadedImages[$String.keyFor(fileName)], _entry$1 !== undefined ? _entry$1.v : ptrType$4.nil);
		$r = loadLock.Unlock(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return [r, $ifaceNil];
		/* */ } return; } } catch(err) { $err = err; $s = -1; return [ptrType$4.nil, $ifaceNil]; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: loadImage }; } $f._1 = _1; $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._entry = _entry; $f._entry$1 = _entry$1; $f._key = _key; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f.bounds = bounds; $f.directory = directory; $f.err = err; $f.ext = ext; $f.fileName = fileName; $f.img = img; $f.imgFile = imgFile; $f.ok = ok; $f.r = r; $f.rgba = rgba; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	LoadSheet = function(directory, fileName, w, h, pad) {
		var _entry, _entry$1, _entry$2, _entry$3, _key, _key$1, _q, _q$1, _q$2, _q$3, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple$3, _tuple$4, _tuple$5, bounds, directory, err, fileName, h, heightBuffers, i, j, ok, ok$1, pad, r, remainderH, remainderW, rgba, sheet, sheetH, sheetP, sheetW, w, widthBuffers, x$1, x$2, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _entry$3 = $f._entry$3; _key = $f._key; _key$1 = $f._key$1; _q = $f._q; _q$1 = $f._q$1; _q$2 = $f._q$2; _q$3 = $f._q$3; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; bounds = $f.bounds; directory = $f.directory; err = $f.err; fileName = $f.fileName; h = $f.h; heightBuffers = $f.heightBuffers; i = $f.i; j = $f.j; ok = $f.ok; ok$1 = $f.ok$1; pad = $f.pad; r = $f.r; remainderH = $f.remainderH; remainderW = $f.remainderW; rgba = $f.rgba; sheet = $f.sheet; sheetH = $f.sheetH; sheetP = $f.sheetP; sheetW = $f.sheetW; w = $f.w; widthBuffers = $f.widthBuffers; x$1 = $f.x$1; x$2 = $f.x$2; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		sheet = [sheet];
		_tuple$3 = (_entry = loadedImages[$String.keyFor(fileName)], _entry !== undefined ? [_entry.v, true] : [ptrType$4.nil, false]);
		ok = _tuple$3[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			$r = dlog.Verb(new sliceType$12([new $String("Missing file in loaded images: "), new $String(fileName)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = loadImage(directory, fileName); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$4 = _r$3;
			r = _tuple$4[0];
			err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$s = -1; return [ptrType$2.nil, err];
			}
			_key = fileName; (loadedImages || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: r };
		/* } */ case 2:
		_tuple$5 = (_entry$1 = loadedSheets[$String.keyFor(fileName)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$2.nil, false]);
		sheetP = _tuple$5[0];
		ok$1 = _tuple$5[1];
		if (ok$1) {
			$s = -1; return [sheetP, $ifaceNil];
		}
		$r = dlog.Verb(new sliceType$12([new $String("Loading sheet: "), new $String(fileName)])); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		rgba = (_entry$2 = loadedImages[$String.keyFor(fileName)], _entry$2 !== undefined ? _entry$2.v : ptrType$4.nil);
		bounds = $clone(rgba.Bounds(), image.Rectangle);
		sheetW = (_q = bounds.Max.X / w, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		remainderW = (_r$4 = bounds.Max.X % w, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero"));
		sheetH = (_q$1 = bounds.Max.Y / h, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		remainderH = (_r$5 = bounds.Max.Y % h, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero"));
		_tmp = 0;
		_tmp$1 = 0;
		widthBuffers = _tmp;
		heightBuffers = _tmp$1;
		if (!((pad === 0))) {
			widthBuffers = (_q$2 = remainderW / pad, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
			heightBuffers = (_q$3 = remainderH / pad, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"));
		} else {
			widthBuffers = sheetW - 1 >> 0;
			heightBuffers = sheetH - 1 >> 0;
		}
		/* */ if (sheetW < 1 || sheetH < 1 || !((widthBuffers === (sheetW - 1 >> 0))) || !((heightBuffers === (sheetH - 1 >> 0)))) { $s = 6; continue; }
		/* */ $s = 7; continue;
		/* if (sheetW < 1 || sheetH < 1 || !((widthBuffers === (sheetW - 1 >> 0))) || !((heightBuffers === (sheetH - 1 >> 0)))) { */ case 6:
			$r = dlog.Error(new sliceType$12([new $String("Bad dimensions given to load sheet")])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return [ptrType$2.nil, errors.New("Bad dimensions given to load sheet")];
		/* } */ case 7:
		sheet[0] = $makeSlice(Sheet, sheetW);
		i = 0;
		x$1 = 0;
		/* while (true) { */ case 9:
			/* if (!(x$1 < bounds.Max.X)) { break; } */ if(!(x$1 < bounds.Max.X)) { $s = 10; continue; }
			((i < 0 || i >= sheet[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : sheet[0].$array[sheet[0].$offset + i] = $makeSlice(sliceType$5, sheetH));
			j = 0;
			y = 0;
			/* while (true) { */ case 11:
				/* if (!(y < bounds.Max.Y)) { break; } */ if(!(y < bounds.Max.Y)) { $s = 12; continue; }
				_r$6 = subImage(rgba, x$1, y, w, h); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				(x$2 = ((i < 0 || i >= sheet[0].$length) ? ($throwRuntimeError("index out of range"), undefined) : sheet[0].$array[sheet[0].$offset + i]), ((j < 0 || j >= x$2.$length) ? ($throwRuntimeError("index out of range"), undefined) : x$2.$array[x$2.$offset + j] = _r$6));
				j = j + (1) >> 0;
				y = y + (((h + pad >> 0))) >> 0;
			/* } */ $s = 11; continue; case 12:
			i = i + (1) >> 0;
			x$1 = x$1 + (((w + pad >> 0))) >> 0;
		/* } */ $s = 9; continue; case 10:
		$r = dlog.Verb(new sliceType$12([new $String("Loaded sheet into map")])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key$1 = fileName; (loadedSheets || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: (sheet.$ptr || (sheet.$ptr = new ptrType$2(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, sheet))) };
		$s = -1; return [(_entry$3 = loadedSheets[$String.keyFor(fileName)], _entry$3 !== undefined ? _entry$3.v : ptrType$2.nil), $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: LoadSheet }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._entry$3 = _entry$3; $f._key = _key; $f._key$1 = _key$1; $f._q = _q; $f._q$1 = _q$1; $f._q$2 = _q$2; $f._q$3 = _q$3; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f.bounds = bounds; $f.directory = directory; $f.err = err; $f.fileName = fileName; $f.h = h; $f.heightBuffers = heightBuffers; $f.i = i; $f.j = j; $f.ok = ok; $f.ok$1 = ok$1; $f.pad = pad; $f.r = r; $f.remainderH = remainderH; $f.remainderW = remainderW; $f.rgba = rgba; $f.sheet = sheet; $f.sheetH = sheetH; $f.sheetP = sheetP; $f.sheetW = sheetW; $f.w = w; $f.widthBuffers = widthBuffers; $f.x$1 = x$1; $f.x$2 = x$2; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.LoadSheet = LoadSheet;
	subImage = function(rgba, x$1, y, w, h) {
		var h, i, j, out, rgba, w, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; h = $f.h; i = $f.i; j = $f.j; out = $f.out; rgba = $f.rgba; w = $f.w; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		out = image.NewRGBA($clone(image.Rect(0, 0, w, h), image.Rectangle));
		i = 0;
		/* while (true) { */ case 1:
			/* if (!(i < w)) { break; } */ if(!(i < w)) { $s = 2; continue; }
			j = 0;
			/* while (true) { */ case 3:
				/* if (!(j < h)) { break; } */ if(!(j < h)) { $s = 4; continue; }
				$r = out.Set(i, j, rgba.At(x$1 + i >> 0, y + j >> 0)); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				j = j + (1) >> 0;
			/* } */ $s = 3; continue; case 4:
			i = i + (1) >> 0;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: subImage }; } $f.h = h; $f.i = i; $f.j = j; $f.out = out; $f.rgba = rgba; $f.w = w; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	BatchLoad = function(baseFolder) {
		var _arg, _arg$1, _arg$10, _arg$11, _arg$12, _arg$13, _arg$14, _arg$15, _arg$16, _arg$17, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _entry, _i, _i$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, _r$16, _r$17, _r$18, _r$19, _r$20, _r$21, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _ref, _ref$1, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, aliases, baseFolder, buff, err, err$1, err$2, file, files, folder, folders, frameH, frameW, h, i, name, ok, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$12 = $f._arg$12; _arg$13 = $f._arg$13; _arg$14 = $f._arg$14; _arg$15 = $f._arg$15; _arg$16 = $f._arg$16; _arg$17 = $f._arg$17; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _entry = $f._entry; _i = $f._i; _i$1 = $f._i$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$15 = $f._r$15; _r$16 = $f._r$16; _r$17 = $f._r$17; _r$18 = $f._r$18; _r$19 = $f._r$19; _r$20 = $f._r$20; _r$21 = $f._r$21; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _ref = $f._ref; _ref$1 = $f._ref$1; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; aliases = $f.aliases; baseFolder = $f.baseFolder; buff = $f.buff; err = $f.err; err$1 = $f.err$1; err$2 = $f.err$2; file = $f.file; files = $f.files; folder = $f.folder; folders = $f.folders; frameH = $f.frameH; frameW = $f.frameW; h = $f.h; i = $f.i; name = $f.name; ok = $f.ok; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r$3 = fileutil.ReadDir(baseFolder); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		folders = _tuple$3[0];
		err = _tuple$3[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = dlog.Error(new sliceType$12([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return err;
		/* } */ case 3:
		_r$4 = parseAliasFile(baseFolder); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		aliases = _r$4;
		_ref = folders;
		_i = 0;
		/* while (true) { */ case 6:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 7; continue; }
			i = _i;
			folder = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_arg = new $Int(i);
			_r$5 = folder.Name(); /* */ $s = 8; case 8: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_arg$1 = new $String(_r$5);
			$r = dlog.Verb(new sliceType$12([new $String("folder "), _arg, _arg$1])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$6 = folder.IsDir(); /* */ $s = 13; case 13: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
			/* */ if (_r$6) { $s = 10; continue; }
			/* */ $s = 11; continue;
			/* if (_r$6) { */ case 10:
				_arg$2 = aliases;
				_r$7 = folder.Name(); /* */ $s = 14; case 14: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_arg$3 = _r$7;
				_r$8 = parseLoadFolderName(_arg$2, _arg$3); /* */ $s = 15; case 15: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_tuple$4 = _r$8;
				frameW = _tuple$4[0];
				frameH = _tuple$4[1];
				err$1 = _tuple$4[2];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					$s = -1; return err$1;
				}
				_arg$4 = baseFolder;
				_r$9 = folder.Name(); /* */ $s = 16; case 16: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
				_arg$5 = _r$9;
				_r$10 = filepath.Join(new sliceType$1([_arg$4, _arg$5])); /* */ $s = 17; case 17: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
				_r$11 = fileutil.ReadDir(_r$10); /* */ $s = 18; case 18: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
				_tuple$5 = _r$11;
				files = _tuple$5[0];
				_ref$1 = files;
				_i$1 = 0;
				/* while (true) { */ case 19:
					/* if (!(_i$1 < _ref$1.$length)) { break; } */ if(!(_i$1 < _ref$1.$length)) { $s = 20; continue; }
					file = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref$1.$array[_ref$1.$offset + _i$1]);
					_r$12 = file.IsDir(); /* */ $s = 23; case 23: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
					/* */ if (!_r$12) { $s = 21; continue; }
					/* */ $s = 22; continue;
					/* if (!_r$12) { */ case 21:
						_r$13 = file.Name(); /* */ $s = 24; case 24: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
						name = _r$13;
						_tuple$6 = (_entry = supportedFileEndings[$String.keyFor($substring(name, (name.length - 4 >> 0)))], _entry !== undefined ? [_entry.v, true] : [false, false]);
						ok = _tuple$6[1];
						/* */ if (ok) { $s = 25; continue; }
						/* */ $s = 26; continue;
						/* if (ok) { */ case 25:
							$r = dlog.Verb(new sliceType$12([new $String("loading file "), new $String(name)])); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_arg$6 = baseFolder;
							_r$14 = folder.Name(); /* */ $s = 29; case 29: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
							_r$15 = filepath.Join(new sliceType$1([_r$14, name])); /* */ $s = 30; case 30: if($c) { $c = false; _r$15 = _r$15.$blk(); } if (_r$15 && _r$15.$blk !== undefined) { break s; }
							_arg$7 = _r$15;
							_r$16 = loadImage(_arg$6, _arg$7); /* */ $s = 31; case 31: if($c) { $c = false; _r$16 = _r$16.$blk(); } if (_r$16 && _r$16.$blk !== undefined) { break s; }
							_tuple$7 = _r$16;
							buff = _tuple$7[0];
							err$2 = _tuple$7[1];
							/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 32; continue; }
							/* */ $s = 33; continue;
							/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 32:
								$r = dlog.Error(new sliceType$12([err$2])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_i$1++;
								/* continue; */ $s = 19; continue;
							/* } */ case 33:
							w = buff.Bounds().Max.X;
							h = buff.Bounds().Max.Y;
							$r = dlog.Verb(new sliceType$12([new $String("buffer: "), new $Int(w), new $Int(h), new $String(" frame: "), new $Int(frameW), new $Int(frameH)])); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							/* */ if ((frameW === 0) || (frameH === 0)) { $s = 36; continue; }
							/* */ if (w < frameW || h < frameH) { $s = 37; continue; }
							/* */ if (!((w === frameW)) || !((h === frameH))) { $s = 38; continue; }
							/* */ $s = 39; continue;
							/* if ((frameW === 0) || (frameH === 0)) { */ case 36:
								_i$1++;
								/* continue; */ $s = 19; continue;
								$s = 39; continue;
							/* } else if (w < frameW || h < frameH) { */ case 37:
								_arg$8 = new $String(name);
								_r$17 = folder.Name(); /* */ $s = 40; case 40: if($c) { $c = false; _r$17 = _r$17.$blk(); } if (_r$17 && _r$17.$blk !== undefined) { break s; }
								_arg$9 = new $String(_r$17);
								_arg$10 = new $Int(frameW);
								_arg$11 = new $Int(frameH);
								$r = dlog.Error(new sliceType$12([new $String("File "), _arg$8, new $String(" in folder"), _arg$9, new $String(" is too small for folder dimensions"), _arg$10, _arg$11])); /* */ $s = 41; case 41: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								$s = -1; return errors.New("File in folder is too small for these folder dimensions");
							/* } else if (!((w === frameW)) || !((h === frameH))) { */ case 38:
								$r = dlog.Verb(new sliceType$12([new $String("Loading as sprite sheet")])); /* */ $s = 42; case 42: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								_arg$12 = baseFolder;
								_r$18 = folder.Name(); /* */ $s = 43; case 43: if($c) { $c = false; _r$18 = _r$18.$blk(); } if (_r$18 && _r$18.$blk !== undefined) { break s; }
								_r$19 = filepath.Join(new sliceType$1([_r$18, name])); /* */ $s = 44; case 44: if($c) { $c = false; _r$19 = _r$19.$blk(); } if (_r$19 && _r$19.$blk !== undefined) { break s; }
								_arg$13 = _r$19;
								_arg$14 = frameW;
								_arg$15 = frameH;
								_arg$16 = defaultPad;
								_r$20 = LoadSheet(_arg$12, _arg$13, _arg$14, _arg$15, _arg$16); /* */ $s = 45; case 45: if($c) { $c = false; _r$20 = _r$20.$blk(); } if (_r$20 && _r$20.$blk !== undefined) { break s; }
								_tuple$8 = _r$20;
								err$2 = _tuple$8[1];
								/* */ if (!($interfaceIsEqual(err$2, $ifaceNil))) { $s = 46; continue; }
								/* */ $s = 47; continue;
								/* if (!($interfaceIsEqual(err$2, $ifaceNil))) { */ case 46:
									$r = dlog.Error(new sliceType$12([err$2])); /* */ $s = 48; case 48: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
								/* } */ case 47:
							/* } */ case 39:
							$s = 27; continue;
						/* } else { */ case 26:
							$r = dlog.Error(new sliceType$12([new $String("Unsupported file ending for batchLoad: "), new $String(name)])); /* */ $s = 49; case 49: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						/* } */ case 27:
					/* } */ case 22:
					_i$1++;
				/* } */ $s = 19; continue; case 20:
				$s = 12; continue;
			/* } else { */ case 11:
				_r$21 = folder.Name(); /* */ $s = 50; case 50: if($c) { $c = false; _r$21 = _r$21.$blk(); } if (_r$21 && _r$21.$blk !== undefined) { break s; }
				_arg$17 = new $String(_r$21);
				$r = dlog.Verb(new sliceType$12([new $String("Not Folder"), _arg$17])); /* */ $s = 51; case 51: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 12:
			_i++;
		/* } */ $s = 6; continue; case 7:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: BatchLoad }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$12 = _arg$12; $f._arg$13 = _arg$13; $f._arg$14 = _arg$14; $f._arg$15 = _arg$15; $f._arg$16 = _arg$16; $f._arg$17 = _arg$17; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._entry = _entry; $f._i = _i; $f._i$1 = _i$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$15 = _r$15; $f._r$16 = _r$16; $f._r$17 = _r$17; $f._r$18 = _r$18; $f._r$19 = _r$19; $f._r$20 = _r$20; $f._r$21 = _r$21; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._ref = _ref; $f._ref$1 = _ref$1; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f.aliases = aliases; $f.baseFolder = baseFolder; $f.buff = buff; $f.err = err; $f.err$1 = err$1; $f.err$2 = err$2; $f.file = file; $f.files = files; $f.folder = folder; $f.folders = folders; $f.frameH = frameH; $f.frameW = frameW; $f.h = h; $f.i = i; $f.name = name; $f.ok = ok; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.BatchLoad = BatchLoad;
	parseAliasFile = function(baseFolder) {
		var _r$3, _r$4, _tuple$3, aliasFile, aliases, baseFolder, err, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _tuple$3 = $f._tuple$3; aliasFile = $f.aliasFile; aliases = $f.aliases; baseFolder = $f.baseFolder; err = $f.err; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		aliases = [aliases];
		_r$3 = fileutil.ReadFile(filepath.Join(new sliceType$1([baseFolder, "alias.json"]))); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_tuple$3 = _r$3;
		aliasFile = _tuple$3[0];
		err = _tuple$3[1];
		aliases[0] = {};
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 2:
			_r$4 = json.Unmarshal(aliasFile, (aliases.$ptr || (aliases.$ptr = new ptrType$14(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aliases)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			err = _r$4;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
				$r = dlog.Error(new sliceType$12([new $String("Alias file unparseable: "), err])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 6:
		/* } */ case 3:
		$s = -1; return aliases[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseAliasFile }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._tuple$3 = _tuple$3; $f.aliasFile = aliasFile; $f.aliases = aliases; $f.baseFolder = baseFolder; $f.err = err; $f.$s = $s; $f.$r = $r; return $f;
	};
	parseLoadFolderName = function(aliases, name) {
		var _entry, _r$3, _r$4, _r$5, _r$6, _tmp, _tmp$1, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, aliased, aliases, frameH, frameW, name, ok, result, result$1, result$2, result$3, val, val$1, vals, vals$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple$3 = $f._tuple$3; _tuple$4 = $f._tuple$4; _tuple$5 = $f._tuple$5; _tuple$6 = $f._tuple$6; _tuple$7 = $f._tuple$7; _tuple$8 = $f._tuple$8; _tuple$9 = $f._tuple$9; aliased = $f.aliased; aliases = $f.aliases; frameH = $f.frameH; frameW = $f.frameW; name = $f.name; ok = $f.ok; result = $f.result; result$1 = $f.result$1; result$2 = $f.result$2; result$3 = $f.result$3; val = $f.val; val$1 = $f.val$1; vals = $f.vals; vals$1 = $f.vals$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_tmp = 0;
		_tmp$1 = 0;
		frameW = _tmp;
		frameH = _tmp$1;
		/* */ if (name === "raw") { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (name === "raw") { */ case 1:
			frameW = 0;
			frameH = 0;
			$s = 3; continue;
		/* } else { */ case 2:
			_r$3 = regexpTwoNumbers.Find((new sliceType$6($stringToBytes(name)))); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			result = _r$3;
			/* */ if (!(result === sliceType$6.nil)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!(result === sliceType$6.nil)) { */ case 5:
				vals = strings.Split(($bytesToString(result)), "x");
				$r = dlog.Verb(new sliceType$12([new $String("Extracted dimensions: "), vals])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple$3 = strconv.Atoi((0 >= vals.$length ? ($throwRuntimeError("index out of range"), undefined) : vals.$array[vals.$offset + 0]));
				frameW = _tuple$3[0];
				_tuple$4 = strconv.Atoi((1 >= vals.$length ? ($throwRuntimeError("index out of range"), undefined) : vals.$array[vals.$offset + 1]));
				frameH = _tuple$4[0];
				$s = 7; continue;
			/* } else { */ case 6:
				_r$4 = regexpSingleNumber.Find((new sliceType$6($stringToBytes(name)))); /* */ $s = 9; case 9: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				result$1 = _r$4;
				/* */ if (!(result$1 === sliceType$6.nil)) { $s = 10; continue; }
				/* */ $s = 11; continue;
				/* if (!(result$1 === sliceType$6.nil)) { */ case 10:
					_tuple$5 = strconv.Atoi(($bytesToString(result$1)));
					val = _tuple$5[0];
					frameW = val;
					frameH = val;
					$s = 12; continue;
				/* } else { */ case 11:
					_tuple$6 = (_entry = aliases[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : ["", false]);
					aliased = _tuple$6[0];
					ok = _tuple$6[1];
					/* */ if (ok) { $s = 13; continue; }
					/* */ $s = 14; continue;
					/* if (ok) { */ case 13:
						_r$5 = regexpTwoNumbers.Find((new sliceType$6($stringToBytes(aliased)))); /* */ $s = 16; case 16: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
						result$2 = _r$5;
						/* */ if (!(result$2 === sliceType$6.nil)) { $s = 17; continue; }
						/* */ $s = 18; continue;
						/* if (!(result$2 === sliceType$6.nil)) { */ case 17:
							vals$1 = strings.Split(($bytesToString(result$2)), "x");
							$r = dlog.Verb(new sliceType$12([new $String("Extracted dimensions: "), vals$1])); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
							_tuple$7 = strconv.Atoi((0 >= vals$1.$length ? ($throwRuntimeError("index out of range"), undefined) : vals$1.$array[vals$1.$offset + 0]));
							frameW = _tuple$7[0];
							_tuple$8 = strconv.Atoi((1 >= vals$1.$length ? ($throwRuntimeError("index out of range"), undefined) : vals$1.$array[vals$1.$offset + 1]));
							frameH = _tuple$8[0];
							$s = 19; continue;
						/* } else { */ case 18:
							_r$6 = regexpSingleNumber.Find((new sliceType$6($stringToBytes(aliased)))); /* */ $s = 21; case 21: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
							result$3 = _r$6;
							if (!(result$3 === sliceType$6.nil)) {
								_tuple$9 = strconv.Atoi(($bytesToString(result$3)));
								val$1 = _tuple$9[0];
								frameW = val$1;
								frameH = val$1;
							} else {
								$s = -1; return [0, 0, errors.New("Alias value not parseable as a frame width and height pair")];
							}
						/* } */ case 19:
						$s = 15; continue;
					/* } else { */ case 14:
						$s = -1; return [0, 0, errors.New("Alias name not found in alias file")];
					/* } */ case 15:
				/* } */ case 12:
			/* } */ case 7:
		/* } */ case 3:
		$s = -1; return [frameW, frameH, $ifaceNil];
		/* */ } return; } if ($f === undefined) { $f = { $blk: parseLoadFolderName }; } $f._entry = _entry; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple$3 = _tuple$3; $f._tuple$4 = _tuple$4; $f._tuple$5 = _tuple$5; $f._tuple$6 = _tuple$6; $f._tuple$7 = _tuple$7; $f._tuple$8 = _tuple$8; $f._tuple$9 = _tuple$9; $f.aliased = aliased; $f.aliases = aliases; $f.frameH = frameH; $f.frameW = frameW; $f.name = name; $f.ok = ok; $f.result = result; $f.result$1 = result$1; $f.result$2 = result$2; $f.result$3 = result$3; $f.val = val; $f.val$1 = val$1; $f.vals = vals; $f.vals$1 = vals$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	GiftFilter = function(fis) {
		var fis;
		return (function $b(rgba) {
			var _r$3, _r$4, _r$5, dst, filter, rgba, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; dst = $f.dst; filter = $f.filter; rgba = $f.rgba; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			filter = gift.New(fis);
			_r$3 = rgba.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = filter.Bounds($clone(_r$3, image.Rectangle)); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = image.NewRGBA($clone(_r$4, image.Rectangle)); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			dst = _r$5;
			$r = filter.Draw(dst, rgba); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return dst;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.dst = dst; $f.filter = filter; $f.rgba = rgba; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	$pkg.GiftFilter = GiftFilter;
	ShinyDraw = function(buff, img, x$1, y) {
		var _arg, _arg$1, _arg$2, _arg$3, _r$3, buff, img, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _r$3 = $f._r$3; buff = $f.buff; img = $f.img; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = buff;
		_r$3 = buff.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$3, image.Rectangle);
		_arg$2 = img;
		_arg$3 = new image.Point.ptr(-x$1, -y);
		$r = draw.Draw(_arg, _arg$1, _arg$2, _arg$3, 0); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ShinyDraw }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._r$3 = _r$3; $f.buff = buff; $f.img = img; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ShinyDraw = ShinyDraw;
	NewEmptySprite = function(x$1, y, w, h) {
		var h, r, w, x$1, y;
		r = image.NewRGBA($clone(image.Rect(0, 0, w, h), image.Rectangle));
		return NewSprite(x$1, y, r);
	};
	$pkg.NewEmptySprite = NewEmptySprite;
	NewSprite = function(x$1, y, r) {
		var r, x$1, y;
		return new Sprite.ptr($clone(NewLayeredPoint(x$1, y, 0), LayeredPoint), r);
	};
	$pkg.NewSprite = NewSprite;
	Sprite.ptr.prototype.GetRGBA = function() {
		var s;
		s = this;
		return s.r;
	};
	Sprite.prototype.GetRGBA = function() { return this.$val.GetRGBA(); };
	Sprite.ptr.prototype.GetDims = function() {
		var s;
		s = this;
		if (s.r === ptrType$4.nil) {
			return [6, 6];
		}
		return [s.r.Bounds().Max.X, s.r.Bounds().Max.Y];
	};
	Sprite.prototype.GetDims = function() { return this.$val.GetDims(); };
	Sprite.ptr.prototype.SetRGBA = function(r) {
		var r, s;
		s = this;
		s.r = r;
	};
	Sprite.prototype.SetRGBA = function(r) { return this.$val.SetRGBA(r); };
	Sprite.ptr.prototype.DrawOffset = function(buff, xOff, yOff) {
		var buff, s, xOff, yOff, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buff = $f.buff; s = $f.s; xOff = $f.xOff; yOff = $f.yOff; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = ShinyDraw(buff, s.r, (($clone(s.LayeredPoint.Vector, physics.Vector).X() + xOff >> 0)), (($clone(s.LayeredPoint.Vector, physics.Vector).Y() + yOff >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprite.ptr.prototype.DrawOffset }; } $f.buff = buff; $f.s = s; $f.xOff = xOff; $f.yOff = yOff; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sprite.prototype.DrawOffset = function(buff, xOff, yOff) { return this.$val.DrawOffset(buff, xOff, yOff); };
	Sprite.ptr.prototype.Draw = function(buff) {
		var buff, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; buff = $f.buff; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = ShinyDraw(buff, s.r, (($clone(s.LayeredPoint.Vector, physics.Vector).X() >> 0)), (($clone(s.LayeredPoint.Vector, physics.Vector).Y() >> 0))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprite.ptr.prototype.Draw }; } $f.buff = buff; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sprite.prototype.Draw = function(buff) { return this.$val.Draw(buff); };
	Sprite.ptr.prototype.Copy = function() {
		var newS, s;
		s = this;
		newS = new Sprite.ptr(new LayeredPoint.ptr(new physics.Vector.ptr(ptrType$1.nil, ptrType$1.nil, 0, 0), new Layered.ptr(0)), ptrType$4.nil);
		if (!(s.r === ptrType$4.nil)) {
			newS.r = new image.RGBA.ptr(sliceType$6.nil, 0, new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0)));
			image.RGBA.copy(newS.r, s.r);
		}
		LayeredPoint.copy(newS.LayeredPoint, s.LayeredPoint.Copy());
		return newS;
	};
	Sprite.prototype.Copy = function() { return this.$val.Copy(); };
	Sprite.ptr.prototype.IsNil = function() {
		var s;
		s = this;
		return s.r === ptrType$4.nil;
	};
	Sprite.prototype.IsNil = function() { return this.$val.IsNil(); };
	Sprite.ptr.prototype.Modify = function(ms) {
		var _i, _r$3, _ref, m, ms, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _r$3 = $f._r$3; _ref = $f._ref; m = $f.m; ms = $f.ms; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_ref = ms;
		_i = 0;
		/* while (true) { */ case 1:
			/* if (!(_i < _ref.$length)) { break; } */ if(!(_i < _ref.$length)) { $s = 2; continue; }
			m = ((_i < 0 || _i >= _ref.$length) ? ($throwRuntimeError("index out of range"), undefined) : _ref.$array[_ref.$offset + _i]);
			_r$3 = m(s.GetRGBA()); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			s.r = _r$3;
			_i++;
		/* } */ $s = 1; continue; case 2:
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Sprite.ptr.prototype.Modify }; } $f._i = _i; $f._r$3 = _r$3; $f._ref = _ref; $f.m = m; $f.ms = ms; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Sprite.prototype.Modify = function(ms) { return this.$val.Modify(ms); };
	Font.ptr.prototype.NewText = function(str, x$1, y) {
		var f, str, x$1, y;
		f = this;
		return new Text.ptr(new LayeredPoint.ptr($clone(physics.NewVector(x$1, y), physics.Vector), new Layered.ptr(0)), str, f);
	};
	Font.prototype.NewText = function(str, x$1, y) { return this.$val.NewText(str, x$1, y); };
	Text.ptr.prototype.DrawOffset = function(buff, xOff, yOff) {
		var _r$3, buff, t, xOff, yOff, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; buff = $f.buff; t = $f.t; xOff = $f.xOff; yOff = $f.yOff; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.d.Drawer.Dst = buff;
		fixed.Point26_6.copy(t.d.Drawer.Dot, fixed.P((($clone(t.LayeredPoint.Vector, physics.Vector).X() + xOff >> 0)), (($clone(t.LayeredPoint.Vector, physics.Vector).Y() + yOff >> 0))));
		_r$3 = t.text.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = t.d.Drawer.DrawString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.DrawOffset }; } $f._r$3 = _r$3; $f.buff = buff; $f.t = t; $f.xOff = xOff; $f.yOff = yOff; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.DrawOffset = function(buff, xOff, yOff) { return this.$val.DrawOffset(buff, xOff, yOff); };
	Text.ptr.prototype.Draw = function(buff) {
		var _r$3, buff, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; buff = $f.buff; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		t.d.Drawer.Dst = buff;
		fixed.Point26_6.copy(t.d.Drawer.Dot, fixed.P((($clone(t.LayeredPoint.Vector, physics.Vector).X() >> 0)), (($clone(t.LayeredPoint.Vector, physics.Vector).Y() >> 0))));
		_r$3 = t.text.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$r = t.d.Drawer.DrawString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.Draw }; } $f._r$3 = _r$3; $f.buff = buff; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.Draw = function(buff) { return this.$val.Draw(buff); };
	Text.ptr.prototype.SetFont = function(f) {
		var f, t;
		t = this;
		t.d = f;
	};
	Text.prototype.SetFont = function(f) { return this.$val.SetFont(f); };
	Text.ptr.prototype.Center = function() {
		var _q, _r$3, _r$4, _r$5, t, textWidth, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; t = $f.t; textWidth = $f.textWidth; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$3 = t.text.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = t.d.Drawer.MeasureString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = new fixed.Int26_6(_r$4).Round(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		textWidth = _r$5;
		t.LayeredPoint.ShiftX(((_q = -textWidth / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.Center }; } $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.t = t; $f.textWidth = textWidth; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.Center = function() { return this.$val.Center(); };
	Text.ptr.prototype.SetText = function(str) {
		var str, t;
		t = this;
		t.text = str;
	};
	Text.prototype.SetText = function(str) { return this.$val.SetText(str); };
	Text.ptr.prototype.SetString = function(str) {
		var str, t;
		t = this;
		t.text = new stringStringer((str));
	};
	Text.prototype.SetString = function(str) { return this.$val.SetString(str); };
	Text.ptr.prototype.SetInt = function(i) {
		var i, t;
		t = this;
		t.text = new stringStringer((strconv.Itoa(i)));
	};
	Text.prototype.SetInt = function(i) { return this.$val.SetInt(i); };
	Text.ptr.prototype.SetIntP = function(i) {
		var i, t, x$1;
		t = this;
		t.text = (x$1 = new stringerIntPointer.ptr(i), new x$1.constructor.elem(x$1));
	};
	Text.prototype.SetIntP = function(i) { return this.$val.SetIntP(i); };
	Text.ptr.prototype.String = function() {
		var _r$3, t, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; t = $f.t; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$3 = t.text.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		$s = -1; return "Text[" + _r$3 + "]";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.String }; } $f._r$3 = _r$3; $f.t = t; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.String = function() { return this.$val.String(); };
	Text.ptr.prototype.Wrap = function(charLimit, vertInc) {
		var _i, _q, _r$3, _r$4, _ref, charLimit, i, out, outlen, st, start, t, vertInc, vertical, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _i = $f._i; _q = $f._q; _r$3 = $f._r$3; _r$4 = $f._r$4; _ref = $f._ref; charLimit = $f.charLimit; i = $f.i; out = $f.out; outlen = $f.outlen; st = $f.st; start = $f.start; t = $f.t; vertInc = $f.vertInc; vertical = $f.vertical; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$3 = t.text.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		st = _r$3;
		outlen = (_q = st.length / charLimit, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (!(((_r$4 = st.length % charLimit, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) === 0))) {
			outlen = outlen + (1) >> 0;
		}
		out = $makeSlice(sliceType$16, outlen);
		start = 0;
		vertical = 0;
		_ref = out;
		_i = 0;
		while (true) {
			if (!(_i < _ref.$length)) { break; }
			i = _i;
			if ((start + charLimit >> 0) <= st.length) {
				((i < 0 || i >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i] = t.d.NewStrText($substring(st, start, (start + charLimit >> 0)), $clone(t.LayeredPoint.Vector, physics.Vector).X(), $clone(t.LayeredPoint.Vector, physics.Vector).Y() + vertical));
			} else {
				((i < 0 || i >= out.$length) ? ($throwRuntimeError("index out of range"), undefined) : out.$array[out.$offset + i] = t.d.NewStrText($substring(st, start), $clone(t.LayeredPoint.Vector, physics.Vector).X(), $clone(t.LayeredPoint.Vector, physics.Vector).Y() + vertical));
			}
			start = start + (charLimit) >> 0;
			vertical = vertical + (vertInc);
			_i++;
		}
		$s = -1; return out;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.Wrap }; } $f._i = _i; $f._q = _q; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._ref = _ref; $f.charLimit = charLimit; $f.i = i; $f.out = out; $f.outlen = outlen; $f.st = st; $f.start = start; $f.t = t; $f.vertInc = vertInc; $f.vertical = vertical; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.Wrap = function(charLimit, vertInc) { return this.$val.Wrap(charLimit, vertInc); };
	Text.ptr.prototype.ToSprite = function() {
		var _r$3, _r$4, _r$5, height, s, t, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; height = $f.height; s = $f.s; t = $f.t; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		t = this;
		_r$3 = t.text.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$4 = t.d.Drawer.MeasureString(_r$3); /* */ $s = 2; case 2: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_r$5 = new fixed.Int26_6(_r$4).Round(); /* */ $s = 3; case 3: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
		width = _r$5;
		height = alg.RoundF64(t.d.FontGenerator.Size);
		s = NewEmptySprite($clone(t.LayeredPoint.Vector, physics.Vector).X(), $clone(t.LayeredPoint.Vector, physics.Vector).Y() - (height), width, height);
		$r = t.DrawOffset(s.GetRGBA(), -$clone(t.LayeredPoint.Vector, physics.Vector).X(), (-$clone(t.LayeredPoint.Vector, physics.Vector).Y()) + (height)); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Text.ptr.prototype.ToSprite }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.height = height; $f.s = s; $f.t = t; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	Text.prototype.ToSprite = function() { return this.$val.ToSprite(); };
	stringerIntPointer.ptr.prototype.String = function() {
		var sip;
		sip = this;
		return strconv.Itoa(sip.v.$get());
	};
	stringerIntPointer.prototype.String = function() { return this.$val.String(); };
	Font.ptr.prototype.NewIntText = function(str, x$1, y) {
		var f, str, x$1, x$2, y;
		f = this;
		return f.NewText((x$2 = new stringerIntPointer.ptr(str), new x$2.constructor.elem(x$2)), x$1, y);
	};
	Font.prototype.NewIntText = function(str, x$1, y) { return this.$val.NewIntText(str, x$1, y); };
	stringStringer.prototype.String = function() {
		var ss;
		ss = this.$val;
		return (ss);
	};
	$ptrType(stringStringer).prototype.String = function() { return new stringStringer(this.$get()).String(); };
	Font.ptr.prototype.NewStrText = function(str, x$1, y) {
		var f, str, x$1, y;
		f = this;
		return f.NewText(new stringStringer((str)), x$1, y);
	};
	Font.prototype.NewStrText = function(str, x$1, y) { return this.$val.NewStrText(str, x$1, y); };
	ptrType$2.methods = [{prop: "SubSprite", name: "SubSprite", pkg: "", typ: $funcType([$Int, $Int], [ptrType$13], false)}];
	ptrType$20.methods = [{prop: "Add", name: "Add", pkg: "", typ: $funcType([Renderable, $Int], [Renderable], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([Renderable, Renderable, $Int], [], false)}, {prop: "Len", name: "Len", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", typ: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", typ: $funcType([$Int, $Int], [], false)}, {prop: "Push", name: "Push", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "PreDraw", name: "PreDraw", pkg: "", typ: $funcType([], [], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Addable], false)}, {prop: "draw", name: "draw", pkg: "github.com/oakmound/oak/render", typ: $funcType([draw.Image, image.Point, $Int, $Int], [], false)}];
	ptrType$21.methods = [{prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image, image.Point, $Int, $Int], [], false)}, {prop: "Push", name: "Push", pkg: "", typ: $funcType([Addable], [], false)}, {prop: "Pop", name: "Pop", pkg: "", typ: $funcType([], [], false)}, {prop: "PreDraw", name: "PreDraw", pkg: "", typ: $funcType([], [], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType$21], false)}];
	ptrType$22.methods = [{prop: "Generate", name: "Generate", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType$22], false)}];
	ptrType$8.methods = [{prop: "Refresh", name: "Refresh", pkg: "", typ: $funcType([], [], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [ptrType$8], false)}, {prop: "Reset", name: "Reset", pkg: "", typ: $funcType([], [], false)}, {prop: "NewText", name: "NewText", pkg: "", typ: $funcType([fmt.Stringer, $Float64, $Float64], [ptrType$9], false)}, {prop: "NewIntText", name: "NewIntText", pkg: "", typ: $funcType([ptrType$10, $Float64, $Float64], [ptrType$9], false)}, {prop: "NewStrText", name: "NewStrText", pkg: "", typ: $funcType([$String, $Float64, $Float64], [ptrType$9], false)}];
	ptrType$11.methods = [{prop: "GetLayer", name: "GetLayer", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "SetLayer", name: "SetLayer", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "UnDraw", name: "UnDraw", pkg: "", typ: $funcType([], [], false)}];
	ptrType$12.methods = [{prop: "GetLayer", name: "GetLayer", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [LayeredPoint], false)}, {prop: "ShiftX", name: "ShiftX", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ShiftY", name: "ShiftY", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "GetDims", name: "GetDims", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$13.methods = [{prop: "GetRGBA", name: "GetRGBA", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "GetDims", name: "GetDims", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "SetRGBA", name: "SetRGBA", pkg: "", typ: $funcType([ptrType$4], [], false)}, {prop: "DrawOffset", name: "DrawOffset", pkg: "", typ: $funcType([draw.Image, $Float64, $Float64], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image], [], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Modifiable], false)}, {prop: "IsNil", name: "IsNil", pkg: "", typ: $funcType([], [$Bool], false)}, {prop: "Modify", name: "Modify", pkg: "", typ: $funcType([sliceType$17], [Modifiable], true)}];
	ptrType$9.methods = [{prop: "DrawOffset", name: "DrawOffset", pkg: "", typ: $funcType([draw.Image, $Float64, $Float64], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image], [], false)}, {prop: "SetFont", name: "SetFont", pkg: "", typ: $funcType([ptrType$8], [], false)}, {prop: "Center", name: "Center", pkg: "", typ: $funcType([], [], false)}, {prop: "SetText", name: "SetText", pkg: "", typ: $funcType([fmt.Stringer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", typ: $funcType([$String], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetIntP", name: "SetIntP", pkg: "", typ: $funcType([ptrType$10], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Wrap", name: "Wrap", pkg: "", typ: $funcType([$Int, $Float64], [sliceType$16], false)}, {prop: "ToSprite", name: "ToSprite", pkg: "", typ: $funcType([], [ptrType$13], false)}];
	stringerIntPointer.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	stringStringer.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Sheet.init(sliceType$5);
	RenderableHeap.init("github.com/oakmound/oak/render", [{prop: "rs", name: "rs", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "toPush", name: "toPush", anonymous: false, exported: false, typ: sliceType$8, tag: ""}, {prop: "static$2", name: "static", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "addLock", name: "addLock", anonymous: false, exported: false, typ: sync.RWMutex, tag: ""}]);
	DrawStack.init("github.com/oakmound/oak/render", [{prop: "as", name: "as", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "toPush", name: "toPush", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "toPop", name: "toPop", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	Addable.init([{prop: "Add", name: "Add", pkg: "", typ: $funcType([Renderable, $Int], [Renderable], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Addable], false)}, {prop: "PreDraw", name: "PreDraw", pkg: "", typ: $funcType([], [], false)}, {prop: "Replace", name: "Replace", pkg: "", typ: $funcType([Renderable, Renderable, $Int], [], false)}, {prop: "draw", name: "draw", pkg: "github.com/oakmound/oak/render", typ: $funcType([draw.Image, image.Point, $Int, $Int], [], false)}]);
	FontGenerator.init("", [{prop: "File", name: "File", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "Color", name: "Color", anonymous: false, exported: true, typ: image.Image, tag: ""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "Hinting", name: "Hinting", anonymous: false, exported: true, typ: $String, tag: ""}, {prop: "DPI", name: "DPI", anonymous: false, exported: true, typ: $Float64, tag: ""}]);
	Font.init("", [{prop: "FontGenerator", name: "FontGenerator", anonymous: true, exported: true, typ: FontGenerator, tag: ""}, {prop: "Drawer", name: "Drawer", anonymous: true, exported: true, typ: font.Drawer, tag: ""}]);
	Layered.init("github.com/oakmound/oak/render", [{prop: "layer", name: "layer", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	LayeredPoint.init("", [{prop: "Vector", name: "Vector", anonymous: true, exported: true, typ: physics.Vector, tag: ""}, {prop: "Layered", name: "Layered", anonymous: true, exported: true, typ: Layered, tag: ""}]);
	Modification.init([image.Image], [ptrType$4], false);
	Modifiable.init([{prop: "Attach", name: "Attach", pkg: "", typ: $funcType([physics.Attachable, sliceType$9], [physics.Vector], true)}, {prop: "AttachX", name: "AttachX", pkg: "", typ: $funcType([physics.Attachable, $Float64], [physics.Vector], false)}, {prop: "AttachY", name: "AttachY", pkg: "", typ: $funcType([physics.Attachable, $Float64], [physics.Vector], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([], [Modifiable], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([], [physics.Vector], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image], [], false)}, {prop: "DrawOffset", name: "DrawOffset", pkg: "", typ: $funcType([draw.Image, $Float64, $Float64], [], false)}, {prop: "GetDims", name: "GetDims", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "GetLayer", name: "GetLayer", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetRGBA", name: "GetRGBA", pkg: "", typ: $funcType([], [ptrType$4], false)}, {prop: "GetX", name: "GetX", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetY", name: "GetY", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "Modify", name: "Modify", pkg: "", typ: $funcType([sliceType$17], [Modifiable], true)}, {prop: "SetLayer", name: "SetLayer", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "ShiftX", name: "ShiftX", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ShiftY", name: "ShiftY", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "UnDraw", name: "UnDraw", pkg: "", typ: $funcType([], [], false)}, {prop: "Vec", name: "Vec", pkg: "", typ: $funcType([], [physics.Vector], false)}]);
	Renderable.init([{prop: "Attach", name: "Attach", pkg: "", typ: $funcType([physics.Attachable, sliceType$9], [physics.Vector], true)}, {prop: "AttachX", name: "AttachX", pkg: "", typ: $funcType([physics.Attachable, $Float64], [physics.Vector], false)}, {prop: "AttachY", name: "AttachY", pkg: "", typ: $funcType([physics.Attachable, $Float64], [physics.Vector], false)}, {prop: "Detach", name: "Detach", pkg: "", typ: $funcType([], [physics.Vector], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([draw.Image], [], false)}, {prop: "DrawOffset", name: "DrawOffset", pkg: "", typ: $funcType([draw.Image, $Float64, $Float64], [], false)}, {prop: "GetDims", name: "GetDims", pkg: "", typ: $funcType([], [$Int, $Int], false)}, {prop: "GetLayer", name: "GetLayer", pkg: "", typ: $funcType([], [$Int], false)}, {prop: "GetX", name: "GetX", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "GetY", name: "GetY", pkg: "", typ: $funcType([], [$Float64], false)}, {prop: "SetLayer", name: "SetLayer", pkg: "", typ: $funcType([$Int], [], false)}, {prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "ShiftX", name: "ShiftX", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ShiftY", name: "ShiftY", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "UnDraw", name: "UnDraw", pkg: "", typ: $funcType([], [], false)}, {prop: "Vec", name: "Vec", pkg: "", typ: $funcType([], [physics.Vector], false)}]);
	Sprite.init("github.com/oakmound/oak/render", [{prop: "LayeredPoint", name: "LayeredPoint", anonymous: true, exported: true, typ: LayeredPoint, tag: ""}, {prop: "r", name: "r", anonymous: false, exported: false, typ: ptrType$4, tag: ""}]);
	Text.init("github.com/oakmound/oak/render", [{prop: "LayeredPoint", name: "LayeredPoint", anonymous: true, exported: true, typ: LayeredPoint, tag: ""}, {prop: "text", name: "text", anonymous: false, exported: false, typ: fmt.Stringer, tag: ""}, {prop: "d", name: "d", anonymous: false, exported: false, typ: ptrType$8, tag: ""}]);
	stringerIntPointer.init("github.com/oakmound/oak/render", [{prop: "v", name: "v", anonymous: false, exported: false, typ: ptrType$10, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = heap.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = json.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = colorrange.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = polyclip.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gift.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = truetype.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = alg.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fileutil.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = oakerr.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = physics.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fonts.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = timing.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = font.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fixed.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gif.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = jpeg.$init(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = png.$init(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = math.$init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = regexp.$init(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		resetDraw = false;
		drawPolygon = polyclip.Polygon.nil;
		fontdir = "";
		defaultHinting = 0;
		defaultSize = 0;
		defaultDPI = 0;
		defaultColor = $ifaceNil;
		defaultFontFile = "";
		debugMap = {};
		_r = NewColorBox(1, 1, (x = new color.RGBA.ptr(0, 0, 0, 0), new x.constructor.elem(x))); /* */ $s = 33; case 33: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		emptyRenderable = _r;
		usingDrawPolygon = false;
		$pkg.GlobalDrawStack = new DrawStack.ptr(new sliceType([NewHeap(false)]), sliceType.nil, 0);
		initialDrawStack = $pkg.GlobalDrawStack;
		$pkg.DefFontGenerator = new FontGenerator.ptr("", $ifaceNil, 0, "", 0);
		binaryFonts = fonts.Asset;
		loadedFonts = {};
		$pkg.CircularProgress = (function(x$1, y, w, h) {
			var dX, dY, h, progress, w, x$1, xRadius, y, yRadius;
			xRadius = (w) / 2;
			yRadius = (h) / 2;
			dX = math.Abs((x$1) - xRadius);
			dY = math.Abs((y) - yRadius);
			progress = math.Pow(dX / xRadius, 2) + math.Pow(dY / yRadius, 2);
			if (progress > 1) {
				progress = 1;
			}
			return progress;
		});
		_r$1 = regexp.Compile("^\\d+$"); /* */ $s = 34; case 34: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_tuple = _r$1;
		regexpSingleNumber = _tuple[0];
		_r$2 = regexp.Compile("^\\d+x\\d+$"); /* */ $s = 35; case 35: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple$1 = _r$2;
		regexpTwoNumbers = _tuple$1[0];
		supportedFileEndings = $makeMap($String.keyFor, [{ k: "jpeg", v: true }, { k: ".jpg", v: true }, { k: ".gif", v: true }, { k: ".png", v: true }]);
		_tuple$2 = fileutil.Getwd();
		wd = _tuple$2[0];
		dir = filepath.Join(new sliceType$1([wd, "assets", "images"]));
		loadedImages = {};
		loadedSheets = {};
		defaultPad = 0;
		loadLock = new sync.Mutex.ptr(0, 0);
		$pkg.FlipX = GiftFilter(new sliceType$2([gift.FlipHorizontal()]));
		$pkg.FlipY = GiftFilter(new sliceType$2([gift.FlipVertical()]));
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/render/mod"] = (function() {
	var $pkg = {}, $init, render, image, color;
	render = $packages["github.com/oakmound/oak/render"];
	image = $packages["image"];
	color = $packages["image/color"];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = render.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/mobile/event/lifecycle"] = (function() {
	var $pkg = {}, $init, fmt, Cross, Event, Stage, sliceType;
	fmt = $packages["fmt"];
	Cross = $pkg.Cross = $newType(4, $kindUint32, "lifecycle.Cross", true, "golang.org/x/mobile/event/lifecycle", true, null);
	Event = $pkg.Event = $newType(0, $kindStruct, "lifecycle.Event", true, "golang.org/x/mobile/event/lifecycle", true, function(From_, To_, DrawContext_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.From = 0;
			this.To = 0;
			this.DrawContext = $ifaceNil;
			return;
		}
		this.From = From_;
		this.To = To_;
		this.DrawContext = DrawContext_;
	});
	Stage = $pkg.Stage = $newType(4, $kindUint32, "lifecycle.Stage", true, "golang.org/x/mobile/event/lifecycle", true, null);
	sliceType = $sliceType($emptyInterface);
	Cross.prototype.String = function() {
		var _1, c;
		c = this.$val;
		_1 = c;
		if (_1 === (1)) {
			return "on";
		} else if (_1 === (2)) {
			return "off";
		}
		return "none";
	};
	$ptrType(Cross).prototype.String = function() { return new Cross(this.$get()).String(); };
	Event.ptr.prototype.String = function() {
		var _r, e, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; e = $f.e; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		e = this;
		_r = fmt.Sprintf("lifecycle.Event{From:%v, To:%v, DrawContext:%v}", new sliceType([new Stage(e.From), new Stage(e.To), e.DrawContext])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Event.ptr.prototype.String }; } $f._r = _r; $f.e = e; $f.$s = $s; $f.$r = $r; return $f;
	};
	Event.prototype.String = function() { return this.$val.String(); };
	Event.ptr.prototype.Crosses = function(s) {
		var e, s;
		e = this;
		if (e.From < s && e.To >= s) {
			return 1;
		} else if (e.From >= s && e.To < s) {
			return 2;
		}
		return 0;
	};
	Event.prototype.Crosses = function(s) { return this.$val.Crosses(s); };
	Stage.prototype.String = function() {
		var _1, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this.$val;
			_1 = s;
			/* */ if (_1 === (0)) { $s = 2; continue; }
			/* */ if (_1 === (1)) { $s = 3; continue; }
			/* */ if (_1 === (2)) { $s = 4; continue; }
			/* */ if (_1 === (3)) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (_1 === (0)) { */ case 2:
				$s = -1; return "StageDead";
			/* } else if (_1 === (1)) { */ case 3:
				$s = -1; return "StageAlive";
			/* } else if (_1 === (2)) { */ case 4:
				$s = -1; return "StageVisible";
			/* } else if (_1 === (3)) { */ case 5:
				$s = -1; return "StageFocused";
			/* } else { */ case 6:
				_r = fmt.Sprintf("lifecycle.Stage(%d)", new sliceType([new Stage(s)])); /* */ $s = 8; case 8: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				$s = -1; return _r;
			/* } */ case 7:
		case 1:
		$s = -1; return "";
		/* */ } return; } if ($f === undefined) { $f = { $blk: Stage.prototype.String }; } $f._1 = _1; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Stage).prototype.String = function() { return new Stage(this.$get()).String(); };
	Cross.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Event.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}, {prop: "Crosses", name: "Crosses", pkg: "", typ: $funcType([Stage], [Cross], false)}];
	Stage.methods = [{prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Event.init("", [{prop: "From", name: "From", anonymous: false, exported: true, typ: Stage, tag: ""}, {prop: "To", name: "To", anonymous: false, exported: true, typ: Stage, tag: ""}, {prop: "DrawContext", name: "DrawContext", anonymous: false, exported: true, typ: $emptyInterface, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/mobile/geom"] = (function() {
	var $pkg = {}, $init, fmt, Pt, sliceType;
	fmt = $packages["fmt"];
	Pt = $pkg.Pt = $newType(4, $kindFloat32, "geom.Pt", true, "golang.org/x/mobile/geom", true, null);
	sliceType = $sliceType($emptyInterface);
	Pt.prototype.Px = function(pixelsPerPt) {
		var p, pixelsPerPt;
		p = this.$val;
		return $fround((p) * pixelsPerPt);
	};
	$ptrType(Pt).prototype.Px = function(pixelsPerPt) { return new Pt(this.$get()).Px(pixelsPerPt); };
	Pt.prototype.String = function() {
		var _r, p, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		p = this.$val;
		_r = fmt.Sprintf("%.2fpt", new sliceType([new Pt(p)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Pt.prototype.String }; } $f._r = _r; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
	};
	$ptrType(Pt).prototype.String = function() { return new Pt(this.$get()).String(); };
	Pt.methods = [{prop: "Px", name: "Px", pkg: "", typ: $funcType([$Float32], [$Float32], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = fmt.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["golang.org/x/mobile/event/size"] = (function() {
	var $pkg = {}, $init, geom, image, Event, Orientation;
	geom = $packages["golang.org/x/mobile/geom"];
	image = $packages["image"];
	Event = $pkg.Event = $newType(0, $kindStruct, "size.Event", true, "golang.org/x/mobile/event/size", true, function(WidthPx_, HeightPx_, WidthPt_, HeightPt_, PixelsPerPt_, Orientation_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.WidthPx = 0;
			this.HeightPx = 0;
			this.WidthPt = 0;
			this.HeightPt = 0;
			this.PixelsPerPt = 0;
			this.Orientation = 0;
			return;
		}
		this.WidthPx = WidthPx_;
		this.HeightPx = HeightPx_;
		this.WidthPt = WidthPt_;
		this.HeightPt = HeightPt_;
		this.PixelsPerPt = PixelsPerPt_;
		this.Orientation = Orientation_;
	});
	Orientation = $pkg.Orientation = $newType(4, $kindInt, "size.Orientation", true, "golang.org/x/mobile/event/size", true, null);
	Event.ptr.prototype.Size = function() {
		var e;
		e = this;
		return new image.Point.ptr(e.WidthPx, e.HeightPx);
	};
	Event.prototype.Size = function() { return this.$val.Size(); };
	Event.ptr.prototype.Bounds = function() {
		var e;
		e = this;
		return new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(e.WidthPx, e.HeightPx));
	};
	Event.prototype.Bounds = function() { return this.$val.Bounds(); };
	Event.methods = [{prop: "Size", name: "Size", pkg: "", typ: $funcType([], [image.Point], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}];
	Event.init("", [{prop: "WidthPx", name: "WidthPx", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "HeightPx", name: "HeightPx", anonymous: false, exported: true, typ: $Int, tag: ""}, {prop: "WidthPt", name: "WidthPt", anonymous: false, exported: true, typ: geom.Pt, tag: ""}, {prop: "HeightPt", name: "HeightPt", anonymous: false, exported: true, typ: geom.Pt, tag: ""}, {prop: "PixelsPerPt", name: "PixelsPerPt", anonymous: false, exported: true, typ: $Float32, tag: ""}, {prop: "Orientation", name: "Orientation", anonymous: false, exported: true, typ: Orientation, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = geom.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak"] = (function() {
	var $pkg = {}, $init, json, errors, fmt, toml, js, alg, audio, collision, dlog, event, fileutil, mouse$1, physics, render, mod, timing, gesture, screen, f64, key, lifecycle, mouse, size, image, color, draw, io, rand, filepath, runtime, strings, sync, time, JSBuffer, Config, Assets, Debug, Screen, Font, transitionFunction, Scene, SceneResult, SceneEnd, SceneStart, SceneUpdate, JSScreen, JSTexture, rect, JSWindow, ptrType, ptrType$1, arrayType, sliceType, ptrType$2, sliceType$1, ptrType$5, ptrType$6, funcType, ptrType$7, sliceType$2, sliceType$3, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, conf, imageBlack, drawLoopPublish, transitionCh, sceneCh, skipSceneCh, quitCh, drawCh, debugResetCh, viewportCh, debugResetInProgress, eb, globalFirstScene, zeroPoint, jsMouseButtons, jsKeys, eFilter, eventFn, keyBinds, keyBindLock, keyState, keyDurations, keyLock, durationLock, winBuffer, screenControl, windowControl, windowRect, windowUpdateCh, initControl, lifecycleInit, aspectRatio, startupLoadCh, framesElapsed, drawLoopPublishDef, currentSeed, sceneMap, useViewBounds, viewBounds, initConfAssets, initConfDebug, initConfScreen, initConfFont, initConf, initDriver, windowController, defaultDebugConsole, drawLoop, Init, jsMouseButton, jsKey, inputLoop, GetKeyBind, setUp, setDown, IsDown, SetLang, lifecycleLoop, changeWindow, ChangeWindow, loadAssets, endLoad, logicLoop, setPanicOnFault, SeedRNG, sceneTransition, AddScene, sceneLoop, updateScreen;
	json = $packages["encoding/json"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	toml = $packages["github.com/BurntSushi/toml"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	alg = $packages["github.com/oakmound/oak/alg"];
	audio = $packages["github.com/oakmound/oak/audio"];
	collision = $packages["github.com/oakmound/oak/collision"];
	dlog = $packages["github.com/oakmound/oak/dlog"];
	event = $packages["github.com/oakmound/oak/event"];
	fileutil = $packages["github.com/oakmound/oak/fileutil"];
	mouse$1 = $packages["github.com/oakmound/oak/mouse"];
	physics = $packages["github.com/oakmound/oak/physics"];
	render = $packages["github.com/oakmound/oak/render"];
	mod = $packages["github.com/oakmound/oak/render/mod"];
	timing = $packages["github.com/oakmound/oak/timing"];
	gesture = $packages["golang.org/x/exp/shiny/gesture"];
	screen = $packages["golang.org/x/exp/shiny/screen"];
	f64 = $packages["golang.org/x/image/math/f64"];
	key = $packages["golang.org/x/mobile/event/key"];
	lifecycle = $packages["golang.org/x/mobile/event/lifecycle"];
	mouse = $packages["golang.org/x/mobile/event/mouse"];
	size = $packages["golang.org/x/mobile/event/size"];
	image = $packages["image"];
	color = $packages["image/color"];
	draw = $packages["image/draw"];
	io = $packages["io"];
	rand = $packages["math/rand"];
	filepath = $packages["path/filepath"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	time = $packages["time"];
	JSBuffer = $pkg.JSBuffer = $newType(0, $kindStruct, "oak.JSBuffer", true, "github.com/oakmound/oak", true, function(rect_, rgba_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.rect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
			this.rgba = ptrType$7.nil;
			return;
		}
		this.rect = rect_;
		this.rgba = rgba_;
	});
	Config = $pkg.Config = $newType(0, $kindStruct, "oak.Config", true, "github.com/oakmound/oak", true, function(Assets_, Debug_, Screen_, Font_, FrameRate_, DrawFrameRate_, Language_, Title_, BatchLoad_, GestureSupport_, DisableKeyhold_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Assets = new Assets.ptr("", "", "", "");
			this.Debug = new Debug.ptr("", "");
			this.Screen = new Screen.ptr(0, 0, 0);
			this.Font = new Font.ptr("", 0, 0, "", "");
			this.FrameRate = 0;
			this.DrawFrameRate = 0;
			this.Language = "";
			this.Title = "";
			this.BatchLoad = false;
			this.GestureSupport = false;
			this.DisableKeyhold = false;
			return;
		}
		this.Assets = Assets_;
		this.Debug = Debug_;
		this.Screen = Screen_;
		this.Font = Font_;
		this.FrameRate = FrameRate_;
		this.DrawFrameRate = DrawFrameRate_;
		this.Language = Language_;
		this.Title = Title_;
		this.BatchLoad = BatchLoad_;
		this.GestureSupport = GestureSupport_;
		this.DisableKeyhold = DisableKeyhold_;
	});
	Assets = $pkg.Assets = $newType(0, $kindStruct, "oak.Assets", true, "github.com/oakmound/oak", true, function(AssetPath_, AudioPath_, ImagePath_, FontPath_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.AssetPath = "";
			this.AudioPath = "";
			this.ImagePath = "";
			this.FontPath = "";
			return;
		}
		this.AssetPath = AssetPath_;
		this.AudioPath = AudioPath_;
		this.ImagePath = ImagePath_;
		this.FontPath = FontPath_;
	});
	Debug = $pkg.Debug = $newType(0, $kindStruct, "oak.Debug", true, "github.com/oakmound/oak", true, function(Filter_, Level_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Filter = "";
			this.Level = "";
			return;
		}
		this.Filter = Filter_;
		this.Level = Level_;
	});
	Screen = $pkg.Screen = $newType(0, $kindStruct, "oak.Screen", true, "github.com/oakmound/oak", true, function(Height_, Width_, Scale_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Height = 0;
			this.Width = 0;
			this.Scale = 0;
			return;
		}
		this.Height = Height_;
		this.Width = Width_;
		this.Scale = Scale_;
	});
	Font = $pkg.Font = $newType(0, $kindStruct, "oak.Font", true, "github.com/oakmound/oak", true, function(Hinting_, Size_, DPI_, File_, Color_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Hinting = "";
			this.Size = 0;
			this.DPI = 0;
			this.File = "";
			this.Color = "";
			return;
		}
		this.Hinting = Hinting_;
		this.Size = Size_;
		this.DPI = DPI_;
		this.File = File_;
		this.Color = Color_;
	});
	transitionFunction = $pkg.transitionFunction = $newType(4, $kindFunc, "oak.transitionFunction", true, "github.com/oakmound/oak", false, null);
	Scene = $pkg.Scene = $newType(0, $kindStruct, "oak.Scene", true, "github.com/oakmound/oak", true, function(active_, start_, loop_, end_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.active = false;
			this.start = $throwNilPointerError;
			this.loop = $throwNilPointerError;
			this.end = $throwNilPointerError;
			return;
		}
		this.active = active_;
		this.start = start_;
		this.loop = loop_;
		this.end = end_;
	});
	SceneResult = $pkg.SceneResult = $newType(0, $kindStruct, "oak.SceneResult", true, "github.com/oakmound/oak", true, function(NextSceneInput_, Transition_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.NextSceneInput = $ifaceNil;
			this.Transition = $throwNilPointerError;
			return;
		}
		this.NextSceneInput = NextSceneInput_;
		this.Transition = Transition_;
	});
	SceneEnd = $pkg.SceneEnd = $newType(4, $kindFunc, "oak.SceneEnd", true, "github.com/oakmound/oak", true, null);
	SceneStart = $pkg.SceneStart = $newType(4, $kindFunc, "oak.SceneStart", true, "github.com/oakmound/oak", true, null);
	SceneUpdate = $pkg.SceneUpdate = $newType(4, $kindFunc, "oak.SceneUpdate", true, "github.com/oakmound/oak", true, null);
	JSScreen = $pkg.JSScreen = $newType(0, $kindStruct, "oak.JSScreen", true, "github.com/oakmound/oak", true, function() {
		this.$val = this;
		if (arguments.length === 0) {
			return;
		}
	});
	JSTexture = $pkg.JSTexture = $newType(0, $kindStruct, "oak.JSTexture", true, "github.com/oakmound/oak", true, function(JSBuffer_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.JSBuffer = new JSBuffer.ptr(new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0)), ptrType$7.nil);
			return;
		}
		this.JSBuffer = JSBuffer_;
	});
	rect = $pkg.rect = $newType(0, $kindStruct, "oak.rect", true, "github.com/oakmound/oak", false, function(minX_, minY_, maxX_, maxY_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.minX = 0;
			this.minY = 0;
			this.maxX = 0;
			this.maxY = 0;
			return;
		}
		this.minX = minX_;
		this.minY = minY_;
		this.maxX = maxX_;
		this.maxY = maxY_;
	});
	JSWindow = $pkg.JSWindow = $newType(0, $kindStruct, "oak.JSWindow", true, "github.com/oakmound/oak", true, function(ctx_, jsUint8_, imgData_, events_, eventLock_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.ctx = null;
			this.jsUint8 = null;
			this.imgData = null;
			this.events = sliceType.nil;
			this.eventLock = new sync.Mutex.ptr(0, 0);
			return;
		}
		this.ctx = ctx_;
		this.jsUint8 = jsUint8_;
		this.imgData = imgData_;
		this.events = events_;
		this.eventLock = eventLock_;
	});
	ptrType = $ptrType(timing.DynamicTicker);
	ptrType$1 = $ptrType(event.Bus);
	arrayType = $arrayType($Int, 2);
	sliceType = $sliceType($emptyInterface);
	ptrType$2 = $ptrType(SceneResult);
	sliceType$1 = $sliceType($String);
	ptrType$5 = $ptrType(Scene);
	ptrType$6 = $ptrType(js.Object);
	funcType = $funcType([ptrType$6], [], false);
	ptrType$7 = $ptrType(image.RGBA);
	sliceType$2 = $sliceType($Float64);
	sliceType$3 = $sliceType($Uint8);
	ptrType$8 = $ptrType(JSBuffer);
	ptrType$9 = $ptrType(screen.NewWindowOptions);
	ptrType$10 = $ptrType(JSScreen);
	ptrType$11 = $ptrType(JSTexture);
	ptrType$12 = $ptrType(screen.DrawOptions);
	ptrType$13 = $ptrType(JSWindow);
	JSBuffer.ptr.prototype.Release = function() {
		var jsb, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; jsb = $f.jsb; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsb = this;
		$r = dlog.Info(new sliceType([new $String("JSBuffer pretending to release")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSBuffer.ptr.prototype.Release }; } $f.jsb = jsb; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSBuffer.prototype.Release = function() { return this.$val.Release(); };
	JSBuffer.ptr.prototype.Size = function() {
		var jsb;
		jsb = this;
		return jsb.rect.Max;
	};
	JSBuffer.prototype.Size = function() { return this.$val.Size(); };
	JSBuffer.ptr.prototype.Bounds = function() {
		var jsb;
		jsb = this;
		return jsb.rect;
	};
	JSBuffer.prototype.Bounds = function() { return this.$val.Bounds(); };
	JSBuffer.ptr.prototype.RGBA = function() {
		var jsb;
		jsb = this;
		return jsb.rgba;
	};
	JSBuffer.prototype.RGBA = function() { return this.$val.RGBA(); };
	initConfAssets = function() {
		if (!($pkg.SetupConfig.Assets.AssetPath === "")) {
			conf.Assets.AssetPath = $pkg.SetupConfig.Assets.AssetPath;
		}
		if (!($pkg.SetupConfig.Assets.ImagePath === "")) {
			conf.Assets.ImagePath = $pkg.SetupConfig.Assets.ImagePath;
		}
		if (!($pkg.SetupConfig.Assets.AudioPath === "")) {
			conf.Assets.AudioPath = $pkg.SetupConfig.Assets.AudioPath;
		}
		if (!($pkg.SetupConfig.Assets.FontPath === "")) {
			conf.Assets.FontPath = $pkg.SetupConfig.Assets.FontPath;
		}
	};
	initConfDebug = function() {
		if (!($pkg.SetupConfig.Debug.Filter === "")) {
			conf.Debug.Filter = $pkg.SetupConfig.Debug.Filter;
		}
		if (!($pkg.SetupConfig.Debug.Level === "")) {
			conf.Debug.Level = $pkg.SetupConfig.Debug.Level;
		}
	};
	initConfScreen = function() {
		if (!(($pkg.SetupConfig.Screen.Width === 0))) {
			conf.Screen.Width = $pkg.SetupConfig.Screen.Width;
		}
		if (!(($pkg.SetupConfig.Screen.Height === 0))) {
			conf.Screen.Height = $pkg.SetupConfig.Screen.Height;
		}
		if (!(($pkg.SetupConfig.Screen.Scale === 0))) {
			conf.Screen.Scale = $pkg.SetupConfig.Screen.Scale;
		}
	};
	initConfFont = function() {
		if (!($pkg.SetupConfig.Font.Hinting === "")) {
			conf.Font.Hinting = $pkg.SetupConfig.Font.Hinting;
		}
		if (!(($pkg.SetupConfig.Font.Size === 0))) {
			conf.Font.Size = $pkg.SetupConfig.Font.Size;
		}
		if (!(($pkg.SetupConfig.Font.DPI === 0))) {
			conf.Font.DPI = $pkg.SetupConfig.Font.DPI;
		}
		if (!($pkg.SetupConfig.Font.File === "")) {
			conf.Font.File = $pkg.SetupConfig.Font.File;
		}
		if (!($pkg.SetupConfig.Font.Color === "")) {
			conf.Font.Color = $pkg.SetupConfig.Font.Color;
		}
	};
	initConf = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		initConfAssets();
		initConfDebug();
		initConfScreen();
		initConfFont();
		if (!(($pkg.SetupConfig.FrameRate === 0))) {
			conf.FrameRate = $pkg.SetupConfig.FrameRate;
		}
		if (!(($pkg.SetupConfig.DrawFrameRate === 0))) {
			conf.DrawFrameRate = $pkg.SetupConfig.DrawFrameRate;
		}
		if (!($pkg.SetupConfig.Language === "")) {
			conf.Language = $pkg.SetupConfig.Language;
		}
		if (!($pkg.SetupConfig.Title === "")) {
			conf.Title = $pkg.SetupConfig.Title;
		}
		conf.BatchLoad = $pkg.SetupConfig.BatchLoad;
		conf.GestureSupport = $pkg.SetupConfig.GestureSupport;
		conf.DisableKeyhold = $pkg.SetupConfig.DisableKeyhold;
		$r = dlog.Error(new sliceType([new conf.constructor.elem(conf)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: initConf }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	initDriver = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = lifecycleLoop(new JSScreen.ptr()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: initDriver }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	windowController = function(s, ScreenWidth, ScreenHeight) {
		var ScreenHeight, ScreenWidth, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ScreenHeight = $f.ScreenHeight; ScreenWidth = $f.ScreenWidth; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = s.NewWindow(new screen.NewWindowOptions.ptr(ScreenWidth, ScreenHeight, conf.Title)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		$s = -1; return _r;
		/* */ } return; } if ($f === undefined) { $f = { $blk: windowController }; } $f.ScreenHeight = ScreenHeight; $f.ScreenWidth = ScreenWidth; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	defaultDebugConsole = function() {
	};
	drawLoop = function() {
		var _arg, _arg$1, _arg$10, _arg$11, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _arg$7, _arg$8, _arg$9, _r, _r$1, _r$10, _r$11, _r$12, _r$13, _r$14, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _selection, _selection$1, _tuple, err, tx, viewPoint, viewPoint$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$10 = $f._arg$10; _arg$11 = $f._arg$11; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _arg$7 = $f._arg$7; _arg$8 = $f._arg$8; _arg$9 = $f._arg$9; _r = $f._r; _r$1 = $f._r$1; _r$10 = $f._r$10; _r$11 = $f._r$11; _r$12 = $f._r$12; _r$13 = $f._r$13; _r$14 = $f._r$14; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; _r$9 = $f._r$9; _selection = $f._selection; _selection$1 = $f._selection$1; _tuple = $f._tuple; err = $f.err; tx = $f.tx; viewPoint = $f.viewPoint; viewPoint$1 = $f.viewPoint$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = $recv(drawCh); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r[0];
		setPanicOnFault();
		_r$1 = winBuffer.Bounds(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$2 = screenControl.NewTexture($clone(_r$1.Max, image.Point)); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_tuple = _r$2;
		tx = _tuple[0];
		err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		_r$3 = winBuffer.RGBA(); /* */ $s = 4; case 4: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_arg = _r$3;
		_r$4 = winBuffer.Bounds(); /* */ $s = 5; case 5: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
		_arg$1 = $clone(_r$4, image.Rectangle);
		_arg$2 = imageBlack;
		_arg$3 = $clone(zeroPoint, image.Point);
		$r = draw.Draw(_arg, _arg$1, _arg$2, _arg$3, 1); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = drawLoopPublish(tx); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.DrawTicker = timing.NewDynamicTicker();
		$r = $pkg.DrawTicker.SetTick(timing.FPSToDuration($pkg.DrawFrameRate)); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.Verb(new sliceType([new $String("Draw Loop Start")])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 10:
			_r$5 = $select([[windowUpdateCh], [drawCh], [viewportCh], [$pkg.DrawTicker.C]]); /* */ $s = 12; case 12: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_selection = _r$5;
			/* */ if (_selection[0] === 0) { $s = 13; continue; }
			/* */ if (_selection[0] === 1) { $s = 14; continue; }
			/* */ if (_selection[0] === 2) { $s = 15; continue; }
			/* */ if (_selection[0] === 3) { $s = 16; continue; }
			/* */ $s = 17; continue;
			/* switch (0) { default: if (_selection[0] === 0) { */ case 13:
				_r$6 = $recv(windowUpdateCh); /* */ $s = 18; case 18: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6[0];
				$s = 17; continue;
			/* } else if (_selection[0] === 1) { */ case 14:
				$r = dlog.Verb(new sliceType([new $String("Got something from draw channel")])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$7 = $recv(drawCh); /* */ $s = 20; case 20: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$7[0];
				$r = dlog.Verb(new sliceType([new $String("Starting loading")])); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* while (true) { */ case 22:
					_r$8 = $recv($pkg.DrawTicker.C); /* */ $s = 24; case 24: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
					_r$8[0];
					_r$9 = winBuffer.RGBA(); /* */ $s = 25; case 25: if($c) { $c = false; _r$9 = _r$9.$blk(); } if (_r$9 && _r$9.$blk !== undefined) { break s; }
					_arg$4 = _r$9;
					_r$10 = winBuffer.Bounds(); /* */ $s = 26; case 26: if($c) { $c = false; _r$10 = _r$10.$blk(); } if (_r$10 && _r$10.$blk !== undefined) { break s; }
					_arg$5 = $clone(_r$10, image.Rectangle);
					_arg$6 = imageBlack;
					_arg$7 = $clone(zeroPoint, image.Point);
					$r = draw.Draw(_arg$4, _arg$5, _arg$6, _arg$7, 1); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* */ if (!($interfaceIsEqual($pkg.LoadingR, $ifaceNil))) { $s = 28; continue; }
					/* */ $s = 29; continue;
					/* if (!($interfaceIsEqual($pkg.LoadingR, $ifaceNil))) { */ case 28:
						_r$11 = winBuffer.RGBA(); /* */ $s = 30; case 30: if($c) { $c = false; _r$11 = _r$11.$blk(); } if (_r$11 && _r$11.$blk !== undefined) { break s; }
						$r = $pkg.LoadingR.Draw(_r$11); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					/* } */ case 29:
					$r = drawLoopPublish(tx); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					_selection$1 = $select([[drawCh], [viewportCh], []]);
					/* */ if (_selection$1[0] === 0) { $s = 33; continue; }
					/* */ if (_selection$1[0] === 1) { $s = 34; continue; }
					/* */ if (_selection$1[0] === 2) { $s = 35; continue; }
					/* */ $s = 36; continue;
					/* if (_selection$1[0] === 0) { */ case 33:
						/* break drawSelect; */ $s = 17; continue s;
						$s = 36; continue;
					/* } else if (_selection$1[0] === 1) { */ case 34:
						viewPoint = $clone(_selection$1[1][0], arrayType);
						$r = dlog.Verb(new sliceType([new $String("Got something from viewport channel (waiting on draw)")])); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$r = updateScreen(viewPoint[0], viewPoint[1]); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
						$s = 36; continue;
					/* } else if (_selection$1[0] === 2) { */ case 35:
					/* } */ case 36:
				/* } */ $s = 22; continue; case 23:
				$s = 17; continue;
			/* } else if (_selection[0] === 2) { */ case 15:
				viewPoint$1 = $clone(_selection[1][0], arrayType);
				$r = dlog.Verb(new sliceType([new $String("Got something from viewport channel")])); /* */ $s = 39; case 39: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = updateScreen(viewPoint$1[0], viewPoint$1[1]); /* */ $s = 40; case 40: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 17; continue;
			/* } else if (_selection[0] === 3) { */ case 16:
				_r$12 = winBuffer.RGBA(); /* */ $s = 41; case 41: if($c) { $c = false; _r$12 = _r$12.$blk(); } if (_r$12 && _r$12.$blk !== undefined) { break s; }
				_arg$8 = _r$12;
				_r$13 = winBuffer.Bounds(); /* */ $s = 42; case 42: if($c) { $c = false; _r$13 = _r$13.$blk(); } if (_r$13 && _r$13.$blk !== undefined) { break s; }
				_arg$9 = $clone(_r$13, image.Rectangle);
				_arg$10 = imageBlack;
				_arg$11 = $clone(zeroPoint, image.Point);
				$r = draw.Draw(_arg$8, _arg$9, _arg$10, _arg$11, 1); /* */ $s = 43; case 43: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = render.PreDraw(); /* */ $s = 44; case 44: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$14 = winBuffer.RGBA(); /* */ $s = 45; case 45: if($c) { $c = false; _r$14 = _r$14.$blk(); } if (_r$14 && _r$14.$blk !== undefined) { break s; }
				$r = render.GlobalDrawStack.Draw(_r$14, $clone($pkg.ViewPos, image.Point), $pkg.ScreenWidth, $pkg.ScreenHeight); /* */ $s = 46; case 46: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = drawLoopPublish(tx); /* */ $s = 47; case 47: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } } */ case 17:
		/* } */ $s = 10; continue; case 11:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: drawLoop }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$10 = _arg$10; $f._arg$11 = _arg$11; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._arg$7 = _arg$7; $f._arg$8 = _arg$8; $f._arg$9 = _arg$9; $f._r = _r; $f._r$1 = _r$1; $f._r$10 = _r$10; $f._r$11 = _r$11; $f._r$12 = _r$12; $f._r$13 = _r$13; $f._r$14 = _r$14; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f._r$9 = _r$9; $f._selection = _selection; $f._selection$1 = _selection$1; $f._tuple = _tuple; $f.err = err; $f.tx = tx; $f.viewPoint = viewPoint; $f.viewPoint$1 = viewPoint$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	Init = function(firstScene) {
		var _tuple, audioDir, firstScene, imageDir, wd, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _tuple = $f._tuple; audioDir = $f.audioDir; firstScene = $f.firstScene; imageDir = $f.imageDir; wd = $f.wd; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		dlog.CreateLogFile();
		$r = initConf(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.SetStringDebugLevel(conf.Debug.Level); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		dlog.SetDebugFilter(conf.Debug.Filter);
		$r = dlog.Info(new sliceType([new $String("Oak Init Start")])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.ScreenWidth = conf.Screen.Width;
		$pkg.ScreenHeight = conf.Screen.Height;
		$pkg.FrameRate = conf.FrameRate;
		$pkg.DrawFrameRate = conf.DrawFrameRate;
		$r = SetLang(conf.Language); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_tuple = fileutil.Getwd();
		wd = _tuple[0];
		$r = render.SetFontDefaults(wd, conf.Assets.AssetPath, conf.Assets.FontPath, conf.Font.Hinting, conf.Font.Color, conf.Font.File, conf.Font.Size, conf.Font.DPI); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = SeedRNG(new $Int64(0, 0)); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		imageDir = filepath.Join(new sliceType$1([wd, conf.Assets.AssetPath, conf.Assets.ImagePath]));
		audioDir = filepath.Join(new sliceType$1([wd, conf.Assets.AssetPath, conf.Assets.AudioPath]));
		$r = dlog.Info(new sliceType([new $String("Init Scene Loop")])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go(sceneLoop, [firstScene]);
		$r = dlog.Info(new sliceType([new $String("Init asset load")])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go(loadAssets, [imageDir, audioDir]);
		$r = dlog.Info(new sliceType([new $String("Init Console")])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go(defaultDebugConsole, []);
		$r = dlog.Info(new sliceType([new $String("Init Main Driver")])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = initDriver(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Init }; } $f._tuple = _tuple; $f.audioDir = audioDir; $f.firstScene = firstScene; $f.imageDir = imageDir; $f.wd = wd; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.Init = Init;
	jsMouseButton = function(i) {
		var _entry, _tuple, i, ok, v;
		_tuple = (_entry = jsMouseButtons[$Int.keyFor(i)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		v = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return v;
		}
		return 0;
	};
	jsKey = function(i) {
		var _entry, _tuple, i, ok, v;
		_tuple = (_entry = jsKeys[$Int.keyFor(i)], _entry !== undefined ? [_entry.v, true] : [0, false]);
		v = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			return v;
		}
		return 0;
	};
	inputLoop = function() {
		var _r, _r$1, _r$2, _r$3, _ref, button, e, e$1, e$2, e$3, e$4, e$5, eventName, eventName$1, k, mevent, schedCt, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _ref = $f._ref; button = $f.button; e = $f.e; e$1 = $f.e$1; e$2 = $f.e$2; e$3 = $f.e$3; e$4 = $f.e$4; e$5 = $f.e$5; eventName = $f.eventName; eventName$1 = $f.eventName$1; k = $f.k; mevent = $f.mevent; schedCt = $f.schedCt; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (conf.GestureSupport) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (conf.GestureSupport) { */ case 1:
			gesture.EventFilter.copy(eFilter, new gesture.EventFilter.ptr(windowControl, false, false, false, false, new gesture.Point.ptr(0, 0), 0, 0));
			eventFn = (function $b() {
				var _r, _r$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				_r = eFilter.EventDeque.NextEvent(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_r$1 = eFilter.Filter(_r); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				$s = -1; return _r$1;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.$s = $s; $f.$r = $r; return $f;
			});
			$s = 3; continue;
		/* } else { */ case 2:
			eventFn = $methodVal(windowControl, "NextEvent");
		/* } */ case 3:
		schedCt = 0;
		/* while (true) { */ case 4:
			_r = eventFn(); /* */ $s = 6; case 6: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_ref = _r;
			/* */ if ($assertType(_ref, lifecycle.Event, true)[1]) { $s = 7; continue; }
			/* */ if ($assertType(_ref, key.Event, true)[1]) { $s = 8; continue; }
			/* */ if ($assertType(_ref, mouse.Event, true)[1]) { $s = 9; continue; }
			/* */ if ($assertType(_ref, gesture.Event, true)[1]) { $s = 10; continue; }
			/* */ if ($assertType(_ref, size.Event, true)[1]) { $s = 11; continue; }
			/* */ if ($assertType(_ref, $error, true)[1]) { $s = 12; continue; }
			/* */ $s = 13; continue;
			/* if ($assertType(_ref, lifecycle.Event, true)[1]) { */ case 7:
				e = $clone(_ref.$val, lifecycle.Event);
				/* */ if (e.To === 0) { $s = 14; continue; }
				/* */ $s = 15; continue;
				/* if (e.To === 0) { */ case 14:
					$r = $send(quitCh, true); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 15:
				$s = 13; continue;
			/* } else if ($assertType(_ref, key.Event, true)[1]) { */ case 8:
				e$1 = $clone(_ref.$val, key.Event);
				$r = dlog.Verb(new sliceType([new $String("Key event"), new e$1.constructor.elem(e$1)])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_r$1 = new key.Code(e$1.Code).String(); /* */ $s = 18; case 18: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_r$2 = GetKeyBind($substring(_r$1, 4)); /* */ $s = 19; case 19: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				k = _r$2;
				/* */ if (e$1.Direction === 1) { $s = 20; continue; }
				/* */ if (e$1.Direction === 2) { $s = 21; continue; }
				/* */ $s = 22; continue;
				/* if (e$1.Direction === 1) { */ case 20:
					$r = setDown(k); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					eb.Trigger("KeyDown", new $String(k));
					eb.Trigger("KeyDown" + k, $ifaceNil);
					$s = 22; continue;
				/* } else if (e$1.Direction === 2) { */ case 21:
					$r = setUp(k); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					eb.Trigger("KeyUp", new $String(k));
					eb.Trigger("KeyUp" + k, $ifaceNil);
				/* } */ case 22:
				$s = 13; continue;
			/* } else if ($assertType(_ref, mouse.Event, true)[1]) { */ case 9:
				e$2 = $clone(_ref.$val, mouse.Event);
				$r = dlog.Verb(new sliceType([new $String("Mouse event"), new e$2.constructor.elem(e$2)])); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				button = mouse$1.GetMouseButton(e$2.Button);
				eventName = mouse$1.GetEventName(e$2.Direction, e$2.Button);
				/* */ if (e$2.Direction === 1) { $s = 26; continue; }
				/* */ if (e$2.Direction === 2) { $s = 27; continue; }
				/* */ $s = 28; continue;
				/* if (e$2.Direction === 1) { */ case 26:
					$r = setDown(button); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 28; continue;
				/* } else if (e$2.Direction === 2) { */ case 27:
					$r = setUp(button); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				/* } */ case 28:
				mevent = new mouse$1.Event.ptr($fround(($fround(($fround(e$2.X - (windowRect.Min.X))) / ((windowRect.Max.X - windowRect.Min.X >> 0)))) * ($pkg.ScreenWidth)), $fround(($fround(($fround(e$2.Y - (windowRect.Min.Y))) / ((windowRect.Max.Y - windowRect.Min.Y >> 0)))) * ($pkg.ScreenHeight)), button, eventName);
				mouse$1.Event.copy(mouse$1.LastMouseEvent, mevent);
				eb.Trigger(eventName, new mevent.constructor.elem(mevent));
				$r = mouse$1.Propagate(eventName + "On", $clone(mevent, mouse$1.Event)); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 13; continue;
			/* } else if ($assertType(_ref, gesture.Event, true)[1]) { */ case 10:
				e$3 = $clone(_ref.$val, gesture.Event);
				_r$3 = new gesture.Type(e$3.Type).String(); /* */ $s = 32; case 32: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				eventName$1 = "Gesture" + _r$3;
				$r = dlog.Verb(new sliceType([new $String(eventName$1)])); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				eb.Trigger(eventName$1, (x = mouse$1.FromShinyGesture($clone(e$3, gesture.Event)), new x.constructor.elem(x)));
				$s = 13; continue;
			/* } else if ($assertType(_ref, size.Event, true)[1]) { */ case 11:
				e$4 = $clone(_ref.$val, size.Event);
				$r = ChangeWindow(e$4.WidthPx, e$4.HeightPx); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 13; continue;
			/* } else if ($assertType(_ref, $error, true)[1]) { */ case 12:
				e$5 = _ref;
				$r = dlog.Error(new sliceType([e$5])); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 13:
			schedCt = schedCt + (1) >> 0;
			/* */ if (schedCt > 100) { $s = 36; continue; }
			/* */ $s = 37; continue;
			/* if (schedCt > 100) { */ case 36:
				schedCt = 0;
				$r = runtime.Gosched(); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 37:
		/* } */ $s = 4; continue; case 5:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: inputLoop }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._ref = _ref; $f.button = button; $f.e = e; $f.e$1 = e$1; $f.e$2 = e$2; $f.e$3 = e$3; $f.e$4 = e$4; $f.e$5 = e$5; $f.eventName = eventName; $f.eventName$1 = eventName$1; $f.k = k; $f.mevent = mevent; $f.schedCt = schedCt; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	GetKeyBind = function(key$1) {
		var _entry, _tuple, key$1, ok, v, $s, $deferred, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _tuple = $f._tuple; key$1 = $f.key$1; ok = $f.ok; v = $f.v; $s = $f.$s; $deferred = $f.$deferred; $r = $f.$r; } var $err = null; try { s: while (true) { switch ($s) { case 0: $deferred = []; $deferred.index = $curGoroutine.deferStack.length; $curGoroutine.deferStack.push($deferred);
		$r = keyBindLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$deferred.push([$methodVal(keyBindLock, "RUnlock"), []]);
		_tuple = (_entry = keyBinds[$String.keyFor(key$1)], _entry !== undefined ? [_entry.v, true] : ["", false]);
		v = _tuple[0];
		ok = _tuple[1];
		if (ok) {
			$s = -1; return v;
		}
		$s = -1; return key$1;
		/* */ } return; } } catch(err) { $err = err; $s = -1; return ""; } finally { $callDeferred($deferred, $err); if($curGoroutine.asleep) { if ($f === undefined) { $f = { $blk: GetKeyBind }; } $f._entry = _entry; $f._tuple = _tuple; $f.key$1 = key$1; $f.ok = ok; $f.v = v; $f.$s = $s; $f.$deferred = $deferred; $f.$r = $r; return $f; } }
	};
	$pkg.GetKeyBind = GetKeyBind;
	setUp = function(key$1) {
		var key$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; key$1 = $f.key$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = keyLock.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = durationLock.Lock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		delete keyState[$String.keyFor(key$1)];
		delete keyDurations[$String.keyFor(key$1)];
		$r = durationLock.Unlock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = keyLock.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: setUp }; } $f.key$1 = key$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	setDown = function(key$1) {
		var _key, _key$1, key$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _key = $f._key; _key$1 = $f._key$1; key$1 = $f.key$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = keyLock.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_key = key$1; (keyState || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: true };
		_key$1 = key$1; (keyDurations || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key$1)] = { k: _key$1, v: $clone(time.Now(), time.Time) };
		$r = keyLock.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: setDown }; } $f._key = _key; $f._key$1 = _key$1; $f.key$1 = key$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	IsDown = function(key$1) {
		var _entry, k, key$1, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; k = $f.k; key$1 = $f.key$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		k = false;
		$r = keyLock.RLock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		k = (_entry = keyState[$String.keyFor(key$1)], _entry !== undefined ? _entry.v : false);
		$r = keyLock.RUnlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return k;
		/* */ } return; } if ($f === undefined) { $f = { $blk: IsDown }; } $f._entry = _entry; $f.k = k; $f.key$1 = key$1; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.IsDown = IsDown;
	SetLang = function(s) {
		var _1, _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _1 = $f._1; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = strings.ToUpper(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = _r;
			_1 = s;
			/* */ if (_1 === ("ENGLISH")) { $s = 3; continue; }
			/* */ if (_1 === ("GERMAN")) { $s = 4; continue; }
			/* */ $s = 5; continue;
			/* if (_1 === ("ENGLISH")) { */ case 3:
				$pkg.Lang = 0;
				$s = 6; continue;
			/* } else if (_1 === ("GERMAN")) { */ case 4:
				$pkg.Lang = 1;
				$s = 6; continue;
			/* } else { */ case 5:
				$r = dlog.Warn(new sliceType([new $String("Unknown language string:"), new $String(s), new $String("Language set to English")])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$pkg.Lang = 0;
			/* } */ case 6:
		case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SetLang }; } $f._1 = _1; $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SetLang = SetLang;
	lifecycleLoop = function(s) {
		var _r, _r$1, _tuple, err, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _tuple = $f._tuple; err = $f.err; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = initControl.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (lifecycleInit) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (lifecycleInit) { */ case 2:
			$r = dlog.Error(new sliceType([new $String("Started lifecycle twice, aborting second call")])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = initControl.Unlock(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 3:
		lifecycleInit = true;
		$r = initControl.Unlock(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.Info(new sliceType([new $String("Init Lifecycle")])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		screenControl = s;
		err = $ifaceNil;
		$r = dlog.Info(new sliceType([new $String("Creating window buffer")])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r = screenControl.NewBuffer(new image.Point.ptr($pkg.ScreenWidth, $pkg.ScreenHeight)); /* */ $s = 9; case 9: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		winBuffer = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 10; continue; }
		/* */ $s = 11; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 10:
			$r = dlog.Error(new sliceType([err])); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
		/* } */ case 11:
		$r = dlog.Info(new sliceType([new $String("Creating window controller")])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = changeWindow($imul($pkg.ScreenWidth, conf.Screen.Scale), $imul($pkg.ScreenHeight, conf.Screen.Scale)); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.Info(new sliceType([new $String("Getting event bus")])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		eb = event.GetBus();
		$r = dlog.Info(new sliceType([new $String("Starting draw loop")])); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go(drawLoop, []);
		$r = dlog.Info(new sliceType([new $String("Starting input loop")])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go(inputLoop, []);
		$r = dlog.Info(new sliceType([new $String("Starting event handler")])); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$go(event.ResolvePending, []);
		_r$1 = $recv(quitCh); /* */ $s = 19; case 19: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1[0];
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: lifecycleLoop }; } $f._r = _r; $f._r$1 = _r$1; $f._tuple = _tuple; $f.err = err; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	changeWindow = function(width, height) {
		var _r, _tuple, err, height, wC, width, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _tuple = $f._tuple; err = $f.err; height = $f.height; wC = $f.wC; width = $f.width; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = windowController(screenControl, width, height); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		wC = _tuple[0];
		err = _tuple[1];
		/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 2:
			$r = dlog.Error(new sliceType([err])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$panic(err);
		/* } */ case 3:
		windowControl = wC;
		$r = ChangeWindow(width, height); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: changeWindow }; } $f._r = _r; $f._tuple = _tuple; $f.err = err; $f.height = height; $f.wC = wC; $f.width = width; $f.$s = $s; $f.$r = $r; return $f;
	};
	ChangeWindow = function(width, height) {
		var _arg, _arg$1, _arg$2, _arg$3, _arg$4, _arg$5, _arg$6, _q, _q$1, _r, _r$1, _r$2, _r$3, _tmp, _tmp$1, _tuple, buff, err, height, inRatio, newHeight, newWidth, width, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _arg$3 = $f._arg$3; _arg$4 = $f._arg$4; _arg$5 = $f._arg$5; _arg$6 = $f._arg$6; _q = $f._q; _q$1 = $f._q$1; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tmp = $f._tmp; _tmp$1 = $f._tmp$1; _tuple = $f._tuple; buff = $f.buff; err = $f.err; height = $f.height; inRatio = $f.inRatio; newHeight = $f.newHeight; newWidth = $f.newWidth; width = $f.width; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = screenControl.NewBuffer(new image.Point.ptr(width, height)); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_tuple = _r;
		buff = _tuple[0];
		err = _tuple[1];
		/* */ if ($interfaceIsEqual(err, $ifaceNil)) { $s = 2; continue; }
		/* */ $s = 3; continue;
		/* if ($interfaceIsEqual(err, $ifaceNil)) { */ case 2:
			_r$1 = buff.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_arg = _r$1;
			_r$2 = buff.Bounds(); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_arg$1 = $clone(_r$2, image.Rectangle);
			_arg$2 = imageBlack;
			_arg$3 = $clone(zeroPoint, image.Point);
			$r = draw.Draw(_arg, _arg$1, _arg$2, _arg$3, 1); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_arg$4 = $clone(zeroPoint, image.Point);
			_arg$5 = buff;
			_r$3 = buff.Bounds(); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_arg$6 = $clone(_r$3, image.Rectangle);
			$r = windowControl.Upload(_arg$4, _arg$5, _arg$6); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 4; continue;
		/* } else { */ case 3:
			$r = dlog.Error(new sliceType([err])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 4:
		_tmp = 0;
		_tmp$1 = 0;
		x = _tmp;
		y = _tmp$1;
		if ($pkg.UseAspectRatio) {
			inRatio = (width) / (height);
			if (aspectRatio > inRatio) {
				newHeight = alg.RoundF64((height) * (inRatio / aspectRatio));
				y = (_q = ((newHeight - height >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				height = newHeight - y >> 0;
			} else {
				newWidth = alg.RoundF64((width) * (aspectRatio / inRatio));
				x = (_q$1 = ((newWidth - width >> 0)) / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				width = newWidth - x >> 0;
			}
		}
		image.Rectangle.copy(windowRect, image.Rect(-x, -y, width, height));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: ChangeWindow }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._arg$3 = _arg$3; $f._arg$4 = _arg$4; $f._arg$5 = _arg$5; $f._arg$6 = _arg$6; $f._q = _q; $f._q$1 = _q$1; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tmp = _tmp; $f._tmp$1 = _tmp$1; $f._tuple = _tuple; $f.buff = buff; $f.err = err; $f.height = height; $f.inRatio = inRatio; $f.newHeight = newHeight; $f.newWidth = newWidth; $f.width = width; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.ChangeWindow = ChangeWindow;
	loadAssets = function(imageDir, audioDir) {
		var _r, audioDir, err, imageDir, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; audioDir = $f.audioDir; err = $f.err; imageDir = $f.imageDir; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (conf.BatchLoad) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (conf.BatchLoad) { */ case 1:
			$r = dlog.Info(new sliceType([new $String("Loading Images")])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = render.BatchLoad(imageDir); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			err = _r;
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 5; continue; }
			/* */ $s = 6; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 5:
				$r = dlog.Error(new sliceType([err])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = endLoad(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 6:
			$r = dlog.Info(new sliceType([new $String("Done Loading Images")])); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = dlog.Info(new sliceType([new $String("Loading Audio")])); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			err = audio.BatchLoad(audioDir);
			/* */ if (!($interfaceIsEqual(err, $ifaceNil))) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ case 11:
				$r = dlog.Error(new sliceType([err])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = endLoad(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
			/* } */ case 12:
			$r = dlog.Info(new sliceType([new $String("Done Loading Audio")])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = endLoad(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: loadAssets }; } $f._r = _r; $f.audioDir = audioDir; $f.err = err; $f.imageDir = imageDir; $f.$s = $s; $f.$r = $r; return $f;
	};
	endLoad = function() {
		var $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = dlog.Info(new sliceType([new $String("Done Loading")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = $send(startupLoadCh, true); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.Info(new sliceType([new $String("Startup load signal sent")])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: endLoad }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	logicLoop = function() {
		var ch;
		ch = new $Chan($Bool, 0);
		framesElapsed = 0;
		$go((function $b(doneCh) {
			var _r, _r$1, _selection, doneCh, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _selection = $f._selection; doneCh = $f.doneCh; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$pkg.LogicTicker = timing.NewDynamicTicker();
			$r = $pkg.LogicTicker.SetTick(timing.FPSToDuration($pkg.FrameRate)); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 2:
				_r = $select([[$pkg.LogicTicker.C], [doneCh]]); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
				_selection = _r;
				/* */ if (_selection[0] === 0) { $s = 5; continue; }
				/* */ if (_selection[0] === 1) { $s = 6; continue; }
				/* */ $s = 7; continue;
				/* if (_selection[0] === 0) { */ case 5:
					_r$1 = $recv(eb.TriggerBack("EnterFrame", new $Int(framesElapsed))); /* */ $s = 8; case 8: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
					_r$1[0];
					framesElapsed = framesElapsed + (1) >> 0;
					$r = $send(sceneCh, true); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = 7; continue;
				/* } else if (_selection[0] === 1) { */ case 6:
					$r = $pkg.LogicTicker.Stop(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$s = -1; return;
				/* } */ case 7:
			/* } */ $s = 2; continue; case 3:
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._selection = _selection; $f.doneCh = doneCh; $f.$s = $s; $f.$r = $r; return $f;
		}), [ch]);
		return ch;
	};
	setPanicOnFault = function() {
	};
	SeedRNG = function(inSeed) {
		var _r, _r$1, _r$2, _r$3, inSeed, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; inSeed = $f.inSeed; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!((currentSeed.$high === 0 && currentSeed.$low === 0)) && (inSeed.$high === 0 && inSeed.$low === 0)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!((currentSeed.$high === 0 && currentSeed.$low === 0)) && (inSeed.$high === 0 && inSeed.$low === 0)) { */ case 1:
			_r = fmt.Println(new sliceType([new $String("Oak Seed was already set to :"), currentSeed])); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r;
			$s = -1; return;
		/* } */ case 2:
		currentSeed = inSeed;
		if ((inSeed.$high === 0 && inSeed.$low === 0)) {
			inSeed = $clone($clone(time.Now(), time.Time).UTC(), time.Time).UnixNano();
		}
		$r = rand.Seed(inSeed); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		_r$1 = fmt.Println(new sliceType([new $String("\n~~~~~~~~~~~~~~~")])); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		_r$2 = fmt.Println(new sliceType([new $String("Oak Seed:"), inSeed])); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		dlog.FileWrite(new sliceType([new $String("Oak seed:"), inSeed]));
		_r$3 = fmt.Println(new sliceType([new $String("\n~~~~~~~~~~~~~~~")])); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
		_r$3;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: SeedRNG }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f.inSeed = inSeed; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.SeedRNG = SeedRNG;
	sceneTransition = function(result) {
		var _r, _r$1, _r$2, _r$3, _tuple, cont, i, result, tx, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _tuple = $f._tuple; cont = $f.cont; i = $f.i; result = $f.result; tx = $f.tx; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (!(result.Transition === $throwNilPointerError)) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!(result.Transition === $throwNilPointerError)) { */ case 1:
			i = 0;
			_r = winBuffer.Bounds(); /* */ $s = 3; case 3: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = screenControl.NewTexture($clone(_r.Max, image.Point)); /* */ $s = 4; case 4: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_tuple = _r$1;
			tx = _tuple[0];
			cont = true;
			/* while (true) { */ case 5:
				/* if (!(cont)) { break; } */ if(!(cont)) { $s = 6; continue; }
				_r$2 = winBuffer.RGBA(); /* */ $s = 7; case 7: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
				_r$3 = result.Transition(_r$2, i); /* */ $s = 8; case 8: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				cont = _r$3;
				$r = drawLoopPublish(tx); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				i = i + (1) >> 0;
				$r = time.Sleep(timing.FPSToDuration($pkg.FrameRate)); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ $s = 5; continue; case 6:
		/* } */ case 2:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sceneTransition }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._tuple = _tuple; $f.cont = cont; $f.i = i; $f.result = result; $f.tx = tx; $f.$s = $s; $f.$r = $r; return $f;
	};
	AddScene = function(name, start, loop, end) {
		var _entry, _key, _r, _tuple, end, loop, name, ok, start, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _key = $f._key; _r = $f._r; _tuple = $f._tuple; end = $f.end; loop = $f.loop; name = $f.name; ok = $f.ok; start = $f.start; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_r = fmt.Println(new sliceType([new $String("[oak]-------- Adding"), new $String(name)])); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		_tuple = (_entry = sceneMap[$String.keyFor(name)], _entry !== undefined ? [_entry.v, true] : [ptrType$5.nil, false]);
		ok = _tuple[1];
		if (!ok) {
			_key = name; (sceneMap || $throwRuntimeError("assignment to entry in nil map"))[$String.keyFor(_key)] = { k: _key, v: new Scene.ptr(false, start, loop, end) };
			$s = -1; return $ifaceNil;
		}
		$s = -1; return errors.New("The scene " + name + " is already defined.");
		/* */ } return; } if ($f === undefined) { $f = { $blk: AddScene }; } $f._entry = _entry; $f._key = _key; $f._r = _r; $f._tuple = _tuple; $f.end = end; $f.loop = loop; $f.name = name; $f.ok = ok; $f.start = start; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.AddScene = AddScene;
	sceneLoop = function(firstScene) {
		var _entry, _entry$1, _entry$2, _r, _r$1, _r$2, _r$3, _selection, _selection$1, _tuple, _tuple$1, cont, firstScene, logicTicker, ok, prevScene, result, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry = $f._entry; _entry$1 = $f._entry$1; _entry$2 = $f._entry$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _selection = $f._selection; _selection$1 = $f._selection$1; _tuple = $f._tuple; _tuple$1 = $f._tuple$1; cont = $f.cont; firstScene = $f.firstScene; logicTicker = $f.logicTicker; ok = $f.ok; prevScene = $f.prevScene; result = $f.result; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		prevScene = [prevScene];
		result = [result];
		prevScene[0] = "";
		_tuple = (_entry = sceneMap[$String.keyFor(firstScene)], _entry !== undefined ? [_entry.v, true] : [ptrType$5.nil, false]);
		s = _tuple[0];
		ok = _tuple[1];
		/* */ if (!ok) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!ok) { */ case 1:
			$r = dlog.Error(new sliceType([new $String("Unknown scene"), new $String(firstScene)])); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$panic(new $String("Unknown scene"));
		/* } */ case 2:
		s.active = true;
		globalFirstScene = firstScene;
		$pkg.CurrentScene = "loading";
		result[0] = new SceneResult.ptr($ifaceNil, $throwNilPointerError);
		$r = dlog.Info(new sliceType([new $String("First Scene Start")])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = $send(drawCh, true); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = $send(drawCh, true); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.Verb(new sliceType([new $String("Draw Channel Activated")])); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* while (true) { */ case 8:
			image.Point.copy($pkg.ViewPos, new image.Point.ptr(0, 0));
			$r = updateScreen(0, 0); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			useViewBounds = false;
			$r = dlog.Info(new sliceType([new $String("Scene Start"), new $String($pkg.CurrentScene)])); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$go((function(prevScene, result) { return function $b() {
				var _entry$1, _tuple$1, ok$1, s$1, $s, $r;
				/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _entry$1 = $f._entry$1; _tuple$1 = $f._tuple$1; ok$1 = $f.ok$1; s$1 = $f.s$1; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
				$r = dlog.Info(new sliceType([new $String("Starting scene in goroutine"), new $String($pkg.CurrentScene)])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				_tuple$1 = (_entry$1 = sceneMap[$String.keyFor($pkg.CurrentScene)], _entry$1 !== undefined ? [_entry$1.v, true] : [ptrType$5.nil, false]);
				s$1 = _tuple$1[0];
				ok$1 = _tuple$1[1];
				/* */ if (!ok$1) { $s = 2; continue; }
				/* */ $s = 3; continue;
				/* if (!ok$1) { */ case 2:
					$r = dlog.Error(new sliceType([new $String("Unknown scene"), new $String($pkg.CurrentScene)])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					$panic(new $String("Unknown scene"));
				/* } */ case 3:
				$r = s$1.start(prevScene[0], result[0].NextSceneInput); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$r = $send(transitionCh, true); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return;
				/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._entry$1 = _entry$1; $f._tuple$1 = _tuple$1; $f.ok$1 = ok$1; $f.s$1 = s$1; $f.$s = $s; $f.$r = $r; return $f;
			}; })(prevScene, result), []);
			$r = sceneTransition(result[0]); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = dlog.Info(new sliceType([new $String("Starting load animation")])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $send(drawCh, true); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = dlog.Info(new sliceType([new $String("Getting Transition Signal")])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = $recv(transitionCh); /* */ $s = 16; case 16: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r[0];
			$r = dlog.Info(new sliceType([new $String("Resume Drawing")])); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $send(drawCh, true); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = dlog.Info(new sliceType([new $String("Looping Scene")])); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			cont = true;
			logicTicker = logicLoop();
			/* while (true) { */ case 20:
				/* if (!(cont)) { break; } */ if(!(cont)) { $s = 21; continue; }
				_r$1 = $select([[sceneCh], [skipSceneCh]]); /* */ $s = 22; case 22: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
				_selection = _r$1;
				/* */ if (_selection[0] === 0) { $s = 23; continue; }
				/* */ if (_selection[0] === 1) { $s = 24; continue; }
				/* */ $s = 25; continue;
				/* if (_selection[0] === 0) { */ case 23:
					_r$2 = (_entry$1 = sceneMap[$String.keyFor($pkg.CurrentScene)], _entry$1 !== undefined ? _entry$1.v : ptrType$5.nil).loop(); /* */ $s = 26; case 26: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
					cont = _r$2;
					$s = 25; continue;
				/* } else if (_selection[0] === 1) { */ case 24:
					cont = false;
				/* } */ case 25:
			/* } */ $s = 20; continue; case 21:
			$r = dlog.Info(new sliceType([new $String("Scene End"), new $String($pkg.CurrentScene)])); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = $send(logicTicker, true); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$close(logicTicker);
			prevScene[0] = $pkg.CurrentScene;
			$r = $send(drawCh, true); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* while (true) { */ case 30:
				_selection$1 = $select([[timing.ClearDelayCh, true], []]);
				if (_selection$1[0] === 0) {
				} else if (_selection$1[0] === 1) {
					/* break delayLabel; */ $s = 31; continue s;
				}
			/* } */ $s = 30; continue; case 31:
			$r = dlog.Verb(new sliceType([new $String("Resetting Engine")])); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = event.ResetBus(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = dlog.Verb(new sliceType([new $String("Event Bus Reset")])); /* */ $s = 34; case 34: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			collision.Clear();
			mouse$1.Clear();
			$r = event.ResetEntities(); /* */ $s = 35; case 35: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = render.ResetDrawStack(); /* */ $s = 36; case 36: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = render.PreDraw(); /* */ $s = 37; case 37: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = dlog.Verb(new sliceType([new $String("Engine Reset")])); /* */ $s = 38; case 38: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r$3 = (_entry$2 = sceneMap[$String.keyFor($pkg.CurrentScene)], _entry$2 !== undefined ? _entry$2.v : ptrType$5.nil).end(); /* */ $s = 39; case 39: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_tuple$1 = _r$3;
			$pkg.CurrentScene = _tuple$1[0];
			result[0] = _tuple$1[1];
			if (result[0] === ptrType$2.nil) {
				result[0] = new SceneResult.ptr($ifaceNil, $throwNilPointerError);
			}
			eb = event.GetBus();
			if (!debugResetInProgress) {
				debugResetInProgress = true;
				$go((function(prevScene, result) { return function $b() {
					var $s, $r;
					/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
					$r = $send(debugResetCh, true); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
					debugResetInProgress = false;
					$s = -1; return;
					/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.$s = $s; $f.$r = $r; return $f;
				}; })(prevScene, result), []);
			}
		/* } */ $s = 8; continue; case 9:
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: sceneLoop }; } $f._entry = _entry; $f._entry$1 = _entry$1; $f._entry$2 = _entry$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._selection = _selection; $f._selection$1 = _selection$1; $f._tuple = _tuple; $f._tuple$1 = _tuple$1; $f.cont = cont; $f.firstScene = firstScene; $f.logicTicker = logicTicker; $f.ok = ok; $f.prevScene = prevScene; $f.result = result; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSScreen.ptr.prototype.NewBuffer = function(p) {
		var buffer, jss, p, rect$1, rgba;
		jss = this;
		rect$1 = $clone(image.Rect(0, 0, p.X, p.Y), image.Rectangle);
		rgba = image.NewRGBA($clone(rect$1, image.Rectangle));
		buffer = new JSBuffer.ptr($clone(rect$1, image.Rectangle), rgba);
		return [buffer, $ifaceNil];
	};
	JSScreen.prototype.NewBuffer = function(p) { return this.$val.NewBuffer(p); };
	JSScreen.ptr.prototype.NewWindow = function(opts) {
		var bdy, canvas, document, jsc, jss, opts;
		jss = this;
		jsc = new JSWindow.ptr(null, null, null, sliceType.nil, new sync.Mutex.ptr(0, 0));
		document = $global.document;
		canvas = document.createElement($externalize("canvas", $String));
		canvas.style.display = $externalize("block", $String);
		canvas.width = $pkg.ScreenWidth;
		canvas.height = $pkg.ScreenHeight;
		jsc.ctx = canvas.getContext($externalize("2d", $String));
		bdy = document.body;
		bdy.appendChild(canvas);
		canvas.addEventListener($externalize("mousemove", $String), $externalize((function $b(ev) {
			var ev, rect$1, x, x$1, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; rect$1 = $f.rect$1; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			rect$1 = canvas.getBoundingClientRect();
			x = (((($parseInt(ev.clientX) >> 0) - ($parseInt(rect$1.left) >> 0) >> 0)));
			y = (((($parseInt(ev.clientY) >> 0) - ($parseInt(rect$1.top) >> 0) >> 0)));
			$r = jsc.Send((x$1 = new mouse.Event.ptr(x, y, 0, 0, 0), new x$1.constructor.elem(x$1))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.ev = ev; $f.rect$1 = rect$1; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType), $externalize(false, $Bool));
		canvas.addEventListener($externalize("mousedown", $String), $externalize((function $b(ev) {
			var button, ev, rect$1, x, x$1, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; button = $f.button; ev = $f.ev; rect$1 = $f.rect$1; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			rect$1 = canvas.getBoundingClientRect();
			x = (((($parseInt(ev.clientX) >> 0) - ($parseInt(rect$1.left) >> 0) >> 0)));
			y = (((($parseInt(ev.clientY) >> 0) - ($parseInt(rect$1.top) >> 0) >> 0)));
			button = jsMouseButton($parseInt(ev.button) >> 0);
			$r = jsc.Send((x$1 = new mouse.Event.ptr(x, y, button, 0, 1), new x$1.constructor.elem(x$1))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.button = button; $f.ev = ev; $f.rect$1 = rect$1; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType), $externalize(false, $Bool));
		canvas.addEventListener($externalize("mouseup", $String), $externalize((function $b(ev) {
			var button, ev, rect$1, x, x$1, y, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; button = $f.button; ev = $f.ev; rect$1 = $f.rect$1; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			rect$1 = canvas.getBoundingClientRect();
			x = (((($parseInt(ev.clientX) >> 0) - ($parseInt(rect$1.left) >> 0) >> 0)));
			y = (((($parseInt(ev.clientY) >> 0) - ($parseInt(rect$1.top) >> 0) >> 0)));
			button = jsMouseButton($parseInt(ev.button) >> 0);
			$r = jsc.Send((x$1 = new mouse.Event.ptr(x, y, button, 0, 2), new x$1.constructor.elem(x$1))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.button = button; $f.ev = ev; $f.rect$1 = rect$1; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType), $externalize(false, $Bool));
		$global.addEventListener($externalize("keydown", $String), $externalize((function $b(ev) {
			var ev, k, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; k = $f.k; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			k = $parseInt(ev.keyCode) >> 0;
			$r = jsc.Send((x = new key.Event.ptr(0, jsKey(k), 0, 1), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.ev = ev; $f.k = k; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType), $externalize(false, $Bool));
		$global.addEventListener($externalize("keyup", $String), $externalize((function $b(ev) {
			var ev, k, x, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; k = $f.k; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			k = $parseInt(ev.keyCode) >> 0;
			$r = jsc.Send((x = new key.Event.ptr(0, jsKey(k), 0, 2), new x.constructor.elem(x))); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.ev = ev; $f.k = k; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
		}), funcType), $externalize(false, $Bool));
		return [jsc, $ifaceNil];
	};
	JSScreen.prototype.NewWindow = function(opts) { return this.$val.NewWindow(opts); };
	JSScreen.ptr.prototype.NewTexture = function(p) {
		var jss, p, txt;
		jss = this;
		txt = new JSTexture.ptr(new JSBuffer.ptr(new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0)), ptrType$7.nil));
		return [txt, $ifaceNil];
	};
	JSScreen.prototype.NewTexture = function(p) { return this.$val.NewTexture(p); };
	JSTexture.ptr.prototype.Upload = function(dp, src, sr) {
		var _r, dp, jst, sr, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; dp = $f.dp; jst = $f.jst; sr = $f.sr; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jst = this;
		image.Rectangle.copy(jst.JSBuffer.rect, sr);
		jst.JSBuffer.rgba = image.NewRGBA($clone(sr, image.Rectangle));
		_r = src.RGBA(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		image.RGBA.copy(jst.JSBuffer.rgba, _r);
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSTexture.ptr.prototype.Upload }; } $f._r = _r; $f.dp = dp; $f.jst = jst; $f.sr = sr; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSTexture.prototype.Upload = function(dp, src, sr) { return this.$val.Upload(dp, src, sr); };
	JSTexture.ptr.prototype.Fill = function(dr, src, op) {
		var dr, jst, op, src;
		jst = this;
	};
	JSTexture.prototype.Fill = function(dr, src, op) { return this.$val.Fill(dr, src, op); };
	updateScreen = function(x, y) {
		var x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		/* */ if (useViewBounds) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (useViewBounds) { */ case 1:
			/* */ if (viewBounds.minX <= x && viewBounds.maxX >= (x + $pkg.ScreenWidth >> 0)) { $s = 4; continue; }
			/* */ if (viewBounds.minX > x) { $s = 5; continue; }
			/* */ if (viewBounds.maxX < (x + $pkg.ScreenWidth >> 0)) { $s = 6; continue; }
			/* */ $s = 7; continue;
			/* if (viewBounds.minX <= x && viewBounds.maxX >= (x + $pkg.ScreenWidth >> 0)) { */ case 4:
				$r = dlog.Verb(new sliceType([new $String("Set ViewX to "), new $Int(x)])); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$pkg.ViewPos.X = x;
				$s = 7; continue;
			/* } else if (viewBounds.minX > x) { */ case 5:
				$pkg.ViewPos.X = viewBounds.minX;
				$s = 7; continue;
			/* } else if (viewBounds.maxX < (x + $pkg.ScreenWidth >> 0)) { */ case 6:
				$pkg.ViewPos.X = viewBounds.maxX - $pkg.ScreenWidth >> 0;
			/* } */ case 7:
			/* */ if (viewBounds.minY <= y && viewBounds.maxY >= (y + $pkg.ScreenHeight >> 0)) { $s = 9; continue; }
			/* */ if (viewBounds.minY > y) { $s = 10; continue; }
			/* */ if (viewBounds.maxY < (y + $pkg.ScreenHeight >> 0)) { $s = 11; continue; }
			/* */ $s = 12; continue;
			/* if (viewBounds.minY <= y && viewBounds.maxY >= (y + $pkg.ScreenHeight >> 0)) { */ case 9:
				$r = dlog.Verb(new sliceType([new $String("Set ViewY to "), new $Int(y)])); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$pkg.ViewPos.Y = y;
				$s = 12; continue;
			/* } else if (viewBounds.minY > y) { */ case 10:
				$pkg.ViewPos.Y = viewBounds.minY;
				$s = 12; continue;
			/* } else if (viewBounds.maxY < (y + $pkg.ScreenHeight >> 0)) { */ case 11:
				$pkg.ViewPos.Y = viewBounds.maxY - $pkg.ScreenHeight >> 0;
			/* } */ case 12:
			$s = 3; continue;
		/* } else { */ case 2:
			$r = dlog.Verb(new sliceType([new $String("Set ViewXY to "), new $Int(x), new $String(" "), new $Int(y)])); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			image.Point.copy($pkg.ViewPos, new image.Point.ptr(x, y));
		/* } */ case 3:
		eb.Trigger("ViewportUpdate", new sliceType$2([($pkg.ViewPos.X), ($pkg.ViewPos.Y)]));
		$r = dlog.Verb(new sliceType([new $String("ViewX, Y: "), new $Int($pkg.ViewPos.X), new $String(" "), new $Int($pkg.ViewPos.Y)])); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: updateScreen }; } $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSWindow.ptr.prototype.Release = function() {
		var jsc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; jsc = $f.jsc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsc = this;
		$r = dlog.Info(new sliceType([new $String("JSWindow releasing")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSWindow.ptr.prototype.Release }; } $f.jsc = jsc; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSWindow.prototype.Release = function() { return this.$val.Release(); };
	JSWindow.ptr.prototype.Publish = function() {
		var jsc;
		jsc = this;
		return new screen.PublishResult.ptr(false);
	};
	JSWindow.prototype.Publish = function() { return this.$val.Publish(); };
	JSWindow.ptr.prototype.Send = function(event$1) {
		var event$1, jsc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; event$1 = $f.event$1; jsc = $f.jsc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsc = this;
		$r = jsc.eventLock.Lock(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		jsc.events = $append(jsc.events, event$1);
		$r = jsc.eventLock.Unlock(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSWindow.ptr.prototype.Send }; } $f.event$1 = event$1; $f.jsc = jsc; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSWindow.prototype.Send = function(event$1) { return this.$val.Send(event$1); };
	JSWindow.ptr.prototype.SendFirst = function(event$1) {
		var event$1, jsc, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; event$1 = $f.event$1; jsc = $f.jsc; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsc = this;
		$r = dlog.Error(new sliceType([new $String("SendFirst is not yet supported for JSWindow")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSWindow.ptr.prototype.SendFirst }; } $f.event$1 = event$1; $f.jsc = jsc; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSWindow.prototype.SendFirst = function(event$1) { return this.$val.SendFirst(event$1); };
	JSWindow.ptr.prototype.NextEvent = function() {
		var ev, jsc, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; ev = $f.ev; jsc = $f.jsc; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsc = this;
		/* */ if (jsc.events.$length > 0) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (jsc.events.$length > 0) { */ case 1:
			$r = jsc.eventLock.Lock(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			ev = (x = jsc.events, (0 >= x.$length ? ($throwRuntimeError("index out of range"), undefined) : x.$array[x.$offset + 0]));
			jsc.events = $subslice(jsc.events, 1);
			$r = jsc.eventLock.Unlock(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return ev;
		/* } */ case 2:
		$s = -1; return $ifaceNil;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSWindow.ptr.prototype.NextEvent }; } $f.ev = ev; $f.jsc = jsc; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSWindow.prototype.NextEvent = function() { return this.$val.NextEvent(); };
	JSWindow.ptr.prototype.Upload = function(dp, src, sr) {
		var _r, _r$1, dp, jsc, sr, src, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; dp = $f.dp; jsc = $f.jsc; sr = $f.sr; src = $f.src; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		jsc = this;
		/* */ if (jsc.jsUint8 === null) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (jsc.jsUint8 === null) { */ case 1:
			_r = src.RGBA(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			jsc.jsUint8 = new ($global.Uint8ClampedArray)($externalize(_r.Pix, sliceType$3), sr.Max.X, sr.Max.Y);
			$s = 3; continue;
		/* } else { */ case 2:
			_r$1 = src.RGBA(); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			jsc.jsUint8.set($externalize(_r$1.Pix, sliceType$3));
		/* } */ case 3:
		jsc.imgData = new ($global.ImageData)(jsc.jsUint8, sr.Max.X, sr.Max.Y);
		jsc.ctx.putImageData(jsc.imgData, dp.X, dp.Y);
		runtime.GC();
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: JSWindow.ptr.prototype.Upload }; } $f._r = _r; $f._r$1 = _r$1; $f.dp = dp; $f.jsc = jsc; $f.sr = sr; $f.src = src; $f.$s = $s; $f.$r = $r; return $f;
	};
	JSWindow.prototype.Upload = function(dp, src, sr) { return this.$val.Upload(dp, src, sr); };
	JSWindow.ptr.prototype.Fill = function(dr, src, op) {
		var dr, jsc, op, src;
		jsc = this;
	};
	JSWindow.prototype.Fill = function(dr, src, op) { return this.$val.Fill(dr, src, op); };
	JSWindow.ptr.prototype.Draw = function(src2dst, src, sr, op, opts) {
		var jsc, op, opts, sr, src, src2dst;
		jsc = this;
	};
	JSWindow.prototype.Draw = function(src2dst, src, sr, op, opts) { return this.$val.Draw(src2dst, src, sr, op, opts); };
	JSWindow.ptr.prototype.DrawUniform = function(src2dst, src, sr, op, opts) {
		var jsc, op, opts, sr, src, src2dst;
		jsc = this;
	};
	JSWindow.prototype.DrawUniform = function(src2dst, src, sr, op, opts) { return this.$val.DrawUniform(src2dst, src, sr, op, opts); };
	JSWindow.ptr.prototype.Copy = function(dp, src, sr, op, opts) {
		var dp, jsc, op, opts, sr, src;
		jsc = this;
	};
	JSWindow.prototype.Copy = function(dp, src, sr, op, opts) { return this.$val.Copy(dp, src, sr, op, opts); };
	JSWindow.ptr.prototype.Scale = function(dr, src, sr, op, opts) {
		var dr, jsc, op, opts, sr, src;
		jsc = this;
	};
	JSWindow.prototype.Scale = function(dr, src, sr, op, opts) { return this.$val.Scale(dr, src, sr, op, opts); };
	ptrType$8.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}, {prop: "Size", name: "Size", pkg: "", typ: $funcType([], [image.Point], false)}, {prop: "Bounds", name: "Bounds", pkg: "", typ: $funcType([], [image.Rectangle], false)}, {prop: "RGBA", name: "RGBA", pkg: "", typ: $funcType([], [ptrType$7], false)}];
	ptrType$10.methods = [{prop: "NewBuffer", name: "NewBuffer", pkg: "", typ: $funcType([image.Point], [screen.Buffer, $error], false)}, {prop: "NewWindow", name: "NewWindow", pkg: "", typ: $funcType([ptrType$9], [screen.Window, $error], false)}, {prop: "NewTexture", name: "NewTexture", pkg: "", typ: $funcType([image.Point], [screen.Texture, $error], false)}];
	ptrType$11.methods = [{prop: "Upload", name: "Upload", pkg: "", typ: $funcType([image.Point, screen.Buffer, image.Rectangle], [], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([image.Rectangle, color.Color, draw.Op], [], false)}];
	ptrType$13.methods = [{prop: "Release", name: "Release", pkg: "", typ: $funcType([], [], false)}, {prop: "Publish", name: "Publish", pkg: "", typ: $funcType([], [screen.PublishResult], false)}, {prop: "Send", name: "Send", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "SendFirst", name: "SendFirst", pkg: "", typ: $funcType([$emptyInterface], [], false)}, {prop: "NextEvent", name: "NextEvent", pkg: "", typ: $funcType([], [$emptyInterface], false)}, {prop: "Upload", name: "Upload", pkg: "", typ: $funcType([image.Point, screen.Buffer, image.Rectangle], [], false)}, {prop: "Fill", name: "Fill", pkg: "", typ: $funcType([image.Rectangle, color.Color, draw.Op], [], false)}, {prop: "Draw", name: "Draw", pkg: "", typ: $funcType([f64.Aff3, screen.Texture, image.Rectangle, draw.Op, ptrType$12], [], false)}, {prop: "DrawUniform", name: "DrawUniform", pkg: "", typ: $funcType([f64.Aff3, color.Color, image.Rectangle, draw.Op, ptrType$12], [], false)}, {prop: "Copy", name: "Copy", pkg: "", typ: $funcType([image.Point, screen.Texture, image.Rectangle, draw.Op, ptrType$12], [], false)}, {prop: "Scale", name: "Scale", pkg: "", typ: $funcType([image.Rectangle, screen.Texture, image.Rectangle, draw.Op, ptrType$12], [], false)}];
	JSBuffer.init("github.com/oakmound/oak", [{prop: "rect", name: "rect", anonymous: false, exported: false, typ: image.Rectangle, tag: ""}, {prop: "rgba", name: "rgba", anonymous: false, exported: false, typ: ptrType$7, tag: ""}]);
	Config.init("", [{prop: "Assets", name: "Assets", anonymous: false, exported: true, typ: Assets, tag: "json:\"assets\""}, {prop: "Debug", name: "Debug", anonymous: false, exported: true, typ: Debug, tag: "json:\"debug\""}, {prop: "Screen", name: "Screen", anonymous: false, exported: true, typ: Screen, tag: "json:\"screen\""}, {prop: "Font", name: "Font", anonymous: false, exported: true, typ: Font, tag: "json:\"font\""}, {prop: "FrameRate", name: "FrameRate", anonymous: false, exported: true, typ: $Int, tag: "json:\"frameRate\""}, {prop: "DrawFrameRate", name: "DrawFrameRate", anonymous: false, exported: true, typ: $Int, tag: "json:\"drawFrameRate\""}, {prop: "Language", name: "Language", anonymous: false, exported: true, typ: $String, tag: "json:\"language\""}, {prop: "Title", name: "Title", anonymous: false, exported: true, typ: $String, tag: "json:\"title\""}, {prop: "BatchLoad", name: "BatchLoad", anonymous: false, exported: true, typ: $Bool, tag: "json:\"batchLoad\""}, {prop: "GestureSupport", name: "GestureSupport", anonymous: false, exported: true, typ: $Bool, tag: "json:\"gestureSupport\""}, {prop: "DisableKeyhold", name: "DisableKeyhold", anonymous: false, exported: true, typ: $Bool, tag: "json:\"disableKeyHold\""}]);
	Assets.init("", [{prop: "AssetPath", name: "AssetPath", anonymous: false, exported: true, typ: $String, tag: "json:\"assetPath\""}, {prop: "AudioPath", name: "AudioPath", anonymous: false, exported: true, typ: $String, tag: "json:\"audioPath\""}, {prop: "ImagePath", name: "ImagePath", anonymous: false, exported: true, typ: $String, tag: "json:\"imagePath\""}, {prop: "FontPath", name: "FontPath", anonymous: false, exported: true, typ: $String, tag: "json:\"fontPath\""}]);
	Debug.init("", [{prop: "Filter", name: "Filter", anonymous: false, exported: true, typ: $String, tag: "json:\"filter\""}, {prop: "Level", name: "Level", anonymous: false, exported: true, typ: $String, tag: "json:\"level\""}]);
	Screen.init("", [{prop: "Height", name: "Height", anonymous: false, exported: true, typ: $Int, tag: "json:\"height\""}, {prop: "Width", name: "Width", anonymous: false, exported: true, typ: $Int, tag: "json:\"width\""}, {prop: "Scale", name: "Scale", anonymous: false, exported: true, typ: $Int, tag: "json:\"scale\""}]);
	Font.init("", [{prop: "Hinting", name: "Hinting", anonymous: false, exported: true, typ: $String, tag: "json:\"hinting\""}, {prop: "Size", name: "Size", anonymous: false, exported: true, typ: $Float64, tag: "json:\"size\""}, {prop: "DPI", name: "DPI", anonymous: false, exported: true, typ: $Float64, tag: "json:\"dpi\""}, {prop: "File", name: "File", anonymous: false, exported: true, typ: $String, tag: "json:\"file\""}, {prop: "Color", name: "Color", anonymous: false, exported: true, typ: $String, tag: "json:\"color\""}]);
	transitionFunction.init([ptrType$7, $Int], [$Bool], false);
	Scene.init("github.com/oakmound/oak", [{prop: "active", name: "active", anonymous: false, exported: false, typ: $Bool, tag: ""}, {prop: "start", name: "start", anonymous: false, exported: false, typ: SceneStart, tag: ""}, {prop: "loop", name: "loop", anonymous: false, exported: false, typ: SceneUpdate, tag: ""}, {prop: "end", name: "end", anonymous: false, exported: false, typ: SceneEnd, tag: ""}]);
	SceneResult.init("", [{prop: "NextSceneInput", name: "NextSceneInput", anonymous: false, exported: true, typ: $emptyInterface, tag: ""}, {prop: "Transition", name: "Transition", anonymous: false, exported: true, typ: transitionFunction, tag: ""}]);
	SceneEnd.init([], [$String, ptrType$2], false);
	SceneStart.init([$String, $emptyInterface], [], false);
	SceneUpdate.init([], [$Bool], false);
	JSScreen.init("", []);
	JSTexture.init("", [{prop: "JSBuffer", name: "JSBuffer", anonymous: true, exported: true, typ: JSBuffer, tag: ""}]);
	rect.init("github.com/oakmound/oak", [{prop: "minX", name: "minX", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "minY", name: "minY", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxX", name: "maxX", anonymous: false, exported: false, typ: $Int, tag: ""}, {prop: "maxY", name: "maxY", anonymous: false, exported: false, typ: $Int, tag: ""}]);
	JSWindow.init("github.com/oakmound/oak", [{prop: "ctx", name: "ctx", anonymous: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "jsUint8", name: "jsUint8", anonymous: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "imgData", name: "imgData", anonymous: false, exported: false, typ: ptrType$6, tag: ""}, {prop: "events", name: "events", anonymous: false, exported: false, typ: sliceType, tag: ""}, {prop: "eventLock", name: "eventLock", anonymous: false, exported: false, typ: sync.Mutex, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = json.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = errors.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fmt.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = toml.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = js.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = alg.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = audio.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = collision.$init(); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = dlog.$init(); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = fileutil.$init(); /* */ $s = 11; case 11: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mouse$1.$init(); /* */ $s = 12; case 12: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = physics.$init(); /* */ $s = 13; case 13: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = render.$init(); /* */ $s = 14; case 14: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mod.$init(); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = timing.$init(); /* */ $s = 16; case 16: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = gesture.$init(); /* */ $s = 17; case 17: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = screen.$init(); /* */ $s = 18; case 18: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = f64.$init(); /* */ $s = 19; case 19: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = key.$init(); /* */ $s = 20; case 20: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = lifecycle.$init(); /* */ $s = 21; case 21: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = mouse.$init(); /* */ $s = 22; case 22: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = size.$init(); /* */ $s = 23; case 23: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = image.$init(); /* */ $s = 24; case 24: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 25; case 25: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = draw.$init(); /* */ $s = 26; case 26: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = io.$init(); /* */ $s = 27; case 27: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 28; case 28: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = filepath.$init(); /* */ $s = 29; case 29: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = runtime.$init(); /* */ $s = 30; case 30: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strings.$init(); /* */ $s = 31; case 31: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = sync.$init(); /* */ $s = 32; case 32: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = time.$init(); /* */ $s = 33; case 33: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$pkg.SetupConfig = new Config.ptr(new Assets.ptr("", "", "", ""), new Debug.ptr("", ""), new Screen.ptr(0, 0, 0), new Font.ptr("", 0, 0, "", ""), 0, 0, "", "", false, false, false);
		$pkg.DrawTicker = ptrType.nil;
		debugResetInProgress = false;
		$pkg.ScreenWidth = 0;
		$pkg.ScreenHeight = 0;
		$pkg.FrameRate = 0;
		$pkg.DrawFrameRate = 0;
		eb = ptrType$1.nil;
		globalFirstScene = "";
		$pkg.CurrentScene = "";
		eFilter = new gesture.EventFilter.ptr($ifaceNil, false, false, false, false, new gesture.Point.ptr(0, 0), 0, 0);
		eventFn = $throwNilPointerError;
		$pkg.Lang = 0;
		winBuffer = $ifaceNil;
		screenControl = $ifaceNil;
		windowControl = $ifaceNil;
		windowRect = new image.Rectangle.ptr(new image.Point.ptr(0, 0), new image.Point.ptr(0, 0));
		lifecycleInit = false;
		aspectRatio = 0;
		$pkg.LoadingR = $ifaceNil;
		$pkg.LogicTicker = ptrType.nil;
		framesElapsed = 0;
		currentSeed = new $Int64(0, 0);
		viewBounds = new rect.ptr(0, 0, 0, 0);
		conf = new Config.ptr(new Assets.ptr("assets/", "audio/", "images/", "font/"), new Debug.ptr("", "ERROR"), new Screen.ptr(480, 640, 1), new Font.ptr("none", 12, 72, "", "white"), 60, 60, "English", "Oak Window", false, false, false);
		imageBlack = image.Black;
		transitionCh = new $Chan($Bool, 0);
		sceneCh = new $Chan($Bool, 0);
		skipSceneCh = new $Chan($Bool, 0);
		quitCh = new $Chan($Bool, 0);
		drawCh = new $Chan($Bool, 0);
		debugResetCh = new $Chan($Bool, 0);
		viewportCh = new $Chan(arrayType, 0);
		zeroPoint = new image.Point.ptr(0, 0);
		jsMouseButtons = $makeMap($Int.keyFor, [{ k: 0, v: 1 }, { k: 1, v: 2 }, { k: 2, v: 3 }]);
		jsKeys = $makeMap($Int.keyFor, [{ k: 9, v: 43 }, { k: 13, v: 40 }, { k: 32, v: 44 }, { k: 33, v: 75 }, { k: 34, v: 78 }, { k: 35, v: 77 }, { k: 36, v: 74 }, { k: 37, v: 80 }, { k: 38, v: 82 }, { k: 39, v: 79 }, { k: 40, v: 81 }, { k: 45, v: 73 }, { k: 46, v: 42 }, { k: 49, v: 39 }, { k: 50, v: 30 }, { k: 51, v: 31 }, { k: 52, v: 32 }, { k: 53, v: 33 }, { k: 54, v: 34 }, { k: 55, v: 35 }, { k: 56, v: 36 }, { k: 57, v: 37 }, { k: 58, v: 38 }, { k: 61, v: 46 }, { k: 65, v: 4 }, { k: 66, v: 5 }, { k: 67, v: 6 }, { k: 68, v: 7 }, { k: 69, v: 8 }, { k: 70, v: 9 }, { k: 71, v: 10 }, { k: 72, v: 11 }, { k: 73, v: 12 }, { k: 74, v: 13 }, { k: 75, v: 14 }, { k: 76, v: 15 }, { k: 77, v: 16 }, { k: 78, v: 17 }, { k: 79, v: 18 }, { k: 80, v: 19 }, { k: 81, v: 20 }, { k: 82, v: 21 }, { k: 83, v: 22 }, { k: 84, v: 23 }, { k: 85, v: 24 }, { k: 86, v: 25 }, { k: 87, v: 26 }, { k: 88, v: 27 }, { k: 89, v: 28 }, { k: 90, v: 29 }]);
		keyBinds = {};
		keyBindLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		keyState = {};
		keyDurations = {};
		keyLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		durationLock = new sync.RWMutex.ptr(new sync.Mutex.ptr(0, 0), 0, 0, 0, 0);
		windowUpdateCh = new $Chan($Bool, 0);
		initControl = new sync.Mutex.ptr(0, 0);
		$pkg.UseAspectRatio = false;
		startupLoadCh = new $Chan($Bool, 0);
		drawLoopPublishDef = (function $b(tx) {
			var _arg, _arg$1, _arg$2, _r, tx, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; tx = $f.tx; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_arg = $clone(zeroPoint, image.Point);
			_arg$1 = winBuffer;
			_r = winBuffer.Bounds(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_arg$2 = $clone(_r, image.Rectangle);
			$r = windowControl.Upload(_arg, _arg$1, _arg$2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f.tx = tx; $f.$s = $s; $f.$r = $r; return $f;
		});
		drawLoopPublish = drawLoopPublishDef;
		sceneMap = $makeMap($String.keyFor, [{ k: "loading", v: new Scene.ptr(false, (function $b(prevScene, data) {
			var data, prevScene, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; data = $f.data; prevScene = $f.prevScene; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = dlog.Info(new sliceType([new $String("Loading Scene Init")])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f.data = data; $f.prevScene = prevScene; $f.$s = $s; $f.$r = $r; return $f;
		}), (function $b() {
			var _selection, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _selection = $f._selection; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			_selection = $select([[startupLoadCh], []]);
			/* */ if (_selection[0] === 0) { $s = 1; continue; }
			/* */ if (_selection[0] === 1) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_selection[0] === 0) { */ case 1:
				$r = dlog.Info(new sliceType([new $String("Load Complete")])); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = -1; return false;
			/* } else if (_selection[0] === 1) { */ case 2:
				$s = -1; return true;
			/* } */ case 3:
			$s = -1; return false;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._selection = _selection; $f.$s = $s; $f.$r = $r; return $f;
		}), (function() {
			return [globalFirstScene, ptrType$2.nil];
		})) }]);
		$pkg.ViewPos = new image.Point.ptr(0, 0);
		useViewBounds = false;
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/entities"] = (function() {
	var $pkg = {}, $init, collision, event, physics, render, strconv, Doodad, Moving, vMoving, Point, Solid, ptrType, ptrType$1, ptrType$3, sliceType, sliceType$1, ptrType$4, ptrType$6, ptrType$7, ptrType$8, ptrType$10, NewDoodad, NewMoving, NewPoint, NewSolid;
	collision = $packages["github.com/oakmound/oak/collision"];
	event = $packages["github.com/oakmound/oak/event"];
	physics = $packages["github.com/oakmound/oak/physics"];
	render = $packages["github.com/oakmound/oak/render"];
	strconv = $packages["strconv"];
	Doodad = $pkg.Doodad = $newType(0, $kindStruct, "entities.Doodad", true, "github.com/oakmound/oak/entities", true, function(Point_, CID_, R_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Point = new Point.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0));
			this.CID = 0;
			this.R = $ifaceNil;
			return;
		}
		this.Point = Point_;
		this.CID = CID_;
		this.R = R_;
	});
	Moving = $pkg.Moving = $newType(0, $kindStruct, "entities.Moving", true, "github.com/oakmound/oak/entities", true, function(Solid_, vMoving_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Solid = new Solid.ptr(new Doodad.ptr(new Point.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0)), 0, $ifaceNil), 0, 0, ptrType$3.nil);
			this.vMoving = new vMoving.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0), new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0), 0);
			return;
		}
		this.Solid = Solid_;
		this.vMoving = vMoving_;
	});
	vMoving = $pkg.vMoving = $newType(0, $kindStruct, "entities.vMoving", true, "github.com/oakmound/oak/entities", false, function(Delta_, Speed_, Friction_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Delta = new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0);
			this.Speed = new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0);
			this.Friction = 0;
			return;
		}
		this.Delta = Delta_;
		this.Speed = Speed_;
		this.Friction = Friction_;
	});
	Point = $pkg.Point = $newType(0, $kindStruct, "entities.Point", true, "github.com/oakmound/oak/entities", true, function(Vector_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Vector = new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0);
			return;
		}
		this.Vector = Vector_;
	});
	Solid = $pkg.Solid = $newType(0, $kindStruct, "entities.Solid", true, "github.com/oakmound/oak/entities", true, function(Doodad_, W_, H_, Space_) {
		this.$val = this;
		if (arguments.length === 0) {
			this.Doodad = new Doodad.ptr(new Point.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0)), 0, $ifaceNil);
			this.W = 0;
			this.H = 0;
			this.Space = ptrType$3.nil;
			return;
		}
		this.Doodad = Doodad_;
		this.W = W_;
		this.H = H_;
		this.Space = Space_;
	});
	ptrType = $ptrType($Float64);
	ptrType$1 = $ptrType(event.CID);
	ptrType$3 = $ptrType(collision.Space);
	sliceType = $sliceType($Float64);
	sliceType$1 = $sliceType(ptrType$3);
	ptrType$4 = $ptrType(Doodad);
	ptrType$6 = $ptrType(Moving);
	ptrType$7 = $ptrType(vMoving);
	ptrType$8 = $ptrType(Point);
	ptrType$10 = $ptrType(Solid);
	NewDoodad = function(x, y, r, CID) {
		var CID, _r, d, r, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; CID = $f.CID; _r = $f._r; d = $f.d; r = $f.r; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = [d];
		/* */ if (!($interfaceIsEqual(r, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(r, $ifaceNil))) { */ case 1:
			$r = r.SetPos(x, y); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		d[0] = new Doodad.ptr(new Point.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0)), 0, $ifaceNil);
		Point.copy(d[0].Point, NewPoint(x, y));
		d[0].R = r;
		_r = new event.CID(CID).Parse(d[0]); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d[0].CID = _r;
		$s = -1; return d[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewDoodad }; } $f.CID = CID; $f._r = _r; $f.d = d; $f.r = r; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewDoodad = NewDoodad;
	Doodad.ptr.prototype.Init = function() {
		var _r, d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		_r = event.NextID(d); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		d.CID = _r;
		$s = -1; return d.CID;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Doodad.ptr.prototype.Init }; } $f._r = _r; $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	Doodad.prototype.Init = function() { return this.$val.Init(); };
	Doodad.ptr.prototype.GetID = function() {
		var d;
		d = this;
		return d.CID;
	};
	Doodad.prototype.GetID = function() { return this.$val.GetID(); };
	Doodad.ptr.prototype.GetRenderable = function() {
		var d;
		d = this;
		return d.R;
	};
	Doodad.prototype.GetRenderable = function() { return this.$val.GetRenderable(); };
	Doodad.ptr.prototype.SetRenderable = function(r) {
		var _arg, _arg$1, _r, _r$1, d, r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _r = $f._r; _r$1 = $f._r$1; d = $f.d; r = $f.r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (!($interfaceIsEqual(d.R, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(d.R, $ifaceNil))) { */ case 1:
			$r = d.R.UnDraw(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		d.R = r;
		_arg = d.R;
		_r = d.R.GetLayer(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$1 = _r;
		_r$1 = render.Draw(_arg, _arg$1); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		_r$1;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Doodad.ptr.prototype.SetRenderable }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._r = _r; $f._r$1 = _r$1; $f.d = d; $f.r = r; $f.$s = $s; $f.$r = $r; return $f;
	};
	Doodad.prototype.SetRenderable = function(r) { return this.$val.SetRenderable(r); };
	Doodad.ptr.prototype.Destroy = function() {
		var d, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		/* */ if (!($interfaceIsEqual(d.R, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(d.R, $ifaceNil))) { */ case 1:
			$r = d.R.UnDraw(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		$r = (d.$ptr_CID || (d.$ptr_CID = new ptrType$1(function() { return this.$target.CID; }, function($v) { this.$target.CID = $v; }, d))).UnbindAll(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		event.DestroyEntity(((d.CID >> 0)));
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Doodad.ptr.prototype.Destroy }; } $f.d = d; $f.$s = $s; $f.$r = $r; return $f;
	};
	Doodad.prototype.Destroy = function() { return this.$val.Destroy(); };
	Doodad.ptr.prototype.SetPos = function(x, y) {
		var d, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; d = $f.d; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		d.Point.SetLogicPos(x, y);
		$r = d.R.SetPos(x, y); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Doodad.ptr.prototype.SetPos }; } $f.d = d; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Doodad.prototype.SetPos = function(x, y) { return this.$val.SetPos(x, y); };
	Doodad.ptr.prototype.String = function() {
		var _r, d, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; d = $f.d; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		d = this;
		s = "Doodad: \nP{ ";
		s = s + (d.Point.String());
		s = s + (" }\nR:{ ");
		_r = d.R.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s = s + (_r);
		s = s + (" }\nID:{ ");
		s = s + (new event.CID(d.CID).String());
		s = s + (" }");
		$s = -1; return s;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Doodad.ptr.prototype.String }; } $f._r = _r; $f.d = d; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Doodad.prototype.String = function() { return this.$val.String(); };
	NewMoving = function(x, y, w, h, r, cid, friction) {
		var _r, _r$1, cid, friction, h, m, r, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; cid = $f.cid; friction = $f.friction; h = $f.h; m = $f.m; r = $f.r; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = [m];
		m[0] = new Moving.ptr(new Solid.ptr(new Doodad.ptr(new Point.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0)), 0, $ifaceNil), 0, 0, ptrType$3.nil), new vMoving.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0), new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0), 0));
		_r = new event.CID(cid).Parse(m[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		cid = _r;
		_r$1 = NewSolid(x, y, w, h, r, cid); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		Solid.copy(m[0].Solid, _r$1);
		vMoving.copy(m[0].vMoving, new vMoving.ptr($clone(physics.NewVector(0, 0), physics.Vector), $clone(physics.NewVector(0, 0), physics.Vector), friction));
		$s = -1; return m[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewMoving }; } $f._r = _r; $f._r$1 = _r$1; $f.cid = cid; $f.friction = friction; $f.h = h; $f.m = m; $f.r = r; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewMoving = NewMoving;
	Moving.ptr.prototype.Init = function() {
		var _r, m, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; m = $f.m; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		_r = event.NextID(m); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		m.Solid.Doodad.CID = _r;
		$s = -1; return m.Solid.Doodad.CID;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Moving.ptr.prototype.Init }; } $f._r = _r; $f.m = m; $f.$s = $s; $f.$r = $r; return $f;
	};
	Moving.prototype.Init = function() { return this.$val.Init(); };
	Moving.ptr.prototype.ShiftVector = function(v) {
		var m, v, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; m = $f.m; v = $f.v; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		m = this;
		$r = m.Solid.ShiftPos($clone(v, physics.Vector).X(), $clone(v, physics.Vector).Y()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Moving.ptr.prototype.ShiftVector }; } $f.m = m; $f.v = v; $f.$s = $s; $f.$r = $r; return $f;
	};
	Moving.prototype.ShiftVector = function(v) { return this.$val.ShiftVector(v); };
	vMoving.ptr.prototype.ApplyFriction = function(outsideFriction) {
		var frictionScaler, outsideFriction, v;
		v = this;
		frictionScaler = 1 - (v.Friction * outsideFriction);
		if (frictionScaler > 1) {
			frictionScaler = 1;
		} else if (frictionScaler < 0) {
			frictionScaler = 0;
		}
		$clone(v.Delta, physics.Vector).Scale(new sliceType([frictionScaler]));
		if ($clone(v.Delta, physics.Vector).Magnitude() < 0.01) {
			$clone(v.Delta, physics.Vector).Zero();
		}
	};
	vMoving.prototype.ApplyFriction = function(outsideFriction) { return this.$val.ApplyFriction(outsideFriction); };
	vMoving.ptr.prototype.GetDelta = function() {
		var v;
		v = this;
		return v.Delta;
	};
	vMoving.prototype.GetDelta = function() { return this.$val.GetDelta(); };
	NewPoint = function(x, y) {
		var x, y;
		return new Point.ptr($clone(physics.NewVector(x, y), physics.Vector));
	};
	$pkg.NewPoint = NewPoint;
	Point.ptr.prototype.GetLogicPos = function() {
		var p;
		p = this;
		return [$clone(p.Vector, physics.Vector).X(), $clone(p.Vector, physics.Vector).Y()];
	};
	Point.prototype.GetLogicPos = function() { return this.$val.GetLogicPos(); };
	Point.ptr.prototype.SetLogicPos = function(x, y) {
		var p, x, y;
		p = this;
		$clone(p.Vector, physics.Vector).SetPos(x, y);
	};
	Point.prototype.SetLogicPos = function(x, y) { return this.$val.SetLogicPos(x, y); };
	Point.ptr.prototype.DistanceTo = function(x, y) {
		var p, x, y;
		p = this;
		return $clone(p.Vector, physics.Vector).Distance($clone(physics.NewVector(x, y), physics.Vector));
	};
	Point.prototype.DistanceTo = function(x, y) { return this.$val.DistanceTo(x, y); };
	Point.ptr.prototype.DistanceToPoint = function(p2) {
		var p, p2;
		p = this;
		return $clone(p.Vector, physics.Vector).Distance($clone(p2.Vector, physics.Vector));
	};
	Point.prototype.DistanceToPoint = function(p2) { return this.$val.DistanceToPoint(p2); };
	Point.ptr.prototype.String = function() {
		var p, x, y;
		p = this;
		x = strconv.FormatFloat($clone(p.Vector, physics.Vector).X(), 102, 2, 32);
		y = strconv.FormatFloat($clone(p.Vector, physics.Vector).Y(), 102, 2, 32);
		return "X(): " + x + ", Y(): " + y;
	};
	Point.prototype.String = function() { return this.$val.String(); };
	NewSolid = function(x, y, w, h, r, cid) {
		var _r, _r$1, _r$2, cid, h, r, s, w, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; cid = $f.cid; h = $f.h; r = $f.r; s = $f.s; w = $f.w; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = [s];
		s[0] = new Solid.ptr(new Doodad.ptr(new Point.ptr(new physics.Vector.ptr(ptrType.nil, ptrType.nil, 0, 0)), 0, $ifaceNil), 0, 0, ptrType$3.nil);
		_r = new event.CID(cid).Parse(s[0]); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		cid = _r;
		_r$1 = NewDoodad(x, y, r, cid); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		Doodad.copy(s[0].Doodad, _r$1);
		s[0].W = w;
		s[0].H = h;
		_r$2 = collision.NewSpace(x, y, w, h, cid); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		s[0].Space = _r$2;
		$s = -1; return s[0];
		/* */ } return; } if ($f === undefined) { $f = { $blk: NewSolid }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.cid = cid; $f.h = h; $f.r = r; $f.s = s; $f.w = w; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.NewSolid = NewSolid;
	Solid.ptr.prototype.SetDim = function(w, h) {
		var h, s, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; h = $f.h; s = $f.s; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.SetLogicDim(w, h);
		$r = s.Space.SetDim(w, h); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.SetDim }; } $f.h = h; $f.s = s; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.SetDim = function(w, h) { return this.$val.SetDim(w, h); };
	Solid.ptr.prototype.GetLogicDim = function() {
		var s;
		s = this;
		return [s.W, s.H];
	};
	Solid.prototype.GetLogicDim = function() { return this.$val.GetLogicDim(); };
	Solid.ptr.prototype.SetLogicDim = function(w, h) {
		var h, s, w;
		s = this;
		s.W = w;
		s.H = h;
	};
	Solid.prototype.SetLogicDim = function(w, h) { return this.$val.SetLogicDim(w, h); };
	Solid.ptr.prototype.SetSpace = function(sp) {
		var s, sp, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; sp = $f.sp; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = collision.Remove(new sliceType$1([s.Space])); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		s.Space = sp;
		$r = collision.Add(new sliceType$1([s.Space])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.SetSpace }; } $f.s = s; $f.sp = sp; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.SetSpace = function(sp) { return this.$val.SetSpace(sp); };
	Solid.ptr.prototype.GetSpace = function() {
		var s;
		s = this;
		return s.Space;
	};
	Solid.prototype.GetSpace = function() { return this.$val.GetSpace(); };
	Solid.ptr.prototype.ShiftX = function(x) {
		var s, x, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; x = $f.x; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.SetPos($clone(s.Doodad.Point.Vector, physics.Vector).X() + x, $clone(s.Doodad.Point.Vector, physics.Vector).Y()); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.ShiftX }; } $f.s = s; $f.x = x; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.ShiftX = function(x) { return this.$val.ShiftX(x); };
	Solid.ptr.prototype.ShiftY = function(y) {
		var s, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.SetPos($clone(s.Doodad.Point.Vector, physics.Vector).X(), $clone(s.Doodad.Point.Vector, physics.Vector).Y() + y); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.ShiftY }; } $f.s = s; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.ShiftY = function(y) { return this.$val.ShiftY(y); };
	Solid.ptr.prototype.ShiftPos = function(x, y) {
		var s, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.SetPos($clone(s.Doodad.Point.Vector, physics.Vector).X() + x, $clone(s.Doodad.Point.Vector, physics.Vector).Y() + y); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.ShiftPos }; } $f.s = s; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.ShiftPos = function(x, y) { return this.$val.ShiftPos(x, y); };
	Solid.ptr.prototype.Init = function() {
		var _r, s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		_r = event.NextID(s); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		s.Doodad.CID = _r;
		$s = -1; return s.Doodad.CID;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.Init }; } $f._r = _r; $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.Init = function() { return this.$val.Init(); };
	Solid.ptr.prototype.SetPos = function(x, y) {
		var _r, s, x, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; s = $f.s; x = $f.x; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		s.Doodad.Point.SetLogicPos(x, y);
		/* */ if (!($interfaceIsEqual(s.Doodad.R, $ifaceNil))) { $s = 1; continue; }
		/* */ $s = 2; continue;
		/* if (!($interfaceIsEqual(s.Doodad.R, $ifaceNil))) { */ case 1:
			$r = s.Doodad.R.SetPos(x, y); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 2:
		_r = collision.UpdateSpace($clone(s.Doodad.Point.Vector, physics.Vector).X(), $clone(s.Doodad.Point.Vector, physics.Vector).Y(), s.W, s.H, s.Space); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.SetPos }; } $f._r = _r; $f.s = s; $f.x = x; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.SetPos = function(x, y) { return this.$val.SetPos(x, y); };
	Solid.ptr.prototype.Destroy = function() {
		var s, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; s = $f.s; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		$r = s.Doodad.Destroy(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = collision.Remove(new sliceType$1([s.Space])); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.Destroy }; } $f.s = s; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.Destroy = function() { return this.$val.Destroy(); };
	Solid.ptr.prototype.String = function() {
		var _r, _r$1, h, s, st, w, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; h = $f.h; s = $f.s; st = $f.st; w = $f.w; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		s = this;
		st = "Solid:\n{";
		_r = s.Doodad.String(); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		st = st + (_r);
		st = st + ("},\n");
		w = strconv.FormatFloat(s.W, 102, 2, 32);
		h = strconv.FormatFloat(s.H, 102, 2, 32);
		st = st + ("W: " + w + ", H: " + h);
		st = st + (",\nS:{");
		_r$1 = s.Space.String(); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		st = st + (_r$1);
		st = st + ("}");
		$s = -1; return st;
		/* */ } return; } if ($f === undefined) { $f = { $blk: Solid.ptr.prototype.String }; } $f._r = _r; $f._r$1 = _r$1; $f.h = h; $f.s = s; $f.st = st; $f.w = w; $f.$s = $s; $f.$r = $r; return $f;
	};
	Solid.prototype.String = function() { return this.$val.String(); };
	ptrType$4.methods = [{prop: "Init", name: "Init", pkg: "", typ: $funcType([], [event.CID], false)}, {prop: "GetID", name: "GetID", pkg: "", typ: $funcType([], [event.CID], false)}, {prop: "GetRenderable", name: "GetRenderable", pkg: "", typ: $funcType([], [render.Renderable], false)}, {prop: "SetRenderable", name: "SetRenderable", pkg: "", typ: $funcType([render.Renderable], [], false)}, {prop: "Destroy", name: "Destroy", pkg: "", typ: $funcType([], [], false)}, {prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Init", name: "Init", pkg: "", typ: $funcType([], [event.CID], false)}, {prop: "ShiftVector", name: "ShiftVector", pkg: "", typ: $funcType([physics.Vector], [], false)}];
	vMoving.methods = [{prop: "GetDelta", name: "GetDelta", pkg: "", typ: $funcType([], [physics.Vector], false)}];
	ptrType$7.methods = [{prop: "ApplyFriction", name: "ApplyFriction", pkg: "", typ: $funcType([$Float64], [], false)}];
	ptrType$8.methods = [{prop: "GetLogicPos", name: "GetLogicPos", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "SetLogicPos", name: "SetLogicPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "DistanceTo", name: "DistanceTo", pkg: "", typ: $funcType([$Float64, $Float64], [$Float64], false)}, {prop: "DistanceToPoint", name: "DistanceToPoint", pkg: "", typ: $funcType([Point], [$Float64], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "SetDim", name: "SetDim", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "GetLogicDim", name: "GetLogicDim", pkg: "", typ: $funcType([], [$Float64, $Float64], false)}, {prop: "SetLogicDim", name: "SetLogicDim", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "SetSpace", name: "SetSpace", pkg: "", typ: $funcType([ptrType$3], [], false)}, {prop: "GetSpace", name: "GetSpace", pkg: "", typ: $funcType([], [ptrType$3], false)}, {prop: "ShiftX", name: "ShiftX", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ShiftY", name: "ShiftY", pkg: "", typ: $funcType([$Float64], [], false)}, {prop: "ShiftPos", name: "ShiftPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "Init", name: "Init", pkg: "", typ: $funcType([], [event.CID], false)}, {prop: "SetPos", name: "SetPos", pkg: "", typ: $funcType([$Float64, $Float64], [], false)}, {prop: "Destroy", name: "Destroy", pkg: "", typ: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", typ: $funcType([], [$String], false)}];
	Doodad.init("", [{prop: "Point", name: "Point", anonymous: true, exported: true, typ: Point, tag: ""}, {prop: "CID", name: "CID", anonymous: true, exported: true, typ: event.CID, tag: ""}, {prop: "R", name: "R", anonymous: false, exported: true, typ: render.Renderable, tag: ""}]);
	Moving.init("github.com/oakmound/oak/entities", [{prop: "Solid", name: "Solid", anonymous: true, exported: true, typ: Solid, tag: ""}, {prop: "vMoving", name: "vMoving", anonymous: true, exported: false, typ: vMoving, tag: ""}]);
	vMoving.init("", [{prop: "Delta", name: "Delta", anonymous: false, exported: true, typ: physics.Vector, tag: ""}, {prop: "Speed", name: "Speed", anonymous: false, exported: true, typ: physics.Vector, tag: ""}, {prop: "Friction", name: "Friction", anonymous: false, exported: true, typ: $Float64, tag: ""}]);
	Point.init("", [{prop: "Vector", name: "Vector", anonymous: true, exported: true, typ: physics.Vector, tag: ""}]);
	Solid.init("", [{prop: "Doodad", name: "Doodad", anonymous: true, exported: true, typ: Doodad, tag: ""}, {prop: "W", name: "W", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "H", name: "H", anonymous: false, exported: true, typ: $Float64, tag: ""}, {prop: "Space", name: "Space", anonymous: false, exported: true, typ: ptrType$3, tag: ""}]);
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = collision.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = physics.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = render.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = strconv.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$packages["github.com/oakmound/oak/examples/pong"] = (function() {
	var $pkg = {}, $init, oak, collision, entities, event, render, color, rand, ptrType, ptrType$1, sliceType, ptrType$2, ptrType$3, score1, score1$24ptr, score2, score2$24ptr, main, newBall, newPaddle, enterPaddle;
	oak = $packages["github.com/oakmound/oak"];
	collision = $packages["github.com/oakmound/oak/collision"];
	entities = $packages["github.com/oakmound/oak/entities"];
	event = $packages["github.com/oakmound/oak/event"];
	render = $packages["github.com/oakmound/oak/render"];
	color = $packages["image/color"];
	rand = $packages["math/rand"];
	ptrType = $ptrType($Int);
	ptrType$1 = $ptrType(oak.SceneResult);
	sliceType = $sliceType(collision.Label);
	ptrType$2 = $ptrType(collision.Space);
	ptrType$3 = $ptrType(entities.Moving);
	main = function() {
		var _arg, _arg$1, _arg$2, _r, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = (function $b(prevScene, data) {
			var _r, _r$1, _r$2, _r$3, _r$4, _r$5, data, prevScene, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; data = $f.data; prevScene = $f.prevScene; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			$r = newPaddle(20, 200, 1); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = newPaddle(600, 200, 2); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$r = newBall(320, 240); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			_r = render.DefFont(); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			_r$1 = _r.NewIntText((score2$24ptr || (score2$24ptr = new ptrType(function() { return score2; }, function($v) { score2 = $v; }))), 200, 20); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			_r$2 = render.Draw(_r$1, 3); /* */ $s = 6; case 6: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
			_r$2;
			_r$3 = render.DefFont(); /* */ $s = 7; case 7: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
			_r$4 = _r$3.NewIntText((score1$24ptr || (score1$24ptr = new ptrType(function() { return score1; }, function($v) { score1 = $v; }))), 440, 20); /* */ $s = 8; case 8: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
			_r$5 = render.Draw(_r$4, 3); /* */ $s = 9; case 9: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
			_r$5;
			$s = -1; return;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f.data = data; $f.prevScene = prevScene; $f.$s = $s; $f.$r = $r; return $f;
		});
		_arg$1 = (function() {
			return true;
		});
		_arg$2 = (function() {
			return ["pong", ptrType$1.nil];
		});
		_r = oak.AddScene("pong", _arg, _arg$1, _arg$2); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_r;
		$r = oak.Init("pong"); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: main }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f.$s = $s; $f.$r = $r; return $f;
	};
	newBall = function(x, y) {
		var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, b, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; b = $f.b; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		b = [b];
		_arg = x;
		_arg$1 = y;
		_r = render.NewColorBox(10, 10, (x$1 = new color.RGBA.ptr(0, 255, 0, 255), new x$1.constructor.elem(x$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = entities.NewMoving(_arg, _arg$1, 10, 10, _arg$2, 0, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		b[0] = $clone(_r$1, entities.Moving);
		_r$2 = render.Draw(b[0].Solid.Doodad.R, 2); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$r = new event.CID(b[0].Solid.Doodad.CID).Bind((function(b) { return function $b(id, nothing) {
			var _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, id, nothing, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r$3 = $f._r$3; _r$4 = $f._r$4; _r$5 = $f._r$5; _r$6 = $f._r$6; _r$7 = $f._r$7; _r$8 = $f._r$8; id = $f.id; nothing = $f.nothing; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			/* */ if (($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).X() === 0) && ($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y() === 0)) { $s = 1; continue; }
			/* */ $s = 2; continue;
			/* if (($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).X() === 0) && ($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y() === 0)) { */ case 1:
				_r$3 = rand.Float64(); /* */ $s = 3; case 3: if($c) { $c = false; _r$3 = _r$3.$blk(); } if (_r$3 && _r$3.$blk !== undefined) { break s; }
				_r$4 = $clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY((_r$3 - 0.5) * 4); /* */ $s = 4; case 4: if($c) { $c = false; _r$4 = _r$4.$blk(); } if (_r$4 && _r$4.$blk !== undefined) { break s; }
				_r$4;
				_r$5 = rand.Float64(); /* */ $s = 5; case 5: if($c) { $c = false; _r$5 = _r$5.$blk(); } if (_r$5 && _r$5.$blk !== undefined) { break s; }
				_r$6 = $clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetX((_r$5 - 0.5) * 16); /* */ $s = 6; case 6: if($c) { $c = false; _r$6 = _r$6.$blk(); } if (_r$6 && _r$6.$blk !== undefined) { break s; }
				_r$6;
				if ($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).X() === 0) {
					$clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetX(8);
				}
			/* } */ case 2:
			$r = b[0].Solid.ShiftPos($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).X(), $clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y()); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if (!(collision.HitLabel(b[0].Solid.Space, new sliceType([1])) === ptrType$2.nil)) { $s = 8; continue; }
			/* */ $s = 9; continue;
			/* if (!(collision.HitLabel(b[0].Solid.Space, new sliceType([1])) === ptrType$2.nil)) { */ case 8:
				$clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetX(-1.1 * $clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).X());
				_r$7 = rand.Float64(); /* */ $s = 10; case 10: if($c) { $c = false; _r$7 = _r$7.$blk(); } if (_r$7 && _r$7.$blk !== undefined) { break s; }
				_r$8 = $clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY($clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y() + (_r$7 - 0.5) * 8); /* */ $s = 11; case 11: if($c) { $c = false; _r$8 = _r$8.$blk(); } if (_r$8 && _r$8.$blk !== undefined) { break s; }
				_r$8;
			/* } */ case 9:
			/* */ if ($clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).X() < 0 || $clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).X() > 640) { $s = 12; continue; }
			/* */ if ($clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() < 0 || $clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() > 480 - b[0].Solid.H) { $s = 13; continue; }
			/* */ $s = 14; continue;
			/* if ($clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).X() < 0 || $clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).X() > 640) { */ case 12:
				if ($clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).X() < 0) {
					score1 = score1 + (1) >> 0;
				} else {
					score2 = score2 + (1) >> 0;
				}
				$clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetX(0);
				$clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY(0);
				$r = b[0].Solid.SetPos(320, 240); /* */ $s = 15; case 15: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
				$s = 14; continue;
			/* } else if ($clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() < 0 || $clone(b[0].Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() > 480 - b[0].Solid.H) { */ case 13:
				$clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY(-1 * $clone(b[0].vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y());
			/* } */ case 14:
			$s = -1; return 0;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r$3 = _r$3; $f._r$4 = _r$4; $f._r$5 = _r$5; $f._r$6 = _r$6; $f._r$7 = _r$7; $f._r$8 = _r$8; $f.id = id; $f.nothing = nothing; $f.$s = $s; $f.$r = $r; return $f;
		}; })(b), "EnterFrame"); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newBall }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.b = b; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	newPaddle = function(x, y, player) {
		var _arg, _arg$1, _arg$2, _r, _r$1, _r$2, p, player, x, x$1, y, $s, $r;
		/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _arg = $f._arg; _arg$1 = $f._arg$1; _arg$2 = $f._arg$2; _r = $f._r; _r$1 = $f._r$1; _r$2 = $f._r$2; p = $f.p; player = $f.player; x = $f.x; x$1 = $f.x$1; y = $f.y; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		_arg = x;
		_arg$1 = y;
		_r = render.NewColorBox(20, 100, (x$1 = new color.RGBA.ptr(255, 0, 0, 255), new x$1.constructor.elem(x$1))); /* */ $s = 1; case 1: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
		_arg$2 = _r;
		_r$1 = entities.NewMoving(_arg, _arg$1, 20, 100, _arg$2, 0, 0); /* */ $s = 2; case 2: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
		p = $clone(_r$1, entities.Moving);
		$clone(p.vMoving.Speed, $packages["github.com/oakmound/oak/physics"].Vector).SetY(4);
		_r$2 = render.Draw(p.Solid.Doodad.R, 1); /* */ $s = 3; case 3: if($c) { $c = false; _r$2 = _r$2.$blk(); } if (_r$2 && _r$2.$blk !== undefined) { break s; }
		_r$2;
		$r = p.Solid.Space.UpdateLabel(1); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* */ if (player === 1) { $s = 5; continue; }
		/* */ $s = 6; continue;
		/* if (player === 1) { */ case 5:
			$r = new event.CID(p.Solid.Doodad.CID).Bind(enterPaddle("UpArrow", "DownArrow"), "EnterFrame"); /* */ $s = 8; case 8: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$s = 7; continue;
		/* } else { */ case 6:
			$r = new event.CID(p.Solid.Doodad.CID).Bind(enterPaddle("W", "S"), "EnterFrame"); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		/* } */ case 7:
		$r = p.Solid.SetPos(x, y); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$s = -1; return;
		/* */ } return; } if ($f === undefined) { $f = { $blk: newPaddle }; } $f._arg = _arg; $f._arg$1 = _arg$1; $f._arg$2 = _arg$2; $f._r = _r; $f._r$1 = _r$1; $f._r$2 = _r$2; $f.p = p; $f.player = player; $f.x = x; $f.x$1 = x$1; $f.y = y; $f.$s = $s; $f.$r = $r; return $f;
	};
	enterPaddle = function(up, down) {
		var down, up;
		return (function $b(id, nothing) {
			var _r, _r$1, id, nothing, p, $s, $r;
			/* */ $s = 0; var $f, $c = false; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; _r = $f._r; _r$1 = $f._r$1; id = $f.id; nothing = $f.nothing; p = $f.p; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
			p = $assertType(event.GetEntity(id), ptrType$3);
			$clone(p.vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY(0);
			_r = oak.IsDown(up); /* */ $s = 4; case 4: if($c) { $c = false; _r = _r.$blk(); } if (_r && _r.$blk !== undefined) { break s; }
			/* */ if (_r) { $s = 1; continue; }
			_r$1 = oak.IsDown(down); /* */ $s = 5; case 5: if($c) { $c = false; _r$1 = _r$1.$blk(); } if (_r$1 && _r$1.$blk !== undefined) { break s; }
			/* */ if (_r$1) { $s = 2; continue; }
			/* */ $s = 3; continue;
			/* if (_r) { */ case 1:
				$clone(p.vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY(-$clone(p.vMoving.Speed, $packages["github.com/oakmound/oak/physics"].Vector).Y());
				$s = 3; continue;
			/* } else if (_r$1) { */ case 2:
				$clone(p.vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).SetY($clone(p.vMoving.Speed, $packages["github.com/oakmound/oak/physics"].Vector).Y());
			/* } */ case 3:
			$r = p.Solid.ShiftY($clone(p.vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y()); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* */ if ($clone(p.Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() < 0 || $clone(p.Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() > (480 - p.Solid.H)) { $s = 7; continue; }
			/* */ $s = 8; continue;
			/* if ($clone(p.Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() < 0 || $clone(p.Solid.Doodad.Point.Vector, $packages["github.com/oakmound/oak/physics"].Vector).Y() > (480 - p.Solid.H)) { */ case 7:
				$r = p.Solid.ShiftY(-$clone(p.vMoving.Delta, $packages["github.com/oakmound/oak/physics"].Vector).Y()); /* */ $s = 9; case 9: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			/* } */ case 8:
			$s = -1; return 0;
			/* */ } return; } if ($f === undefined) { $f = { $blk: $b }; } $f._r = _r; $f._r$1 = _r$1; $f.id = id; $f.nothing = nothing; $f.p = p; $f.$s = $s; $f.$r = $r; return $f;
		});
	};
	$init = function() {
		$pkg.$init = function() {};
		/* */ var $f, $c = false, $s = 0, $r; if (this !== undefined && this.$blk !== undefined) { $f = this; $c = true; $s = $f.$s; $r = $f.$r; } s: while (true) { switch ($s) { case 0:
		$r = oak.$init(); /* */ $s = 1; case 1: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = collision.$init(); /* */ $s = 2; case 2: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = entities.$init(); /* */ $s = 3; case 3: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = event.$init(); /* */ $s = 4; case 4: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = render.$init(); /* */ $s = 5; case 5: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = color.$init(); /* */ $s = 6; case 6: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		$r = rand.$init(); /* */ $s = 7; case 7: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
		score1 = 0;
		score2 = 0;
		/* */ if ($pkg === $mainPkg) { $s = 8; continue; }
		/* */ $s = 9; continue;
		/* if ($pkg === $mainPkg) { */ case 8:
			$r = main(); /* */ $s = 10; case 10: if($c) { $c = false; $r = $r.$blk(); } if ($r && $r.$blk !== undefined) { break s; }
			$mainFinished = true;
		/* } */ case 9:
		/* */ } return; } if ($f === undefined) { $f = { $blk: $init }; } $f.$s = $s; $f.$r = $r; return $f;
	};
	$pkg.$init = $init;
	return $pkg;
})();
$synthesizeMethods();
var $mainPkg = $packages["github.com/oakmound/oak/examples/pong"];
$packages["runtime"].$init();
$go($mainPkg.$init, []);
$flushConsole();

}).call(this);
//# sourceMappingURL=pong.js.map
